From: Jordan Santell <jsantell@mozilla.com>
Date: Mon, 18 May 2015 21:07:49 -0700
Subject: Bug 1166139 - properly display the generic class name for markers in the marker filter popup. r=vp

diff --git a/browser/devtools/performance/performance-controller.js b/browser/devtools/performance/performance-controller.js
index 4d32266..bc91348 100644
--- a/browser/devtools/performance/performance-controller.js
+++ b/browser/devtools/performance/performance-controller.js
@@ -28,16 +28,18 @@ devtools.lazyRequireGetter(this, "RecordingUtils",
 devtools.lazyRequireGetter(this, "RecordingModel",
   "devtools/performance/recording-model", true);
 devtools.lazyRequireGetter(this, "GraphsController",
   "devtools/performance/graphs", true);
 devtools.lazyRequireGetter(this, "Waterfall",
   "devtools/shared/timeline/waterfall", true);
 devtools.lazyRequireGetter(this, "MarkerDetails",
   "devtools/shared/timeline/marker-details", true);
+devtools.lazyRequireGetter(this, "MarkerUtils",
+  "devtools/shared/timeline/marker-utils");
 devtools.lazyRequireGetter(this, "CallView",
   "devtools/shared/profiler/tree-view", true);
 devtools.lazyRequireGetter(this, "ThreadNode",
   "devtools/shared/profiler/tree-model", true);
 devtools.lazyRequireGetter(this, "FrameNode",
   "devtools/shared/profiler/tree-model", true);
 devtools.lazyRequireGetter(this, "JITOptimizations",
   "devtools/shared/profiler/jit", true);
diff --git a/browser/devtools/performance/test/browser_marker-utils.js b/browser/devtools/performance/test/browser_marker-utils.js
index 0f0f004..87636c3 100644
--- a/browser/devtools/performance/test/browser_marker-utils.js
+++ b/browser/devtools/performance/test/browser_marker-utils.js
@@ -28,10 +28,35 @@ function spawnTest () {
 
   fields = Utils.getMarkerFields({ name: "DOMEvent", eventPhase: Ci.nsIDOMEvent.AT_TARGET, type: "mouseclick" });
   is(fields.length, 2, "getMarkerFields() returns multiple fields when they exist");
   is(fields[0].label, "Event Type:", "getMarkerFields() returns an array with proper label (ordered)");
   is(fields[0].value, "mouseclick", "getMarkerFields() returns an array with proper value (ordered)");
   is(fields[1].label, "Phase:", "getMarkerFields() returns an array with proper label (ordered)");
   is(fields[1].value, "Target", "getMarkerFields() uses the `formatter` function when available");
 
+  is(Utils.getMarkerClassName("Javascript"), "Function Call",
+    "getMarkerClassName() returns correct string when defined via function");
+  is(Utils.getMarkerClassName("GarbageCollection"), "GC Event",
+    "getMarkerClassName() returns correct string when defined via function");
+  is(Utils.getMarkerClassName("Reflow"), "Layout",
+    "getMarkerClassName() returns correct string when defined via string");
+
+  TIMELINE_BLUEPRINT["fakemarker"] = { group: 0 };
+  try {
+    Utils.getMarkerClassName("fakemarker");
+    ok(false, "getMarkerClassName() should throw when no label on blueprint.");
+  } catch (e) {
+    ok(true, "getMarkerClassName() should throw when no label on blueprint.");
+  }
+
+  TIMELINE_BLUEPRINT["fakemarker"] = { group: 0, label: () => void 0};
+  try {
+    Utils.getMarkerClassName("fakemarker");
+    ok(false, "getMarkerClassName() should throw when label function returnd undefined.");
+  } catch (e) {
+    ok(true, "getMarkerClassName() should throw when label function returnd undefined.");
+  }
+
+  delete TIMELINE_BLUEPRINT["fakemarker"];
+
   finish();
 }
diff --git a/browser/devtools/performance/views/toolbar.js b/browser/devtools/performance/views/toolbar.js
index 12e9920..b02cba17 100644
--- a/browser/devtools/performance/views/toolbar.js
+++ b/browser/devtools/performance/views/toolbar.js
@@ -53,17 +53,17 @@ let ToolbarView = {
    */
   _buildMarkersFilterPopup: function() {
     for (let [markerName, markerDetails] of Iterator(TIMELINE_BLUEPRINT)) {
       let menuitem = document.createElement("menuitem");
       menuitem.setAttribute("closemenu", "none");
       menuitem.setAttribute("type", "checkbox");
       menuitem.setAttribute("align", "center");
       menuitem.setAttribute("flex", "1");
-      menuitem.setAttribute("label", markerDetails.label);
+      menuitem.setAttribute("label", MarkerUtils.getMarkerClassName(markerName));
       menuitem.setAttribute("marker-type", markerName);
       menuitem.className = markerDetails.colorName;
 
       menuitem.addEventListener("command", this._onHiddenMarkersChanged);
 
       $("#performance-filter-menupopup").appendChild(menuitem);
     }
   },
diff --git a/browser/devtools/shared/timeline/global.js b/browser/devtools/shared/timeline/global.js
index ad9a8c2..9481c02 100644
--- a/browser/devtools/shared/timeline/global.js
+++ b/browser/devtools/shared/timeline/global.js
@@ -17,16 +17,18 @@ const L10N = new ViewHelpers.L10N(STRINGS_URI);
  * A simple schema for mapping markers to the timeline UI. The keys correspond
  * to marker names, while the values are objects with the following format:
  *
  *   - group: the row index in the timeline overview graph; multiple markers
  *            can be added on the same row. @see <overview.js/buildGraphImage>
  *   - label: the label used in the waterfall to identify the marker. Can be a
  *            string or just a function that accepts the marker and returns a string,
  *            if you want to use a dynamic property for the main label.
+ *            If you use a function for a label, it *must* handle the case where
+ *            no marker is provided for a main label to describe all markers of this type.
  *   - colorName: the label of the DevTools color used for this marker. If adding
  *                a new color, be sure to check that there's an entry for
  *                `.marker-details-bullet.{COLORNAME}` for the equivilent entry
  *                in ./browser/themes/shared/devtools/performance.inc.css
  *                https://developer.mozilla.org/en-US/docs/Tools/DevToolsColors
  *   - fields: An optional array of marker properties you wish to display in the
  *             marker details view. For example, a field of
  *             { property: "aCauseName", label: "Cause" }
@@ -73,17 +75,17 @@ const TIMELINE_BLUEPRINT = {
       property: "eventPhase",
       label: L10N.getStr("timeline.markerDetail.DOMEventPhase"),
       formatter: getEventPhaseName
     }]
   },
   "Javascript": {
     group: 1,
     colorName: "highlight-lightorange",
-    label: (marker) => marker.causeName,
+    label: getJSLabel,
   },
   "Parse HTML": {
     group: 1,
     colorName: "highlight-lightorange",
     label: L10N.getStr("timeline.label.parseHTML")
   },
   "Parse XML": {
     group: 1,
@@ -126,21 +128,28 @@ function getEventPhaseName (marker) {
     return L10N.getStr("timeline.markerDetail.DOMEventTargetPhase");
   } else if (marker.eventPhase === Ci.nsIDOMEvent.CAPTURING_PHASE) {
     return L10N.getStr("timeline.markerDetail.DOMEventCapturingPhase");
   } else if (marker.eventPhase === Ci.nsIDOMEvent.BUBBLING_PHASE) {
     return L10N.getStr("timeline.markerDetail.DOMEventBubblingPhase");
   }
 }
 
-function getGCLabel (marker) {
+function getGCLabel (marker={}) {
   let label = L10N.getStr("timeline.label.garbageCollection");
   // Only if a `nonincrementalReason` exists, do we want to label
   // this as a non incremental GC event.
   if ("nonincrementalReason" in marker) {
     label = `${label} (Non-incremental)`;
   }
   return label;
 }
 
+function getJSLabel (marker={}) {
+  if ("causeName" in marker) {
+    return marker.causeName;
+  }
+  return L10N.getStr("timeline.label.javascript2");
+}
+
 // Exported symbols.
 exports.L10N = L10N;
 exports.TIMELINE_BLUEPRINT = TIMELINE_BLUEPRINT;
diff --git a/browser/devtools/shared/timeline/marker-utils.js b/browser/devtools/shared/timeline/marker-utils.js
index c1f4b48..321c500 100644
--- a/browser/devtools/shared/timeline/marker-utils.js
+++ b/browser/devtools/shared/timeline/marker-utils.js
@@ -24,16 +24,45 @@ function getMarkerLabel (marker) {
   let blueprint = TIMELINE_BLUEPRINT[marker.name];
   // Either use the label function in the blueprint, or use it directly
   // as a string.
   return typeof blueprint.label === "function" ? blueprint.label(marker) : blueprint.label;
 }
 exports.getMarkerLabel = getMarkerLabel;
 
 /**
+ * Returns the correct generic name for a marker class, like "Function Call"
+ * being the general class for JS markers, rather than "setTimeout", etc.
+ *
+ * @param {string} type
+ * @return {string}
+ */
+function getMarkerClassName (type) {
+  let blueprint = TIMELINE_BLUEPRINT[type];
+  // Either use the label function in the blueprint, or use it directly
+  // as a string.
+  let className = typeof blueprint.label === "function" ? blueprint.label() : blueprint.label;
+
+  // If no class name found, attempt to throw a descriptive error how the marker
+  // implementor can fix this.
+  if (!className) {
+    let message = `Could not find marker class name for "${type}".`;
+    if (typeof blueprint.label === "function") {
+      message += ` The following function must return a class name string when no marker passed: ${blueprint.label}`;
+    } else {
+      message += ` ${type}.label must be defined in the marker blueprint.`;
+    }
+    throw new Error(message);
+  }
+
+  return className;
+}
+exports.getMarkerClassName = getMarkerClassName;
+
+/**
  * Returns an array of objects with key/value pairs of what should be rendered
  * in the marker details view.
  *
  * @param {ProfileTimelineMarker} marker
  * @return {Array<object>}
  */
 function getMarkerFields (marker) {
   let blueprint = TIMELINE_BLUEPRINT[marker.name];
-- 
2.2.1

