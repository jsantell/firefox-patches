From: Jordan Santell <jsantell@gmail.com>
Date: Tue, 7 Apr 2015 13:59:10 -0700
Subject: Bug 1138928 - Display only function name and file, instead of full url, in flame graphs. r=vp

diff --git a/browser/devtools/shared/moz.build b/browser/devtools/shared/moz.build
index 6be46f0..516c118 100644
--- a/browser/devtools/shared/moz.build
+++ b/browser/devtools/shared/moz.build
@@ -26,16 +26,17 @@ EXTRA_JS_MODULES.devtools += [
     'widgets/SideMenuWidget.jsm',
     'widgets/SimpleListWidget.jsm',
     'widgets/VariablesView.jsm',
     'widgets/VariablesViewController.jsm',
     'widgets/ViewHelpers.jsm',
 ]
 
 EXTRA_JS_MODULES.devtools.shared.profiler += [
+    'profiler/frame-utils.js',
     'profiler/global.js',
     'profiler/jit.js',
     'profiler/tree-model.js',
     'profiler/tree-view.js',
 ]
 
 EXTRA_JS_MODULES.devtools.shared.timeline += [
     'timeline/global.js',
diff --git a/browser/devtools/shared/profiler/frame-utils.js b/browser/devtools/shared/profiler/frame-utils.js
new file mode 100644
index 0000000..e2065ba
--- /dev/null
+++ b/browser/devtools/shared/profiler/frame-utils.js
@@ -0,0 +1,131 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const { Ci } = require("chrome");
+const { extend } = require("sdk/util/object");
+loader.lazyRequireGetter(this, "Services");
+loader.lazyRequireGetter(this, "CATEGORY_OTHER",
+  "devtools/shared/profiler/global", true);
+
+// The cache used in the `nsIURL` function.
+const gNSURLStore = new Map();
+const CHROME_SCHEMES = ["chrome://", "resource://", "jar:file://"];
+const CONTENT_SCHEMES = ["http://", "https://", "file://", "app://"];
+
+/**
+ * Parses the raw location of this function call to retrieve the actual
+ * function name, source url, host name, line and column.
+ */
+exports.parseLocation = function parseLocation (frame) {
+  // Parse the `location` for the function name, source url, line, column etc.
+  let lineAndColumn = frame.location.match(/((:\d+)*)\)?$/)[1];
+  let [, line, column] = lineAndColumn.split(":");
+  line = line || frame.line;
+  column = column || frame.column;
+
+  let firstParenIndex = frame.location.indexOf("(");
+  let lineAndColumnIndex = frame.location.indexOf(lineAndColumn);
+  let resource = frame.location.substring(firstParenIndex + 1, lineAndColumnIndex);
+
+  let url = resource.split(" -> ").pop();
+  let uri = nsIURL(url);
+  let functionName, fileName, hostName;
+
+  // If the URI digged out from the `location` is valid, this is a JS frame.
+  if (uri) {
+    functionName = frame.location.substring(0, firstParenIndex - 1);
+    fileName = (uri.fileName + (uri.ref ? "#" + uri.ref : "")) || "/";
+    hostName = url.indexOf("jar:") == 0 ? "" : uri.host;
+  } else {
+    functionName = frame.location;
+    url = null;
+  }
+
+  return {
+    functionName: functionName,
+    fileName: fileName,
+    hostName: hostName,
+    url: url,
+    line: line,
+    column: column
+  };
+},
+
+/**
+* Checks if the specified function represents a chrome or content frame.
+*
+* @param object frame
+*        The { category, location } properties of the frame.
+* @return boolean
+*         True if a content frame, false if a chrome frame.
+*/
+exports.isContent = function isContent ({ category, location }) {
+  // Only C++ stack frames have associated category information.
+  return !!(!category &&
+    !CHROME_SCHEMES.find(e => location.contains(e)) &&
+    CONTENT_SCHEMES.find(e => location.contains(e)));
+}
+
+/**
+ * This filters out platform data frames in a sample. With latest performance
+ * tool in Fx40, when displaying only content, we still filter out all platform data,
+ * except we generalize platform data that are leaves. We do this because of two
+ * observations:
+ *
+ * 1. The leaf is where time is _actually_ being spent, so we _need_ to show it
+ * to developers in some way to give them accurate profiling data. We decide to
+ * split the platform into various category buckets and just show time spent in
+ * each bucket.
+ *
+ * 2. The calls leading to the leaf _aren't_ where we are spending time, but
+ * _do_ give the developer context for how they got to the leaf where they _are_
+ * spending time. For non-platform hackers, the non-leaf platform frames don't
+ * give any meaningful context, and so we can safely filter them out.
+ *
+ * Example transformations:
+ * Before: PlatformA -> PlatformB -> ContentA -> ContentB
+ * After:  ContentA -> ContentB
+ *
+ * Before: PlatformA -> ContentA -> PlatformB -> PlatformC
+ * After:  ContentA -> Category(PlatformC)
+ */
+exports.filterPlatformData = function filterPlatformData (frames) {
+  let result = [];
+  let last = frames.length - 1;
+  let frame;
+
+  for (let i = 0; i < frames.length; i++) {
+    frame = frames[i];
+    if (exports.isContent(frame)) {
+      result.push(frame);
+    } else if (last === i) {
+      // Extend here so we're not destructively editing
+      // the original profiler data. Set isMetaCategory `true`,
+      // and ensure we have a category set by default, because that's how
+      // the generalized frame nodes are organized.
+      result.push(extend({ isMetaCategory: true, category: CATEGORY_OTHER }, frame));
+    }
+  }
+
+  return result;
+}
+
+/**
+ * Helper for getting an nsIURL instance out of a string.
+ */
+function nsIURL(url) {
+  let cached = gNSURLStore.get(url);
+  if (cached) {
+    return cached;
+  }
+  let uri = null;
+  try {
+    uri = Services.io.newURI(url, null, null).QueryInterface(Ci.nsIURL);
+  } catch(e) {
+    // The passed url string is invalid.
+  }
+  gNSURLStore.set(url, uri);
+  return uri;
+}
diff --git a/browser/devtools/shared/profiler/tree-model.js b/browser/devtools/shared/profiler/tree-model.js
index 7f87874..f194424 100644
--- a/browser/devtools/shared/profiler/tree-model.js
+++ b/browser/devtools/shared/profiler/tree-model.js
@@ -1,36 +1,31 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const {Cc, Ci, Cu, Cr} = require("chrome");
-const {extend} = require("sdk/util/object");
 
-loader.lazyRequireGetter(this, "Services");
 loader.lazyRequireGetter(this, "L10N",
   "devtools/shared/profiler/global", true);
 loader.lazyRequireGetter(this, "CATEGORY_MAPPINGS",
   "devtools/shared/profiler/global", true);
 loader.lazyRequireGetter(this, "CATEGORIES",
   "devtools/shared/profiler/global", true);
 loader.lazyRequireGetter(this, "CATEGORY_JIT",
   "devtools/shared/profiler/global", true);
 loader.lazyRequireGetter(this, "JITOptimizations",
   "devtools/shared/profiler/jit", true);
-loader.lazyRequireGetter(this, "CATEGORY_OTHER",
-  "devtools/shared/profiler/global", true);
-
-const CHROME_SCHEMES = ["chrome://", "resource://", "jar:file://"];
-const CONTENT_SCHEMES = ["http://", "https://", "file://", "app://"];
+loader.lazyRequireGetter(this, "FrameUtils",
+  "devtools/shared/profiler/frame-utils");
 
 exports.ThreadNode = ThreadNode;
 exports.FrameNode = FrameNode;
-exports.FrameNode.isContent = isContent;
+exports.FrameNode.isContent = FrameUtils.isContent;
 
 /**
  * A call tree for a thread. This is essentially a linkage between all frames
  * of all samples into a single tree structure, with additional information
  * on each node, like the time spent (in milliseconds) and samples count.
  *
  * Example:
  * {
@@ -97,17 +92,17 @@ ThreadNode.prototype = {
     }
 
     let sampleFrames = sample.frames;
 
     // Filter out platform frames if only content-related function calls
     // should be taken into consideration.
     if (options.contentOnly) {
       // The (root) node is not considered a content function, it'll be removed.
-      sampleFrames = filterPlatformData(sampleFrames);
+      sampleFrames = FrameUtils.filterPlatformData(sampleFrames);
     } else {
       // Remove the (root) node manually.
       sampleFrames = sampleFrames.slice(1);
     }
     // If no frames remain after filtering, then this is a leaf node, no need
     // to continue.
     if (!sampleFrames.length) {
       return;
@@ -248,52 +243,23 @@ FrameNode.prototype = {
     if (this.location == "EnterJIT") {
       this.category = CATEGORY_JIT;
     }
 
     // Since only C++ stack frames have associated category information,
     // default to an "unknown" category otherwise.
     let categoryData = CATEGORY_MAPPINGS[this.category] || {};
 
-    // Parse the `location` for the function name, source url, line, column etc.
-    let lineAndColumn = this.location.match(/((:\d+)*)\)?$/)[1];
-    let [, line, column] = lineAndColumn.split(":");
-    line = line || this.line;
-    column = column || this.column;
-
-    let firstParenIndex = this.location.indexOf("(");
-    let lineAndColumnIndex = this.location.indexOf(lineAndColumn);
-    let resource = this.location.substring(firstParenIndex + 1, lineAndColumnIndex);
-
-    let url = resource.split(" -> ").pop();
-    let uri = nsIURL(url);
-    let functionName, fileName, hostName;
+    let parsedData = FrameUtils.parseLocation(this);
+    parsedData.nodeType = "Frame";
+    parsedData.categoryData = categoryData;
+    parsedData.isContent = FrameUtils.isContent(this);
+    parsedData.isMetaCategory = this.isMetaCategory;
 
-    // If the URI digged out from the `location` is valid, this is a JS frame.
-    if (uri) {
-      functionName = this.location.substring(0, firstParenIndex - 1);
-      fileName = (uri.fileName + (uri.ref ? "#" + uri.ref : "")) || "/";
-      hostName = url.indexOf("jar:") == 0 ? "" : uri.host;
-    } else {
-      functionName = this.location;
-      url = null;
-    }
-
-    return this._data = {
-      nodeType: "Frame",
-      functionName: functionName,
-      fileName: fileName,
-      hostName: hostName,
-      url: url,
-      line: line,
-      column: column,
-      categoryData: categoryData,
-      isContent: !!isContent(this),
-      isMetaCategory: this.isMetaCategory
-    };
+    return this._data = parsedData;
   },
 
   /**
    * Returns whether or not the frame node has an JITOptimizations model.
    *
    * @return {Boolean}
    */
   hasOptimizations: function () {
@@ -305,88 +271,8 @@ FrameNode.prototype = {
    * the optimization attempts occuring in this frame.
    *
    * @return {JITOptimizations|null}
    */
   getOptimizations: function () {
     return this._optimizations;
   }
 };
-
-/**
- * Checks if the specified function represents a chrome or content frame.
- *
- * @param object frame
- *        The { category, location } properties of the frame.
- * @return boolean
- *         True if a content frame, false if a chrome frame.
- */
-function isContent({ category, location }) {
-  // Only C++ stack frames have associated category information.
-  return !category &&
-    !CHROME_SCHEMES.find(e => location.contains(e)) &&
-    CONTENT_SCHEMES.find(e => location.contains(e));
-}
-
-/**
- * Helper for getting an nsIURL instance out of a string.
- */
-function nsIURL(url) {
-  let cached = gNSURLStore.get(url);
-  if (cached) {
-    return cached;
-  }
-  let uri = null;
-  try {
-    uri = Services.io.newURI(url, null, null).QueryInterface(Ci.nsIURL);
-  } catch(e) {
-    // The passed url string is invalid.
-  }
-  gNSURLStore.set(url, uri);
-  return uri;
-}
-
-// The cache used in the `nsIURL` function.
-let gNSURLStore = new Map();
-
-/**
- * This filters out platform data frames in a sample. With latest performance
- * tool in Fx40, when displaying only content, we still filter out all platform data,
- * except we generalize platform data that are leaves. We do this because of two
- * observations:
- *
- * 1. The leaf is where time is _actually_ being spent, so we _need_ to show it
- * to developers in some way to give them accurate profiling data. We decide to
- * split the platform into various category buckets and just show time spent in
- * each bucket.
- *
- * 2. The calls leading to the leaf _aren't_ where we are spending time, but
- * _do_ give the developer context for how they got to the leaf where they _are_
- * spending time. For non-platform hackers, the non-leaf platform frames don't
- * give any meaningful context, and so we can safely filter them out.
- *
- * Example transformations:
- * Before: PlatformA -> PlatformB -> ContentA -> ContentB
- * After:  ContentA -> ContentB
- *
- * Before: PlatformA -> ContentA -> PlatformB -> PlatformC
- * After:  ContentA -> Category(PlatformC)
- */
-function filterPlatformData (frames) {
-  let result = [];
-  let last = frames.length - 1;
-  let frame;
-
-  for (let i = 0; i < frames.length; i++) {
-    frame = frames[i];
-    if (isContent(frame)) {
-      result.push(frame);
-    } else if (last === i) {
-      // Extend here so we're not destructively editing
-      // the original profiler data. Set isMetaCategory `true`,
-      // and ensure we have a category set by default, because that's how
-      // the generalized frame nodes are organized.
-      result.push(extend({ isMetaCategory: true, category: CATEGORY_OTHER }, frame));
-    }
-  }
-
-  return result;
-}
diff --git a/browser/devtools/shared/test/browser.ini b/browser/devtools/shared/test/browser.ini
index 06d80f2..fb95ea4 100644
--- a/browser/devtools/shared/test/browser.ini
+++ b/browser/devtools/shared/test/browser.ini
@@ -26,16 +26,17 @@ support-files =
 [browser_flame-graph-03b.js]
 [browser_flame-graph-03c.js]
 [browser_flame-graph-04.js]
 [browser_flame-graph-utils-01.js]
 [browser_flame-graph-utils-02.js]
 [browser_flame-graph-utils-03.js]
 [browser_flame-graph-utils-04.js]
 [browser_flame-graph-utils-05.js]
+[browser_flame-graph-utils-06.js]
 [browser_flame-graph-utils-hash.js]
 [browser_graphs-01.js]
 [browser_graphs-02.js]
 [browser_graphs-03.js]
 [browser_graphs-04.js]
 [browser_graphs-05.js]
 [browser_graphs-06.js]
 [browser_graphs-07a.js]
diff --git a/browser/devtools/shared/test/browser_flame-graph-utils-06.js b/browser/devtools/shared/test/browser_flame-graph-utils-06.js
new file mode 100644
index 0000000..357f8b9
--- /dev/null
+++ b/browser/devtools/shared/test/browser_flame-graph-utils-06.js
@@ -0,0 +1,86 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Tests that the text displayed is the function name, file name and line number
+// if applicable.
+
+let {FlameGraphUtils, FLAME_GRAPH_BLOCK_HEIGHT} = devtools.require("devtools/shared/widgets/FlameGraph");
+
+add_task(function*() {
+  yield promiseTab("about:blank");
+  yield performTest();
+  gBrowser.removeCurrentTab();
+});
+
+function* performTest() {
+  let out = FlameGraphUtils.createFlameGraphDataFromSamples(TEST_DATA, {
+    flattenRecursion: true
+  });
+
+  ok(out, "Some data was outputted properly");
+  is(out.length, 10, "The outputted length is correct.");
+
+  info("Got flame graph data:\n" + out.toSource() + "\n");
+
+  for (let i = 0; i < out.length; i++) {
+    let found = out[i];
+    let expected = EXPECTED_OUTPUT[i];
+
+    is(found.blocks.length, expected.blocks.length,
+      "The correct number of blocks were found in this bucket.");
+
+    for (let j = 0; j < found.blocks.length; j++) {
+      is(found.blocks[j].x, expected.blocks[j].x,
+        "The expected block X position is correct for this frame.");
+      is(found.blocks[j].y, expected.blocks[j].y,
+        "The expected block Y position is correct for this frame.");
+      is(found.blocks[j].width, expected.blocks[j].width,
+        "The expected block width is correct for this frame.");
+      is(found.blocks[j].height, expected.blocks[j].height,
+        "The expected block height is correct for this frame.");
+      is(found.blocks[j].text, expected.blocks[j].text,
+        "The expected block text is correct for this frame.");
+    }
+  }
+}
+
+let TEST_DATA = [{
+  frames: [{
+    location: "A (http://path/to/file.js:10:5"
+  }, {
+    location: "B (http://path/to/file.js:100:5"
+  }],
+  time: 50,
+}];
+
+let EXPECTED_OUTPUT = [{
+  blocks: []
+}, {
+  blocks: []
+}, {
+  blocks: []
+}, {
+  blocks: []
+}, {
+  blocks: [{
+    srcData: {
+      startTime: 0,
+      rawLocation: "A (http://path/to/file.js:10:5)"
+    },
+    x: 0,
+    y: 0,
+    width: 50,
+    height: FLAME_GRAPH_BLOCK_HEIGHT,
+    text: "A (file.js:10)"
+  }]
+}, {
+  blocks: []
+}, {
+  blocks: []
+}, {
+  blocks: []
+}, {
+  blocks: []
+}, {
+  blocks: []
+}];
diff --git a/browser/devtools/shared/widgets/FlameGraph.js b/browser/devtools/shared/widgets/FlameGraph.js
index 0e3bf5f..6655c21 100644
--- a/browser/devtools/shared/widgets/FlameGraph.js
+++ b/browser/devtools/shared/widgets/FlameGraph.js
@@ -4,16 +4,17 @@
 "use strict";
 
 const { ViewHelpers } = require("resource:///modules/devtools/ViewHelpers.jsm");
 const { AbstractCanvasGraph, GraphArea, GraphAreaDragger } = require("resource:///modules/devtools/Graphs.jsm");
 const { Promise } = require("resource://gre/modules/Promise.jsm");
 const { Task } = require("resource://gre/modules/Task.jsm");
 const { getColor } = require("devtools/shared/theme");
 const EventEmitter = require("devtools/toolkit/event-emitter");
+const FrameUtils = require("devtools/shared/profiler/frame-utils");
 
 const HTML_NS = "http://www.w3.org/1999/xhtml";
 const GRAPH_SRC = "chrome://browser/content/devtools/graphs-frame.xhtml";
 const L10N = new ViewHelpers.L10N();
 
 const GRAPH_RESIZE_EVENTS_DRAIN = 100; // ms
 
 const GRAPH_WHEEL_ZOOM_SENSITIVITY = 0.00035;
@@ -1016,20 +1017,21 @@ let FlameGraphUtils = {
 
       // Invert the stack if preferred, reversing the frames array in place.
       if (options.invertStack) {
         frames.reverse();
       }
 
       // If no frames are available, add a pseudo "idle" block in between.
       if (options.showIdleBlocks && frames.length == 0) {
-        frames = [{ location: options.showIdleBlocks || "" }];
+        frames = [{ location: options.showIdleBlocks || "", idle: true }];
       }
 
-      for (let { location } of frames) {
+      for (let frame of frames) {
+        let { location } = frame;
         let prevFrame = prevFrames[frameIndex];
 
         // Frames at the same location and the same depth will be reused.
         // If there is a block already created, change its width.
         if (prevFrame && prevFrame.srcData.rawLocation == location) {
           prevFrame.width = (time - prevFrame.srcData.startTime);
         }
         // Otherwise, create a new block for this frame at this depth,
@@ -1040,17 +1042,17 @@ let FlameGraphUtils = {
           let bucket = buckets.get(color);
 
           bucket.push(prevFrames[frameIndex] = {
             srcData: { startTime: prevTime, rawLocation: location },
             x: prevTime,
             y: frameIndex * FLAME_GRAPH_BLOCK_HEIGHT,
             width: time - prevTime,
             height: FLAME_GRAPH_BLOCK_HEIGHT,
-            text: location
+            text: this._formatLabel(frame)
           });
         }
 
         frameIndex++;
       }
 
       // Previous frames at stack depths greater than the current sample's
       // maximum need to be nullified. It's nonsensical to reuse them.
@@ -1110,14 +1112,38 @@ let FlameGraphUtils = {
       hash += input.charCodeAt(i);
 
       if (hash > Number.MAX_SAFE_INTEGER / STRING_HASH_PRIME2) {
         return hash;
       }
     }
 
     return hash;
+  },
+
+  /**
+   * Takes a FrameNode and returns a string that should be displayed
+   * in its flame block.
+   *
+   * @param FrameNode frame
+   * @return string
+   */
+  _formatLabel: function (frame) {
+    // If an idle block, just return the location which will just be "(idle)" text
+    // anyway.
+    if (frame.idle) {
+      return frame.location;
+    }
+
+    let { functionName, fileName, line } = FrameUtils.parseLocation(frame);
+    let label = functionName;
+
+    if (fileName) {
+      label += ` (${fileName}${line != null ? (":" + line) : ""})`;
+    }
+
+    return label;
   }
 };
 
 exports.FlameGraph = FlameGraph;
 exports.FlameGraphUtils = FlameGraphUtils;
 exports.FLAME_GRAPH_BLOCK_HEIGHT = FLAME_GRAPH_BLOCK_HEIGHT;
-- 
2.2.1

