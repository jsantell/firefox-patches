From 28fdcca44450b6202a6c61bb7f1654df10c76302 Mon Sep 17 00:00:00 2001
From: Jordan Santell <jsantell@mozilla.com>
Date: Tue, 8 Mar 2016 17:21:11 -0800
Subject: [PATCH 1/2] Bug 1251033 - Part 1 - BrowserLoader now has an option to
 only load shared components and not require an additional directory. r=jryans

---
 devtools/client/aboutdebugging/initializer.js      |  6 +++--
 devtools/client/debugger/debugger-controller.js    |  5 +++-
 devtools/client/memory/initializer.js              |  5 +++-
 devtools/client/memory/test/chrome/head.js         |  5 +++-
 .../client/performance/components/test/head.js     |  5 +++-
 .../client/performance/performance-controller.js   |  5 +++-
 devtools/client/responsive.html/index.js           |  6 +++--
 devtools/client/shared/browser-loader.js           | 31 +++++++++++++++-------
 .../shared/components/test/mochitest/head.js       |  5 +++-
 9 files changed, 53 insertions(+), 20 deletions(-)

diff --git a/devtools/client/aboutdebugging/initializer.js b/devtools/client/aboutdebugging/initializer.js
index 5e91ad3..7a4d5fc 100644
--- a/devtools/client/aboutdebugging/initializer.js
+++ b/devtools/client/aboutdebugging/initializer.js
@@ -13,18 +13,20 @@ loader.lazyRequireGetter(this, "DebuggerClient",
   "devtools/shared/client/main", true);
 loader.lazyRequireGetter(this, "DebuggerServer",
   "devtools/server/main", true);
 loader.lazyRequireGetter(this, "Telemetry",
   "devtools/client/shared/telemetry");
 
 const { BrowserLoader } = Components.utils.import(
   "resource://devtools/client/shared/browser-loader.js", {});
-const { require } =
-  BrowserLoader("resource://devtools/client/aboutdebugging/", window);
+const { require } = BrowserLoader({
+  baseURI: "resource://devtools/client/aboutdebugging/",
+  window
+});
 
 const {
   createFactory,
   render,
   unmountComponentAtNode } = require("devtools/client/shared/vendor/react");
 const AboutDebuggingApp = createFactory(require("./components/aboutdebugging"));
 
 var AboutDebugging = {
diff --git a/devtools/client/debugger/debugger-controller.js b/devtools/client/debugger/debugger-controller.js
index 12f753b..f69f392 100644
--- a/devtools/client/debugger/debugger-controller.js
+++ b/devtools/client/debugger/debugger-controller.js
@@ -106,17 +106,20 @@ Cu.import("resource://devtools/client/shared/widgets/VariablesViewController.jsm
 Cu.import("resource://devtools/client/shared/widgets/ViewHelpers.jsm");
 
 /**
  * Localization convenience methods.
  */
 var L10N = new ViewHelpers.L10N(DBG_STRINGS_URI);
 
 Cu.import("resource://devtools/client/shared/browser-loader.js");
-const require = BrowserLoader("resource://devtools/client/debugger/", window).require;
+const { require } = BrowserLoader({
+  baseURI: "resource://devtools/client/debugger/",
+  window,
+});
 XPCOMUtils.defineConstant(this, "require", require);
 const { gDevTools } = require("devtools/client/framework/devtools");
 
 // React
 const React = require("devtools/client/shared/vendor/react");
 const ReactDOM = require("devtools/client/shared/vendor/react-dom");
 const { Provider } = require("devtools/client/shared/vendor/react-redux");
 
diff --git a/devtools/client/memory/initializer.js b/devtools/client/memory/initializer.js
index e48f508..46a9759 100644
--- a/devtools/client/memory/initializer.js
+++ b/devtools/client/memory/initializer.js
@@ -2,17 +2,20 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const { classes: Cc, interfaces: Ci, utils: Cu, results: Cr } = Components;
 const BrowserLoaderModule = {};
 Cu.import("resource://devtools/client/shared/browser-loader.js", BrowserLoaderModule);
-const { require } = BrowserLoaderModule.BrowserLoader("resource://devtools/client/memory/", this);
+const { require } = BrowserLoaderModule.BrowserLoader({
+  baseURI: "resource://devtools/client/memory/",
+  window: this
+});
 const { Task } = require("resource://gre/modules/Task.jsm");
 const { createFactory, createElement } = require("devtools/client/shared/vendor/react");
 const ReactDOM = require("devtools/client/shared/vendor/react-dom");
 const { Provider } = require("devtools/client/shared/vendor/react-redux");
 const App = createFactory(require("devtools/client/memory/app"));
 const Store = require("devtools/client/memory/store");
 const { assert } = require("devtools/shared/DevToolsUtils");
 
diff --git a/devtools/client/memory/test/chrome/head.js b/devtools/client/memory/test/chrome/head.js
index 17efc9f..7876d20 100644
--- a/devtools/client/memory/test/chrome/head.js
+++ b/devtools/client/memory/test/chrome/head.js
@@ -3,17 +3,20 @@
 "use strict";
 
 var { classes: Cc, interfaces: Ci, utils: Cu, results: Cr } = Components;
 
 Cu.import("resource://testing-common/Assert.jsm");
 Cu.import("resource://gre/modules/Task.jsm");
 
 Cu.import("resource://devtools/client/shared/browser-loader.js");
-var { require } = BrowserLoader("resource://devtools/client/memory/", this);
+var { require } = BrowserLoader({
+  baseURI: "resource://devtools/client/memory/",
+  window: this
+});
 var Services = require("Services");
 
 var DevToolsUtils = require("devtools/shared/DevToolsUtils");
 DevToolsUtils.testing = true;
 var { immutableUpdate } = DevToolsUtils;
 
 var constants = require("devtools/client/memory/constants");
 var {
diff --git a/devtools/client/performance/components/test/head.js b/devtools/client/performance/components/test/head.js
index 545298c..1eb1780 100644
--- a/devtools/client/performance/components/test/head.js
+++ b/devtools/client/performance/components/test/head.js
@@ -10,17 +10,20 @@ Cu.import("resource://gre/modules/Task.jsm");
 var { Promise: promise } = Cu.import("resource://gre/modules/Promise.jsm", {});
 var { require } = Cu.import("resource://gre/modules/devtools/shared/Loader.jsm", {});
 var { BrowserLoader } = Cu.import("resource://devtools/client/shared/browser-loader.js", {});
 var DevToolsUtils = require("devtools/shared/DevToolsUtils");
 var { TargetFactory } = require("devtools/client/framework/target");
 var { Toolbox } = require("devtools/client/framework/toolbox");
 
 DevToolsUtils.testing = true;
-var { require: browserRequire } = BrowserLoader("resource://devtools/client/performance/", this);
+var { require: browserRequire } = BrowserLoader({
+  baseURI: "resource://devtools/client/performance/",
+  window: this
+});
 
 var $ = (selector, scope=document) => scope.querySelector(selector);
 var $$ = (selector, scope=document) => scope.querySelectorAll(selector);
 
 function forceRender(comp) {
   return setState(comp, {})
     .then(() => setState(comp, {}));
 }
diff --git a/devtools/client/performance/performance-controller.js b/devtools/client/performance/performance-controller.js
index 70f85fd..6f7ee79 100644
--- a/devtools/client/performance/performance-controller.js
+++ b/devtools/client/performance/performance-controller.js
@@ -1,17 +1,20 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 var { classes: Cc, interfaces: Ci, utils: Cu, results: Cr } = Components;
 var BrowserLoaderModule = {};
 Cu.import("resource://devtools/client/shared/browser-loader.js", BrowserLoaderModule);
-var { loader, require } = BrowserLoaderModule.BrowserLoader("resource://devtools/client/performance/", this);
+var { loader, require } = BrowserLoaderModule.BrowserLoader({
+  baseURI: "resource://devtools/client/performance/",
+  window: this
+});
 var { Task } = require("resource://gre/modules/Task.jsm");
 var { Heritage, ViewHelpers, WidgetMethods } = require("resource://devtools/client/shared/widgets/ViewHelpers.jsm");
 var { gDevTools } = require("devtools/client/framework/devtools");
 
 // Events emitted by various objects in the panel.
 var EVENTS = require("devtools/client/performance/events");
 Object.defineProperty(this, "EVENTS", {
   value: EVENTS,
diff --git a/devtools/client/responsive.html/index.js b/devtools/client/responsive.html/index.js
index cd1cf28..840a26b 100644
--- a/devtools/client/responsive.html/index.js
+++ b/devtools/client/responsive.html/index.js
@@ -4,18 +4,20 @@
 
 /* eslint-env browser */
 
 "use strict";
 
 const { utils: Cu } = Components;
 const { BrowserLoader } =
   Cu.import("resource://devtools/client/shared/browser-loader.js", {});
-const { require } =
-  BrowserLoader("resource://devtools/client/responsive.html/", this);
+const { require } = BrowserLoader({
+  baseURI: "resource://devtools/client/responsive.html/",
+  window: this
+});
 const Telemetry = require("devtools/client/shared/telemetry");
 
 const { createFactory, createElement } =
   require("devtools/client/shared/vendor/react");
 const ReactDOM = require("devtools/client/shared/vendor/react-dom");
 const { Provider } = require("devtools/client/shared/vendor/react-redux");
 
 const App = createFactory(require("./app"));
diff --git a/devtools/client/shared/browser-loader.js b/devtools/client/shared/browser-loader.js
index c0a918b..4bca0ce 100644
--- a/devtools/client/shared/browser-loader.js
+++ b/devtools/client/shared/browser-loader.js
@@ -1,18 +1,18 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
-var { classes: Cc, interfaces: Ci, utils: Cu } = Components;
-
+var Cu = Components.utils;
 const loaders = Cu.import("resource://gre/modules/commonjs/toolkit/loader.js", {});
 const { devtools } = Cu.import("resource://devtools/shared/Loader.jsm", {});
 const { joinURI } = devtools.require("devtools/shared/path");
+const { assert } = devtools.require("devtools/shared/DevToolsUtils");
 const Services = devtools.require("Services");
 Cu.import("resource://gre/modules/AppConstants.jsm");
 
 const BROWSER_BASED_DIRS = [
   "resource://devtools/client/jsonview",
   "resource://devtools/client/shared/vendor",
   "resource://devtools/client/shared/components",
   "resource://devtools/client/shared/redux"
@@ -34,65 +34,76 @@ function clearCache() {
  * deals with modules loaded from under `baseURI`. Anything loaded
  * outside of that path will still be loaded from the devtools loader,
  * so all system modules are still shared and cached across instances.
  * An exception to this is anything under
  * `devtools/client/shared/{vendor/components}`, which is where shared libraries
  * and React components live that should be evaluated in a browser environment.
  *
  * @param string baseURI
- *        Base path to load modules from.
+ *        Base path to load modules from. If null or undefined, only
+ *        the shared vendor/components modules are loaded with the browser
+ *        loader.
  * @param Object window
  *        The window instance to evaluate modules within
+ * @param Boolean useOnlyShared
+ *        If true, ignores `baseURI` and only loads the shared
+ *        BROWSER_BASED_DIRS via BrowserLoader.
  * @return Object
  *         An object with two properties:
  *         - loader: the Loader instance
  *         - require: a function to require modules with
  */
-function BrowserLoader(baseURI, window) {
-  const browserLoaderBuilder = new BrowserLoaderBuilder(baseURI, window);
+function BrowserLoader(options) {
+  const browserLoaderBuilder = new BrowserLoaderBuilder(options);
   return {
     loader: browserLoaderBuilder.loader,
     require: browserLoaderBuilder.require
   };
 }
 
 /**
  * Private class used to build the Loader instance and require method returned
  * by BrowserLoader(baseURI, window).
  *
  * @param string baseURI
  *        Base path to load modules from.
  * @param Object window
  *        The window instance to evaluate modules within
+ * @param Boolean useOnlyShared
+ *        If true, ignores `baseURI` and only loads the shared
+ *        BROWSER_BASED_DIRS via BrowserLoader.
  */
-function BrowserLoaderBuilder(baseURI, window) {
+function BrowserLoaderBuilder({ baseURI, window, useOnlyShared }) {
+  assert(!!baseURI !== !!useOnlyShared,
+    "Cannot use both `baseURI` and `useOnlyShared`.");
+
   const loaderOptions = devtools.require("@loader/options");
   const dynamicPaths = {};
   const componentProxies = new Map();
   const hotReloadEnabled = Services.prefs.getBoolPref("devtools.loader.hotreload");
 
-  if(AppConstants.DEBUG || AppConstants.DEBUG_JS_MODULES) {
+  if (AppConstants.DEBUG || AppConstants.DEBUG_JS_MODULES) {
     dynamicPaths["devtools/client/shared/vendor/react"] =
       "resource://devtools/client/shared/vendor/react-dev";
-  };
+  }
 
   const opts = {
     id: "browser-loader",
     sharedGlobal: true,
     sandboxPrototype: window,
     paths: Object.assign({}, dynamicPaths, loaderOptions.paths),
     invisibleToDebugger: loaderOptions.invisibleToDebugger,
     requireHook: (id, require) => {
       const uri = require.resolve(id);
       const isBrowserDir = BROWSER_BASED_DIRS.filter(dir => {
         return uri.startsWith(dir);
       }).length > 0;
 
-      if (!uri.startsWith(baseURI) && !isBrowserDir) {
+      if ((useOnlyShared || !uri.startsWith(baseURI)) && !isBrowserDir) {
         return devtools.require(uri);
       }
 
       return require(uri);
     },
     globals: {
       // Allow modules to use the window's console to ensure logs appear in a
       // tab toolbox, if one exists, instead of just the browser console.
@@ -118,17 +129,17 @@ function BrowserLoaderBuilder(baseURI, window) {
         lazyGetter: devtools.lazyGetter,
         lazyImporter: devtools.lazyImporter,
         lazyServiceGetter: devtools.lazyServiceGetter,
         lazyRequireGetter: this.lazyRequireGetter.bind(this),
       },
     }
   };
 
-  if(hotReloadEnabled) {
+  if (hotReloadEnabled) {
     opts.loadModuleHook = (module, require) => {
       const { uri, exports } = module;
 
       if (exports.prototype &&
           exports.prototype.isReactComponent) {
         const { createProxy, getForceUpdate } =
               require("devtools/client/shared/vendor/react-proxy");
         const React = require("devtools/client/shared/vendor/react");
diff --git a/devtools/client/shared/components/test/mochitest/head.js b/devtools/client/shared/components/test/mochitest/head.js
index 2d19e6a..2f960be 100644
--- a/devtools/client/shared/components/test/mochitest/head.js
+++ b/devtools/client/shared/components/test/mochitest/head.js
@@ -14,17 +14,20 @@ var promise = require("promise");
 var Services = require("Services");
 var { DebuggerServer } = require("devtools/server/main");
 var { DebuggerClient } = require("devtools/shared/client/main");
 var DevToolsUtils = require("devtools/shared/DevToolsUtils");
 var { TargetFactory } = require("devtools/client/framework/target");
 var { Toolbox } = require("devtools/client/framework/toolbox");
 
 DevToolsUtils.testing = true;
-var { require: browserRequire } = BrowserLoader("resource://devtools/client/shared/", this);
+var { require: browserRequire } = BrowserLoader({
+  baseURI: "resource://devtools/client/shared/",
+  window: this
+});
 
 var EXAMPLE_URL = "http://example.com/browser/browser/devtools/shared/test/";
 
 function forceRender(comp) {
   return setState(comp, {})
     .then(() => setState(comp, {}));
 }
 
-- 
2.3.1


From e4ea87f166d2de6d5fcfd8d4c51483fc62677810 Mon Sep 17 00:00:00 2001
From: Jordan Santell <jsantell@mozilla.com>
Date: Tue, 8 Mar 2016 17:30:18 -0800
Subject: [PATCH 2/2] Bug 1251033 - Part 2 - FrameComponent should correctly
 handle erroneous line/column formats. r=fitzgen

---
 devtools/client/shared/components/frame.js         | 74 ++++++++++++++--------
 .../components/test/mochitest/test_frame_01.html   | 30 ++++++++-
 devtools/client/shared/source-utils.js             | 34 ++++++++--
 .../client/shared/test/unit/test_source-utils.js   | 30 +++++----
 devtools/client/themes/components-frame.css        | 11 +++-
 5 files changed, 132 insertions(+), 47 deletions(-)

diff --git a/devtools/client/shared/components/frame.js b/devtools/client/shared/components/frame.js
index 334689d..df4cba5 100644
--- a/devtools/client/shared/components/frame.js
+++ b/devtools/client/shared/components/frame.js
@@ -1,78 +1,96 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+"use strict";
+
 const { DOM: dom, createClass, PropTypes } = require("devtools/client/shared/vendor/react");
 const { getSourceNames } = require("devtools/client/shared/source-utils");
 const { L10N } = require("resource://devtools/client/shared/widgets/ViewHelpers.jsm").ViewHelpers;
 const l10n = new L10N("chrome://devtools/locale/components.properties");
 
-const Frame = module.exports = createClass({
-  displayName: "Frame",
-
-  getDefaultProps() {
-    return {
-      showFunctionName: false,
-      showHost: false,
-    };
-  },
-
+module.exports = createClass({
   propTypes: {
     // SavedFrame, or an object containing all the required properties.
     frame: PropTypes.shape({
       functionDisplayName: PropTypes.string,
       source: PropTypes.string.isRequired,
-      line: PropTypes.number.isRequired,
+      line: PropTypes.number,
       column: PropTypes.number,
     }).isRequired,
     // Clicking on the frame link -- probably should link to the debugger.
     onClick: PropTypes.func.isRequired,
     // Option to display a function name before the source link.
     showFunctionName: PropTypes.bool,
     // Option to display a host name after the source link.
     showHost: PropTypes.bool,
   },
 
+  getDefaultProps() {
+    return {
+      showFunctionName: false,
+      showHost: false,
+    };
+  },
+
+  displayName: "Frame",
+
   render() {
     let { onClick, frame, showFunctionName, showHost } = this.props;
-
     const { short, long, host } = getSourceNames(frame.source);
 
-    let tooltip = `${long}:${frame.line}`;
-    if (frame.column) {
-      tooltip += `:${frame.column}`;
-    }
-
-    let sourceString = `${long}:${frame.line}`;
-    if (frame.column) {
-      sourceString += `:${frame.column}`;
+    let tooltip = long;
+    // Exclude all falsy values, including `0`, as even
+    // a number 0 for line doesn't make sense, and should not be displayed.
+    if (frame.line) {
+      tooltip += `:${frame.line}`;
+      // Intentionally exclude 0
+      if (frame.column) {
+        tooltip += `:${frame.column}`;
+      }
     }
 
-    let onClickTooltipString = l10n.getFormatStr("frame.viewsourceindebugger", sourceString);
+    let onClickTooltipString = l10n.getFormatStr("frame.viewsourceindebugger", tooltip);
+    let attributes = {
+      "data-url": long,
+      className: "frame-link",
+      title: tooltip,
+    };
 
     let fields = [
       dom.a({
         className: "frame-link-filename",
         onClick,
         title: onClickTooltipString
-      }, short),
-      dom.span({ className: "frame-link-colon" }, ":"),
-      dom.span({ className: "frame-link-line" }, frame.line),
+      }, short)
     ];
 
-    if (frame.column != null) {
+    // Intentionally exclude 0
+    if (frame.line) {
       fields.push(dom.span({ className: "frame-link-colon" }, ":"));
-      fields.push(dom.span({ className: "frame-link-column" }, frame.column));
+      fields.push(dom.span({ className: "frame-link-line" }, frame.line));
+      // Intentionally exclude 0
+      if (frame.column) {
+        fields.push(dom.span({ className: "frame-link-colon" }, ":"));
+        fields.push(dom.span({ className: "frame-link-column" }, frame.column));
+        // Add `data-column` attribute for testing
+        attributes["data-column"] = frame.column;
+      }
+
+      // Add `data-line` attribute for testing
+      attributes["data-line"] = frame.line;
     }
 
     if (showFunctionName && frame.functionDisplayName) {
-      fields.unshift(dom.span({ className: "frame-link-function-display-name" }, frame.functionDisplayName));
+      fields.unshift(
+        dom.span({ className: "frame-link-function-display-name" }, frame.functionDisplayName)
+      );
     }
 
     if (showHost && host) {
       fields.push(dom.span({ className: "frame-link-host" }, host));
     }
 
-    return dom.span({ className: "frame-link", title: tooltip }, ...fields);
+    return dom.span(attributes, ...fields);
   }
 });
diff --git a/devtools/client/shared/components/test/mochitest/test_frame_01.html b/devtools/client/shared/components/test/mochitest/test_frame_01.html
index 80b77d6..998f3be 100644
--- a/devtools/client/shared/components/test/mochitest/test_frame_01.html
+++ b/devtools/client/shared/components/test/mochitest/test_frame_01.html
@@ -50,17 +50,17 @@ window.onload = Task.async(function* () {
       frame: {
         source: "http://myfile.com/mahscripts.js",
         line: 55,
         column: 0,
       },
       onClick: ()=>{},
     }), window.document.body);
     yield forceRender(frame);
-    checkFrameString(frame, "mahscripts.js", 55, 0);
+    checkFrameString(frame, "mahscripts.js", 55);
 
     // Check when there's no parseable URL source
     frame = ReactDOM.render(Frame({
       frame: {
         source: "self-hosted",
         line: 1,
       },
       onClick: ()=>{},
@@ -72,17 +72,43 @@ window.onload = Task.async(function* () {
     frame = ReactDOM.render(Frame({
       frame: {
         line: 1,
       },
       onClick: ()=>{},
     }), window.document.body);
     yield forceRender(frame);
     checkFrameString(frame, "(unknown)",1);
-  } catch(e) {
+
+    // Check when there's a column, but no number;
+    // no line/column info should render
+    frame = ReactDOM.render(Frame({
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        column: 55,
+      },
+      onClick: ()=>{},
+    }), window.document.body);
+    yield forceRender(frame);
+    checkFrameString(frame, "mahscripts.js");
+
+    // Check when line is 0; this should be an invalid
+    // line option, so don't render line/column
+    frame = ReactDOM.render(Frame({
+      frame: {
+        source: "http://myfile.com/mahscripts.js",
+        line: 0,
+        column: 55,
+      },
+      onClick: ()=>{},
+    }), window.document.body);
+    yield forceRender(frame);
+    checkFrameString(frame, "mahscripts.js");
+
+  } catch (e) {
     ok(false, "Got an error: " + DevToolsUtils.safeErrorString(e));
   } finally {
     SimpleTest.finish();
   }
 });
 </script>
 </pre>
 </body>
diff --git a/devtools/client/shared/source-utils.js b/devtools/client/shared/source-utils.js
index 575dcbe..4504317 100644
--- a/devtools/client/shared/source-utils.js
+++ b/devtools/client/shared/source-utils.js
@@ -1,19 +1,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { URL } = require("sdk/url");
-const { Cu } = require("chrome");
-Cu.import("resource://devtools/client/shared/widgets/ViewHelpers.jsm");
-const STRINGS_URI = "chrome://devtools/locale/components.properties";
-const L10N = new ViewHelpers.L10N(STRINGS_URI);
-const UNKNOWN_SOURCE_STRING = L10N.getStr("frame.unknownSource");
+const { L10N } = require("resource://devtools/client/shared/widgets/ViewHelpers.jsm").ViewHelpers;
+const l10n = new L10N("chrome://devtools/locale/components.properties");
+const UNKNOWN_SOURCE_STRING = l10n.getStr("frame.unknownSource");
 
 // Character codes used in various parsing helper functions.
 const CHAR_CODE_A = "a".charCodeAt(0);
 const CHAR_CODE_C = "c".charCodeAt(0);
 const CHAR_CODE_D = "d".charCodeAt(0);
 const CHAR_CODE_E = "e".charCodeAt(0);
 const CHAR_CODE_F = "f".charCodeAt(0);
 const CHAR_CODE_H = "h".charCodeAt(0);
@@ -24,16 +22,17 @@ const CHAR_CODE_M = "m".charCodeAt(0);
 const CHAR_CODE_O = "o".charCodeAt(0);
 const CHAR_CODE_P = "p".charCodeAt(0);
 const CHAR_CODE_R = "r".charCodeAt(0);
 const CHAR_CODE_S = "s".charCodeAt(0);
 const CHAR_CODE_T = "t".charCodeAt(0);
 const CHAR_CODE_U = "u".charCodeAt(0);
 const CHAR_CODE_COLON = ":".charCodeAt(0);
 const CHAR_CODE_SLASH = "/".charCodeAt(0);
+const CHAR_CODE_CAP_S = "S".charCodeAt(0);
 
 // The cache used in the `nsIURL` function.
 const gURLStore = new Map();
 // The cache used in the `getSourceNames` function.
 const gSourceNamesStore = new Map();
 
 /**
  * Takes a string and returns an object containing all the properties
@@ -116,16 +115,24 @@ function getSourceNames (source) {
       // encoded content, omitting the MIME type, and charset.
       let short = `data:${sourceStr.substring(commaIndex + 1)}`.slice(0, 100);
       let result = { short, long: sourceStr };
       gSourceNamesStore.set(source, result);
       return result;
     }
   }
 
+  // If Scratchpad URI, like "Scratchpad/1"; no modifications,
+  // and short/long are the same.
+  if (isScratchpadScheme(sourceStr)) {
+    let result = { short: sourceStr, long: sourceStr };
+    gSourceNamesStore.set(source, result);
+    return result;
+  }
+
   const parsedUrl = parseURL(sourceStr);
 
   if (!parsedUrl) {
     // Malformed URI.
     long = sourceStr;
     short = sourceStr.slice(0, 100);
   } else {
     host = parsedUrl.host;
@@ -166,16 +173,32 @@ function getSourceNames (source) {
 // being content or chrome when processing the profile.
 
 function isColonSlashSlash(location, i=0) {
   return location.charCodeAt(++i) === CHAR_CODE_COLON &&
          location.charCodeAt(++i) === CHAR_CODE_SLASH &&
          location.charCodeAt(++i) === CHAR_CODE_SLASH;
 }
 
+/**
+ * Checks for a Scratchpad URI, like "Scratchpad/1"
+ */
+function isScratchpadScheme(location, i=0) {
+  return location.charCodeAt(i)   === CHAR_CODE_CAP_S &&
+         location.charCodeAt(++i) === CHAR_CODE_C &&
+         location.charCodeAt(++i) === CHAR_CODE_R &&
+         location.charCodeAt(++i) === CHAR_CODE_A &&
+         location.charCodeAt(++i) === CHAR_CODE_T &&
+         location.charCodeAt(++i) === CHAR_CODE_H &&
+         location.charCodeAt(++i) === CHAR_CODE_P &&
+         location.charCodeAt(++i) === CHAR_CODE_A &&
+         location.charCodeAt(++i) === CHAR_CODE_D &&
+         location.charCodeAt(++i) === CHAR_CODE_SLASH;
+}
+
 function isDataScheme(location, i=0) {
   return location.charCodeAt(i)   === CHAR_CODE_D &&
          location.charCodeAt(++i) === CHAR_CODE_A &&
          location.charCodeAt(++i) === CHAR_CODE_T &&
          location.charCodeAt(++i) === CHAR_CODE_A &&
          location.charCodeAt(++i) === CHAR_CODE_COLON;
 }
 
@@ -254,11 +277,12 @@ function isChromeScheme(location, i=0) {
 
   default:
     return false;
   }
 }
 
 exports.parseURL = parseURL;
 exports.getSourceNames = getSourceNames;
+exports.isScratchpadScheme = isScratchpadScheme;
 exports.isChromeScheme = isChromeScheme;
 exports.isContentScheme = isContentScheme;
 exports.isDataScheme = isDataScheme;
diff --git a/devtools/client/shared/test/unit/test_source-utils.js b/devtools/client/shared/test/unit/test_source-utils.js
index c31af83..3c2407d5 100644
--- a/devtools/client/shared/test/unit/test_source-utils.js
+++ b/devtools/client/shared/test/unit/test_source-utils.js
@@ -67,16 +67,24 @@ add_task(function* () {
   }
   for (let url of CONTENT_URLS) {
     ok(!sourceUtils.isDataScheme(url), `${url} correctly identified as not data scheme`);
   }
 });
 
 // Test `sourceUtils.getSourceNames`.
 add_task(function* () {
+  testAbbreviation("http://example.com/foo/bar/baz/boo.js",
+                   "boo.js",
+                   "http://example.com/foo/bar/baz/boo.js",
+                   "example.com");
+});
+
+// Test `sourceUtils.getSourceNames`.
+add_task(function* () {
 
   // Check length
   let longMalformedURL = `example.com${new Array(100).fill("/a").join("")}/file.js`;
   ok(sourceUtils.getSourceNames(longMalformedURL).short.length <= 100,
     "`short` names are capped at 100 characters");
 
   testAbbreviation("self-hosted", "self-hosted", "self-hosted");
   testAbbreviation("", "(unknown)", "(unknown)");
@@ -90,20 +98,20 @@ add_task(function* () {
   let longDataURIShort = sourceUtils.getSourceNames(longDataURI).short;
 
   // Test shortening data URIs and that the `short` result is capped
   ok(longDataURIShort.length <= 100,
     "`short` names are capped at 100 characters for data URIs");
   equal(longDataURIShort.substr(0, 10), "data:aaaaa",
     "truncated data URI short names still have `data:...`");
 
-  testAbbreviation("http://example.com/foo/bar/baz/boo.js",
-                   "boo.js",
-                   "http://example.com/foo/bar/baz/boo.js",
-                   "example.com");
+  // Test simple URL and cache retrieval by calling the same input multiple times.
+  let testUrl = "http://example.com/foo/bar/baz/boo.js";
+  testAbbreviation(testUrl, "boo.js", testUrl, "example.com");
+  testAbbreviation(testUrl, "boo.js", testUrl, "example.com");
 
   // Check query and hash and port
   testAbbreviation("http://example.com:8888/foo/bar/baz.js?q=query#go",
                    "baz.js",
                    "http://example.com:8888/foo/bar/baz.js",
                    "example.com:8888");
 
   // Trailing "/" with nothing beyond host
@@ -130,16 +138,16 @@ add_task(function* () {
                    "http://example.com/foo.js",
                    "example.com");
 
   // Check query with trailing slash
   testAbbreviation("http://example.com/foo/?bar=1&baz=2",
                    "foo",
                    "http://example.com/foo/",
                    "example.com");
-
-  function testAbbreviation(source, short, long, host) {
-    let results = sourceUtils.getSourceNames(source);
-    equal(results.short, short, `${source} has correct "short" name`);
-    equal(results.long, long, `${source} has correct "long" name`);
-    equal(results.host, host, `${source} has correct "host" name`);
-  }
 });
+
+function testAbbreviation(source, short, long, host) {
+  let results = sourceUtils.getSourceNames(source);
+  equal(results.short, short, `${source} has correct "short" name`);
+  equal(results.long, long, `${source} has correct "long" name`);
+  equal(results.host, host, `${source} has correct "host" name`);
+}
diff --git a/devtools/client/themes/components-frame.css b/devtools/client/themes/components-frame.css
index 2342952..d81b04a 100644
--- a/devtools/client/themes/components-frame.css
+++ b/devtools/client/themes/components-frame.css
@@ -5,29 +5,37 @@
 
 /**
  * Frame Component
  * Styles for React component at `devtools/client/shared/components/frame.js`
  */
 
 .frame-link {
   margin-left: 7px;
+  display: flex;
 }
 
 .focused .frame-link-filename,
 .focused .frame-link-column,
 .focused .frame-link-line,
 .focused .frame-link-host,
 .focused .frame-link-colon {
   color: var(--theme-selection-color);
 }
 
-.frame-link .frame-link-filename {
+.frame-link a.frame-link-filename {
   color: var(--theme-highlight-blue);
   cursor: pointer;
+  text-overflow: ellipsis;
+  overflow: hidden;
+  flex: 1;
+  text-align: right;
+  /* overrides styling some tools have with anchors */
+  text-decoration: none;
+  font-style: normal;
 }
 
 .frame-link .frame-link-filename:hover {
   text-decoration: underline;
 }
 
 .frame-link .frame-link-host {
   margin-inline-start: 5px;
@@ -38,9 +46,10 @@
 .frame-link .frame-link-function-display-name {
   margin-inline-end: 5px;
 }
 
 .frame-link .frame-link-column,
 .frame-link .frame-link-line,
 .frame-link .frame-link-colon {
   color: var(--theme-highlight-orange);
+  display: block;
 }
-- 
2.3.1

