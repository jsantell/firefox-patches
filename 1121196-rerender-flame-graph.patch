From 84c1c3776cce4fb36530a311725df3c8a5ec6b1f Mon Sep 17 00:00:00 2001
From: Jordan Santell <jsantell@gmail.com>
Date: Wed, 14 Jan 2015 07:46:24 -0800
Subject: Bug 1121196 - Toggle flamegraph rendering when switching
 between recordings in performance tool. r=vp

diff --git a/browser/devtools/performance/test/browser.ini b/browser/devtools/performance/test/browser.ini
index ddddccf..b0a6765 100644
--- a/browser/devtools/performance/test/browser.ini
+++ b/browser/devtools/performance/test/browser.ini
@@ -34,12 +34,13 @@ support-files =
 [browser_perf-overview-selection-03.js]
 [browser_perf-shared-connection-02.js]
 [browser_perf-shared-connection-03.js]
 # [browser_perf-shared-connection-04.js] bug 1077464
 [browser_perf-ui-recording.js]
 [browser_perf_recordings-io-01.js]
 [browser_perf_recordings-io-02.js]
 [browser_perf_recordings-io-03.js]
+[browser_perf_recordings-io-04.js]
 [browser_perf-recording-selected-01.js]
 [browser_perf-recording-selected-02.js]
 [browser_perf-recording-selected-03.js]
-[browser_perf_recordings-io-04.js]
+[browser_perf-recording-selected-04.js]
diff --git a/browser/devtools/performance/test/browser_perf-recording-selected-04.js b/browser/devtools/performance/test/browser_perf-recording-selected-04.js
new file mode 100644
index 0000000..7d3cdf1
--- /dev/null
+++ b/browser/devtools/performance/test/browser_perf-recording-selected-04.js
@@ -0,0 +1,29 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that all components get rerendered for a profile when switching.
+ */
+
+let test = Task.async(function*() {
+  let { target, panel, toolbox } = yield initPerformance(SIMPLE_URL);
+  let { $, EVENTS, PerformanceController, RecordingsView } = panel.panelWin;
+
+  yield startRecording(panel);
+  yield stopRecording(panel);
+
+  yield startRecording(panel);
+  yield stopRecording(panel);
+
+  let rerender = waitForWidgetsRendered(panel);
+  RecordingsView.selectedIndex = 0;
+  yield rerender;
+
+  rerender = waitForWidgetsRendered(panel);
+  RecordingsView.selectedIndex = 1;
+  yield rerender;
+
+  yield teardown(panel);
+  finish();
+});
diff --git a/browser/devtools/performance/views/details-call-tree.js b/browser/devtools/performance/views/details-call-tree.js
index dd84fb0..2f2edd3 100644
--- a/browser/devtools/performance/views/details-call-tree.js
+++ b/browser/devtools/performance/views/details-call-tree.js
@@ -44,28 +44,29 @@ let CallTreeView = {
     let threadNode = this._prepareCallTree(profilerData, beginAt, endAt, options);
     this._populateCallTree(threadNode, options);
     this.emit(EVENTS.CALL_TREE_RENDERED);
   },
 
   /**
    * Called when recording is stopped.
    */
-  _onRecordingStopped: function () {
-    let profilerData = PerformanceController.getProfilerData();
-    this.render(profilerData);
+  _onRecordingStopped: function (_, recording) {
+    // If not recording, then this recording is done and we can render all of it
+    if (!recording.isRecording()) {
+      let profilerData = recording.getProfilerData();
+      this.render(profilerData);
+    }
   },
 
   /**
    * Called when a recording has been selected.
    */
   _onRecordingSelected: function (_, recording) {
     // If not recording, then this recording is done and we can render all of it
-    // Otherwise, TODO in bug 1120699 will hide the details view altogether if
-    // this is still recording.
     if (!recording.isRecording()) {
       let profilerData = recording.getProfilerData();
       this.render(profilerData);
     }
   },
 
   /**
    * Fired when a range is selected or cleared in the OverviewView.
diff --git a/browser/devtools/performance/views/details-flamegraph.js b/browser/devtools/performance/views/details-flamegraph.js
index 8426323..02c9a00 100644
--- a/browser/devtools/performance/views/details-flamegraph.js
+++ b/browser/devtools/performance/views/details-flamegraph.js
@@ -8,32 +8,35 @@
  * controlled by DetailsView.
  */
 let FlameGraphView = {
   /**
    * Sets up the view with event binding.
    */
   initialize: Task.async(function* () {
     this._onRecordingStopped = this._onRecordingStopped.bind(this);
+    this._onRecordingSelected = this._onRecordingSelected.bind(this);
     this._onRangeChange = this._onRangeChange.bind(this);
 
     this.graph = new FlameGraph($("#flamegraph-view"));
     this.graph.timelineTickUnits = L10N.getStr("graphs.ms");
     yield this.graph.ready();
 
     PerformanceController.on(EVENTS.RECORDING_STOPPED, this._onRecordingStopped);
+    PerformanceController.on(EVENTS.RECORDING_SELECTED, this._onRecordingSelected);
     OverviewView.on(EVENTS.OVERVIEW_RANGE_SELECTED, this._onRangeChange);
     OverviewView.on(EVENTS.OVERVIEW_RANGE_CLEARED, this._onRangeChange);
   }),
 
   /**
    * Unbinds events.
    */
   destroy: function () {
     PerformanceController.off(EVENTS.RECORDING_STOPPED, this._onRecordingStopped);
+    PerformanceController.off(EVENTS.RECORDING_SELECTED, this._onRecordingSelected);
     OverviewView.off(EVENTS.OVERVIEW_RANGE_SELECTED, this._onRangeChange);
     OverviewView.off(EVENTS.OVERVIEW_RANGE_CLEARED, this._onRangeChange);
   },
 
   /**
    * Method for handling all the set up for rendering a new flamegraph.
    */
   render: function (profilerData) {
@@ -45,19 +48,33 @@ let FlameGraphView = {
     let dataSrc = FlameGraphUtils.createFlameGraphDataFromSamples(samples);
     this.graph.setData(dataSrc);
     this.emit(EVENTS.FLAMEGRAPH_RENDERED);
   },
 
   /**
    * Called when recording is stopped.
    */
-  _onRecordingStopped: function () {
-    let profilerData = PerformanceController.getProfilerData();
-    this.render(profilerData);
+  _onRecordingStopped: function (_, recording) {
+    // If not recording, then this recording is done and we can render all of it
+    if (!recording.isRecording()) {
+      let profilerData = recording.getProfilerData();
+      this.render(profilerData);
+    }
+  },
+
+  /**
+   * Called when a recording has been selected.
+   */
+  _onRecordingSelected: function (_, recording) {
+    // If not recording, then this recording is done and we can render all of it
+    if (!recording.isRecording()) {
+      let profilerData = recording.getProfilerData();
+      this.render(profilerData);
+    }
   },
 
   /**
    * Fired when a range is selected or cleared in the OverviewView.
    */
   _onRangeChange: function (_, params) {
     // TODO bug 1105014
   }
diff --git a/browser/devtools/performance/views/details-waterfall.js b/browser/devtools/performance/views/details-waterfall.js
index 2d80edc..3474c22 100644
--- a/browser/devtools/performance/views/details-waterfall.js
+++ b/browser/devtools/performance/views/details-waterfall.js
@@ -61,18 +61,20 @@ let WaterfallView = {
    */
   _onRecordingStarted: function () {
     this.waterfall.clearView();
   },
 
   /**
    * Called when recording stops.
    */
-  _onRecordingStopped: function () {
-    this.render();
+  _onRecordingStopped: function (_, recording) {
+    if (!recording.isRecording()) {
+      this.render();
+    }
   },
 
   /**
    * Called when a recording is selected.
    */
   _onRecordingSelected: function (_, recording) {
     if (!recording.isRecording()) {
       this.render();
-- 
2.2.1

