From: Jordan Santell <jsantell@mozilla.com>
Date: Wed, 10 Jun 2015 10:27:54 -0700
Subject: Bug 1173393 - Detail views in Performance should be unique EventTargets and not bleed events between each other. r=vp

diff --git a/browser/devtools/performance/test/browser_perf-details-calltree-render.js b/browser/devtools/performance/test/browser_perf-details-calltree-render.js
index 5999be0..ec2aab6 100644
--- a/browser/devtools/performance/test/browser_perf-details-calltree-render.js
+++ b/browser/devtools/performance/test/browser_perf-details-calltree-render.js
@@ -1,33 +1,47 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests that the call tree view renders content after recording.
  */
 function* spawnTest() {
   let { panel } = yield initPerformance(SIMPLE_URL);
-  let { EVENTS, DetailsView, JsCallTreeView } = panel.panelWin;
+  let { EVENTS, DetailsView, WaterfallView, JsCallTreeView } = panel.panelWin;
 
   yield startRecording(panel);
   yield busyWait(100);
   yield stopRecording(panel);
 
   let rendered = once(JsCallTreeView, EVENTS.JS_CALL_TREE_RENDERED);
   yield DetailsView.selectView("js-calltree");
   ok(DetailsView.isViewSelected(JsCallTreeView), "The call tree is now selected.");
   yield rendered;
 
   ok(true, "JsCallTreeView rendered after recording is stopped.");
 
+  yield DetailsView.selectView("waterfall");
+
   yield startRecording(panel);
   yield busyWait(100);
+  let waterfallRenderedOnWF = once(WaterfallView, EVENTS.WATERFALL_RENDERED);
+  let waterfallRenderedOnJS = once(JsCallTreeView, EVENTS.WATERFALL_RENDERED);
 
   rendered = once(JsCallTreeView, EVENTS.JS_CALL_TREE_RENDERED);
   yield stopRecording(panel);
+
+  // The waterfall should render by default, and we want to make
+  // sure that the render events don't bleed between detail views
+  // via bug 1173393, so test that's the case after both views have been
+  // created
+  waterfallRenderedOnJS.then(() =>
+    ok(false, "JsCallTreeView should not receive WATERFALL_RENDERED event"));
+  yield waterfallRenderedOnWF;
+
+  yield DetailsView.selectView("js-calltree");
   yield rendered;
 
   ok(true, "JsCallTreeView rendered again after recording completed a second time.");
 
   yield teardown(panel);
   finish();
 }
diff --git a/browser/devtools/performance/views/details-abstract-subview.js b/browser/devtools/performance/views/details-abstract-subview.js
index 62e7c26..e929f54 100644
--- a/browser/devtools/performance/views/details-abstract-subview.js
+++ b/browser/devtools/performance/views/details-abstract-subview.js
@@ -155,13 +155,8 @@ let DetailsSubview = {
 
     if (DetailsView.isViewSelected(this) || this.canUpdateWhileHidden) {
       this.render(OverviewView.getTimeInterval());
     } else {
       this.shouldUpdateWhenShown = true;
     }
   }
 };
-
-/**
- * Convenient way of emitting events from the view.
- */
-EventEmitter.decorate(DetailsSubview);
diff --git a/browser/devtools/performance/views/details-js-call-tree.js b/browser/devtools/performance/views/details-js-call-tree.js
index 45a25fa..8672483 100644
--- a/browser/devtools/performance/views/details-js-call-tree.js
+++ b/browser/devtools/performance/views/details-js-call-tree.js
@@ -126,8 +126,10 @@ let JsCallTreeView = Heritage.extend(DetailsSubview, {
     root.toggleCategories(!options.contentOnly);
 
     // Return the CallView for tests
     return root;
   },
 
   toString: () => "[object JsCallTreeView]"
 });
+
+EventEmitter.decorate(JsCallTreeView);
diff --git a/browser/devtools/performance/views/details-js-flamegraph.js b/browser/devtools/performance/views/details-js-flamegraph.js
index ef0b549..8836054 100644
--- a/browser/devtools/performance/views/details-js-flamegraph.js
+++ b/browser/devtools/performance/views/details-js-flamegraph.js
@@ -110,8 +110,10 @@ let JsFlameGraphView = Heritage.extend(DetailsSubview, {
    */
   _onThemeChanged: function (_, theme) {
     this.graph.setTheme(theme);
     this.graph.refresh({ force: true });
   },
 
   toString: () => "[object JsFlameGraphView]"
 });
+
+EventEmitter.decorate(JsFlameGraphView);
diff --git a/browser/devtools/performance/views/details-memory-call-tree.js b/browser/devtools/performance/views/details-memory-call-tree.js
index 3b41f67..a43c68b 100644
--- a/browser/devtools/performance/views/details-memory-call-tree.js
+++ b/browser/devtools/performance/views/details-memory-call-tree.js
@@ -113,8 +113,10 @@ let MemoryCallTreeView = Heritage.extend(DetailsSubview, {
     root.attachTo(this.container);
 
     // Memory allocation samples don't contain cateogry labels.
     root.toggleCategories(false);
   },
 
   toString: () => "[object MemoryCallTreeView]"
 });
+
+EventEmitter.decorate(MemoryCallTreeView);
diff --git a/browser/devtools/performance/views/details-memory-flamegraph.js b/browser/devtools/performance/views/details-memory-flamegraph.js
index 6968ddd..b817595 100644
--- a/browser/devtools/performance/views/details-memory-flamegraph.js
+++ b/browser/devtools/performance/views/details-memory-flamegraph.js
@@ -108,8 +108,10 @@ let MemoryFlameGraphView = Heritage.extend(DetailsSubview, {
    */
   _onThemeChanged: function (_, theme) {
     this.graph.setTheme(theme);
     this.graph.refresh({ force: true });
   },
 
   toString: () => "[object MemoryFlameGraphView]"
 });
+
+EventEmitter.decorate(MemoryFlameGraphView);
diff --git a/browser/devtools/performance/views/details-waterfall.js b/browser/devtools/performance/views/details-waterfall.js
index aeb322a..eb26fc4 100644
--- a/browser/devtools/performance/views/details-waterfall.js
+++ b/browser/devtools/performance/views/details-waterfall.js
@@ -179,8 +179,10 @@ let WaterfallView = Heritage.extend(DetailsSubview, {
       if (item) {
         item.focus();
       }
     }
   },
 
   toString: () => "[object WaterfallView]"
 });
+
+EventEmitter.decorate(WaterfallView);
-- 
2.2.1

