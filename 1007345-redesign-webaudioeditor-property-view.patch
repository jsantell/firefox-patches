From c8a7a9c161c682486f92f531172681af2b8fea7a Mon Sep 17 00:00:00 2001
From: Jordan Santell <jsantell@gmail.com>
Date: Fri, 9 May 2014 12:56:45 -0700
Subject: Bug 1007345 - Create an audionode inspector in the web audio
 editor tool, r=vp

---
 browser/devtools/webaudioeditor/test/browser.ini   |  14 +-
 .../webaudioeditor/test/browser_wa_first-run.js    |   2 +-
 .../webaudioeditor/test/browser_wa_graph-click.js  |  53 ++++
 .../test/browser_wa_graph-render-01.js             |  33 +++
 .../test/browser_wa_graph-render-02.js             |  51 ++++
 .../webaudioeditor/test/browser_wa_graph_click.js  |  58 -----
 .../test/browser_wa_graph_render_01.js             |  33 ---
 .../test/browser_wa_graph_render_02.js             |  53 ----
 .../test/browser_wa_inspector-toggle.js            |  66 +++++
 .../webaudioeditor/test/browser_wa_inspector.js    |  60 +++++
 .../test/browser_wa_params_view_edit.js            |  50 ----
 .../test/browser_wa_params_view_edit_error.js      |  33 ---
 .../test/browser_wa_params_view_events.js          |  27 --
 .../test/browser_wa_params_view_mouseover.js       |  42 ----
 .../test/browser_wa_properties-view-edit.js        |  65 +++++
 .../test/browser_wa_properties-view.js             |  43 ++++
 browser/devtools/webaudioeditor/test/head.js       |  46 ++--
 .../webaudioeditor/webaudioeditor-controller.js    |  21 +-
 .../devtools/webaudioeditor/webaudioeditor-view.js | 277 ++++++++++++++-------
 browser/devtools/webaudioeditor/webaudioeditor.xul |  60 ++++-
 .../chrome/browser/devtools/webaudioeditor.dtd     |  16 ++
 .../browser/devtools/webaudioeditor.properties     |   9 +
 .../themes/shared/devtools/webaudioeditor.inc.css  |  15 ++
 23 files changed, 699 insertions(+), 428 deletions(-)
 create mode 100644 browser/devtools/webaudioeditor/test/browser_wa_graph-click.js
 create mode 100644 browser/devtools/webaudioeditor/test/browser_wa_graph-render-01.js
 create mode 100644 browser/devtools/webaudioeditor/test/browser_wa_graph-render-02.js
 delete mode 100644 browser/devtools/webaudioeditor/test/browser_wa_graph_click.js
 delete mode 100644 browser/devtools/webaudioeditor/test/browser_wa_graph_render_01.js
 delete mode 100644 browser/devtools/webaudioeditor/test/browser_wa_graph_render_02.js
 create mode 100644 browser/devtools/webaudioeditor/test/browser_wa_inspector-toggle.js
 create mode 100644 browser/devtools/webaudioeditor/test/browser_wa_inspector.js
 delete mode 100644 browser/devtools/webaudioeditor/test/browser_wa_params_view_edit.js
 delete mode 100644 browser/devtools/webaudioeditor/test/browser_wa_params_view_edit_error.js
 delete mode 100644 browser/devtools/webaudioeditor/test/browser_wa_params_view_events.js
 delete mode 100644 browser/devtools/webaudioeditor/test/browser_wa_params_view_mouseover.js
 create mode 100644 browser/devtools/webaudioeditor/test/browser_wa_properties-view-edit.js
 create mode 100644 browser/devtools/webaudioeditor/test/browser_wa_properties-view.js

diff --git a/browser/devtools/webaudioeditor/test/browser.ini b/browser/devtools/webaudioeditor/test/browser.ini
index 3a5cae5..30cd892 100644
--- a/browser/devtools/webaudioeditor/test/browser.ini
+++ b/browser/devtools/webaudioeditor/test/browser.ini
@@ -11,15 +11,17 @@ support-files =
 [browser_audionode-actor-get-type.js]
 [browser_audionode-actor-get-params.js]
 [browser_audionode-actor-get-param-flags.js]
 [browser_audionode-actor-is-source.js]
 [browser_webaudio-actor-simple.js]
 
 [browser_wa_first-run.js]
 
-[browser_wa_graph_click.js]
-[browser_wa_graph_render_01.js]
-[browser_wa_graph_render_02.js]
+[browser_wa_graph-click.js]
+[browser_wa_graph-render-01.js]
+[browser_wa_graph-render-02.js]
 
-[browser_wa_params_view_edit.js]
-[browser_wa_params_view_events.js]
-[browser_wa_params_view_mouseover.js]
+[browser_wa_properties-view.js]
+[browser_wa_properties-view-edit.js]
+
+[browser_wa_inspector.js]
+[browser_wa_inspector-toggle.js]
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_first-run.js b/browser/devtools/webaudioeditor/test/browser_wa_first-run.js
index 0f07d13..5fc4a27 100644
--- a/browser/devtools/webaudioeditor/test/browser_wa_first-run.js
+++ b/browser/devtools/webaudioeditor/test/browser_wa_first-run.js
@@ -1,13 +1,13 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
- * Tests if the shader editor shows the appropriate UI when opened.
+ * Tests that the reloading/onContentLoaded hooks work.
  */
 
 function spawnTest() {
   let [target, debuggee, panel] = yield initWebAudioEditor(SIMPLE_CONTEXT_URL);
   let { gFront, $ } = panel.panelWin;
 
   is($("#reload-notice").hidden, false,
     "The 'reload this page' notice should initially be visible.");
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_graph-click.js b/browser/devtools/webaudioeditor/test/browser_wa_graph-click.js
new file mode 100644
index 0000000..33d2cd8
--- /dev/null
+++ b/browser/devtools/webaudioeditor/test/browser_wa_graph-click.js
@@ -0,0 +1,53 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that the clicking on a node in the GraphView opens and sets
+ * the correct node in the InspectorView
+ */
+
+function spawnTest() {
+  let [target, debuggee, panel] = yield initWebAudioEditor(COMPLEX_CONTEXT_URL);
+  let panelWin = panel.panelWin;
+  let { gFront, $, $$, EVENTS, WebAudioInspectorView } = panelWin;
+
+  let started = once(gFront, "start-context");
+
+  reload(target);
+
+  let [actors, _] = yield Promise.all([
+    getN(gFront, "create-node", 8),
+    waitForGraphRendered(panel.panelWin, 8, 8)
+  ]);
+
+  let nodeIds = actors.map(actor => actor.actorID);
+
+  ok(!WebAudioInspectorView.isVisible(), "InspectorView hidden on start.");
+
+  click(panel.panelWin, findGraphNode(panelWin, nodeIds[1]));
+  yield once(panelWin, EVENTS.UI_INSPECTOR_TOGGLED);
+
+  ok(WebAudioInspectorView.isVisible(), "InspectorView visible after selecting a node.");
+  is(WebAudioInspectorView.getCurrentNode().id, nodeIds[1], "InspectorView has correct node set.");
+
+  click(panel.panelWin, findGraphNode(panelWin, nodeIds[2]));
+  ok(WebAudioInspectorView.isVisible(), "InspectorView still visible after selecting another node.");
+  is(WebAudioInspectorView.getCurrentNode().id, nodeIds[2], "InspectorView has correct node set on second node.");
+
+  click(panel.panelWin, findGraphNode(panelWin, nodeIds[2]));
+  is(WebAudioInspectorView.getCurrentNode().id, nodeIds[2], "Clicking the same node again works (idempotent).");
+
+  click(panel.panelWin, $("rect", findGraphNode(panelWin, nodeIds[3])));
+  is(WebAudioInspectorView.getCurrentNode().id, nodeIds[3], "Clicking on a <rect> works as expected.");
+
+  click(panel.panelWin, $("tspan", findGraphNode(panelWin, nodeIds[4])));
+  is(WebAudioInspectorView.getCurrentNode().id, nodeIds[4], "Clicking on a <tspan> works as expected.");
+
+  yield teardown(panel);
+  finish();
+}
+
+function isExpanded (view, index) {
+  let scope = view.getScopeAtIndex(index);
+  return scope.expanded;
+}
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_graph-render-01.js b/browser/devtools/webaudioeditor/test/browser_wa_graph-render-01.js
new file mode 100644
index 0000000..ae2ecd6
--- /dev/null
+++ b/browser/devtools/webaudioeditor/test/browser_wa_graph-render-01.js
@@ -0,0 +1,33 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that SVG nodes and edges were created for the Graph View.
+ */
+
+function spawnTest() {
+  let [target, debuggee, panel] = yield initWebAudioEditor(SIMPLE_CONTEXT_URL);
+  let { panelWin } = panel;
+  let { gFront, $, $$, EVENTS } = panelWin;
+
+  let started = once(gFront, "start-context");
+
+  reload(target);
+
+  let [actors] = yield Promise.all([
+    get3(gFront, "create-node"),
+    waitForGraphRendered(panelWin, 3, 2)
+  ]);
+
+  let [destId, oscId, gainId] = actors.map(actor => actor.actorID);
+
+  ok(findGraphNode(panelWin, oscId).classList.contains("type-OscillatorNode"), "found OscillatorNode with class");
+  ok(findGraphNode(panelWin, gainId).classList.contains("type-GainNode"), "found GainNode with class");
+  ok(findGraphNode(panelWin, destId).classList.contains("type-AudioDestinationNode"), "found AudioDestinationNode with class");
+  is(findGraphEdge(panelWin, oscId, gainId).toString(), "[object SVGGElement]", "found edge for osc -> gain");
+  is(findGraphEdge(panelWin, gainId, destId).toString(), "[object SVGGElement]", "found edge for gain -> dest");
+
+  yield teardown(panel);
+  finish();
+}
+
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_graph-render-02.js b/browser/devtools/webaudioeditor/test/browser_wa_graph-render-02.js
new file mode 100644
index 0000000..dadf4a7
--- /dev/null
+++ b/browser/devtools/webaudioeditor/test/browser_wa_graph-render-02.js
@@ -0,0 +1,51 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests more edge rendering for complex graphs.
+ */
+
+function spawnTest() {
+  let [target, debuggee, panel] = yield initWebAudioEditor(COMPLEX_CONTEXT_URL);
+  let { panelWin } = panel;
+  let { gFront, $, $$, EVENTS } = panelWin;
+
+  let started = once(gFront, "start-context");
+
+  reload(target);
+
+  let [actors] = yield Promise.all([
+    getN(gFront, "create-node", 8),
+    waitForGraphRendered(panelWin, 8, 8)
+  ]);
+
+  let nodeIDs = actors.map(actor => actor.actorID);
+
+  let types = ["AudioDestinationNode", "OscillatorNode", "GainNode", "ScriptProcessorNode",
+               "OscillatorNode", "GainNode", "AudioBufferSourceNode", "BiquadFilterNode"];
+
+
+  types.forEach((type, i) => {
+    ok(findGraphNode(panelWin, nodeIDs[i]).classList.contains("type-" + type), "found " + type + " with class");
+  });
+
+  let edges = [
+    [1, 2, "osc1 -> gain1"],
+    [1, 3, "osc1 -> proc"],
+    [2, 0, "gain1 -> dest"],
+    [4, 5, "osc2 -> gain2"],
+    [5, 0, "gain2 -> dest"],
+    [6, 7, "buf -> filter"],
+    [4, 7, "osc2 -> filter"],
+    [7, 0, "filter -> dest"],
+  ];
+
+  edges.forEach(([source, target, msg], i) => {
+    is(findGraphEdge(panelWin, nodeIDs[source], nodeIDs[target]).toString(), "[object SVGGElement]",
+      "found edge for " + msg);
+  });
+
+  yield teardown(panel);
+  finish();
+}
+
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_graph_click.js b/browser/devtools/webaudioeditor/test/browser_wa_graph_click.js
deleted file mode 100644
index cfe4b99..0000000
--- a/browser/devtools/webaudioeditor/test/browser_wa_graph_click.js
+++ /dev/null
@@ -1,58 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests that the ParamsList view opens the correct node when clicking
- * on the node in the GraphView
- */
-
-function spawnTest() {
-  let [target, debuggee, panel] = yield initWebAudioEditor(COMPLEX_CONTEXT_URL);
-  let panelWin = panel.panelWin;
-  let { gFront, $, $$, EVENTS, WebAudioParamView } = panelWin;
-  let gVars = WebAudioParamView._paramsView;
-
-  let started = once(gFront, "start-context");
-
-  reload(target);
-
-  let [_, nodes, _] = yield Promise.all([
-    getN(gFront, "create-node", 8),
-    getNSpread(panel.panelWin, EVENTS.UI_ADD_NODE_LIST, 8),
-    waitForGraphRendered(panel.panelWin, 8, 8)
-  ]);
-
-  let nodeIds = nodes.map(([e, id]) => id);
-
-  for (let i = 0; i < 8; i++) {
-    ok(!isExpanded(gVars, i), "no views expanded on default");
-  }
-
-  click(panel.panelWin, findGraphNode(panelWin, nodeIds[1]));
-  ok(isExpanded(gVars, 1), "params view expanded on click");
-
-  var allClosed = true;
-  for (let i = 0; i < 8; i++) {
-    if (i === 1) continue;
-    if (isExpanded(gVars, i))
-      allClosed = false;
-  }
-  ok(allClosed, "all other param views are still minimized");
-
-  click(panel.panelWin, findGraphNode(panelWin, nodeIds[2]));
-  ok(isExpanded(gVars, 2), "second params view expanded on click");
-
-  click(panel.panelWin, $("rect", findGraphNode(panelWin, nodeIds[3])));
-  ok(isExpanded(gVars, 3), "param view opens when clicking `<rect>`");
-
-  click(panel.panelWin, $("tspan", findGraphNode(panelWin, nodeIds[4])));
-  ok(isExpanded(gVars, 4), "param view opens when clicking `<tspan>`");
-
-  yield teardown(panel);
-  finish();
-}
-
-function isExpanded (view, index) {
-  let scope = view.getScopeAtIndex(index);
-  return scope.expanded;
-}
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_graph_render_01.js b/browser/devtools/webaudioeditor/test/browser_wa_graph_render_01.js
deleted file mode 100644
index 7f6deb5..0000000
--- a/browser/devtools/webaudioeditor/test/browser_wa_graph_render_01.js
+++ /dev/null
@@ -1,33 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if the shader editor shows the appropriate UI when opened.
- */
-
-function spawnTest() {
-  let [target, debuggee, panel] = yield initWebAudioEditor(SIMPLE_CONTEXT_URL);
-  let { panelWin } = panel;
-  let { gFront, $, $$, EVENTS, WebAudioParamView } = panelWin;
-  let gVars = WebAudioParamView._paramsView;
-
-  let started = once(gFront, "start-context");
-
-  reload(target);
-
-  let [[dest, osc, gain], [[_, destID], [_, oscID], [_, gainID]]] = yield Promise.all([
-    get3(gFront, "create-node"),
-    get3Spread(panelWin, EVENTS.UI_ADD_NODE_LIST),
-    waitForGraphRendered(panelWin, 3, 2)
-  ]);
-
-  ok(findGraphNode(panelWin, oscID).classList.contains("type-OscillatorNode"), "found OscillatorNode with class");
-  ok(findGraphNode(panelWin, gainID).classList.contains("type-GainNode"), "found GainNode with class");
-  ok(findGraphNode(panelWin, destID).classList.contains("type-AudioDestinationNode"), "found AudioDestinationNode with class");
-  is(findGraphEdge(panelWin, oscID, gainID).toString(), "[object SVGGElement]", "found edge for osc -> gain");
-  is(findGraphEdge(panelWin, gainID, destID).toString(), "[object SVGGElement]", "found edge for gain -> dest");
-
-  yield teardown(panel);
-  finish();
-}
-
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_graph_render_02.js b/browser/devtools/webaudioeditor/test/browser_wa_graph_render_02.js
deleted file mode 100644
index 744c52554..0000000
--- a/browser/devtools/webaudioeditor/test/browser_wa_graph_render_02.js
+++ /dev/null
@@ -1,53 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if the shader editor shows the appropriate UI when opened.
- */
-
-function spawnTest() {
-  let [target, debuggee, panel] = yield initWebAudioEditor(COMPLEX_CONTEXT_URL);
-  let { panelWin } = panel;
-  let { gFront, $, $$, EVENTS, WebAudioParamView } = panelWin;
-  let gVars = WebAudioParamView._paramsView;
-
-  let started = once(gFront, "start-context");
-
-  reload(target);
-
-  let [[dest, osc, gain], nodeIDs ]= yield Promise.all([
-    getN(gFront, "create-node", 8),
-    getNSpread(panelWin, EVENTS.UI_ADD_NODE_LIST, 8),
-    waitForGraphRendered(panelWin, 8, 8)
-  ]);
-
-  // Map result to only have ID, since we don't need the event name
-  nodeIDs = nodeIDs.map(eventResult => eventResult[1]);
-  let types = ["AudioDestinationNode", "OscillatorNode", "GainNode", "ScriptProcessorNode",
-               "OscillatorNode", "GainNode", "AudioBufferSourceNode", "BiquadFilterNode"];
-
-
-  types.forEach((type, i) => {
-    ok(findGraphNode(panelWin, nodeIDs[i]).classList.contains("type-" + type), "found " + type + " with class");
-  });
-
-  let edges = [
-    [1, 2, "osc1 -> gain1"],
-    [1, 3, "osc1 -> proc"],
-    [2, 0, "gain1 -> dest"],
-    [4, 5, "osc2 -> gain2"],
-    [5, 0, "gain2 -> dest"],
-    [6, 7, "buf -> filter"],
-    [4, 7, "osc2 -> filter"],
-    [7, 0, "filter -> dest"],
-  ];
-
-  edges.forEach(([source, target, msg], i) => {
-    is(findGraphEdge(panelWin, nodeIDs[source], nodeIDs[target]).toString(), "[object SVGGElement]",
-      "found edge for " + msg);
-  });
-
-  yield teardown(panel);
-  finish();
-}
-
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_inspector-toggle.js b/browser/devtools/webaudioeditor/test/browser_wa_inspector-toggle.js
new file mode 100644
index 0000000..8fe636b
--- /dev/null
+++ b/browser/devtools/webaudioeditor/test/browser_wa_inspector-toggle.js
@@ -0,0 +1,66 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that the inspector toggle button shows and hides
+ * the inspector panel as intended.
+ */
+
+function spawnTest() {
+  let [target, debuggee, panel] = yield initWebAudioEditor(SIMPLE_CONTEXT_URL);
+  let { panelWin } = panel;
+  let { gFront, $, $$, EVENTS, WebAudioInspectorView } = panelWin;
+  let gVars = WebAudioInspectorView._propsView;
+
+  let started = once(gFront, "start-context");
+
+  reload(target);
+
+  let [actors] = yield Promise.all([
+    get3(gFront, "create-node"),
+    waitForGraphRendered(panelWin, 3, 2)
+  ]);
+  let nodeIds = actors.map(actor => actor.actorID);
+
+  ok(!WebAudioInspectorView.isVisible(), "InspectorView hidden on start.");
+
+  // Open inspector pane
+  $("#inspector-pane-toggle").click();
+  yield once(panelWin, EVENTS.UI_INSPECTOR_TOGGLED);
+
+  ok(WebAudioInspectorView.isVisible(), "InspectorView shown after toggling.");
+
+  ok(isVisible($("#web-audio-editor-details-pane-empty")),
+    "InspectorView empty message should still be visible.");
+  ok(!isVisible($("#web-audio-editor-tabs")),
+    "InspectorView tabs view should still be hidden.");
+  is($("#web-audio-inspector-title").value, "AudioNode Inspector",
+    "Inspector should still have default title.");
+
+  // Close inspector pane
+  $("#inspector-pane-toggle").click();
+  yield once(panelWin, EVENTS.UI_INSPECTOR_TOGGLED);
+
+  ok(!WebAudioInspectorView.isVisible(), "InspectorView back to being hidden.");
+
+  // Open again to test node loading while open
+  $("#inspector-pane-toggle").click();
+  yield once(panelWin, EVENTS.UI_INSPECTOR_TOGGLED);
+
+  ok(WebAudioInspectorView.isVisible(), "InspectorView being shown.");
+  ok(!isVisible($("#web-audio-editor-tabs")),
+    "InspectorView tabs are still hidden.");
+
+  click(panelWin, findGraphNode(panelWin, nodeIds[1]));
+  yield once(panelWin, EVENTS.UI_INSPECTOR_NODE_SET);
+
+  ok(!isVisible($("#web-audio-editor-details-pane-empty")),
+    "Empty message hides even when loading node while open.");
+  ok(isVisible($("#web-audio-editor-tabs")),
+    "Switches to tab view when loading node while open.");
+  is($("#web-audio-inspector-title").value, "OscillatorNode (" + nodeIds[1] + ")",
+    "Inspector title updates when loading node while open.");
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_inspector.js b/browser/devtools/webaudioeditor/test/browser_wa_inspector.js
new file mode 100644
index 0000000..b8e2147
--- /dev/null
+++ b/browser/devtools/webaudioeditor/test/browser_wa_inspector.js
@@ -0,0 +1,60 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that inspector view opens on graph node click, and
+ * loads the correct node inside the inspector.
+ */
+
+function spawnTest() {
+  let [target, debuggee, panel] = yield initWebAudioEditor(SIMPLE_CONTEXT_URL);
+  let { panelWin } = panel;
+  let { gFront, $, $$, EVENTS, WebAudioInspectorView } = panelWin;
+  let gVars = WebAudioInspectorView._propsView;
+
+  let started = once(gFront, "start-context");
+
+  reload(target);
+
+  let [actors] = yield Promise.all([
+    get3(gFront, "create-node"),
+    waitForGraphRendered(panelWin, 3, 2)
+  ]);
+  let nodeIds = actors.map(actor => actor.actorID);
+
+  ok(!WebAudioInspectorView.isVisible(), "InspectorView hidden on start.");
+  ok(isVisible($("#web-audio-editor-details-pane-empty")),
+    "InspectorView empty message should show when no node's selected.");
+  ok(!isVisible($("#web-audio-editor-tabs")),
+    "InspectorView tabs view should be hidden when no node's selected.");
+  is($("#web-audio-inspector-title").value, "AudioNode Inspector",
+    "Inspector should have default title when empty.");
+
+  click(panelWin, findGraphNode(panelWin, nodeIds[1]));
+  // Wait for the node to be set as well as the inspector to come fully into the view
+  yield Promise.all([
+    once(panelWin, EVENTS.UI_INSPECTOR_NODE_SET),
+    once(panelWin, EVENTS.UI_INSPECTOR_TOGGLED)
+  ]);
+
+  ok(WebAudioInspectorView.isVisible(), "InspectorView shown once node selected.");
+  ok(!isVisible($("#web-audio-editor-details-pane-empty")),
+    "InspectorView empty message hidden when node selected.");
+  ok(isVisible($("#web-audio-editor-tabs")),
+    "InspectorView tabs view visible when node selected.");
+
+  is($("#web-audio-inspector-title").value, "OscillatorNode (" + nodeIds[1] + ")",
+    "Inspector should have the node title when a node is selected.");
+
+  is($("#web-audio-editor-tabs").selectedIndex, 0,
+    "default tab selected should be the parameters tab.");
+
+  click(panelWin, findGraphNode(panelWin, nodeIds[2]));
+  yield once(panelWin, EVENTS.UI_INSPECTOR_NODE_SET);
+
+  is($("#web-audio-inspector-title").value, "GainNode (" + nodeIds[2] + ")",
+    "Inspector title updates when a new node is selected.");
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_params_view_edit.js b/browser/devtools/webaudioeditor/test/browser_wa_params_view_edit.js
deleted file mode 100644
index 9a05d9e..0000000
--- a/browser/devtools/webaudioeditor/test/browser_wa_params_view_edit.js
+++ /dev/null
@@ -1,50 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if the shader editor shows the appropriate UI when opened.
- */
-
-function spawnTest() {
-  let [target, debuggee, panel] = yield initWebAudioEditor(SIMPLE_CONTEXT_URL);
-  let { gFront, $, $$, EVENTS, WebAudioParamView } = panel.panelWin;
-  let gVars = WebAudioParamView._paramsView;
-
-  let started = once(gFront, "start-context");
-
-  reload(target);
-
-  let [[dest, osc, gain], [[_, destID], [_, oscID], [_, gainID]]] = yield Promise.all([
-    get3(gFront, "create-node"),
-    get3Spread(panel.panelWin, EVENTS.UI_ADD_NODE_LIST)
-  ]);
-
-  let setAndCheck = setAndCheckVariable(panel.panelWin, gVars);
-
-  checkVariableView(gVars, 1, {
-    "type": "\"sine\"",
-    "frequency": 440,
-    "detune": 0
-  }, "default loaded string");
-
-  checkVariableView(gVars, 2, {
-    "gain": 0
-  }, "default loaded number");
-
-  yield setAndCheck(1, "type", "\"square\"", "\"square\"", "sets string as string");
-
-  yield setAndCheck(2, "gain", 0.005, 0.005, "sets number as number");
-
-  yield teardown(panel);
-  finish();
-}
-
-function setAndCheckVariable (panelWin, gVars) {
-  return Task.async(function (varNum, prop, value, expected, desc) {
-    yield modifyVariableView(panelWin, gVars, varNum, prop, value);
-    var props = {};
-    props[prop] = expected;
-    checkVariableView(gVars, varNum, props, desc);
-  });
-}
-
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_params_view_edit_error.js b/browser/devtools/webaudioeditor/test/browser_wa_params_view_edit_error.js
deleted file mode 100644
index 033d02e..0000000
--- a/browser/devtools/webaudioeditor/test/browser_wa_params_view_edit_error.js
+++ /dev/null
@@ -1,33 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if the shader editor shows the appropriate UI when opened.
- */
-
-function spawnTest() {
-  let [target, debuggee, panel] = yield initWebAudioEditor(SIMPLE_CONTEXT_URL);
-  let { gFront, $, $$, EVENTS, WebAudioParamView } = panel.panelWin;
-  let gVars = WebAudioParamView._paramsView;
-
-  let started = once(gFront, "start-context");
-
-  reload(target);
-
-  let [[dest, osc, gain], [[_, destID], [_, oscID], [_, gainID]]] = yield Promise.all([
-    get3(gFront, "create-node"),
-    get3Spread(panel.panelWin, EVENTS.UI_ADD_NODE_LIST)
-  ]);
-
-  yield modifyVariableView(panel.panelWin, gVars, 1, "frequency", "invalid-frequency").then(null, (message) => {
-    ok(true, "Correctly fires EVENTS.UI_SET_PARAM_ERROR");
-  });
-
-  checkVariableView(gVars, 1, {
-    "frequency": 1000
-  });
-
-  yield teardown(panel);
-  finish();
-}
-
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_params_view_events.js b/browser/devtools/webaudioeditor/test/browser_wa_params_view_events.js
deleted file mode 100644
index 5ba9c4a..0000000
--- a/browser/devtools/webaudioeditor/test/browser_wa_params_view_events.js
+++ /dev/null
@@ -1,27 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if the shader editor shows the appropriate UI when opened.
- */
-
-function spawnTest() {
-  let [target, debuggee, panel] = yield initWebAudioEditor(SIMPLE_CONTEXT_URL);
-  let { gFront, $, $$, EVENTS } = panel.panelWin;
-
-  let started = once(gFront, "start-context");
-
-  reload(target);
-
-  let [[dest, osc, gain], [[_, destID], [_, oscID], [_, gainID]]] = yield Promise.all([
-    get3(gFront, "create-node"),
-    get3Spread(panel.panelWin, EVENTS.UI_ADD_NODE_LIST)
-  ]);
-
-  is(dest.actorID, destID, "EVENTS.UI_ADD_NODE_LIST fired for node with ID");
-  is(osc.actorID, oscID, "EVENTS.UI_ADD_NODE_LIST fired for node with ID");
-  is(gain.actorID, gainID, "EVENTS.UI_ADD_NODE_LIST fired for node with ID");
-
-  yield teardown(panel);
-  finish();
-}
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_params_view_mouseover.js b/browser/devtools/webaudioeditor/test/browser_wa_params_view_mouseover.js
deleted file mode 100644
index 48e98be..0000000
--- a/browser/devtools/webaudioeditor/test/browser_wa_params_view_mouseover.js
+++ /dev/null
@@ -1,42 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if the shader editor shows the appropriate UI when opened.
- */
-
-function spawnTest() {
-  let [target, debuggee, panel] = yield initWebAudioEditor(COMPLEX_CONTEXT_URL);
-  let { gFront, $, $$, EVENTS, WebAudioParamView } = panel.panelWin;
-  let gVars = WebAudioParamView._paramsView;
-
-  let started = once(gFront, "start-context");
-
-  reload(target);
-
-  yield Promise.all([
-    getN(gFront, "create-node", 8),
-    getNSpread(panel.panelWin, EVENTS.UI_ADD_NODE_LIST, 8),
-    waitForGraphRendered(panel.panelWin, 8, 8)
-  ]);
-
-  let $items = $$(".variables-view-scope");
-  let $graphNodes = $$(".nodes > g");
-
-  Array.prototype.forEach.call($items, $item => {
-    mouseOver(panel.panelWin, $(".devtools-toolbar", $item));
-    // Get actorID from id of variable scope
-    let id = $item.id.match(/\(([^\)]*)\)/)[1];
-  
-    // Go over all graph nodes and check only the selected one is highlighted
-    Array.prototype.forEach.call($graphNodes, $node => {
-      let shouldBeSelected = id === $node.getAttribute("data-id");
-      ok($node.classList.contains("selected") === shouldBeSelected,
-        "graph node correctly " + (shouldBeSelected ? "" : "not ") + "highlighted on param view mouseover");
-    });
-  });
-
-  yield teardown(panel);
-  finish();
-}
-
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_properties-view-edit.js b/browser/devtools/webaudioeditor/test/browser_wa_properties-view-edit.js
new file mode 100644
index 0000000..3816f8c
--- /dev/null
+++ b/browser/devtools/webaudioeditor/test/browser_wa_properties-view-edit.js
@@ -0,0 +1,65 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that properties are updated when modifying the VariablesView.
+ */
+
+function spawnTest() {
+  let [target, debuggee, panel] = yield initWebAudioEditor(SIMPLE_CONTEXT_URL);
+  let { panelWin } = panel;
+  let { gFront, $, $$, EVENTS, WebAudioInspectorView } = panelWin;
+  let gVars = WebAudioInspectorView._propsView;
+
+  let started = once(gFront, "start-context");
+
+  reload(target);
+
+  let [actors] = yield Promise.all([
+    get3(gFront, "create-node"),
+    waitForGraphRendered(panelWin, 3, 2)
+  ]);
+  let nodeIds = actors.map(actor => actor.actorID);
+
+  click(panelWin, findGraphNode(panelWin, nodeIds[1]));
+  // Wait for the node to be set as well as the inspector to come fully into the view
+  yield Promise.all([
+    once(panelWin, EVENTS.UI_INSPECTOR_NODE_SET),
+    once(panelWin, EVENTS.UI_INSPECTOR_TOGGLED)
+  ]);
+
+  let setAndCheck = setAndCheckVariable(panelWin, gVars);
+
+  checkVariableView(gVars, 0, {
+    "type": "\"sine\"",
+    "frequency": 440,
+    "detune": 0
+  }, "default loaded string");
+
+  click(panelWin, findGraphNode(panelWin, nodeIds[2]));
+  yield once(panelWin, EVENTS.UI_INSPECTOR_NODE_SET);
+  checkVariableView(gVars, 0, {
+    "gain": 0
+  }, "default loaded number");
+
+  click(panelWin, findGraphNode(panelWin, nodeIds[1]));
+  yield once(panelWin, EVENTS.UI_INSPECTOR_NODE_SET);
+  yield setAndCheck(0, "type", "square", "\"square\"", "sets string as string");
+
+  click(panelWin, findGraphNode(panelWin, nodeIds[2]));
+  yield once(panelWin, EVENTS.UI_INSPECTOR_NODE_SET);
+  yield setAndCheck(0, "gain", 0.005, 0.005, "sets number as number");
+
+  yield teardown(panel);
+  finish();
+}
+
+function setAndCheckVariable (panelWin, gVars) {
+  return Task.async(function (varNum, prop, value, expected, desc) {
+    yield modifyVariableView(panelWin, gVars, varNum, prop, value);
+    var props = {};
+    props[prop] = expected;
+    checkVariableView(gVars, varNum, props, desc);
+  });
+}
+
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_properties-view.js b/browser/devtools/webaudioeditor/test/browser_wa_properties-view.js
new file mode 100644
index 0000000..0421de6
--- /dev/null
+++ b/browser/devtools/webaudioeditor/test/browser_wa_properties-view.js
@@ -0,0 +1,43 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that params view shows params when they exist, and are hidden otherwise.
+ */
+
+function spawnTest() {
+  let [target, debuggee, panel] = yield initWebAudioEditor(SIMPLE_CONTEXT_URL);
+  let { panelWin } = panel;
+  let { gFront, $, $$, EVENTS, WebAudioInspectorView } = panelWin;
+  let gVars = WebAudioInspectorView._propsView;
+
+  let started = once(gFront, "start-context");
+
+  reload(target);
+
+  let [actors] = yield Promise.all([
+    get3(gFront, "create-node"),
+    waitForGraphRendered(panelWin, 3, 2)
+  ]);
+  let nodeIds = actors.map(actor => actor.actorID);
+
+  // Gain node
+  click(panelWin, findGraphNode(panelWin, nodeIds[2]));
+  yield once(panelWin, EVENTS.UI_INSPECTOR_NODE_SET);
+
+  ok(isVisible($("#properties-tabpanel-content")), "Parameters shown when they exist.");
+  ok(!isVisible($("#properties-tabpanel-content-empty")),
+    "Empty message hidden when AudioParams exist.");
+
+  // Destination node
+  click(panelWin, findGraphNode(panelWin, nodeIds[0]));
+  yield once(panelWin, EVENTS.UI_INSPECTOR_NODE_SET);
+
+  ok(!isVisible($("#properties-tabpanel-content")),
+    "Parameters hidden when they don't exist.");
+  ok(isVisible($("#properties-tabpanel-content-empty")),
+    "Empty message shown when no AudioParams exist.");
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/webaudioeditor/test/head.js b/browser/devtools/webaudioeditor/test/head.js
index 5863381..d9d6f6b 100644
--- a/browser/devtools/webaudioeditor/test/head.js
+++ b/browser/devtools/webaudioeditor/test/head.js
@@ -207,16 +207,17 @@ function waitForGraphRendered (front, nodeCount, edgeCount) {
       front.off(eventName, onGraphRendered);
       deferred.resolve();
     }
   });
   return deferred.promise;
 }
 
 function checkVariableView (view, index, hash, description = "") {
+  info("Checking Variable View");
   let scope = view.getScopeAtIndex(index);
   let variables = Object.keys(hash);
   variables.forEach(variable => {
     let aVar = scope.get(variable);
     is(aVar.target.querySelector(".name").getAttribute("value"), variable,
       "Correct property name for " + variable);
     is(aVar.target.querySelector(".value").getAttribute("value"), hash[variable],
       "Correct property value of " + hash[variable] + " for " + variable + " " + description);
@@ -224,55 +225,46 @@ function checkVariableView (view, index, hash, description = "") {
 }
 
 function modifyVariableView (win, view, index, prop, value) {
   let deferred = Promise.defer();
   let scope = view.getScopeAtIndex(index);
   let aVar = scope.get(prop);
   scope.expand();
 
+  win.on(win.EVENTS.UI_SET_PARAM, handleSetting);
+  win.on(win.EVENTS.UI_SET_PARAM_ERROR, handleSetting);
+
+  // Focus and select the variable to begin editing
+  win.focus();
+  aVar.focus();
+  EventUtils.sendKey("RETURN", win);
+
   // Must wait for the scope DOM to be available to receive
   // events
   executeSoon(() => {
-    let varValue = aVar.target.querySelector(".title > .value");
-    EventUtils.sendMouseEvent({ type: "mousedown" }, varValue, win);
-
-    win.on(win.EVENTS.UI_SET_PARAM, handleSetting);
-    win.on(win.EVENTS.UI_SET_PARAM_ERROR, handleSetting);
-
     info("Setting " + value + " for " + prop + "....");
-    let varInput = aVar.target.querySelector(".title > .element-value-input");
-    setText(varInput, value);
+    for (let c of (value + "")) {
+      EventUtils.synthesizeKey(c, {}, win);
+    }
     EventUtils.sendKey("RETURN", win);
   });
 
   function handleSetting (eventName) {
     win.off(win.EVENTS.UI_SET_PARAM, handleSetting);
     win.off(win.EVENTS.UI_SET_PARAM_ERROR, handleSetting);
     if (eventName === win.EVENTS.UI_SET_PARAM)
       deferred.resolve();
     if (eventName === win.EVENTS.UI_SET_PARAM_ERROR)
       deferred.reject();
   }
 
   return deferred.promise;
 }
 
-function clearText (aElement) {
-  info("Clearing text...");
-  aElement.focus();
-  aElement.value = "";
-}
-
-function setText (aElement, aText) {
-  clearText(aElement);
-  info("Setting text: " + aText);
-  aElement.value = aText;
-}
-
 function findGraphEdge (win, source, target) {
   let selector = ".edgePaths .edgePath[data-source='" + source + "'][data-target='" + target + "']";
   return win.document.querySelector(selector);
 }
 
 function findGraphNode (win, node) {
   let selector = ".nodes > g[data-id='" + node + "']";
   return win.document.querySelector(selector);
@@ -281,16 +273,30 @@ function findGraphNode (win, node) {
 function click (win, element) {
   EventUtils.sendMouseEvent({ type: "click" }, element, win);
 }
 
 function mouseOver (win, element) {
   EventUtils.sendMouseEvent({ type: "mouseover" }, element, win);
 }
 
+function isVisible (element) {
+  return !element.getAttribute("hidden");
+}
+
+/**
+ * Used in debugging, returns a promise that resolves in `n` milliseconds.
+ */
+function wait (n) {
+  let { promise, resolve } = Promise.defer();
+  setTimeout(resolve, n);
+  info("Waiting " + n/1000 + " seconds.");
+  return promise;
+}
+
 /**
  * List of audio node properties to test against expectations of the AudioNode actor
  */
 
 const NODE_PROPERTIES = {
   "OscillatorNode": ["type", "frequency", "detune"],
   "GainNode": ["gain"],
   "DelayNode": ["delayTime"],
diff --git a/browser/devtools/webaudioeditor/webaudioeditor-controller.js b/browser/devtools/webaudioeditor/webaudioeditor-controller.js
index d13e0aa..2454cb7 100644
--- a/browser/devtools/webaudioeditor/webaudioeditor-controller.js
+++ b/browser/devtools/webaudioeditor/webaudioeditor-controller.js
@@ -11,16 +11,18 @@ Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
 
 // Override DOM promises with Promise.jsm helpers
 const { defer, all } = Cu.import("resource://gre/modules/Promise.jsm", {}).Promise;
 
 const { Task } = Cu.import("resource://gre/modules/Task.jsm", {});
 const require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const STRINGS_URI = "chrome://browser/locale/devtools/webaudioeditor.properties"
+const L10N = new ViewHelpers.L10N(STRINGS_URI);
+
 let { console } = Cu.import("resource://gre/modules/devtools/Console.jsm", {});
 
 // The panel's window global is an EventEmitter firing the following events:
 const EVENTS = {
   // Fired when the first AudioNode has been created, signifying
   // that the AudioContext is being used and should be tracked via the editor.
   START_CONTEXT: "WebAudioEditor:StartContext",
 
@@ -37,18 +39,27 @@ const EVENTS = {
 
   // When the UI is reset from tab navigation.
   UI_RESET: "WebAudioEditor:UIReset",
 
   // When a param has been changed via the UI and successfully
   // pushed via the actor to the raw audio node.
   UI_SET_PARAM: "WebAudioEditor:UISetParam",
 
-  // When an audio node is added to the list pane.
-  UI_ADD_NODE_LIST: "WebAudioEditor:UIAddNodeList",
+  // When a node is to be set in the InspectorView.
+  UI_SELECT_NODE: "WebAudioEditor:UISelectNode",
+
+  // When the inspector is finished setting a new node.
+  UI_INSPECTOR_NODE_SET: "WebAudioEditor:UIInspectorNodeSet",
+
+  // When the inspector is finished rendering in or out of view.
+  UI_INSPECTOR_TOGGLED: "WebAudioEditor:UIInspectorToggled",
+
+  // When an audio node is finished loading in the Properties tab.
+  UI_PROPERTIES_TAB_RENDERED: "WebAudioEditor:UIPropertiesTabRendered",
 
   // When the Audio Context graph finishes rendering.
   // Is called with two arguments, first representing number of nodes
   // rendered, second being the number of edges rendered.
   UI_GRAPH_RENDERED: "WebAudioEditor:UIGraphRendered"
 };
 
 /**
@@ -101,28 +112,28 @@ AudioNodeView.prototype.getParams = function () {
 
 /**
  * Initializes the web audio editor views
  */
 function startupWebAudioEditor() {
   return all([
     WebAudioEditorController.initialize(),
     WebAudioGraphView.initialize(),
-    WebAudioParamView.initialize()
+    WebAudioInspectorView.initialize(),
   ]);
 }
 
 /**
  * Destroys the web audio editor controller and views.
  */
 function shutdownWebAudioEditor() {
   return all([
     WebAudioEditorController.destroy(),
     WebAudioGraphView.destroy(),
-    WebAudioParamView.destroy()
+    WebAudioInspectorView.destroy(),
   ]);
 }
 
 /**
  * Functions handling target-related lifetime events.
  */
 let WebAudioEditorController = {
   /**
@@ -176,17 +187,17 @@ let WebAudioEditorController = {
       case "will-navigate": {
         Task.spawn(function() {
           // Make sure the backend is prepared to handle audio contexts.
           yield gFront.setup({ reload: false });
 
           // Reset UI to show "Waiting for Audio Context..." and clear out
           // current UI.
           WebAudioGraphView.resetUI();
-          WebAudioParamView.resetUI();
+          WebAudioInspectorView.resetUI();
 
           // Clear out stored audio nodes
           AudioNodes.length = 0;
           AudioNodeConnections.clear();
         }).then(() => window.emit(EVENTS.UI_RESET));
         break;
       }
       case "navigate": {
diff --git a/browser/devtools/webaudioeditor/webaudioeditor-view.js b/browser/devtools/webaudioeditor/webaudioeditor-view.js
index 6baad9f..37fc75f 100644
--- a/browser/devtools/webaudioeditor/webaudioeditor-view.js
+++ b/browser/devtools/webaudioeditor/webaudioeditor-view.js
@@ -2,31 +2,37 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 Cu.import("resource:///modules/devtools/VariablesView.jsm");
 Cu.import("resource:///modules/devtools/VariablesViewController.jsm");
 const { debounce } = require("sdk/lang/functional");
 
+// Strings for rendering
+const EXPAND_INSPECTOR_STRING = L10N.getStr("expandInspector");
+const COLLAPSE_INSPECTOR_STRING = L10N.getStr("collapseInspector");
+
+// Store width as a preference rather than hardcode
+// TODO bug 1009056
+const INSPECTOR_WIDTH = 300;
+
 // Globals for d3 stuff
 // Width/height in pixels of SVG graph
 // TODO investigate to see how this works in other host types bug 994257
 const WIDTH = 1000;
 const HEIGHT = 400;
 
 // Sizes of SVG arrows in graph
 const ARROW_HEIGHT = 5;
 const ARROW_WIDTH = 8;
 
 const GRAPH_DEBOUNCE_TIMER = 100;
 
 const GENERIC_VARIABLES_VIEW_SETTINGS = {
-  lazyEmpty: true,
-  lazyEmptyDelay: 10, // ms
   searchEnabled: false,
   editableValueTooltip: "",
   editableNameTooltip: "",
   preventDisableOnChange: true,
   preventDescriptorModifiers: true,
   eval: () => {}
 };
 
@@ -220,175 +226,272 @@ let WebAudioGraphView = {
    *        Click event.
    */
   _onGraphNodeClick: function (e) {
     let node = findGraphNodeParent(e.target);
     // If node not found (clicking outside of an audio node in the graph),
     // then ignore this event
     if (!node)
       return;
-    WebAudioParamView.focusNode(node.getAttribute('data-id'));
+
+    window.emit(EVENTS.UI_SELECT_NODE, node.getAttribute('data-id'));
   }
 };
 
-let WebAudioParamView = {
-  _paramsView: null,
+let WebAudioInspectorView = {
+
+  _propsView: null,
+
+  _currentNode: null,
+
+  _inspectorPane: null,
+  _inspectorPaneToggleButton: null,
+  _tabsPane: null,
 
   /**
    * Initialization function called when the tool starts up.
    */
   initialize: function () {
-    this._paramsView = new VariablesView($("#web-audio-inspector-content"), GENERIC_VARIABLES_VIEW_SETTINGS);
-    this._paramsView.eval = this._onEval.bind(this);
-    window.on(EVENTS.CREATE_NODE, this.addNode = this.addNode.bind(this));
-    window.on(EVENTS.DESTROY_NODE, this.removeNode = this.removeNode.bind(this));
+    this._inspectorPane = $("#web-audio-inspector");
+    this._inspectorPaneToggleButton = $("#inspector-pane-toggle");
+    this._tabsPane = $("#web-audio-editor-tabs");
+
+    // Hide inspector view on startup
+    this._inspectorPane.setAttribute("width", INSPECTOR_WIDTH);
+    this.toggleInspector(false);
+
+    this._onEval = this._onEval.bind(this);
+    this._onNodeSelect = this._onNodeSelect.bind(this);
+    this._onTogglePaneClick = this._onTogglePaneClick.bind(this);
+
+    this._inspectorPaneToggleButton.addEventListener("mousedown", this._onTogglePaneClick, false);
+    this._propsView = new VariablesView($("#properties-tabpanel-content"), GENERIC_VARIABLES_VIEW_SETTINGS);
+    this._propsView.eval = this._onEval;
+
+    window.on(EVENTS.UI_SELECT_NODE, this._onNodeSelect);
   },
 
   /**
    * Destruction function called when the tool cleans up.
    */
-  destroy: function() {
-    window.off(EVENTS.CREATE_NODE, this.addNode);
-    window.off(EVENTS.DESTROY_NODE, this.removeNode);
+  destroy: function () {
+    this._inspectorPaneToggleButton.removeEventListener("mousedown", this._onTogglePaneClick);
+    window.off(EVENTS.UI_SELECT_NODE, this._onNodeSelect);
+
+    this._inspectorPane = null;
+    this._inspectorPaneToggleButton = null;
+    this._tabsPane = null;
+  },
+
+  /**
+   * Toggles the visibility of the AudioNode Inspector.
+   *
+   * @param boolean visible
+   *        A flag indicating whether or not the AudioNode Inspector should be shown.
+   * @param number index
+   *        Index of the tab that should be selected when shown.
+   */
+  toggleInspector: function (visible, index) {
+    let pane = this._inspectorPane;
+    let button = this._inspectorPaneToggleButton;
+
+    let flags = {
+      visible: visible,
+      animated: true,
+      delayed: true,
+      callback: () => window.emit(EVENTS.UI_INSPECTOR_TOGGLED, visible)
+    };
+
+    ViewHelpers.togglePane(flags, pane);
+
+    if (flags.visible) {
+      button.removeAttribute("pane-collapsed");
+      button.setAttribute("tooltiptext", COLLAPSE_INSPECTOR_STRING);
+    }
+    else {
+      button.setAttribute("pane-collapsed", "");
+      button.setAttribute("tooltiptext", EXPAND_INSPECTOR_STRING);
+    }
+
+    if (index != undefined) {
+      pane.selectedIndex = index;
+    }
   },
 
   /**
-   * Empties out the params view.
+   * Returns a boolean indicating whether or not the AudioNode inspector
+   * is currently being shown.
+   */
+  isVisible: function () {
+    return !this._inspectorPane.hasAttribute("pane-collapsed");
+  },
+
+  /**
+   * Takes a AudioNodeView `node` and sets it as the current
+   * node and scaffolds the inspector view based off of the new node.
+   */
+  setCurrentAudioNode: function (node) {
+    this._currentNode = node || null;
+
+    // If no node selected, set the inspector back to "no AudioNode selected"
+    // view.
+    if (!node) {
+      $("#web-audio-editor-details-pane-empty").removeAttribute("hidden");
+      $("#web-audio-editor-tabs").setAttribute("hidden", "true");
+      window.emit(EVENTS.UI_INSPECTOR_NODE_SET, null);
+    }
+    // Otherwise load up the tabs view and hide the empty placeholder
+    else {
+      $("#web-audio-editor-details-pane-empty").setAttribute("hidden", "true");
+      $("#web-audio-editor-tabs").removeAttribute("hidden");
+      this._setTitle();
+      this._buildPropertiesView()
+        .then(() => window.emit(EVENTS.UI_INSPECTOR_NODE_SET, this._currentNode.id));
+    }
+  },
+
+  /**
+   * Returns the current AudioNodeView.
+   */
+  getCurrentNode: function () {
+    return this._currentNode;
+  },
+
+  /**
+   * Empties out the props view.
    */
   resetUI: function () {
-    this._paramsView.empty();
+    this._propsView.empty();
+    // Set current node to empty to load empty view
+    this.setCurrentAudioNode();
+  },
+
+  /**
+   * Sets the title of the Inspector view
+   */
+  _setTitle: function () {
+    let node = this._currentNode;
+    let title = node.type + " (" + node.id + ")";
+    $("#web-audio-inspector-title").setAttribute("value", title);
   },
 
   /**
-   * Takes an `id` and focuses and expands the corresponding scope.
+   * Reconstructs the `Properties` tab in the inspector
+   * with the `this._currentNode` as it's source.
    */
-  focusNode: function (id) {
-    let scope = this._getScopeByID(id);
-    if (!scope) return;
+  _buildPropertiesView: Task.async(function* () {
+    let propsView = this._propsView;
+    let node = this._currentNode;
+    propsView.empty();
+
+    let audioParamsScope = propsView.addScope("AudioParams");
+    let props = yield node.getParams();
+
+    // Disable AudioParams VariableView expansion
+    // when there are no props i.e. AudioDestinationNode
+    this._togglePropertiesView(!!props.length);
 
-    scope.focus();
-    scope.expand();
+    props.forEach(({ param, value }) => {
+      let descriptor = { value: value };
+      audioParamsScope.addItem(param, descriptor);
+    });
+
+    audioParamsScope.expanded = true;
+
+    window.emit(EVENTS.UI_PROPERTIES_TAB_RENDERED, node.id);
+  }),
+
+  _togglePropertiesView: function (show) {
+    let propsView = $("#properties-tabpanel-content");
+    let emptyView = $("#properties-tabpanel-content-empty");
+    (show ? propsView : emptyView).removeAttribute("hidden");
+    (show ? emptyView : propsView).setAttribute("hidden", "true");
   },
 
   /**
-   * Executed when an audio param is changed in the UI.
+   * Returns the scope for AudioParams in the
+   * VariablesView.
+   *
+   * @return Scope
+   */
+  _getAudioPropertiesScope: function () {
+    return this._propsView.getScopeAtIndex(0);
+  },
+
+  /**
+   * Event handlers
+   */
+
+  /**
+   * Executed when an audio prop is changed in the UI.
    */
   _onEval: Task.async(function* (variable, value) {
     let ownerScope = variable.ownerView;
-    let node = getViewNodeById(ownerScope.actorID);
+    let node = this._currentNode;
     let propName = variable.name;
     let error;
 
     // Cast value to proper type
     try {
       value = JSON.parse(value);
       error = yield node.actor.setParam(propName, value);
     }
     catch (e) {
       error = e;
     }
 
-    // TODO figure out how to handle and display set param errors
-    // and enable `test/brorwser_wa_params_view_edit_error.js`
+    // TODO figure out how to handle and display set prop errors
+    // and enable `test/brorwser_wa_properties-view-edit.js`
     // Bug 994258
     if (!error) {
       ownerScope.get(propName).setGrip(value);
       window.emit(EVENTS.UI_SET_PARAM, node.id, propName, value);
     } else {
       window.emit(EVENTS.UI_SET_PARAM_ERROR, node.id, propName, value);
     }
   }),
 
   /**
-   * Takes an `id` and returns the corresponding variables scope.
-   */
-  _getScopeByID: function (id) {
-    let view = this._paramsView;
-    for (let i = 0; i < view._store.length; i++) {
-      let scope = view.getScopeAtIndex(i);
-      if (scope.actorID === id)
-        return scope;
-    }
-    return null;
-  },
-
-  /**
-   * Called when hovering over a variable scope.
+   * Called on EVENTS.UI_SELECT_NODE, and takes an actorID `id`
+   * and calls `setCurrentAudioNode` to scaffold the inspector view.
    */
-  _onMouseOver: function (e) {
-    let id = WebAudioParamView._getScopeID(this);
+  _onNodeSelect: function (_, id) {
+    this.setCurrentAudioNode(getViewNodeById(id));
 
-    if (!id) return;
-
-    WebAudioGraphView.focusNode(id);
-  },
-
-  /**
-   * Called when hovering out of a variable scope.
-   */
-  _onMouseOut: function (e) {
-    let id = WebAudioParamView._getScopeID(this);
-
-    if (!id) return;
-
-    WebAudioGraphView.blurNode(id);
+    // Ensure inspector is visible when selecting a new node
+    this.toggleInspector(true);
   },
 
   /**
-   * Uses in event handlers, takes an element `$el` and finds the
-   * associated actor ID with that variable scope to be used in other contexts.
+   * Called when clicking on the toggling the inspector into view.
    */
-  _getScopeID: function ($el) {
-    let match = $el.parentNode.id.match(/\(([^\)]*)\)/);
-    return match ? match[1] : null;
+  _onTogglePaneClick: function () {
+    this.toggleInspector(!this.isVisible());
   },
 
   /**
-   * Called when `CREATE_NODE` is fired to update the params view with the
-   * freshly created audio node.
-   */
-  addNode: Task.async(function* (_, id) {
-    let viewNode = getViewNodeById(id);
-    let type = viewNode.type;
-
-    let audioParamsTitle = type + " (" + id + ")";
-    let paramsView = this._paramsView;
-    let paramsScopeView = paramsView.addScope(audioParamsTitle);
-
-    paramsScopeView.actorID = id;
-    paramsScopeView.expanded = false;
-
-    paramsScopeView.addEventListener("mouseover", this._onMouseOver, false);
-    paramsScopeView.addEventListener("mouseout", this._onMouseOut, false);
-
-    let params = yield viewNode.getParams();
-    params.forEach(({ param, value }) => {
-      let descriptor = { value: value };
-      paramsScopeView.addItem(param, descriptor);
-    });
-
-    window.emit(EVENTS.UI_ADD_NODE_LIST, id);
-  }),
-
-  /**
-   * Called when `DESTROY_NODE` is fired to remove the node from params view.
+   * Called when `DESTROY_NODE` is fired to remove the node from props view.
    * TODO bug 994263, dependent on node GC events
    */
   removeNode: Task.async(function* (viewNode) {
 
   })
 };
 
 /**
  * Takes an element in an SVG graph and iterates over
  * ancestors until it finds the graph node container. If not found,
  * returns null.
  */
 
 function findGraphNodeParent (el) {
+  // Some targets may not contain `classList` property
+  if (!el.classList)
+    return null;
+
   while (!el.classList.contains("nodes")) {
     if (el.classList.contains("audionode"))
       return el;
     else
       el = el.parentNode;
   }
   return null;
 }
diff --git a/browser/devtools/webaudioeditor/webaudioeditor.xul b/browser/devtools/webaudioeditor/webaudioeditor.xul
index 220a82b..5a99e7e 100644
--- a/browser/devtools/webaudioeditor/webaudioeditor.xul
+++ b/browser/devtools/webaudioeditor/webaudioeditor.xul
@@ -42,29 +42,63 @@
           pack="center"
           flex="1"
           hidden="true">
       <label id="requests-menu-waiting-notice-label"
              class="plain"
              value="&webAudioEditorUI.emptyNotice;"/>
     </hbox>
 
-    <box id="content"
+    <hbox id="content"
          class="devtools-responsive-container"
          flex="1"
          hidden="true">
-      <vbox id="web-audio-inspector">
-        <vbox id="web-audio-inspector-content" flex="1"></vbox>
+      <vbox id="web-audio-content-pane" flex="1">
+        <toolbar id="web-audio-toolbar" class="devtools-toolbar">
+          <spacer flex="1"></spacer>
+          <toolbarbutton id="inspector-pane-toggle" class="devtools-toolbarbutton"
+                         tabindex="0"/>
+        </toolbar>
+        <hbox flex="1">
+          <box id="web-audio-graph" class="devtools-responsive-container" flex="1">
+            <vbox flex="1">
+              <svg id="graph-svg" flex="1" viewBox="0 0 1000 500"
+                  xmlns="http://www.w3.org/2000/svg"
+                  xmlns:xlink="http://www.w3.org/1999/xlink">
+                <g id="graph-target" transform="translate(20,20)"/>
+              </svg>
+            </vbox>
+          </box>
+        </hbox>
       </vbox>
       <splitter class="devtools-side-splitter"/>
-      <box id="web-audio-graph" class="devtools-responsive-container" flex="1">
-        <vbox flex="1">
-          <svg id="graph-svg" flex="1" viewBox="0 0 1000 500"
-              xmlns="http://www.w3.org/2000/svg"
-              xmlns:xlink="http://www.w3.org/1999/xlink">
-            <g id="graph-target" transform="translate(20,20)"/>
-          </svg>
-        </vbox>
-      </box>
-    </box>
+      <vbox id="web-audio-inspector" hidden="true">
+        <hbox class="devtools-toolbar">
+          <label id="web-audio-inspector-title" value="&webAudioEditorUI.inspectorTitle;"></label>
+        </hbox>
+        <deck id="web-audio-editor-details-pane" flex="1">
+          <vbox id="web-audio-editor-details-pane-empty" flex="1">
+            <label value="&webAudioEditorUI.inspectorEmpty;"></label>
+          </vbox>
+          <tabbox id="web-audio-editor-tabs"
+                  class="devtools-sidebar-tabs"
+                  handleCtrlTab="false">
+            <tabs>
+              <tab id="properties-tab"
+                   label="&webAudioEditorUI.tab.properties;"/>
+            </tabs>
+            <tabpanels flex="1">
+              <tabpanel id="properties-tabpanel"
+                        class="tabpanel-content">
+                <vbox id="properties-tabpanel-content" flex="1">
+                </vbox>
+                <vbox id="properties-tabpanel-content-empty" flex="1" hidden="true">
+                  <label value="&webAudioEditorUI.propertiesEmpty;"></label>
+                </vbox>
+              </tabpanel>
+            </tabpanels>
+          </tabbox>
+        </deck>
+      </vbox>
+    </hbox>
   </vbox>
 
 </window>
diff --git a/browser/locales/en-US/chrome/browser/devtools/webaudioeditor.dtd b/browser/locales/en-US/chrome/browser/devtools/webaudioeditor.dtd
index 9af258d..7c2d14f 100644
--- a/browser/locales/en-US/chrome/browser/devtools/webaudioeditor.dtd
+++ b/browser/locales/en-US/chrome/browser/devtools/webaudioeditor.dtd
@@ -17,8 +17,24 @@
 
 <!-- LOCALIZATION NOTE (webAudioEditorUI.reloadNotice2): This is the label shown
   -  along with the button that triggers a page refresh. -->
 <!ENTITY webAudioEditorUI.reloadNotice2   "the page to view and edit the audio context.">
 
 <!-- LOCALIZATION NOTE (webAudioEditorUI.emptyNotice): This is the label shown
   -  while the page is refreshing and the tool waits for a audio context. -->
 <!ENTITY webAudioEditorUI.emptyNotice     "Waiting for an audio context to be created…">
+
+<!-- LOCALIZATION NOTE (webAudioEditorUI.tab.properties): This is the label shown
+  -  for the properties tab view. -->
+<!ENTITY webAudioEditorUI.tab.properties  "Parameters">
+
+<!-- LOCALIZATION NOTE (webAudioEditorUI.inspectorTitle): This is the title for the
+  -  AudioNode inspector view. -->
+<!ENTITY webAudioEditorUI.inspectorTitle  "AudioNode Inspector">
+
+<!-- LOCALIZATION NOTE (webAudioEditorUI.inspectorEmpty): This is the title for the
+  -  AudioNode inspector view empty message. -->
+<!ENTITY webAudioEditorUI.inspectorEmpty  "No AudioNode selected.">
+
+<!-- LOCALIZATION NOTE (webAudioEditorUI.propertiesEmpty): This is the title for the
+  -  AudioNode inspector view properties tab empty message. -->
+<!ENTITY webAudioEditorUI.propertiesEmpty "Node does not have any properties.">
diff --git a/browser/locales/en-US/chrome/browser/devtools/webaudioeditor.properties b/browser/locales/en-US/chrome/browser/devtools/webaudioeditor.properties
index 5351fb1..3b1a25d 100644
--- a/browser/locales/en-US/chrome/browser/devtools/webaudioeditor.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/webaudioeditor.properties
@@ -14,8 +14,17 @@
 # This string is displayed in the title of the tab when the Web Audio Editor
 # is displayed inside the developer tools window and in the Developer Tools Menu.
 ToolboxWebAudioEditor.label=Web Audio Editor
 
 # LOCALIZATION NOTE (ToolboxWebAudioEditor.tooltip):
 # This string is displayed in the tooltip of the tab when the Web Audio Editor is
 # displayed inside the developer tools window.
 ToolboxWebAudioEditor.tooltip=Web Audio context visualizer and editor
+
+# LOCALIZATION NOTE (collapseInspector): This is the tooltip for the button
+# that collapses the inspector in the web audio tool UI.
+collapseInspector=Collapse inspector
+
+# LOCALIZATION NOTE (expandInspector): This is the tooltip for the button
+# that expands the inspector in the web audio tool UI.
+expandInspector=Expand inspector
+
diff --git a/browser/themes/shared/devtools/webaudioeditor.inc.css b/browser/themes/shared/devtools/webaudioeditor.inc.css
index 4642e88..f482ab4 100644
--- a/browser/themes/shared/devtools/webaudioeditor.inc.css
+++ b/browser/themes/shared/devtools/webaudioeditor.inc.css
@@ -121,8 +121,23 @@ text {
 }
 
 @media (min-resolution: 2dppx) {
   .web-audio-inspector .error {
     background-image: url(alerticon-warning@2x.png);
   }
 }
 
+#inspector-pane-toggle {
+  background: none;
+  box-shadow: none;
+  border: none;
+  list-style-image: url(debugger-collapse.png);
+  -moz-image-region: rect(0px,16px,16px,0px);
+}
+
+#inspector-pane-toggle[pane-collapsed] {
+  list-style-image: url(debugger-expand.png);
+}
+
+#inspector-pane-toggle:active {
+  -moz-image-region: rect(0px,32px,16px,16px);
+}
-- 
1.8.4.2

