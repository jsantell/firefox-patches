From: Jordan Santell <jsantell@gmail.com>
Date: Mon, 23 Feb 2015 12:43:49 -0800
Subject: Bug 1134079 - Supply audio node definitions directly from the client if the webaudio actor server does not support it (like on older versions of FxOS). r=vp

diff --git a/browser/devtools/webaudioeditor/controller.js b/browser/devtools/webaudioeditor/controller.js
index 2f51b69..544650a 100644
--- a/browser/devtools/webaudioeditor/controller.js
+++ b/browser/devtools/webaudioeditor/controller.js
@@ -56,18 +56,25 @@ let WebAudioEditorController = {
     gFront.on("change-param", this._onChangeParam);
     gFront.on("destroy-node", this._onDestroyNode);
 
     // Hook into theme change so we can change
     // the graph's marker styling, since we can't do this
     // with CSS
     gDevTools.on("pref-changed", this._onThemeChange);
 
-    // Store the AudioNode definitions from the WebAudioFront
-    AUDIO_NODE_DEFINITION = yield gFront.getDefinition();
+    // Store the AudioNode definitions from the WebAudioFront, if the method exists.
+    // If not, get the JSON directly. Using the actor method is preferable so the client
+    // knows exactly what methods are supported on the server.
+    let actorHasDefinition = yield gTarget.actorHasMethod("webaudio", "getDefinition");
+    if (actorHasDefinition) {
+      AUDIO_NODE_DEFINITION = yield gFront.getDefinition();
+    } else {
+      AUDIO_NODE_DEFINITION = require("devtools/server/actors/utils/audionodes.json");
+    }
   }),
 
   /**
    * Remove events emitted by the current tab target.
    */
   destroy: function() {
     telemetry.toolClosed("webaudioeditor");
     gTarget.off("will-navigate", this._onTabNavigated);
diff --git a/toolkit/devtools/server/actors/utils/audionodes.json b/toolkit/devtools/server/actors/utils/audionodes.json
new file mode 100644
index 0000000..bae3d11
--- /dev/null
+++ b/toolkit/devtools/server/actors/utils/audionodes.json
@@ -0,0 +1,107 @@
+{
+  "OscillatorNode": {
+    "properties": {
+      "type": {},
+      "frequency": {
+        "param": true
+      },
+      "detune": {
+        "param": true
+      }
+    }
+  },
+  "GainNode": {
+    "properties": { "gain": { "param": true }}
+  },
+  "DelayNode": {
+    "properties": { "delayTime": { "param": true }}
+  },
+  "AudioBufferSourceNode": {
+    "properties": {
+      "buffer": { "Buffer": true },
+      "playbackRate": {
+        "param": true
+      },
+      "loop": {},
+      "loopStart": {},
+      "loopEnd": {}
+    }
+  },
+  "ScriptProcessorNode": {
+    "properties": { "bufferSize": { "readonly": true }}
+  },
+  "PannerNode": {
+    "properties": {
+      "panningModel": {},
+      "distanceModel": {},
+      "refDistance": {},
+      "maxDistance": {},
+      "rolloffFactor": {},
+      "coneInnerAngle": {},
+      "coneOuterAngle": {},
+      "coneOuterGain": {}
+    }
+  },
+  "ConvolverNode": {
+    "properties": {
+      "buffer": { "Buffer": true },
+      "normalize": {}
+    }
+  },
+  "DynamicsCompressorNode": {
+    "properties": {
+      "threshold": { "param": true },
+      "knee": { "param": true },
+      "ratio": { "param": true },
+      "reduction": {},
+      "attack": { "param": true },
+      "release": { "param": true }
+    }
+  },
+  "BiquadFilterNode": {
+    "properties": {
+      "type": {},
+      "frequency": { "param": true },
+      "Q": { "param": true },
+      "detune": { "param": true },
+      "gain": { "param": true }
+    }
+  },
+  "WaveShaperNode": {
+    "properties": {
+      "curve": { "Float32Array": true },
+      "oversample": {}
+    }
+  },
+  "AnalyserNode": {
+    "properties": {
+      "fftSize": {},
+      "minDecibels": {},
+      "maxDecibels": {},
+      "smoothingTimeConstant": {},
+      "frequencyBinCount": { "readonly": true }
+    }
+  },
+  "AudioDestinationNode": {
+    "unbypassable": true
+  },
+  "ChannelSplitterNode": {
+    "unbypassable": true
+  },
+  "ChannelMergerNode": {
+    "unbypassable": true
+  },
+  "MediaElementAudioSourceNode": {},
+  "MediaStreamAudioSourceNode": {},
+  "MediaStreamAudioDestinationNode": {
+    "unbypassable": true,
+    "properties": {
+      "stream": { "MediaStream": true }
+    }
+  },
+  "StereoPannerNode": {
+    "properties": {
+      "pan": {}
+    }
+  }
+}
diff --git a/toolkit/devtools/server/actors/webaudio.js b/toolkit/devtools/server/actors/webaudio.js
index 88ebe58..d257b2e 100644
--- a/toolkit/devtools/server/actors/webaudio.js
+++ b/toolkit/devtools/server/actors/webaudio.js
@@ -11,17 +11,17 @@ const { Promise: promise } = Cu.import("resource://gre/modules/Promise.jsm", {})
 const events = require("sdk/event/core");
 const { on: systemOn, off: systemOff } = require("sdk/system/events");
 const protocol = require("devtools/server/protocol");
 const { CallWatcherActor, CallWatcherFront } = require("devtools/server/actors/call-watcher");
 const { ThreadActor } = require("devtools/server/actors/script");
 const AutomationTimeline = require("./utils/automation-timeline");
 const { on, once, off, emit } = events;
 const { types, method, Arg, Option, RetVal } = protocol;
-
+const AUDIO_NODE_DEFINITION = require("devtools/server/actors/utils/audionodes.json");
 const ENABLE_AUTOMATION = false;
 const AUTOMATION_GRANULARITY = 2000;
 const AUTOMATION_GRANULARITY_MAX = 6000;
 
 const AUDIO_GLOBALS = [
   "AudioContext", "AudioNode", "AudioParam"
 ];
 
@@ -37,128 +37,16 @@ const AUTOMATION_METHODS = [
   "setValueAtTime", "linearRampToValueAtTime", "exponentialRampToValueAtTime",
   "setTargetAtTime", "setValueCurveAtTime", "cancelScheduledValues"
 ];
 
 const NODE_ROUTING_METHODS = [
   "connect", "disconnect"
 ];
 
-const NODE_PROPERTIES = {
-  "OscillatorNode": {
-    "properties": {
-      "type": {},
-      "frequency": {
-        "param": true
-      },
-      "detune": {
-        "param": true
-      }
-    }
-  },
-  "GainNode": {
-    "properties": { "gain": { "param": true }}
-  },
-  "DelayNode": {
-    "properties": { "delayTime": { "param": true }}
-  },
-  // TODO deal with figuring out adding `detune` AudioParam
-  // for AudioBufferSourceNode, which is in the spec
-  // but not yet added in implementation
-  // bug 1116852
-  "AudioBufferSourceNode": {
-    "properties": {
-      "buffer": { "Buffer": true },
-      "playbackRate": {
-        "param": true
-      },
-      "loop": {},
-      "loopStart": {},
-      "loopEnd": {}
-    }
-  },
-  "ScriptProcessorNode": {
-    "properties": { "bufferSize": { "readonly": true }}
-  },
-  "PannerNode": {
-    "properties": {
-      "panningModel": {},
-      "distanceModel": {},
-      "refDistance": {},
-      "maxDistance": {},
-      "rolloffFactor": {},
-      "coneInnerAngle": {},
-      "coneOuterAngle": {},
-      "coneOuterGain": {}
-    }
-  },
-  "ConvolverNode": {
-    "properties": {
-      "buffer": { "Buffer": true },
-      "normalize": {},
-    }
-  },
-  "DynamicsCompressorNode": {
-    "properties": {
-      "threshold": { "param": true },
-      "knee": { "param": true },
-      "ratio": { "param": true },
-      "reduction": {},
-      "attack": { "param": true },
-      "release": { "param": true }
-    }
-  },
-  "BiquadFilterNode": {
-    "properties": {
-      "type": {},
-      "frequency": { "param": true },
-      "Q": { "param": true },
-      "detune": { "param": true },
-      "gain": { "param": true }
-    }
-  },
-  "WaveShaperNode": {
-    "properties": {
-      "curve": { "Float32Array": true },
-      "oversample": {}
-    }
-  },
-  "AnalyserNode": {
-    "properties": {
-      "fftSize": {},
-      "minDecibels": {},
-      "maxDecibels": {},
-      "smoothingTimeConstant": {},
-      "frequencyBinCount": { "readonly": true },
-    }
-  },
-  "AudioDestinationNode": {
-    "unbypassable": true
-  },
-  "ChannelSplitterNode": {
-    "unbypassable": true
-  },
-  "ChannelMergerNode": {
-    "unbypassable": true
-  },
-  "MediaElementAudioSourceNode": {},
-  "MediaStreamAudioSourceNode": {},
-  "MediaStreamAudioDestinationNode": {
-    "unbypassable": true,
-    "properties": {
-      "stream": { "MediaStream": true }
-    }
-  },
-  "StereoPannerNode": {
-    "properties": {
-      "pan": {}
-    }
-  }
-};
-
 /**
  * An Audio Node actor allowing communication to a specific audio node in the
  * Audio Context graph.
  */
 types.addActorType("audionode");
 let AudioNodeActor = exports.AudioNodeActor = protocol.ActorClass({
   typeName: "audionode",
 
@@ -184,17 +72,17 @@ let AudioNodeActor = exports.AudioNodeActor = protocol.ActorClass({
 
     try {
       this.type = getConstructorName(node);
     } catch (e) {
       this.type = "";
     }
 
     // Create automation timelines for all AudioParams
-    Object.keys(NODE_PROPERTIES[this.type].properties || {})
+    Object.keys(AUDIO_NODE_DEFINITION[this.type].properties || {})
       .filter(isAudioParam.bind(null, node))
       .forEach(paramName => {
         this.automation[paramName] = new AutomationTimeline(node[paramName].defaultValue);
       });
   },
 
   /**
    * Returns the name of the audio type.
@@ -247,17 +135,17 @@ let AudioNodeActor = exports.AudioNodeActor = protocol.ActorClass({
    */
   bypass: method(function (enable) {
     let node = this.node.get();
 
     if (node === null) {
       return;
     }
 
-    let bypassable = !NODE_PROPERTIES[this.type].unbypassable;
+    let bypassable = !AUDIO_NODE_DEFINITION[this.type].unbypassable;
     if (bypassable) {
       node.passThrough = enable;
     }
 
     return this.isBypassed();
   }, {
     request: { enable: Arg(0, "boolean") },
     response: { bypassed: RetVal("boolean") }
@@ -340,28 +228,28 @@ let AudioNodeActor = exports.AudioNodeActor = protocol.ActorClass({
    * Get an object containing key-value pairs of additional attributes
    * to be consumed by a front end, like if a property should be read only,
    * or is a special type (Float32Array, Buffer, etc.)
    *
    * @param String param
    *        Name of the AudioParam whose flags are desired.
    */
   getParamFlags: method(function (param) {
-    return ((NODE_PROPERTIES[this.type] || {}).properties || {})[param];
+    return ((AUDIO_NODE_DEFINITION[this.type] || {}).properties || {})[param];
   }, {
     request: { param: Arg(0, "string") },
     response: { flags: RetVal("nullable:primitive") }
   }),
 
   /**
    * Get an array of objects each containing a `param` and `value` property,
    * corresponding to a property name and current value of the audio node.
    */
   getParams: method(function (param) {
-    let props = Object.keys(NODE_PROPERTIES[this.type].properties || {});
+    let props = Object.keys(AUDIO_NODE_DEFINITION[this.type].properties || {});
     return props.map(prop =>
       ({ param: prop, value: this.getParam(prop), flags: this.getParamFlags(prop) }));
   }, {
     response: { params: RetVal("json") }
   }),
 
   /**
    * Connects this audionode to an AudioParam via `node.connect(param)`.
@@ -613,17 +501,17 @@ let WebAudioActor = exports.WebAudioActor = protocol.ActorClass({
     this.finalize();
   },
 
   /**
    * Returns definition of all AudioNodes, such as AudioParams, and
    * flags.
    */
   getDefinition: method(function () {
-    return NODE_PROPERTIES;
+    return AUDIO_NODE_DEFINITION;
   }, {
     response: { definition: RetVal("json") }
   }),
 
   /**
    * Starts waiting for the current tab actor's document global to be
    * created, in order to instrument the Canvas context and become
    * aware of everything the content does with Web Audio.
@@ -828,17 +716,17 @@ let WebAudioActor = exports.WebAudioActor = protocol.ActorClass({
 
   /**
    * Takes an XrayWrapper node, and attaches the node's `nativeID`
    * to the AudioParams as `_parentID`, as well as the the type of param
    * as a string on `_paramName`.
    */
   _instrumentParams: function (node) {
     let type = getConstructorName(node);
-    Object.keys(NODE_PROPERTIES[type].properties || {})
+    Object.keys(AUDIO_NODE_DEFINITION[type].properties || {})
       .filter(isAudioParam.bind(null, node))
       .forEach(paramName => {
         let param = node[paramName];
         param._parentID = node.id;
         param._paramName = paramName;
       });
   },
 
diff --git a/toolkit/devtools/server/moz.build b/toolkit/devtools/server/moz.build
index 618f5c9..6528ee2 100644
--- a/toolkit/devtools/server/moz.build
+++ b/toolkit/devtools/server/moz.build
@@ -69,16 +69,17 @@ EXTRA_JS_MODULES.devtools.server.actors += [
     'actors/webaudio.js',
     'actors/webbrowser.js',
     'actors/webconsole.js',
     'actors/webgl.js',
 ]
 
 EXTRA_JS_MODULES.devtools.server.actors.utils += [
     'actors/utils/actor-registry-utils.js',
+    'actors/utils/audionodes.json',
     'actors/utils/automation-timeline.js',
     'actors/utils/make-debugger.js',
     'actors/utils/map-uri-to-addon-id.js',
     'actors/utils/ScriptStore.js',
     'actors/utils/stack.js',
 ]
 
 FAIL_ON_WARNINGS = True
-- 
2.2.1

