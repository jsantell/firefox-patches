From b3b2f9ae791ae6cad9df5490857ac5c6add1b9d0 Mon Sep 17 00:00:00 2001
From: Jordan Santell <jsantell@gmail.com>
Date: Tue, 18 Nov 2014 15:40:23 -0800
Subject: Bug 1101235 - move profiler tree-model/view utilities into
 devtools/shared, r=vp

---
 browser/devtools/profiler/moz.build                |   4 +-
 browser/devtools/profiler/profiler.js              |   4 +-
 browser/devtools/profiler/test/browser.ini         |  14 -
 .../test/browser_profiler_content-check.js         |  51 ----
 .../profiler/test/browser_profiler_data-samples.js |   2 +-
 .../test/browser_profiler_tree-frame-node.js       | 166 ------------
 .../test/browser_profiler_tree-model-01.js         | 196 --------------
 .../test/browser_profiler_tree-model-02.js         |  59 -----
 .../test/browser_profiler_tree-model-03.js         |  86 ------
 .../test/browser_profiler_tree-model-04.js         |  81 ------
 .../test/browser_profiler_tree-model-05.js         |  79 ------
 .../profiler/test/browser_profiler_tree-view-01.js |  95 -------
 .../profiler/test/browser_profiler_tree-view-02.js | 158 -----------
 .../profiler/test/browser_profiler_tree-view-03.js | 109 --------
 .../profiler/test/browser_profiler_tree-view-04.js | 117 --------
 .../profiler/test/browser_profiler_tree-view-05.js |  66 -----
 .../profiler/test/browser_profiler_tree-view-06.js |  70 -----
 .../profiler/test/browser_profiler_tree-view-07.js |  70 -----
 browser/devtools/profiler/utils/tree-model.js      | 276 -------------------
 browser/devtools/profiler/utils/tree-view.js       | 295 ---------------------
 browser/devtools/shared/moz.build                  |   2 +
 browser/devtools/shared/test/browser.ini           |  14 +
 .../shared/test/browser_profiler_content-check.js  |  51 ++++
 .../test/browser_profiler_tree-frame-node.js       | 166 ++++++++++++
 .../shared/test/browser_profiler_tree-model-01.js  | 196 ++++++++++++++
 .../shared/test/browser_profiler_tree-model-02.js  |  59 +++++
 .../shared/test/browser_profiler_tree-model-03.js  |  86 ++++++
 .../shared/test/browser_profiler_tree-model-04.js  |  81 ++++++
 .../shared/test/browser_profiler_tree-model-05.js  |  79 ++++++
 .../shared/test/browser_profiler_tree-view-01.js   |  95 +++++++
 .../shared/test/browser_profiler_tree-view-02.js   | 158 +++++++++++
 .../shared/test/browser_profiler_tree-view-03.js   | 109 ++++++++
 .../shared/test/browser_profiler_tree-view-04.js   | 117 ++++++++
 .../shared/test/browser_profiler_tree-view-05.js   |  66 +++++
 .../shared/test/browser_profiler_tree-view-06.js   |  71 +++++
 .../shared/test/browser_profiler_tree-view-07.js   |  70 +++++
 browser/devtools/shared/tree-model.js              | 276 +++++++++++++++++++
 browser/devtools/shared/tree-view.js               | 295 +++++++++++++++++++++
 38 files changed, 1995 insertions(+), 1994 deletions(-)
 delete mode 100644 browser/devtools/profiler/test/browser_profiler_content-check.js
 delete mode 100644 browser/devtools/profiler/test/browser_profiler_tree-frame-node.js
 delete mode 100644 browser/devtools/profiler/test/browser_profiler_tree-model-01.js
 delete mode 100644 browser/devtools/profiler/test/browser_profiler_tree-model-02.js
 delete mode 100644 browser/devtools/profiler/test/browser_profiler_tree-model-03.js
 delete mode 100644 browser/devtools/profiler/test/browser_profiler_tree-model-04.js
 delete mode 100644 browser/devtools/profiler/test/browser_profiler_tree-model-05.js
 delete mode 100644 browser/devtools/profiler/test/browser_profiler_tree-view-01.js
 delete mode 100644 browser/devtools/profiler/test/browser_profiler_tree-view-02.js
 delete mode 100644 browser/devtools/profiler/test/browser_profiler_tree-view-03.js
 delete mode 100644 browser/devtools/profiler/test/browser_profiler_tree-view-04.js
 delete mode 100644 browser/devtools/profiler/test/browser_profiler_tree-view-05.js
 delete mode 100644 browser/devtools/profiler/test/browser_profiler_tree-view-06.js
 delete mode 100644 browser/devtools/profiler/test/browser_profiler_tree-view-07.js
 delete mode 100644 browser/devtools/profiler/utils/tree-model.js
 delete mode 100644 browser/devtools/profiler/utils/tree-view.js
 create mode 100644 browser/devtools/shared/test/browser_profiler_content-check.js
 create mode 100644 browser/devtools/shared/test/browser_profiler_tree-frame-node.js
 create mode 100644 browser/devtools/shared/test/browser_profiler_tree-model-01.js
 create mode 100644 browser/devtools/shared/test/browser_profiler_tree-model-02.js
 create mode 100644 browser/devtools/shared/test/browser_profiler_tree-model-03.js
 create mode 100644 browser/devtools/shared/test/browser_profiler_tree-model-04.js
 create mode 100644 browser/devtools/shared/test/browser_profiler_tree-model-05.js
 create mode 100644 browser/devtools/shared/test/browser_profiler_tree-view-01.js
 create mode 100644 browser/devtools/shared/test/browser_profiler_tree-view-02.js
 create mode 100644 browser/devtools/shared/test/browser_profiler_tree-view-03.js
 create mode 100644 browser/devtools/shared/test/browser_profiler_tree-view-04.js
 create mode 100644 browser/devtools/shared/test/browser_profiler_tree-view-05.js
 create mode 100644 browser/devtools/shared/test/browser_profiler_tree-view-06.js
 create mode 100644 browser/devtools/shared/test/browser_profiler_tree-view-07.js
 create mode 100644 browser/devtools/shared/tree-model.js
 create mode 100644 browser/devtools/shared/tree-view.js

diff --git a/browser/devtools/profiler/moz.build b/browser/devtools/profiler/moz.build
index 0d05af1..58682b3 100644
--- a/browser/devtools/profiler/moz.build
+++ b/browser/devtools/profiler/moz.build
@@ -1,14 +1,12 @@
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 EXTRA_JS_MODULES.devtools.profiler += [
     'panel.js',
     'utils/global.js',
-    'utils/shared.js',
-    'utils/tree-model.js',
-    'utils/tree-view.js'
+    'utils/shared.js'
 ]
 
 BROWSER_CHROME_MANIFESTS += ['test/browser.ini']
diff --git a/browser/devtools/profiler/profiler.js b/browser/devtools/profiler/profiler.js
index c261c55..87bee8a 100644
--- a/browser/devtools/profiler/profiler.js
+++ b/browser/devtools/profiler/profiler.js
@@ -22,19 +22,19 @@ devtools.lazyRequireGetter(this, "L10N",
   "devtools/profiler/global", true);
 devtools.lazyRequireGetter(this, "CATEGORIES",
   "devtools/profiler/global", true);
 devtools.lazyRequireGetter(this, "CATEGORY_MAPPINGS",
   "devtools/profiler/global", true);
 devtools.lazyRequireGetter(this, "CATEGORY_OTHER",
   "devtools/profiler/global", true);
 devtools.lazyRequireGetter(this, "ThreadNode",
-  "devtools/profiler/tree-model", true);
+  "devtools/shared/tree-model", true);
 devtools.lazyRequireGetter(this, "CallView",
-  "devtools/profiler/tree-view", true);
+  "devtools/shared/tree-view", true);
 
 devtools.lazyImporter(this, "FileUtils",
   "resource://gre/modules/FileUtils.jsm");
 devtools.lazyImporter(this, "NetUtil",
   "resource://gre/modules/NetUtil.jsm");
 devtools.lazyImporter(this, "LineGraphWidget",
   "resource:///modules/devtools/Graphs.jsm");
 devtools.lazyImporter(this, "BarGraphWidget",
diff --git a/browser/devtools/profiler/test/browser.ini b/browser/devtools/profiler/test/browser.ini
index 8d96926..d4ba11d 100644
--- a/browser/devtools/profiler/test/browser.ini
+++ b/browser/devtools/profiler/test/browser.ini
@@ -19,17 +19,16 @@ skip-if = true # Bug 1047124
 [browser_profiler_console-record-06.js]
 skip-if = true # Bug 1047124
 [browser_profiler_console-record-07.js]
 skip-if = true # Bug 1047124
 [browser_profiler_console-record-08.js]
 skip-if = true # Bug 1047124
 [browser_profiler_console-record-09.js]
 skip-if = true # Bug 1047124
-[browser_profiler_content-check.js]
 [browser_profiler_data-massaging-01.js]
 skip-if = true # Bug 1047124
 [browser_profiler_data-massaging-02.js]
 skip-if = true # Bug 1047124
 [browser_profiler_data-samples.js]
 skip-if = true # Bug 1047124
 [browser_profiler_gecko-pref-changed.js]
 skip-if = true # Bug 1047124
@@ -91,21 +90,8 @@ skip-if = true # Bug 1047124
 [browser_profiler_tabbed-browser-add-remove-01.js]
 skip-if = true # Bug 1047124
 [browser_profiler_tabbed-browser-add-remove-02.js]
 skip-if = true # Bug 1047124
 [browser_profiler_tree-abstract-01.js]
 [browser_profiler_tree-abstract-02.js]
 [browser_profiler_tree-abstract-03.js]
 [browser_profiler_tree-abstract-04.js]
-[browser_profiler_tree-frame-node.js]
-[browser_profiler_tree-model-01.js]
-[browser_profiler_tree-model-02.js]
-[browser_profiler_tree-model-03.js]
-[browser_profiler_tree-model-04.js]
-[browser_profiler_tree-model-05.js]
-[browser_profiler_tree-view-01.js]
-[browser_profiler_tree-view-02.js]
-[browser_profiler_tree-view-03.js]
-[browser_profiler_tree-view-04.js]
-[browser_profiler_tree-view-05.js]
-[browser_profiler_tree-view-06.js]
-[browser_profiler_tree-view-07.js]
diff --git a/browser/devtools/profiler/test/browser_profiler_content-check.js b/browser/devtools/profiler/test/browser_profiler_content-check.js
deleted file mode 100644
index 1f5dd65..0000000
--- a/browser/devtools/profiler/test/browser_profiler_content-check.js
+++ /dev/null
@@ -1,51 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests the function testing whether or not a frame is content or chrome
- * works properly.
- */
-
-function test() {
-  let { _isContent } = devtools.require("devtools/profiler/tree-model");
-
-  ok(_isContent({ location: "http://foo" }),
-    "Verifying content/chrome frames is working properly.");
-  ok(_isContent({ location: "https://foo" }),
-    "Verifying content/chrome frames is working properly.");
-  ok(_isContent({ location: "file://foo" }),
-    "Verifying content/chrome frames is working properly.");
-
-  ok(!_isContent({ location: "chrome://foo" }),
-    "Verifying content/chrome frames is working properly.");
-  ok(!_isContent({ location: "resource://foo" }),
-    "Verifying content/chrome frames is working properly.");
-
-  ok(!_isContent({ location: "chrome://foo -> http://bar" }),
-    "Verifying content/chrome frames is working properly.");
-  ok(!_isContent({ location: "chrome://foo -> https://bar" }),
-    "Verifying content/chrome frames is working properly.");
-  ok(!_isContent({ location: "chrome://foo -> file://bar" }),
-    "Verifying content/chrome frames is working properly.");
-
-  ok(!_isContent({ location: "resource://foo -> http://bar" }),
-    "Verifying content/chrome frames is working properly.");
-  ok(!_isContent({ location: "resource://foo -> https://bar" }),
-    "Verifying content/chrome frames is working properly.");
-  ok(!_isContent({ location: "resource://foo -> file://bar" }),
-    "Verifying content/chrome frames is working properly.");
-
-  ok(!_isContent({ category: 1, location: "chrome://foo" }),
-    "Verifying content/chrome frames is working properly.");
-  ok(!_isContent({ category: 1, location: "resource://foo" }),
-    "Verifying content/chrome frames is working properly.");
-
-  ok(!_isContent({ category: 1, location: "file://foo -> http://bar" }),
-    "Verifying content/chrome frames is working properly.");
-  ok(!_isContent({ category: 1, location: "file://foo -> https://bar" }),
-    "Verifying content/chrome frames is working properly.");
-  ok(!_isContent({ category: 1, location: "file://foo -> file://bar" }),
-    "Verifying content/chrome frames is working properly.");
-
-  finish();
-}
diff --git a/browser/devtools/profiler/test/browser_profiler_data-samples.js b/browser/devtools/profiler/test/browser_profiler_data-samples.js
index a165acc..d250aeb 100644
--- a/browser/devtools/profiler/test/browser_profiler_data-samples.js
+++ b/browser/devtools/profiler/test/browser_profiler_data-samples.js
@@ -1,15 +1,15 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if the retrieved profiler data samples always have a (root) node.
  * If this ever changes, the |ThreadNode.prototype.insert| function in
- * browser/devtools/profiler/utils/tree-model.js will have to be changed.
+ * browser/devtools/shared/tree-model.js will have to be changed.
  */
 
 const WAIT_TIME = 1000; // ms
 
 let test = Task.async(function*() {
   let [target, debuggee, panel] = yield initFrontend(SIMPLE_URL);
   let front = panel.panelWin.gFront;
 
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-frame-node.js b/browser/devtools/profiler/test/browser_profiler_tree-frame-node.js
deleted file mode 100644
index 8ed0b05..0000000
--- a/browser/devtools/profiler/test/browser_profiler_tree-frame-node.js
+++ /dev/null
@@ -1,166 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Verifies if FrameNodes retain and parse their data appropriately.
- */
-
-function test() {
-  let { FrameNode } = devtools.require("devtools/profiler/tree-model");
-
-  let frame1 = new FrameNode({
-    location: "hello/<.world (http://foo/bar.js:123)",
-    line: 456
-  });
-
-  is(frame1.getInfo().nodeType, "Frame",
-    "The first frame node has the correct type.");
-  is(frame1.getInfo().functionName, "hello/<.world",
-    "The first frame node has the correct function name.");
-  is(frame1.getInfo().fileName, "bar.js",
-    "The first frame node has the correct file name.");
-  is(frame1.getInfo().hostName, "foo",
-    "The first frame node has the correct host name.");
-  is(frame1.getInfo().url, "http://foo/bar.js",
-    "The first frame node has the correct url.");
-  is(frame1.getInfo().line, 123,
-    "The first frame node has the correct line.");
-  is(frame1.getInfo().categoryData.toSource(), "({})",
-    "The first frame node has the correct category data.");
-  is(frame1.getInfo().isContent, true,
-    "The first frame node has the correct content flag.");
-
-  let frame2 = new FrameNode({
-    location: "hello/<.world (http://foo/bar.js#baz:123)",
-    line: 456
-  });
-
-  is(frame2.getInfo().nodeType, "Frame",
-    "The second frame node has the correct type.");
-  is(frame2.getInfo().functionName, "hello/<.world",
-    "The second frame node has the correct function name.");
-  is(frame2.getInfo().fileName, "bar.js#baz",
-    "The second frame node has the correct file name.");
-  is(frame2.getInfo().hostName, "foo",
-    "The second frame node has the correct host name.");
-  is(frame2.getInfo().url, "http://foo/bar.js#baz",
-    "The second frame node has the correct url.");
-  is(frame2.getInfo().line, 123,
-    "The second frame node has the correct line.");
-  is(frame2.getInfo().categoryData.toSource(), "({})",
-    "The second frame node has the correct category data.");
-  is(frame2.getInfo().isContent, true,
-    "The second frame node has the correct content flag.");
-
-  let frame3 = new FrameNode({
-    location: "hello/<.world (http://foo/#bar:123)",
-    line: 456
-  });
-
-  is(frame3.getInfo().nodeType, "Frame",
-    "The third frame node has the correct type.");
-  is(frame3.getInfo().functionName, "hello/<.world",
-    "The third frame node has the correct function name.");
-  is(frame3.getInfo().fileName, "#bar",
-    "The third frame node has the correct file name.");
-  is(frame3.getInfo().hostName, "foo",
-    "The third frame node has the correct host name.");
-  is(frame3.getInfo().url, "http://foo/#bar",
-    "The third frame node has the correct url.");
-  is(frame3.getInfo().line, 123,
-    "The third frame node has the correct line.");
-  is(frame3.getInfo().categoryData.toSource(), "({})",
-    "The third frame node has the correct category data.");
-  is(frame3.getInfo().isContent, true,
-    "The third frame node has the correct content flag.");
-
-  let frame4 = new FrameNode({
-    location: "hello/<.world (http://foo/:123)",
-    line: 456
-  });
-
-  is(frame4.getInfo().nodeType, "Frame",
-    "The fourth frame node has the correct type.");
-  is(frame4.getInfo().functionName, "hello/<.world",
-    "The fourth frame node has the correct function name.");
-  is(frame4.getInfo().fileName, "/",
-    "The fourth frame node has the correct file name.");
-  is(frame4.getInfo().hostName, "foo",
-    "The fourth frame node has the correct host name.");
-  is(frame4.getInfo().url, "http://foo/",
-    "The fourth frame node has the correct url.");
-  is(frame4.getInfo().line, 123,
-    "The fourth frame node has the correct line.");
-  is(frame4.getInfo().categoryData.toSource(), "({})",
-    "The fourth frame node has the correct category data.");
-  is(frame4.getInfo().isContent, true,
-    "The fourth frame node has the correct content flag.");
-
-  let frame5 = new FrameNode({
-    location: "hello/<.world (resource://foo.js -> http://bar/baz.js:123)",
-    line: 456
-  });
-
-  is(frame5.getInfo().nodeType, "Frame",
-    "The fifth frame node has the correct type.");
-  is(frame5.getInfo().functionName, "hello/<.world",
-    "The fifth frame node has the correct function name.");
-  is(frame5.getInfo().fileName, "baz.js",
-    "The fifth frame node has the correct file name.");
-  is(frame5.getInfo().hostName, "bar",
-    "The fifth frame node has the correct host name.");
-  is(frame5.getInfo().url, "http://bar/baz.js",
-    "The fifth frame node has the correct url.");
-  is(frame5.getInfo().line, 123,
-    "The fifth frame node has the correct line.");
-  is(frame5.getInfo().categoryData.toSource(), "({})",
-    "The fifth frame node has the correct category data.");
-  is(frame5.getInfo().isContent, false,
-    "The fifth frame node has the correct content flag.");
-
-  let frame6 = new FrameNode({
-    location: "Foo::Bar::Baz",
-    line: 456,
-    category: 8
-  });
-
-  is(frame6.getInfo().nodeType, "Frame",
-    "The sixth frame node has the correct type.");
-  is(frame6.getInfo().functionName, "Foo::Bar::Baz",
-    "The sixth frame node has the correct function name.");
-  is(frame6.getInfo().fileName, null,
-    "The sixth frame node has the correct file name.");
-  is(frame6.getInfo().hostName, null,
-    "The sixth frame node has the correct host name.");
-  is(frame6.getInfo().url, null,
-    "The sixth frame node has the correct url.");
-  is(frame6.getInfo().line, 456,
-    "The sixth frame node has the correct line.");
-  is(frame6.getInfo().categoryData.abbrev, "other",
-    "The sixth frame node has the correct category data.");
-  is(frame6.getInfo().isContent, false,
-    "The sixth frame node has the correct content flag.");
-
-  let frame7 = new FrameNode({
-    location: "EnterJIT"
-  });
-
-  is(frame7.getInfo().nodeType, "Frame",
-    "The seventh frame node has the correct type.");
-  is(frame7.getInfo().functionName, "EnterJIT",
-    "The seventh frame node has the correct function name.");
-  is(frame7.getInfo().fileName, null,
-    "The seventh frame node has the correct file name.");
-  is(frame7.getInfo().hostName, null,
-    "The seventh frame node has the correct host name.");
-  is(frame7.getInfo().url, null,
-    "The seventh frame node has the correct url.");
-  is(frame7.getInfo().line, null,
-    "The seventh frame node has the correct line.");
-  is(frame7.getInfo().categoryData.abbrev, "js",
-    "The seventh frame node has the correct category data.");
-  is(frame7.getInfo().isContent, false,
-    "The seventh frame node has the correct content flag.");
-
-  finish();
-}
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-model-01.js b/browser/devtools/profiler/test/browser_profiler_tree-model-01.js
deleted file mode 100644
index b767d11..0000000
--- a/browser/devtools/profiler/test/browser_profiler_tree-model-01.js
+++ /dev/null
@@ -1,196 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if a call tree model can be correctly computed from a samples array.
- */
-
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-
-  // Create a root node from a given samples array.
-
-  let root = new ThreadNode(gSamples);
-
-  // Test the root node.
-
-  is(root.duration, 18,
-    "The correct duration was calculated for the root node.");
-  is(root.getInfo().nodeType, "Thread",
-    "The correct node type was retrieved for the root node.");
-  is(root.getInfo().functionName, "(root)",
-    "The correct function name was retrieved for the root node.");
-  is(root.getInfo().categoryData.toSource(), "({})",
-    "The correct empty category data was retrieved for the root node.");
-
-  is(Object.keys(root.calls).length, 1,
-    "The correct number of child calls were calculated for the root node.");
-  is(Object.keys(root.calls)[0], "A",
-    "The root node's only child call is correct.");
-
-  // Test all the descendant nodes.
-
-  is(Object.keys(root.calls.A.calls).length, 2,
-    "The correct number of child calls were calculated for the '.A' node.");
-  is(Object.keys(root.calls.A.calls)[0], "B",
-    "The '.A' node's first child call is correct.");
-  is(Object.keys(root.calls.A.calls)[1], "E",
-    "The '.A' node's second child call is correct.");
-
-  is(Object.keys(root.calls.A.calls.B.calls).length, 2,
-    "The correct number of child calls were calculated for the '.A.B' node.");
-  is(Object.keys(root.calls.A.calls.B.calls)[0], "C",
-    "The '.A.B' node's first child call is correct.");
-  is(Object.keys(root.calls.A.calls.B.calls)[1], "D",
-    "The '.A.B' node's second child call is correct.");
-
-  is(Object.keys(root.calls.A.calls.E.calls).length, 1,
-    "The correct number of child calls were calculated for the '.A.E' node.");
-  is(Object.keys(root.calls.A.calls.E.calls)[0], "F",
-    "The '.A.E' node's only child call is correct.");
-
-  is(Object.keys(root.calls.A.calls.B.calls.C.calls).length, 0,
-    "The correct number of child calls were calculated for the '.A.B.C' node.");
-  is(Object.keys(root.calls.A.calls.B.calls.D.calls).length, 0,
-    "The correct number of child calls were calculated for the '.A.B.D' node.");
-  is(Object.keys(root.calls.A.calls.E.calls.F.calls).length, 0,
-    "The correct number of child calls were calculated for the '.A.E.F' node.");
-
-  // Insert new nodes in the tree.
-
-  root.insert({
-    time: 20,
-    frames: [
-      { location: "(root)" },
-      { location: "A" },
-      { location: "B" },
-      { location: "C" },
-      { location: "D" },
-      { location: "E" },
-      { location: "F" },
-      { location: "G" }
-    ]
-  });
-
-  // Retest the root node.
-
-  is(root.duration, 20,
-    "The correct duration was recalculated for the root node.");
-
-  is(Object.keys(root.calls).length, 1,
-    "The correct number of child calls were calculated for the root node.");
-  is(Object.keys(root.calls)[0], "A",
-    "The root node's only child call is correct.");
-
-  // Retest all the descendant nodes.
-
-  is(Object.keys(root.calls.A.calls).length, 2,
-    "The correct number of child calls were calculated for the '.A' node.");
-  is(Object.keys(root.calls.A.calls)[0], "B",
-    "The '.A' node's first child call is correct.");
-  is(Object.keys(root.calls.A.calls)[1], "E",
-    "The '.A' node's second child call is correct.");
-
-  is(Object.keys(root.calls.A.calls.B.calls).length, 2,
-    "The correct number of child calls were calculated for the '.A.B' node.");
-  is(Object.keys(root.calls.A.calls.B.calls)[0], "C",
-    "The '.A.B' node's first child call is correct.");
-  is(Object.keys(root.calls.A.calls.B.calls)[1], "D",
-    "The '.A.B' node's second child call is correct.");
-
-  is(Object.keys(root.calls.A.calls.E.calls).length, 1,
-    "The correct number of child calls were calculated for the '.A.E' node.");
-  is(Object.keys(root.calls.A.calls.E.calls)[0], "F",
-    "The '.A.E' node's only child call is correct.");
-
-  is(Object.keys(root.calls.A.calls.B.calls.C.calls).length, 1,
-    "The correct number of child calls were calculated for the '.A.B.C' node.");
-  is(Object.keys(root.calls.A.calls.B.calls.C.calls)[0], "D",
-    "The '.A.B.C' node's only child call is correct.");
-
-  is(Object.keys(root.calls.A.calls.B.calls.C.calls.D.calls).length, 1,
-    "The correct number of child calls were calculated for the '.A.B.C.D' node.");
-  is(Object.keys(root.calls.A.calls.B.calls.C.calls.D.calls)[0], "E",
-    "The '.A.B.C.D' node's only child call is correct.");
-
-  is(Object.keys(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls).length, 1,
-    "The correct number of child calls were calculated for the '.A.B.C.D.E' node.");
-  is(Object.keys(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls)[0], "F",
-    "The '.A.B.C.D.E' node's only child call is correct.");
-
-  is(Object.keys(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls.F.calls).length, 1,
-    "The correct number of child calls were calculated for the '.A.B.C.D.E.F' node.");
-  is(Object.keys(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls.F.calls)[0], "G",
-    "The '.A.B.C.D.E.F' node's only child call is correct.");
-
-  is(Object.keys(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls.F.calls.G.calls).length, 0,
-    "The correct number of child calls were calculated for the '.A.B.D.E.F.G' node.");
-  is(Object.keys(root.calls.A.calls.B.calls.D.calls).length, 0,
-    "The correct number of child calls were calculated for the '.A.B.D' node.");
-  is(Object.keys(root.calls.A.calls.E.calls.F.calls).length, 0,
-    "The correct number of child calls were calculated for the '.A.E.F' node.");
-
-  // Check the location, sample times, duration and samples of the root.
-
-  is(root.calls.A.location, "A",
-    "The '.A' node has the correct location.");
-  is(root.calls.A.sampleTimes.toSource(),
-    "[{start:5, end:10}, {start:11, end:17}, {start:18, end:25}, {start:20, end:22}]",
-    "The '.A' node has the correct sample times.");
-  is(root.calls.A.duration, 20,
-    "The '.A' node has the correct duration in milliseconds.");
-  is(root.calls.A.samples, 4,
-    "The '.A' node has the correct number of samples.");
-
-  // ...and the rightmost leaf.
-
-  is(root.calls.A.calls.E.calls.F.location, "F",
-    "The '.A.E.F' node has the correct location.");
-  is(root.calls.A.calls.E.calls.F.sampleTimes.toSource(),
-    "[{start:18, end:25}]",
-    "The '.A.E.F' node has the correct sample times.");
-  is(root.calls.A.calls.E.calls.F.duration, 7,
-    "The '.A.E.F' node has the correct duration in milliseconds.");
-  is(root.calls.A.calls.E.calls.F.samples, 1,
-    "The '.A.E.F' node has the correct number of samples.");
-
-  // ...and the leftmost leaf.
-
-  is(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls.F.calls.G.location, "G",
-    "The '.A.B.C.D.E.F.G' node has the correct location.");
-  is(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls.F.calls.G.sampleTimes.toSource(),
-    "[{start:20, end:22}]",
-    "The '.A.B.C.D.E.F.G' node has the correct sample times.");
-  is(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls.F.calls.G.duration, 2,
-    "The '.A.B.C.D.E.F.G' node has the correct duration in milliseconds.");
-  is(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls.F.calls.G.samples, 1,
-    "The '.A.B.C.D.E.F.G' node has the correct number of samples.");
-
-  finish();
-}
-
-let gSamples = [{
-  time: 5,
-  frames: [
-    { location: "(root)" },
-    { location: "A" },
-    { location: "B" },
-    { location: "C" }
-  ]
-}, {
-  time: 5 + 6,
-  frames: [
-    { location: "(root)" },
-    { location: "A" },
-    { location: "B" },
-    { location: "D" }
-  ]
-}, {
-  time: 5 + 6 + 7,
-  frames: [
-    { location: "(root)" },
-    { location: "A" },
-    { location: "E" },
-    { location: "F" }
-  ]
-}];
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-model-02.js b/browser/devtools/profiler/test/browser_profiler_tree-model-02.js
deleted file mode 100644
index 8db2e2d..0000000
--- a/browser/devtools/profiler/test/browser_profiler_tree-model-02.js
+++ /dev/null
@@ -1,59 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if a call tree model ignores samples with no timing information.
- */
-
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-
-  // Create a root node from a given samples array.
-
-  let root = new ThreadNode(gSamples);
-
-  // Test the root node.
-
-  is(root.duration, 5,
-    "The correct duration was calculated for the root node.");
-
-  is(Object.keys(root.calls).length, 1,
-    "The correct number of child calls were calculated for the root node.");
-  is(Object.keys(root.calls)[0], "A",
-    "The root node's only child call is correct.");
-
-  // Test all the descendant nodes.
-
-  is(Object.keys(root.calls.A.calls).length, 1,
-    "The correct number of child calls were calculated for the '.A' node.");
-  is(Object.keys(root.calls.A.calls)[0], "B",
-    "The '.A.B' node's only child call is correct.");
-
-  is(Object.keys(root.calls.A.calls.B.calls).length, 1,
-    "The correct number of child calls were calculated for the '.A.B' node.");
-  is(Object.keys(root.calls.A.calls.B.calls)[0], "C",
-    "The '.A.B' node's only child call is correct.");
-
-  is(Object.keys(root.calls.A.calls.B.calls.C.calls).length, 0,
-    "The correct number of child calls were calculated for the '.A.B.C' node.");
-
-  finish();
-}
-
-let gSamples = [{
-  time: 5,
-  frames: [
-    { location: "(root)" },
-    { location: "A" },
-    { location: "B" },
-    { location: "C" }
-  ]
-}, {
-  time: null,
-  frames: [
-    { location: "(root)" },
-    { location: "A" },
-    { location: "B" },
-    { location: "D" }
-  ]
-}];
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-model-03.js b/browser/devtools/profiler/test/browser_profiler_tree-model-03.js
deleted file mode 100644
index 192522c..0000000
--- a/browser/devtools/profiler/test/browser_profiler_tree-model-03.js
+++ /dev/null
@@ -1,86 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if a call tree model can be correctly computed from a samples array,
- * while at the same time filtering by duration.
- */
-
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-
-  // Create a root node from a given samples array, filtering by time.
-
-  let root = new ThreadNode(gSamples, false, 11, 18);
-
-  // Test the root node.
-
-  is(root.duration, 18,
-    "The correct duration was calculated for the root node.");
-
-  is(Object.keys(root.calls).length, 1,
-    "The correct number of child calls were calculated for the root node.");
-  is(Object.keys(root.calls)[0], "A",
-    "The root node's only child call is correct.");
-
-  // Test all the descendant nodes.
-
-  is(Object.keys(root.calls.A.calls).length, 2,
-    "The correct number of child calls were calculated for the '.A' node.");
-  is(Object.keys(root.calls.A.calls)[0], "B",
-    "The '.A' node's first child call is correct.");
-  is(Object.keys(root.calls.A.calls)[1], "E",
-    "The '.A' node's second child call is correct.");
-
-  is(Object.keys(root.calls.A.calls.B.calls).length, 1,
-    "The correct number of child calls were calculated for the '.A.B' node.");
-  is(Object.keys(root.calls.A.calls.B.calls)[0], "D",
-    "The '.A.B' node's only child call is correct.");
-
-  is(Object.keys(root.calls.A.calls.E.calls).length, 1,
-    "The correct number of child calls were calculated for the '.A.E' node.");
-  is(Object.keys(root.calls.A.calls.E.calls)[0], "F",
-    "The '.A.E' node's only child call is correct.");
-
-  is(Object.keys(root.calls.A.calls.B.calls.D.calls).length, 0,
-    "The correct number of child calls were calculated for the '.A.B.D' node.");
-  is(Object.keys(root.calls.A.calls.E.calls.F.calls).length, 0,
-    "The correct number of child calls were calculated for the '.A.E.F' node.");
-
-  finish();
-}
-
-let gSamples = [{
-  time: 5,
-  frames: [
-    { location: "(root)" },
-    { location: "A" },
-    { location: "B" },
-    { location: "C" }
-  ]
-}, {
-  time: 5 + 6,
-  frames: [
-    { location: "(root)" },
-    { location: "A" },
-    { location: "B" },
-    { location: "D" }
-  ]
-}, {
-  time: 5 + 6 + 7,
-  frames: [
-    { location: "(root)" },
-    { location: "A" },
-    { location: "E" },
-    { location: "F" }
-  ]
-}, {
-  time: 5 + 6 + 7 + 8,
-  frames: [
-    { location: "(root)" },
-    { location: "A" },
-    { location: "B" },
-    { location: "C" },
-    { location: "D" }
-  ]
-}];
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-model-04.js b/browser/devtools/profiler/test/browser_profiler_tree-model-04.js
deleted file mode 100644
index e59668ee..0000000
--- a/browser/devtools/profiler/test/browser_profiler_tree-model-04.js
+++ /dev/null
@@ -1,81 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if a call tree model can be correctly computed from a samples array,
- * while at the same time filtering by duration and content-only frames.
- */
-
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-
-  // Create a root node from a given samples array, filtering by time.
-
-  let root = new ThreadNode(gSamples, true, 11, 18);
-
-  // Test the root node.
-
-  is(root.duration, 18,
-    "The correct duration was calculated for the root node.");
-
-  is(Object.keys(root.calls).length, 2,
-    "The correct number of child calls were calculated for the root node.");
-  is(Object.keys(root.calls)[0], "http://D",
-    "The root node's first child call is correct.");
-  is(Object.keys(root.calls)[1], "http://A",
-    "The root node's second child call is correct.");
-
-  // Test all the descendant nodes.
-
-  is(Object.keys(root.calls["http://A"].calls).length, 1,
-    "The correct number of child calls were calculated for the '.A' node.");
-  is(Object.keys(root.calls["http://A"].calls)[0], "https://E",
-    "The '.A' node's only child call is correct.");
-
-  is(Object.keys(root.calls["http://A"].calls["https://E"].calls).length, 1,
-    "The correct number of child calls were calculated for the '.A.E' node.");
-  is(Object.keys(root.calls["http://A"].calls["https://E"].calls)[0], "file://F",
-    "The '.A.E' node's only child call is correct.");
-
-  is(Object.keys(root.calls["http://A"].calls["https://E"].calls["file://F"].calls).length, 0,
-    "The correct number of child calls were calculated for the '.A.E.F' node.");
-  is(Object.keys(root.calls["http://D"].calls).length, 0,
-    "The correct number of child calls were calculated for the '.D' node.");
-
-  finish();
-}
-
-let gSamples = [{
-  time: 5,
-  frames: [
-    { location: "(root)" },
-    { location: "http://A" },
-    { location: "http://B" },
-    { location: "http://C" }
-  ]
-}, {
-  time: 5 + 6,
-  frames: [
-    { location: "(root)" },
-    { location: "chrome://A" },
-    { location: "resource://B" },
-    { location: "http://D" }
-  ]
-}, {
-  time: 5 + 6 + 7,
-  frames: [
-    { location: "(root)" },
-    { location: "http://A" },
-    { location: "https://E" },
-    { location: "file://F" }
-  ]
-}, {
-  time: 5 + 6 + 7 + 8,
-  frames: [
-    { location: "(root)" },
-    { location: "http://A" },
-    { location: "http://B" },
-    { location: "http://C" },
-    { location: "http://D" }
-  ]
-}];
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-model-05.js b/browser/devtools/profiler/test/browser_profiler_tree-model-05.js
deleted file mode 100644
index 74ceeb5..0000000
--- a/browser/devtools/profiler/test/browser_profiler_tree-model-05.js
+++ /dev/null
@@ -1,79 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if an inverted call tree model can be correctly computed from a samples
- * array.
- */
-
-let time = 1;
-
-let samples = [{
-  time: time++,
-  frames: [
-    { location: "(root)" },
-    { location: "A" },
-    { location: "B" },
-    { location: "C" }
-  ]
-}, {
-  time: time++,
-  frames: [
-    { location: "(root)" },
-    { location: "A" },
-    { location: "D" },
-    { location: "C" }
-  ]
-}, {
-  time: time++,
-  frames: [
-    { location: "(root)" },
-    { location: "A" },
-    { location: "E" },
-    { location: "C" }
-  ],
-}, {
-  time: time++,
-  frames: [
-    { location: "(root)" },
-    { location: "A" },
-    { location: "B" },
-    { location: "F" }
-  ]
-}];
-
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-
-  let root = new ThreadNode(samples, undefined, undefined, undefined, true);
-
-  is(Object.keys(root.calls).length, 2,
-     "Should get the 2 youngest frames, not the 1 oldest frame");
-
-  let C = root.calls.C;
-  ok(C, "Should have C as a child of the root.");
-
-  is(Object.keys(C.calls).length, 3,
-     "Should have 3 frames that called C.");
-  ok(C.calls.B, "B called C.");
-  ok(C.calls.D, "D called C.");
-  ok(C.calls.E, "E called C.");
-
-  is(Object.keys(C.calls.B.calls).length, 1);
-  ok(C.calls.B.calls.A, "A called B called C");
-  is(Object.keys(C.calls.D.calls).length, 1);
-  ok(C.calls.D.calls.A, "A called D called C");
-  is(Object.keys(C.calls.E.calls).length, 1);
-  ok(C.calls.E.calls.A, "A called E called C");
-
-  let F = root.calls.F;
-  ok(F, "Should have F as a child of the root.");
-
-  is(Object.keys(F.calls).length, 1);
-  ok(F.calls.B, "B called F");
-
-  is(Object.keys(F.calls.B.calls).length, 1);
-  ok(F.calls.B.calls.A, "A called B called F");
-
-  finish();
-}
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-01.js b/browser/devtools/profiler/test/browser_profiler_tree-view-01.js
deleted file mode 100644
index 74635d4..0000000
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-01.js
+++ /dev/null
@@ -1,95 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://foo/bar/creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if the profiler's tree view implementation works properly and
- * creates the correct column structure.
- */
-
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
-
-  let threadNode = new ThreadNode(gSamples);
-  let treeRoot = new CallView({ frame: threadNode });
-
-  let container = document.createElement("vbox");
-  treeRoot.autoExpandDepth = 0;
-  treeRoot.attachTo(container);
-
-  is(container.childNodes.length, 1,
-    "The container node should have one child available.");
-  is(container.childNodes[0].className, "call-tree-item",
-    "The root node in the tree has the correct class name.");
-
-  is(container.childNodes[0].childNodes.length, 6,
-    "The root node in the tree has the correct number of children.");
-  is(container.childNodes[0].querySelectorAll(".call-tree-cell").length, 6,
-    "The root node in the tree has only 'call-tree-cell' children.");
-
-  is(container.childNodes[0].childNodes[0].getAttribute("type"), "duration",
-    "The root node in the tree has a duration cell.");
-  is(container.childNodes[0].childNodes[0].getAttribute("value"), "15",
-    "The root node in the tree has the correct duration cell value.");
-
-  is(container.childNodes[0].childNodes[1].getAttribute("type"), "percentage",
-    "The root node in the tree has a percentage cell.");
-  is(container.childNodes[0].childNodes[1].getAttribute("value"), "100%",
-    "The root node in the tree has the correct percentage cell value.");
-
-  is(container.childNodes[0].childNodes[2].getAttribute("type"), "self-duration",
-    "The root node in the tree has a self-duration cell.");
-  is(container.childNodes[0].childNodes[2].getAttribute("value"), "0",
-    "The root node in the tree has the correct self-duration cell value.");
-
-  is(container.childNodes[0].childNodes[3].getAttribute("type"), "self-percentage",
-    "The root node in the tree has a self-percentage cell.");
-  is(container.childNodes[0].childNodes[3].getAttribute("value"), "0%",
-    "The root node in the tree has the correct self-percentage cell value.");
-
-  is(container.childNodes[0].childNodes[4].getAttribute("type"), "samples",
-    "The root node in the tree has an samples cell.");
-  is(container.childNodes[0].childNodes[4].getAttribute("value"), "4",
-    "The root node in the tree has the correct samples cell value.");
-
-  is(container.childNodes[0].childNodes[5].getAttribute("type"), "function",
-    "The root node in the tree has a function cell.");
-  is(container.childNodes[0].childNodes[5].style.MozMarginStart, "0px",
-    "The root node in the tree has the correct indentation.");
-
-  finish();
-}
-
-let gSamples = [{
-  time: 5,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 32, location: "C (http://foo/bar/baz:56)" }
-  ]
-}, {
-  time: 5 + 1,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 64, location: "D (http://foo/bar/baz:78)" }
-  ]
-}, {
-  time: 5 + 1 + 2,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 64, location: "D (http://foo/bar/baz:78)" }
-  ]
-}, {
-  time: 5 + 1 + 2 + 7,
-  frames: [
-    { category: 8,   location: "(root)" },
-    { category: 8,   location: "A (http://foo/bar/baz:12)" },
-    { category: 128, location: "E (http://foo/bar/baz:90)" },
-    { category: 256, location: "F (http://foo/bar/baz:99)" }
-  ]
-}];
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-02.js b/browser/devtools/profiler/test/browser_profiler_tree-view-02.js
deleted file mode 100644
index 8d32695..0000000
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-02.js
+++ /dev/null
@@ -1,158 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if the profiler's tree view implementation works properly and
- * creates the correct column structure after expanding some of the nodes.
- */
-
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
-
-  let threadNode = new ThreadNode(gSamples);
-  let treeRoot = new CallView({ frame: threadNode });
-
-  let container = document.createElement("vbox");
-  treeRoot.autoExpandDepth = 0;
-  treeRoot.attachTo(container);
-
-  let $$fun = node => container.querySelectorAll(".call-tree-cell[type=function] > " + node);
-  let $$dur = i => container.querySelectorAll(".call-tree-cell[type=duration]")[i];
-  let $$perc = i => container.querySelectorAll(".call-tree-cell[type=percentage]")[i];
-  let $$sampl = i => container.querySelectorAll(".call-tree-cell[type=samples]")[i];
-
-  is(container.childNodes.length, 1,
-    "The container node should have one child available.");
-  is(container.childNodes[0].className, "call-tree-item",
-    "The root node in the tree has the correct class name.");
-
-  is($$dur(0).getAttribute("value"), "15",
-    "The root's duration cell displays the correct value.");
-  is($$perc(0).getAttribute("value"), "100%",
-    "The root's percentage cell displays the correct value.");
-  is($$sampl(0).getAttribute("value"), "4",
-    "The root's samples cell displays the correct value.");
-  is($$fun(".call-tree-name")[0].getAttribute("value"), "(root)",
-    "The root's function cell displays the correct name.");
-  is($$fun(".call-tree-url")[0].getAttribute("value"), "",
-    "The root's function cell displays the correct url.");
-  is($$fun(".call-tree-line")[0].getAttribute("value"), "",
-    "The root's function cell displays the correct line.");
-  is($$fun(".call-tree-host")[0].getAttribute("value"), "",
-    "The root's function cell displays the correct host.");
-  is($$fun(".call-tree-category")[0].getAttribute("value"), "",
-    "The root's function cell displays the correct category.");
-
-  treeRoot.expand();
-
-  is(container.childNodes.length, 2,
-    "The container node should have two children available.");
-  is(container.childNodes[0].className, "call-tree-item",
-    "The root node in the tree has the correct class name.");
-  is(container.childNodes[1].className, "call-tree-item",
-    "The .A node in the tree has the correct class name.");
-
-  is($$dur(1).getAttribute("value"), "15",
-    "The .A node's duration cell displays the correct value.");
-  is($$perc(1).getAttribute("value"), "100%",
-    "The .A node's percentage cell displays the correct value.");
-  is($$sampl(1).getAttribute("value"), "4",
-    "The .A node's samples cell displays the correct value.");
-  is($$fun(".call-tree-name")[1].getAttribute("value"), "A",
-    "The .A node's function cell displays the correct name.");
-  is($$fun(".call-tree-url")[1].getAttribute("value"), "baz",
-    "The .A node's function cell displays the correct url.");
-  ok($$fun(".call-tree-url")[1].getAttribute("tooltiptext").contains("http://foo/bar/baz"),
-    "The .A node's function cell displays the correct url tooltiptext.");
-  is($$fun(".call-tree-line")[1].getAttribute("value"), ":12",
-    "The .A node's function cell displays the correct line.");
-  is($$fun(".call-tree-host")[1].getAttribute("value"), "foo",
-    "The .A node's function cell displays the correct host.");
-  is($$fun(".call-tree-category")[1].getAttribute("value"), "Gecko",
-    "The .A node's function cell displays the correct category.");
-
-  let A = treeRoot.getChild();
-  A.expand();
-
-  is(container.childNodes.length, 4,
-    "The container node should have four children available.");
-  is(container.childNodes[2].className, "call-tree-item",
-    "The .B node in the tree has the correct class name.");
-  is(container.childNodes[3].className, "call-tree-item",
-    "The .E node in the tree has the correct class name.");
-
-  is($$dur(2).getAttribute("value"), "8",
-    "The .A.B node's duration cell displays the correct value.");
-  is($$perc(2).getAttribute("value"), "75%",
-    "The .A.B node's percentage cell displays the correct value.");
-  is($$sampl(2).getAttribute("value"), "3",
-    "The .A.B node's samples cell displays the correct value.");
-  is($$fun(".call-tree-name")[2].getAttribute("value"), "B",
-    "The .A.B node's function cell displays the correct name.");
-  is($$fun(".call-tree-url")[2].getAttribute("value"), "baz",
-    "The .A.B node's function cell displays the correct url.");
-  ok($$fun(".call-tree-url")[2].getAttribute("tooltiptext").contains("http://foo/bar/baz"),
-    "The .A.B node's function cell displays the correct url tooltiptext.");
-  is($$fun(".call-tree-line")[2].getAttribute("value"), ":34",
-    "The .A.B node's function cell displays the correct line.");
-  is($$fun(".call-tree-host")[2].getAttribute("value"), "foo",
-    "The .A.B node's function cell displays the correct host.");
-  is($$fun(".call-tree-category")[2].getAttribute("value"), "Styles",
-    "The .A.B node's function cell displays the correct category.");
-
-  is($$dur(3).getAttribute("value"), "7",
-    "The .A.E node's duration cell displays the correct value.");
-  is($$perc(3).getAttribute("value"), "25%",
-    "The .A.E node's percentage cell displays the correct value.");
-  is($$sampl(3).getAttribute("value"), "1",
-    "The .A.E node's samples cell displays the correct value.");
-  is($$fun(".call-tree-name")[3].getAttribute("value"), "E",
-    "The .A.E node's function cell displays the correct name.");
-  is($$fun(".call-tree-url")[3].getAttribute("value"), "baz",
-    "The .A.E node's function cell displays the correct url.");
-  ok($$fun(".call-tree-url")[3].getAttribute("tooltiptext").contains("http://foo/bar/baz"),
-    "The .A.E node's function cell displays the correct url tooltiptext.");
-  is($$fun(".call-tree-line")[3].getAttribute("value"), ":90",
-    "The .A.E node's function cell displays the correct line.");
-  is($$fun(".call-tree-host")[3].getAttribute("value"), "foo",
-    "The .A.E node's function cell displays the correct host.");
-  is($$fun(".call-tree-category")[3].getAttribute("value"), "GC",
-    "The .A.E node's function cell displays the correct category.");
-
-  finish();
-}
-
-let gSamples = [{
-  time: 5,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 32, location: "C (http://foo/bar/baz:56)" }
-  ]
-}, {
-  time: 5 + 1,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 64, location: "D (http://foo/bar/baz:78)" }
-  ]
-}, {
-  time: 5 + 1 + 2,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 64, location: "D (http://foo/bar/baz:78)" }
-  ]
-}, {
-  time: 5 + 1 + 2 + 7,
-  frames: [
-    { category: 8,   location: "(root)" },
-    { category: 8,   location: "A (http://foo/bar/baz:12)" },
-    { category: 128, location: "E (http://foo/bar/baz:90)" },
-    { category: 256, location: "F (http://foo/bar/baz:99)" }
-  ]
-}];
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-03.js b/browser/devtools/profiler/test/browser_profiler_tree-view-03.js
deleted file mode 100644
index ba4716a..0000000
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-03.js
+++ /dev/null
@@ -1,109 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if the profiler's tree view implementation works properly and
- * creates the correct column structure and can auto-expand all nodes.
- */
-
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
-
-  let threadNode = new ThreadNode(gSamples);
-  let treeRoot = new CallView({ frame: threadNode });
-
-  let container = document.createElement("vbox");
-  treeRoot.attachTo(container);
-
-  let $$fun = i => container.querySelectorAll(".call-tree-cell[type=function]")[i];
-  let $$name = i => container.querySelectorAll(".call-tree-cell[type=function] > .call-tree-name")[i];
-  let $$duration = i => container.querySelectorAll(".call-tree-cell[type=duration]")[i];
-
-  is(container.childNodes.length, 7,
-    "The container node should have all children available.");
-  is(Array.filter(container.childNodes, e => e.className != "call-tree-item").length, 0,
-    "All item nodes in the tree have the correct class name.");
-
-  is($$fun(0).style.MozMarginStart, "0px",
-    "The root node's function cell has the correct indentation.");
-  is($$fun(1).style.MozMarginStart, "16px",
-    "The .A node's function cell has the correct indentation.");
-  is($$fun(2).style.MozMarginStart, "32px",
-    "The .A.B node's function cell has the correct indentation.");
-  is($$fun(3).style.MozMarginStart, "48px",
-    "The .A.B.D node's function cell has the correct indentation.");
-  is($$fun(4).style.MozMarginStart, "48px",
-    "The .A.B.C node's function cell has the correct indentation.");
-  is($$fun(5).style.MozMarginStart, "32px",
-    "The .A.E node's function cell has the correct indentation.");
-  is($$fun(6).style.MozMarginStart, "48px",
-    "The .A.E.F node's function cell has the correct indentation.");
-
-  is($$name(0).getAttribute("value"), "(root)",
-    "The root node's function cell displays the correct name.");
-  is($$name(1).getAttribute("value"), "A",
-    "The .A node's function cell displays the correct name.");
-  is($$name(2).getAttribute("value"), "B",
-    "The .A.B node's function cell displays the correct name.");
-  is($$name(3).getAttribute("value"), "D",
-    "The .A.B.D node's function cell displays the correct name.");
-  is($$name(4).getAttribute("value"), "C",
-    "The .A.B.C node's function cell displays the correct name.");
-  is($$name(5).getAttribute("value"), "E",
-    "The .A.E node's function cell displays the correct name.");
-  is($$name(6).getAttribute("value"), "F",
-    "The .A.E.F node's function cell displays the correct name.");
-
-  is($$duration(0).getAttribute("value"), "15",
-    "The root node's function cell displays the correct duration.");
-  is($$duration(1).getAttribute("value"), "15",
-    "The .A node's function cell displays the correct duration.");
-  is($$duration(2).getAttribute("value"), "8",
-    "The .A.B node's function cell displays the correct duration.");
-  is($$duration(3).getAttribute("value"), "3",
-    "The .A.B.D node's function cell displays the correct duration.");
-  is($$duration(4).getAttribute("value"), "5",
-    "The .A.B.C node's function cell displays the correct duration.");
-  is($$duration(5).getAttribute("value"), "7",
-    "The .A.E node's function cell displays the correct duration.");
-  is($$duration(6).getAttribute("value"), "7",
-    "The .A.E.F node's function cell displays the correct duration.");
-
-  finish();
-}
-
-let gSamples = [{
-  time: 5,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 32, location: "C (http://foo/bar/baz:56)" }
-  ]
-}, {
-  time: 5 + 1,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 64, location: "D (http://foo/bar/baz:78)" }
-  ]
-}, {
-  time: 5 + 1 + 2,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 64, location: "D (http://foo/bar/baz:78)" }
-  ]
-}, {
-  time: 5 + 1 + 2 + 7,
-  frames: [
-    { category: 8,   location: "(root)" },
-    { category: 8,   location: "A (http://foo/bar/baz:12)" },
-    { category: 128, location: "E (http://foo/bar/baz:90)" },
-    { category: 256, location: "F (http://foo/bar/baz:99)" }
-  ]
-}];
-
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-04.js b/browser/devtools/profiler/test/browser_profiler_tree-view-04.js
deleted file mode 100644
index e99a747..0000000
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-04.js
+++ /dev/null
@@ -1,117 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if the profiler's tree view implementation works properly and
- * creates the correct DOM nodes in the correct order.
- */
-
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
-
-  let threadNode = new ThreadNode(gSamples);
-  let treeRoot = new CallView({ frame: threadNode });
-
-  let container = document.createElement("vbox");
-  treeRoot.attachTo(container);
-
-  is(treeRoot.target.getAttribute("origin"), "chrome",
-    "The root node's 'origin' attribute is correct.");
-  is(treeRoot.target.getAttribute("category"), "",
-    "The root node's 'category' attribute is correct.");
-  is(treeRoot.target.getAttribute("tooltiptext"), "",
-    "The root node's 'tooltiptext' attribute is correct.");
-  ok(treeRoot.target.querySelector(".call-tree-zoom").hidden,
-    "The root node's zoom button cell should be hidden.");
-  ok(treeRoot.target.querySelector(".call-tree-category").hidden,
-    "The root node's category label cell should be hidden.");
-
-  let A = treeRoot.getChild();
-  let B = A.getChild();
-  let D = B.getChild();
-
-  is(D.target.getAttribute("origin"), "chrome",
-    "The .A.B.D node's 'origin' attribute is correct.");
-  is(D.target.getAttribute("category"), "gc",
-    "The .A.B.D node's 'category' attribute is correct.");
-  is(D.target.getAttribute("tooltiptext"), "D (http://foo/bar/baz:78)",
-    "The .A.B.D node's 'tooltiptext' attribute is correct.");
-  ok(!A.target.querySelector(".call-tree-zoom").hidden,
-    "The .A.B.D node's zoom button cell should not be hidden.");
-  ok(!A.target.querySelector(".call-tree-category").hidden,
-    "The .A.B.D node's category label cell should not be hidden.");
-
-  is(D.target.childNodes.length, 6,
-    "The number of columns displayed for tree items is correct.");
-  is(D.target.childNodes[0].getAttribute("type"), "duration",
-    "The first column displayed for tree items is correct.");
-  is(D.target.childNodes[1].getAttribute("type"), "percentage",
-    "The third column displayed for tree items is correct.");
-  is(D.target.childNodes[2].getAttribute("type"), "self-duration",
-    "The second column displayed for tree items is correct.");
-  is(D.target.childNodes[3].getAttribute("type"), "self-percentage",
-    "The fourth column displayed for tree items is correct.");
-  is(D.target.childNodes[4].getAttribute("type"), "samples",
-    "The fifth column displayed for tree items is correct.");
-  is(D.target.childNodes[5].getAttribute("type"), "function",
-    "The sixth column displayed for tree items is correct.");
-
-  let functionCell = D.target.childNodes[5];
-
-  is(functionCell.childNodes.length, 8,
-    "The number of columns displayed for function cells is correct.");
-  is(functionCell.childNodes[0].className, "arrow theme-twisty",
-    "The first node displayed for function cells is correct.");
-  is(functionCell.childNodes[1].className, "plain call-tree-name",
-    "The second node displayed for function cells is correct.");
-  is(functionCell.childNodes[2].className, "plain call-tree-url",
-    "The third node displayed for function cells is correct.");
-  is(functionCell.childNodes[3].className, "plain call-tree-line",
-    "The fourth node displayed for function cells is correct.");
-  is(functionCell.childNodes[4].className, "plain call-tree-host",
-    "The fifth node displayed for function cells is correct.");
-  is(functionCell.childNodes[5].className, "plain call-tree-zoom",
-    "The sixth node displayed for function cells is correct.");
-  is(functionCell.childNodes[6].tagName, "spacer",
-    "The seventh node displayed for function cells is correct.");
-  is(functionCell.childNodes[7].className, "plain call-tree-category",
-    "The eight node displayed for function cells is correct.");
-
-  finish();
-}
-
-let gSamples = [{
-  time: 5,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 32, location: "C (http://foo/bar/baz:56)" }
-  ]
-}, {
-  time: 5 + 1,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 64, location: "D (http://foo/bar/baz:78)" }
-  ]
-}, {
-  time: 5 + 1 + 2,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 64, location: "D (http://foo/bar/baz:78)" }
-  ]
-}, {
-  time: 5 + 1 + 2 + 7,
-  frames: [
-    { category: 8,   location: "(root)" },
-    { category: 8,   location: "A (http://foo/bar/baz:12)" },
-    { category: 128, location: "E (http://foo/bar/baz:90)" },
-    { category: 256, location: "F (http://foo/bar/baz:99)" }
-  ]
-}];
-
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-05.js b/browser/devtools/profiler/test/browser_profiler_tree-view-05.js
deleted file mode 100644
index 2388975..0000000
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-05.js
+++ /dev/null
@@ -1,66 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if the profiler's tree view implementation works properly and
- * can toggle categories hidden or visible.
- */
-
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
-
-  let threadNode = new ThreadNode(gSamples);
-  let treeRoot = new CallView({ frame: threadNode });
-
-  let container = document.createElement("vbox");
-  treeRoot.attachTo(container);
-
-  let categories = container.querySelectorAll(".call-tree-category");
-  is(categories.length, 7,
-    "The call tree displays a correct number of categories.");
-  ok(!container.hasAttribute("categories-hidden"),
-    "All categories should be visible in the tree.");
-
-  treeRoot.toggleCategories(false);
-  is(categories.length, 7,
-    "The call tree displays the same number of categories.");
-  ok(container.hasAttribute("categories-hidden"),
-    "All categories should now be hidden in the tree.");
-
-  finish();
-}
-
-let gSamples = [{
-  time: 5,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 32, location: "C (http://foo/bar/baz:56)" }
-  ]
-}, {
-  time: 5 + 1,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 64, location: "D (http://foo/bar/baz:78)" }
-  ]
-}, {
-  time: 5 + 1 + 2,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 64, location: "D (http://foo/bar/baz:78)" }
-  ]
-}, {
-  time: 5 + 1 + 2 + 7,
-  frames: [
-    { category: 8,   location: "(root)" },
-    { category: 8,   location: "A (http://foo/bar/baz:12)" },
-    { category: 128, location: "E (http://foo/bar/baz:90)" },
-    { category: 256, location: "F (http://foo/bar/baz:99)" }
-  ]
-}];
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-06.js b/browser/devtools/profiler/test/browser_profiler_tree-view-06.js
deleted file mode 100644
index 14990b5..0000000
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-06.js
+++ /dev/null
@@ -1,70 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if the profiler's tree view implementation works properly and
- * correctly emits events when certain DOM nodes are clicked.
- */
-
-let test = Task.async(function*() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
-
-  let threadNode = new ThreadNode(gSamples);
-  let treeRoot = new CallView({ frame: threadNode });
-
-  let container = document.createElement("vbox");
-  treeRoot.attachTo(container);
-
-  let A = treeRoot.getChild();
-  let B = A.getChild();
-  let D = B.getChild();
-
-  let receivedLinkEvent = treeRoot.once("link");
-  EventUtils.sendMouseEvent({ type: "mousedown" }, D.target.querySelector(".call-tree-url"));
-
-  let eventItem = yield receivedLinkEvent;
-  is(eventItem, D, "The 'link' event target is correct.");
-
-  let receivedZoomEvent = treeRoot.once("zoom");
-  EventUtils.sendMouseEvent({ type: "mousedown" }, D.target.querySelector(".call-tree-zoom"));
-
-  eventItem = yield receivedZoomEvent;
-  is(eventItem, D, "The 'zoom' event target is correct.");
-
-  finish();
-});
-
-let gSamples = [{
-  time: 5,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 32, location: "C (http://foo/bar/baz:56)" }
-  ]
-}, {
-  time: 5 + 1,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 64, location: "D (http://foo/bar/baz:78)" }
-  ]
-}, {
-  time: 5 + 1 + 2,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 64, location: "D (http://foo/bar/baz:78)" }
-  ]
-}, {
-  time: 5 + 1 + 2 + 7,
-  frames: [
-    { category: 8,   location: "(root)" },
-    { category: 8,   location: "A (http://foo/bar/baz:12)" },
-    { category: 128, location: "E (http://foo/bar/baz:90)" },
-    { category: 256, location: "F (http://foo/bar/baz:99)" }
-  ]
-}];
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-07.js b/browser/devtools/profiler/test/browser_profiler_tree-view-07.js
deleted file mode 100644
index fc3d3b1..0000000
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-07.js
+++ /dev/null
@@ -1,70 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if the profiler's tree view implementation works properly and
- * has the correct 'root', 'parent', 'level' etc. accessors on child nodes.
- */
-
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
-
-  let threadNode = new ThreadNode(gSamples);
-  let treeRoot = new CallView({ frame: threadNode });
-
-  let container = document.createElement("vbox");
-  container.id = "call-tree-container";
-  treeRoot.attachTo(container);
-
-  let A = treeRoot.getChild();
-  let B = A.getChild();
-  let D = B.getChild();
-
-  is(D.root, treeRoot,
-    "The .A.B.D node has the correct root.");
-  is(D.parent, B,
-    "The .A.B.D node has the correct parent.");
-  is(D.level, 3,
-    "The .A.B.D node has the correct level.");
-  is(D.target.className, "call-tree-item",
-    "The .A.B.D node has the correct target node.");
-  is(D.container.id, "call-tree-container",
-    "The .A.B.D node has the correct container node.");
-
-  finish();
-}
-
-let gSamples = [{
-  time: 5,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 32, location: "C (http://foo/bar/baz:56)" }
-  ]
-}, {
-  time: 5 + 1,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 64, location: "D (http://foo/bar/baz:78)" }
-  ]
-}, {
-  time: 5 + 1 + 2,
-  frames: [
-    { category: 8,  location: "(root)" },
-    { category: 8,  location: "A (http://foo/bar/baz:12)" },
-    { category: 16, location: "B (http://foo/bar/baz:34)" },
-    { category: 64, location: "D (http://foo/bar/baz:78)" }
-  ]
-}, {
-  time: 5 + 1 + 2 + 7,
-  frames: [
-    { category: 8,   location: "(root)" },
-    { category: 8,   location: "A (http://foo/bar/baz:12)" },
-    { category: 128, location: "E (http://foo/bar/baz:90)" },
-    { category: 256, location: "F (http://foo/bar/baz:99)" }
-  ]
-}];
diff --git a/browser/devtools/profiler/utils/tree-model.js b/browser/devtools/profiler/utils/tree-model.js
deleted file mode 100644
index 14a0737..0000000
--- a/browser/devtools/profiler/utils/tree-model.js
+++ /dev/null
@@ -1,276 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-"use strict";
-
-const {Cc, Ci, Cu, Cr} = require("chrome");
-
-loader.lazyRequireGetter(this, "Services");
-loader.lazyRequireGetter(this, "L10N",
-  "devtools/profiler/global", true);
-loader.lazyRequireGetter(this, "CATEGORY_MAPPINGS",
-  "devtools/profiler/global", true);
-loader.lazyRequireGetter(this, "CATEGORY_JIT",
-  "devtools/profiler/global", true);
-
-const CHROME_SCHEMES = ["chrome://", "resource://"];
-const CONTENT_SCHEMES = ["http://", "https://", "file://"];
-
-exports.ThreadNode = ThreadNode;
-exports.FrameNode = FrameNode;
-exports._isContent = isContent; // used in tests
-
-/**
- * A call tree for a thread. This is essentially a linkage between all frames
- * of all samples into a single tree structure, with additional information
- * on each node, like the time spent (in milliseconds) and samples count.
- *
- * Example:
- * {
- *   duration: number,
- *   calls: {
- *     "FunctionName (url:line)": {
- *       line: number,
- *       category: number,
- *       samples: number,
- *       duration: number,
- *       calls: {
- *         ...
- *       }
- *     }, // FrameNode
- *     ...
- *   }
- * } // ThreadNode
- *
- * @param object threadSamples
- *        The raw samples array received from the backend.
- * @param boolean contentOnly [optional]
- *        @see ThreadNode.prototype.insert
- * @param number beginAt [optional]
- *        @see ThreadNode.prototype.insert
- * @param number endAt [optional]
- *        @see ThreadNode.prototype.insert
- * @param boolean invert [optional]
- *        @see ThreadNode.prototype.insert
- */
-function ThreadNode(threadSamples, contentOnly, beginAt, endAt, invert) {
-  this.samples = 0;
-  this.duration = 0;
-  this.calls = {};
-  this._previousSampleTime = 0;
-
-  for (let sample of threadSamples) {
-    this.insert(sample, contentOnly, beginAt, endAt, invert);
-  }
-}
-
-ThreadNode.prototype = {
-  /**
-   * Adds function calls in the tree from a sample's frames.
-   *
-   * @param object sample
-   *        The { frames, time } sample, containing an array of frames and
-   *        the time the sample was taken. This sample is assumed to be older
-   *        than the most recently inserted one.
-   * @param boolean contentOnly [optional]
-   *        Specifies if platform frames shouldn't be taken into consideration.
-   * @param number beginAt [optional]
-   *        The earliest sample to start at (in milliseconds).
-   * @param number endAt [optional]
-   *        The latest sample to end at (in milliseconds).
-   * @param boolean inverted [optional]
-   *        Specifies if the call tree should be inverted (youngest -> oldest
-   *        frames).
-   */
-  insert: function(sample, contentOnly = false, beginAt = 0, endAt = Infinity,
-                   inverted = false) {
-    let sampleTime = sample.time;
-    if (!sampleTime || sampleTime < beginAt || sampleTime > endAt) {
-      return;
-    }
-
-    let sampleFrames = sample.frames;
-
-    // Filter out platform frames if only content-related function calls
-    // should be taken into consideration.
-    if (contentOnly) {
-      sampleFrames = sampleFrames.filter(isContent);
-    }
-
-    if (!sampleFrames.length) {
-      return;
-    }
-
-    if (inverted) {
-      sampleFrames.reverse();
-      if (!contentOnly) {
-        // Remove the (root) node -- we don't want it as a leaf in the inverted
-        // tree.
-        sampleFrames.pop();
-      }
-    }
-
-    let startIndex = (inverted || contentOnly) ? 0 : 1;
-
-    let sampleDuration = sampleTime - this._previousSampleTime;
-    this._previousSampleTime = sampleTime;
-    this.samples++;
-    this.duration += sampleDuration;
-
-    FrameNode.prototype.insert(
-      sampleFrames, startIndex, sampleTime, sampleDuration, this.calls);
-  },
-
-  /**
-   * Gets additional details about this node.
-   * @return object
-   */
-  getInfo: function() {
-    return {
-      nodeType: "Thread",
-      functionName: L10N.getStr("table.root"),
-      categoryData: {}
-    };
-  }
-};
-
-/**
- * A function call node in a tree.
- *
- * @param string location
- *        The location of this function call. Note that this isn't sanitized,
- *        so it may very well (not?) include the function name, url, etc.
- * @param number line
- *        The line number inside the source containing this function call.
- * @param number category
- *        The category type of this function call ("js", "graphics" etc.).
- */
-function FrameNode({ location, line, category }) {
-  this.location = location;
-  this.line = line;
-  this.category = category;
-  this.sampleTimes = [];
-  this.samples = 0;
-  this.duration = 0;
-  this.calls = {};
-}
-
-FrameNode.prototype = {
-  /**
-   * Adds function calls in the tree from a sample's frames. For example, given
-   * the the frames below (which would account for three calls to `insert` on
-   * the root frame), the following tree structure is created:
-   *
-   *                          A
-   *   A -> B -> C           / \
-   *   A -> B -> D    ~>    B   E
-   *   A -> E -> F         / \   \
-   *                      C   D   F
-   * @param frames
-   *        The sample call stack.
-   * @param index
-   *        The index of the call in the stack representing this node.
-   * @param number time
-   *        The delta time (in milliseconds) when the frame was sampled.
-   * @param number duration
-   *        The amount of time spent executing all functions on the stack.
-   */
-  insert: function(frames, index, time, duration, _store = this.calls) {
-    let frame = frames[index];
-    if (!frame) {
-      return;
-    }
-    let location = frame.location;
-    let child = _store[location] || (_store[location] = new FrameNode(frame));
-    child.sampleTimes.push({ start: time, end: time + duration });
-    child.samples++;
-    child.duration += duration;
-    child.insert(frames, ++index, time, duration);
-  },
-
-  /**
-   * Parses the raw location of this function call to retrieve the actual
-   * function name and source url.
-   *
-   * @return object
-   *         The computed { name, file, url, line } properties for this
-   *         function call.
-   */
-  getInfo: function() {
-    // "EnterJIT" pseudoframes are special, not actually on the stack.
-    if (this.location == "EnterJIT") {
-      this.category = CATEGORY_JIT;
-    }
-
-    // Since only C++ stack frames have associated category information,
-    // default to an "unknown" category otherwise.
-    let categoryData = CATEGORY_MAPPINGS[this.category] || {};
-
-    // Parse the `location` for the function name, source url and line.
-    let firstParen = this.location.indexOf("(");
-    let lastColon = this.location.lastIndexOf(":");
-    let resource = this.location.substring(firstParen + 1, lastColon);
-    let line = this.location.substring(lastColon + 1).replace(")", "");
-    let url = resource.split(" -> ").pop();
-    let uri = nsIURL(url);
-    let functionName, fileName, hostName;
-
-    // If the URI digged out from the `location` is valid, this is a JS frame.
-    if (uri) {
-      functionName = this.location.substring(0, firstParen - 1);
-      fileName = (uri.fileName + (uri.ref ? "#" + uri.ref : "")) || "/";
-      hostName = uri.host;
-    } else {
-      functionName = this.location;
-      url = null;
-      line = null;
-    }
-
-    return {
-      nodeType: "Frame",
-      functionName: functionName,
-      fileName: fileName,
-      hostName: hostName,
-      url: url,
-      line: line || this.line,
-      categoryData: categoryData,
-      isContent: !!isContent(this)
-    };
-  }
-};
-
-/**
- * Checks if the specified function represents a chrome or content frame.
- *
- * @param object frame
- *        The { category, location } properties of the frame.
- * @return boolean
- *         True if a content frame, false if a chrome frame.
- */
-function isContent({ category, location }) {
-  // Only C++ stack frames have associated category information.
-  return !category &&
-    !CHROME_SCHEMES.find(e => location.contains(e)) &&
-    CONTENT_SCHEMES.find(e => location.contains(e));
-}
-
-/**
- * Helper for getting an nsIURL instance out of a string.
- */
-function nsIURL(url) {
-  let cached = gNSURLStore.get(url);
-  if (cached) {
-    return cached;
-  }
-  let uri = null;
-  try {
-    uri = Services.io.newURI(url, null, null).QueryInterface(Ci.nsIURL);
-  } catch(e) {
-    // The passed url string is invalid.
-  }
-  gNSURLStore.set(url, uri);
-  return uri;
-}
-
-// The cache used in the `nsIURL` function.
-let gNSURLStore = new Map();
diff --git a/browser/devtools/profiler/utils/tree-view.js b/browser/devtools/profiler/utils/tree-view.js
deleted file mode 100644
index 393eb4b..0000000
--- a/browser/devtools/profiler/utils/tree-view.js
+++ /dev/null
@@ -1,295 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-"use strict";
-
-const {Cc, Ci, Cu, Cr} = require("chrome");
-
-loader.lazyRequireGetter(this, "L10N",
-  "devtools/profiler/global", true);
-
-loader.lazyImporter(this, "Heritage",
-  "resource:///modules/devtools/ViewHelpers.jsm");
-loader.lazyImporter(this, "AbstractTreeItem",
-  "resource:///modules/devtools/AbstractTreeItem.jsm");
-
-const URL_LABEL_TOOLTIP = L10N.getStr("table.url.tooltiptext");
-const ZOOM_BUTTON_TOOLTIP = L10N.getStr("table.zoom.tooltiptext");
-const CALL_TREE_INDENTATION = 16; // px
-const CALL_TREE_AUTO_EXPAND = 3; // depth
-
-const clamp = (val, min, max) => Math.max(min, Math.min(max, val));
-const sum = vals => vals.reduce((a, b) => a + b, 0);
-
-exports.CallView = CallView;
-
-/**
- * An item in a call tree view, which looks like this:
- *
- *   Time (ms)  |   Cost   | Calls | Function
- * ============================================================================
- *     1,000.00 |  100.00% |       | ▼ (root)
- *       500.12 |   50.01% |   300 |   ▼ foo                          Categ. 1
- *       300.34 |   30.03% |  1500 |     ▼ bar                        Categ. 2
- *        10.56 |    0.01% |    42 |       ▶ call_with_children       Categ. 3
- *        90.78 |    0.09% |    25 |         call_without_children    Categ. 4
- *
- * Every instance of a `CallView` represents a row in the call tree. The same
- * parent node is used for all rows.
- *
- * @param number autoExpandDepth [optional]
- *        The depth to which the tree should automatically expand. Defualts to
- *        the caller's autoExpandDepth if a caller exists, otherwise defaults to
- *        CALL_TREE_AUTO_EXPAND.
- * @param CallView caller
- *        The CallView considered the "caller" frame. This instance will be
- *        represent the "callee". Should be null for root nodes.
- * @param ThreadNode | FrameNode frame
- *        Details about this function, like { samples, duration, calls } etc.
- * @param number level
- *        The indentation level in the call tree. The root node is at level 0.
- * @param boolean hidden [optional]
- *        Whether this node should be hidden and not contribute to depth/level
- *        calculations. Defaults to false.
- * @param boolean inverted [optional]
- *        Whether the call tree has been inverted (bottom up, rather than
- *        top-down). Defaults to false.
- */
-function CallView({ autoExpandDepth, caller, frame, level, hidden, inverted }) {
-  level = level || 0;
-  if (hidden) {
-    level--;
-  }
-
-  AbstractTreeItem.call(this, {
-    parent: caller,
-    level
-  });
-
-  this.caller = caller;
-  this.autoExpandDepth = autoExpandDepth != null
-    ? autoExpandDepth
-    : caller ? caller.autoExpandDepth : CALL_TREE_AUTO_EXPAND;
-  this.frame = frame;
-  this.hidden = hidden;
-  this.inverted = inverted;
-
-  this._onUrlClick = this._onUrlClick.bind(this);
-  this._onZoomClick = this._onZoomClick.bind(this);
-};
-
-CallView.prototype = Heritage.extend(AbstractTreeItem.prototype, {
-  /**
-   * Creates the view for this tree node.
-   * @param nsIDOMNode document
-   * @param nsIDOMNode arrowNode
-   * @return nsIDOMNode
-   */
-  _displaySelf: function(document, arrowNode) {
-    this.document = document;
-
-    let frameInfo = this.frame.getInfo();
-    let framePercentage = this._getPercentage(this.frame.samples);
-
-    let selfPercentage;
-    let selfDuration;
-    if (!this._getChildCalls().length) {
-      selfPercentage = framePercentage;
-      selfDuration = this.frame.duration;
-    } else {
-      let childrenPercentage = sum([this._getPercentage(c.samples)
-                                    for (c of this._getChildCalls())]);
-      selfPercentage = clamp(framePercentage - childrenPercentage, 0, 100);
-
-      let childrenDuration = sum([c.duration
-                                  for (c of this._getChildCalls())]);
-      selfDuration = this.frame.duration - childrenDuration;
-
-      if (this.inverted) {
-        selfPercentage = framePercentage - selfPercentage;
-        selfDuration = this.frame.duration - selfDuration;
-      }
-    }
-
-    let durationCell = this._createTimeCell(this.frame.duration);
-    let selfDurationCell = this._createTimeCell(selfDuration, true);
-    let percentageCell = this._createExecutionCell(framePercentage);
-    let selfPercentageCell = this._createExecutionCell(selfPercentage, true);
-    let samplesCell = this._createSamplesCell(this.frame.samples);
-    let functionCell = this._createFunctionCell(arrowNode, frameInfo, this.level);
-
-    let targetNode = document.createElement("hbox");
-    targetNode.className = "call-tree-item";
-    targetNode.setAttribute("origin", frameInfo.isContent ? "content" : "chrome");
-    targetNode.setAttribute("category", frameInfo.categoryData.abbrev || "");
-    targetNode.setAttribute("tooltiptext", this.frame.location || "");
-    if (this.hidden) {
-      targetNode.style.display = "none";
-    }
-
-    let isRoot = frameInfo.nodeType == "Thread";
-    if (isRoot) {
-      functionCell.querySelector(".call-tree-zoom").hidden = true;
-      functionCell.querySelector(".call-tree-category").hidden = true;
-    }
-
-    targetNode.appendChild(durationCell);
-    targetNode.appendChild(percentageCell);
-    targetNode.appendChild(selfDurationCell);
-    targetNode.appendChild(selfPercentageCell);
-    targetNode.appendChild(samplesCell);
-    targetNode.appendChild(functionCell);
-
-    return targetNode;
-  },
-
-  /**
-   * Calculate what percentage of all samples the given number of samples is.
-   */
-  _getPercentage: function(samples) {
-    return samples / this.root.frame.samples * 100;
-  },
-
-  /**
-   * Return an array of this frame's child calls.
-   */
-  _getChildCalls: function() {
-    return Object.keys(this.frame.calls).map(k => this.frame.calls[k]);
-  },
-
-  /**
-   * Populates this node in the call tree with the corresponding "callees".
-   * These are defined in the `frame` data source for this call view.
-   * @param array:AbstractTreeItem children
-   */
-  _populateSelf: function(children) {
-    let newLevel = this.level + 1;
-
-    for (let newFrame of this._getChildCalls()) {
-      children.push(new CallView({
-        caller: this,
-        frame: newFrame,
-        level: newLevel,
-        inverted: this.inverted
-      }));
-    }
-
-    // Sort the "callees" asc. by samples, before inserting them in the tree.
-    children.sort((a, b) => a.frame.samples < b.frame.samples ? 1 : -1);
-  },
-
-  /**
-   * Functions creating each cell in this call view.
-   * Invoked by `_displaySelf`.
-   */
-  _createTimeCell: function(duration, isSelf = false) {
-    let cell = this.document.createElement("label");
-    cell.className = "plain call-tree-cell";
-    cell.setAttribute("type", isSelf ? "self-duration" : "duration");
-    cell.setAttribute("crop", "end");
-    cell.setAttribute("value", L10N.numberWithDecimals(duration, 2));
-    return cell;
-  },
-  _createExecutionCell: function(percentage, isSelf = false) {
-    let cell = this.document.createElement("label");
-    cell.className = "plain call-tree-cell";
-    cell.setAttribute("type", isSelf ? "self-percentage" : "percentage");
-    cell.setAttribute("crop", "end");
-    cell.setAttribute("value", L10N.numberWithDecimals(percentage, 2) + "%");
-    return cell;
-  },
-  _createSamplesCell: function(count) {
-    let cell = this.document.createElement("label");
-    cell.className = "plain call-tree-cell";
-    cell.setAttribute("type", "samples");
-    cell.setAttribute("crop", "end");
-    cell.setAttribute("value", count || "");
-    return cell;
-  },
-  _createFunctionCell: function(arrowNode, frameInfo, frameLevel) {
-    let cell = this.document.createElement("hbox");
-    cell.className = "call-tree-cell";
-    cell.style.MozMarginStart = (frameLevel * CALL_TREE_INDENTATION) + "px";
-    cell.setAttribute("type", "function");
-    cell.appendChild(arrowNode);
-
-    let nameNode = this.document.createElement("label");
-    nameNode.className = "plain call-tree-name";
-    nameNode.setAttribute("flex", "1");
-    nameNode.setAttribute("crop", "end");
-    nameNode.setAttribute("value", frameInfo.functionName || "");
-    cell.appendChild(nameNode);
-
-    let urlNode = this.document.createElement("label");
-    urlNode.className = "plain call-tree-url";
-    urlNode.setAttribute("flex", "1");
-    urlNode.setAttribute("crop", "end");
-    urlNode.setAttribute("value", frameInfo.fileName || "");
-    urlNode.setAttribute("tooltiptext", URL_LABEL_TOOLTIP + " → " + frameInfo.url);
-    urlNode.addEventListener("mousedown", this._onUrlClick);
-    cell.appendChild(urlNode);
-
-    let lineNode = this.document.createElement("label");
-    lineNode.className = "plain call-tree-line";
-    lineNode.setAttribute("value", frameInfo.line ? ":" + frameInfo.line : "");
-    cell.appendChild(lineNode);
-
-    let hostNode = this.document.createElement("label");
-    hostNode.className = "plain call-tree-host";
-    hostNode.setAttribute("value", frameInfo.hostName || "");
-    cell.appendChild(hostNode);
-
-    let zoomNode = this.document.createElement("button");
-    zoomNode.className = "plain call-tree-zoom";
-    zoomNode.setAttribute("tooltiptext", ZOOM_BUTTON_TOOLTIP);
-    zoomNode.addEventListener("mousedown", this._onZoomClick);
-    cell.appendChild(zoomNode);
-
-    let spacerNode = this.document.createElement("spacer");
-    spacerNode.setAttribute("flex", "10000");
-    cell.appendChild(spacerNode);
-
-    let categoryNode = this.document.createElement("label");
-    categoryNode.className = "plain call-tree-category";
-    categoryNode.style.color = frameInfo.categoryData.color;
-    categoryNode.setAttribute("value", frameInfo.categoryData.label || "");
-    cell.appendChild(categoryNode);
-
-    let hasDescendants = Object.keys(this.frame.calls).length > 0;
-    if (hasDescendants == false) {
-      arrowNode.setAttribute("invisible", "");
-    }
-
-    return cell;
-  },
-
-  /**
-   * Toggles the category information hidden or visible.
-   * @param boolean visible
-   */
-  toggleCategories: function(visible) {
-    if (!visible) {
-      this.container.setAttribute("categories-hidden", "");
-    } else {
-      this.container.removeAttribute("categories-hidden");
-    }
-  },
-
-  /**
-   * Handler for the "click" event on the url node of this call view.
-   */
-  _onUrlClick: function(e) {
-    e.preventDefault();
-    e.stopPropagation();
-    this.root.emit("link", this);
-  },
-
-  /**
-   * Handler for the "click" event on the zoom node of this call view.
-   */
-  _onZoomClick: function(e) {
-    e.preventDefault();
-    e.stopPropagation();
-    this.root.emit("zoom", this);
-  }
-});
diff --git a/browser/devtools/shared/moz.build b/browser/devtools/shared/moz.build
index 8a8d92a..2d66a3e 100644
--- a/browser/devtools/shared/moz.build
+++ b/browser/devtools/shared/moz.build
@@ -34,16 +34,18 @@ EXTRA_JS_MODULES.devtools.shared += [
     'autocomplete-popup.js',
     'd3.js',
     'doorhanger.js',
     'frame-script-utils.js',
     'inplace-editor.js',
     'observable-object.js',
     'telemetry.js',
     'theme-switching.js',
+    'tree-model.js',
+    'tree-view.js',
     'undo.js',
 ]
 
 EXTRA_JS_MODULES.devtools.shared.widgets += [
     'widgets/CubicBezierWidget.js',
     'widgets/FastListWidget.js',
     'widgets/Spectrum.js',
     'widgets/TableWidget.js',
diff --git a/browser/devtools/shared/test/browser.ini b/browser/devtools/shared/test/browser.ini
index 71cacf7..3f48585 100644
--- a/browser/devtools/shared/test/browser.ini
+++ b/browser/devtools/shared/test/browser.ini
@@ -69,8 +69,22 @@ skip-if = e10s # Bug 1086492 - Disable tilt for e10s
 [browser_templater_basic.js]
 [browser_toolbar_basic.js]
 [browser_toolbar_tooltip.js]
 [browser_toolbar_webconsole_errors_count.js]
 skip-if = buildapp == 'mulet'
 [browser_treeWidget_basic.js]
 [browser_treeWidget_keyboard_interaction.js]
 [browser_treeWidget_mouse_interaction.js]
+[browser_profiler_tree-frame-node.js]
+[browser_profiler_tree-model-01.js]
+[browser_profiler_tree-model-02.js]
+[browser_profiler_tree-model-03.js]
+[browser_profiler_tree-model-04.js]
+[browser_profiler_tree-model-05.js]
+[browser_profiler_tree-view-01.js]
+[browser_profiler_tree-view-02.js]
+[browser_profiler_tree-view-03.js]
+[browser_profiler_tree-view-04.js]
+[browser_profiler_tree-view-05.js]
+[browser_profiler_tree-view-06.js]
+[browser_profiler_tree-view-07.js]
+[browser_profiler_content-check.js]
diff --git a/browser/devtools/shared/test/browser_profiler_content-check.js b/browser/devtools/shared/test/browser_profiler_content-check.js
new file mode 100644
index 0000000..d614a5c
--- /dev/null
+++ b/browser/devtools/shared/test/browser_profiler_content-check.js
@@ -0,0 +1,51 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests the function testing whether or not a frame is content or chrome
+ * works properly.
+ */
+
+function test() {
+  let { _isContent } = devtools.require("devtools/shared/tree-model");
+
+  ok(_isContent({ location: "http://foo" }),
+    "Verifying content/chrome frames is working properly.");
+  ok(_isContent({ location: "https://foo" }),
+    "Verifying content/chrome frames is working properly.");
+  ok(_isContent({ location: "file://foo" }),
+    "Verifying content/chrome frames is working properly.");
+
+  ok(!_isContent({ location: "chrome://foo" }),
+    "Verifying content/chrome frames is working properly.");
+  ok(!_isContent({ location: "resource://foo" }),
+    "Verifying content/chrome frames is working properly.");
+
+  ok(!_isContent({ location: "chrome://foo -> http://bar" }),
+    "Verifying content/chrome frames is working properly.");
+  ok(!_isContent({ location: "chrome://foo -> https://bar" }),
+    "Verifying content/chrome frames is working properly.");
+  ok(!_isContent({ location: "chrome://foo -> file://bar" }),
+    "Verifying content/chrome frames is working properly.");
+
+  ok(!_isContent({ location: "resource://foo -> http://bar" }),
+    "Verifying content/chrome frames is working properly.");
+  ok(!_isContent({ location: "resource://foo -> https://bar" }),
+    "Verifying content/chrome frames is working properly.");
+  ok(!_isContent({ location: "resource://foo -> file://bar" }),
+    "Verifying content/chrome frames is working properly.");
+
+  ok(!_isContent({ category: 1, location: "chrome://foo" }),
+    "Verifying content/chrome frames is working properly.");
+  ok(!_isContent({ category: 1, location: "resource://foo" }),
+    "Verifying content/chrome frames is working properly.");
+
+  ok(!_isContent({ category: 1, location: "file://foo -> http://bar" }),
+    "Verifying content/chrome frames is working properly.");
+  ok(!_isContent({ category: 1, location: "file://foo -> https://bar" }),
+    "Verifying content/chrome frames is working properly.");
+  ok(!_isContent({ category: 1, location: "file://foo -> file://bar" }),
+    "Verifying content/chrome frames is working properly.");
+
+  finish();
+}
diff --git a/browser/devtools/shared/test/browser_profiler_tree-frame-node.js b/browser/devtools/shared/test/browser_profiler_tree-frame-node.js
new file mode 100644
index 0000000..962352da
--- /dev/null
+++ b/browser/devtools/shared/test/browser_profiler_tree-frame-node.js
@@ -0,0 +1,166 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Verifies if FrameNodes retain and parse their data appropriately.
+ */
+
+function test() {
+  let { FrameNode } = devtools.require("devtools/shared/tree-model");
+
+  let frame1 = new FrameNode({
+    location: "hello/<.world (http://foo/bar.js:123)",
+    line: 456
+  });
+
+  is(frame1.getInfo().nodeType, "Frame",
+    "The first frame node has the correct type.");
+  is(frame1.getInfo().functionName, "hello/<.world",
+    "The first frame node has the correct function name.");
+  is(frame1.getInfo().fileName, "bar.js",
+    "The first frame node has the correct file name.");
+  is(frame1.getInfo().hostName, "foo",
+    "The first frame node has the correct host name.");
+  is(frame1.getInfo().url, "http://foo/bar.js",
+    "The first frame node has the correct url.");
+  is(frame1.getInfo().line, 123,
+    "The first frame node has the correct line.");
+  is(frame1.getInfo().categoryData.toSource(), "({})",
+    "The first frame node has the correct category data.");
+  is(frame1.getInfo().isContent, true,
+    "The first frame node has the correct content flag.");
+
+  let frame2 = new FrameNode({
+    location: "hello/<.world (http://foo/bar.js#baz:123)",
+    line: 456
+  });
+
+  is(frame2.getInfo().nodeType, "Frame",
+    "The second frame node has the correct type.");
+  is(frame2.getInfo().functionName, "hello/<.world",
+    "The second frame node has the correct function name.");
+  is(frame2.getInfo().fileName, "bar.js#baz",
+    "The second frame node has the correct file name.");
+  is(frame2.getInfo().hostName, "foo",
+    "The second frame node has the correct host name.");
+  is(frame2.getInfo().url, "http://foo/bar.js#baz",
+    "The second frame node has the correct url.");
+  is(frame2.getInfo().line, 123,
+    "The second frame node has the correct line.");
+  is(frame2.getInfo().categoryData.toSource(), "({})",
+    "The second frame node has the correct category data.");
+  is(frame2.getInfo().isContent, true,
+    "The second frame node has the correct content flag.");
+
+  let frame3 = new FrameNode({
+    location: "hello/<.world (http://foo/#bar:123)",
+    line: 456
+  });
+
+  is(frame3.getInfo().nodeType, "Frame",
+    "The third frame node has the correct type.");
+  is(frame3.getInfo().functionName, "hello/<.world",
+    "The third frame node has the correct function name.");
+  is(frame3.getInfo().fileName, "#bar",
+    "The third frame node has the correct file name.");
+  is(frame3.getInfo().hostName, "foo",
+    "The third frame node has the correct host name.");
+  is(frame3.getInfo().url, "http://foo/#bar",
+    "The third frame node has the correct url.");
+  is(frame3.getInfo().line, 123,
+    "The third frame node has the correct line.");
+  is(frame3.getInfo().categoryData.toSource(), "({})",
+    "The third frame node has the correct category data.");
+  is(frame3.getInfo().isContent, true,
+    "The third frame node has the correct content flag.");
+
+  let frame4 = new FrameNode({
+    location: "hello/<.world (http://foo/:123)",
+    line: 456
+  });
+
+  is(frame4.getInfo().nodeType, "Frame",
+    "The fourth frame node has the correct type.");
+  is(frame4.getInfo().functionName, "hello/<.world",
+    "The fourth frame node has the correct function name.");
+  is(frame4.getInfo().fileName, "/",
+    "The fourth frame node has the correct file name.");
+  is(frame4.getInfo().hostName, "foo",
+    "The fourth frame node has the correct host name.");
+  is(frame4.getInfo().url, "http://foo/",
+    "The fourth frame node has the correct url.");
+  is(frame4.getInfo().line, 123,
+    "The fourth frame node has the correct line.");
+  is(frame4.getInfo().categoryData.toSource(), "({})",
+    "The fourth frame node has the correct category data.");
+  is(frame4.getInfo().isContent, true,
+    "The fourth frame node has the correct content flag.");
+
+  let frame5 = new FrameNode({
+    location: "hello/<.world (resource://foo.js -> http://bar/baz.js:123)",
+    line: 456
+  });
+
+  is(frame5.getInfo().nodeType, "Frame",
+    "The fifth frame node has the correct type.");
+  is(frame5.getInfo().functionName, "hello/<.world",
+    "The fifth frame node has the correct function name.");
+  is(frame5.getInfo().fileName, "baz.js",
+    "The fifth frame node has the correct file name.");
+  is(frame5.getInfo().hostName, "bar",
+    "The fifth frame node has the correct host name.");
+  is(frame5.getInfo().url, "http://bar/baz.js",
+    "The fifth frame node has the correct url.");
+  is(frame5.getInfo().line, 123,
+    "The fifth frame node has the correct line.");
+  is(frame5.getInfo().categoryData.toSource(), "({})",
+    "The fifth frame node has the correct category data.");
+  is(frame5.getInfo().isContent, false,
+    "The fifth frame node has the correct content flag.");
+
+  let frame6 = new FrameNode({
+    location: "Foo::Bar::Baz",
+    line: 456,
+    category: 8
+  });
+
+  is(frame6.getInfo().nodeType, "Frame",
+    "The sixth frame node has the correct type.");
+  is(frame6.getInfo().functionName, "Foo::Bar::Baz",
+    "The sixth frame node has the correct function name.");
+  is(frame6.getInfo().fileName, null,
+    "The sixth frame node has the correct file name.");
+  is(frame6.getInfo().hostName, null,
+    "The sixth frame node has the correct host name.");
+  is(frame6.getInfo().url, null,
+    "The sixth frame node has the correct url.");
+  is(frame6.getInfo().line, 456,
+    "The sixth frame node has the correct line.");
+  is(frame6.getInfo().categoryData.abbrev, "other",
+    "The sixth frame node has the correct category data.");
+  is(frame6.getInfo().isContent, false,
+    "The sixth frame node has the correct content flag.");
+
+  let frame7 = new FrameNode({
+    location: "EnterJIT"
+  });
+
+  is(frame7.getInfo().nodeType, "Frame",
+    "The seventh frame node has the correct type.");
+  is(frame7.getInfo().functionName, "EnterJIT",
+    "The seventh frame node has the correct function name.");
+  is(frame7.getInfo().fileName, null,
+    "The seventh frame node has the correct file name.");
+  is(frame7.getInfo().hostName, null,
+    "The seventh frame node has the correct host name.");
+  is(frame7.getInfo().url, null,
+    "The seventh frame node has the correct url.");
+  is(frame7.getInfo().line, null,
+    "The seventh frame node has the correct line.");
+  is(frame7.getInfo().categoryData.abbrev, "js",
+    "The seventh frame node has the correct category data.");
+  is(frame7.getInfo().isContent, false,
+    "The seventh frame node has the correct content flag.");
+
+  finish();
+}
diff --git a/browser/devtools/shared/test/browser_profiler_tree-model-01.js b/browser/devtools/shared/test/browser_profiler_tree-model-01.js
new file mode 100644
index 0000000..15bd5f2
--- /dev/null
+++ b/browser/devtools/shared/test/browser_profiler_tree-model-01.js
@@ -0,0 +1,196 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests if a call tree model can be correctly computed from a samples array.
+ */
+
+function test() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+
+  // Create a root node from a given samples array.
+
+  let root = new ThreadNode(gSamples);
+
+  // Test the root node.
+
+  is(root.duration, 18,
+    "The correct duration was calculated for the root node.");
+  is(root.getInfo().nodeType, "Thread",
+    "The correct node type was retrieved for the root node.");
+  is(root.getInfo().functionName, "(root)",
+    "The correct function name was retrieved for the root node.");
+  is(root.getInfo().categoryData.toSource(), "({})",
+    "The correct empty category data was retrieved for the root node.");
+
+  is(Object.keys(root.calls).length, 1,
+    "The correct number of child calls were calculated for the root node.");
+  is(Object.keys(root.calls)[0], "A",
+    "The root node's only child call is correct.");
+
+  // Test all the descendant nodes.
+
+  is(Object.keys(root.calls.A.calls).length, 2,
+    "The correct number of child calls were calculated for the '.A' node.");
+  is(Object.keys(root.calls.A.calls)[0], "B",
+    "The '.A' node's first child call is correct.");
+  is(Object.keys(root.calls.A.calls)[1], "E",
+    "The '.A' node's second child call is correct.");
+
+  is(Object.keys(root.calls.A.calls.B.calls).length, 2,
+    "The correct number of child calls were calculated for the '.A.B' node.");
+  is(Object.keys(root.calls.A.calls.B.calls)[0], "C",
+    "The '.A.B' node's first child call is correct.");
+  is(Object.keys(root.calls.A.calls.B.calls)[1], "D",
+    "The '.A.B' node's second child call is correct.");
+
+  is(Object.keys(root.calls.A.calls.E.calls).length, 1,
+    "The correct number of child calls were calculated for the '.A.E' node.");
+  is(Object.keys(root.calls.A.calls.E.calls)[0], "F",
+    "The '.A.E' node's only child call is correct.");
+
+  is(Object.keys(root.calls.A.calls.B.calls.C.calls).length, 0,
+    "The correct number of child calls were calculated for the '.A.B.C' node.");
+  is(Object.keys(root.calls.A.calls.B.calls.D.calls).length, 0,
+    "The correct number of child calls were calculated for the '.A.B.D' node.");
+  is(Object.keys(root.calls.A.calls.E.calls.F.calls).length, 0,
+    "The correct number of child calls were calculated for the '.A.E.F' node.");
+
+  // Insert new nodes in the tree.
+
+  root.insert({
+    time: 20,
+    frames: [
+      { location: "(root)" },
+      { location: "A" },
+      { location: "B" },
+      { location: "C" },
+      { location: "D" },
+      { location: "E" },
+      { location: "F" },
+      { location: "G" }
+    ]
+  });
+
+  // Retest the root node.
+
+  is(root.duration, 20,
+    "The correct duration was recalculated for the root node.");
+
+  is(Object.keys(root.calls).length, 1,
+    "The correct number of child calls were calculated for the root node.");
+  is(Object.keys(root.calls)[0], "A",
+    "The root node's only child call is correct.");
+
+  // Retest all the descendant nodes.
+
+  is(Object.keys(root.calls.A.calls).length, 2,
+    "The correct number of child calls were calculated for the '.A' node.");
+  is(Object.keys(root.calls.A.calls)[0], "B",
+    "The '.A' node's first child call is correct.");
+  is(Object.keys(root.calls.A.calls)[1], "E",
+    "The '.A' node's second child call is correct.");
+
+  is(Object.keys(root.calls.A.calls.B.calls).length, 2,
+    "The correct number of child calls were calculated for the '.A.B' node.");
+  is(Object.keys(root.calls.A.calls.B.calls)[0], "C",
+    "The '.A.B' node's first child call is correct.");
+  is(Object.keys(root.calls.A.calls.B.calls)[1], "D",
+    "The '.A.B' node's second child call is correct.");
+
+  is(Object.keys(root.calls.A.calls.E.calls).length, 1,
+    "The correct number of child calls were calculated for the '.A.E' node.");
+  is(Object.keys(root.calls.A.calls.E.calls)[0], "F",
+    "The '.A.E' node's only child call is correct.");
+
+  is(Object.keys(root.calls.A.calls.B.calls.C.calls).length, 1,
+    "The correct number of child calls were calculated for the '.A.B.C' node.");
+  is(Object.keys(root.calls.A.calls.B.calls.C.calls)[0], "D",
+    "The '.A.B.C' node's only child call is correct.");
+
+  is(Object.keys(root.calls.A.calls.B.calls.C.calls.D.calls).length, 1,
+    "The correct number of child calls were calculated for the '.A.B.C.D' node.");
+  is(Object.keys(root.calls.A.calls.B.calls.C.calls.D.calls)[0], "E",
+    "The '.A.B.C.D' node's only child call is correct.");
+
+  is(Object.keys(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls).length, 1,
+    "The correct number of child calls were calculated for the '.A.B.C.D.E' node.");
+  is(Object.keys(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls)[0], "F",
+    "The '.A.B.C.D.E' node's only child call is correct.");
+
+  is(Object.keys(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls.F.calls).length, 1,
+    "The correct number of child calls were calculated for the '.A.B.C.D.E.F' node.");
+  is(Object.keys(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls.F.calls)[0], "G",
+    "The '.A.B.C.D.E.F' node's only child call is correct.");
+
+  is(Object.keys(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls.F.calls.G.calls).length, 0,
+    "The correct number of child calls were calculated for the '.A.B.D.E.F.G' node.");
+  is(Object.keys(root.calls.A.calls.B.calls.D.calls).length, 0,
+    "The correct number of child calls were calculated for the '.A.B.D' node.");
+  is(Object.keys(root.calls.A.calls.E.calls.F.calls).length, 0,
+    "The correct number of child calls were calculated for the '.A.E.F' node.");
+
+  // Check the location, sample times, duration and samples of the root.
+
+  is(root.calls.A.location, "A",
+    "The '.A' node has the correct location.");
+  is(root.calls.A.sampleTimes.toSource(),
+    "[{start:5, end:10}, {start:11, end:17}, {start:18, end:25}, {start:20, end:22}]",
+    "The '.A' node has the correct sample times.");
+  is(root.calls.A.duration, 20,
+    "The '.A' node has the correct duration in milliseconds.");
+  is(root.calls.A.samples, 4,
+    "The '.A' node has the correct number of samples.");
+
+  // ...and the rightmost leaf.
+
+  is(root.calls.A.calls.E.calls.F.location, "F",
+    "The '.A.E.F' node has the correct location.");
+  is(root.calls.A.calls.E.calls.F.sampleTimes.toSource(),
+    "[{start:18, end:25}]",
+    "The '.A.E.F' node has the correct sample times.");
+  is(root.calls.A.calls.E.calls.F.duration, 7,
+    "The '.A.E.F' node has the correct duration in milliseconds.");
+  is(root.calls.A.calls.E.calls.F.samples, 1,
+    "The '.A.E.F' node has the correct number of samples.");
+
+  // ...and the leftmost leaf.
+
+  is(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls.F.calls.G.location, "G",
+    "The '.A.B.C.D.E.F.G' node has the correct location.");
+  is(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls.F.calls.G.sampleTimes.toSource(),
+    "[{start:20, end:22}]",
+    "The '.A.B.C.D.E.F.G' node has the correct sample times.");
+  is(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls.F.calls.G.duration, 2,
+    "The '.A.B.C.D.E.F.G' node has the correct duration in milliseconds.");
+  is(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls.F.calls.G.samples, 1,
+    "The '.A.B.C.D.E.F.G' node has the correct number of samples.");
+
+  finish();
+}
+
+let gSamples = [{
+  time: 5,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "C" }
+  ]
+}, {
+  time: 5 + 6,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "D" }
+  ]
+}, {
+  time: 5 + 6 + 7,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "E" },
+    { location: "F" }
+  ]
+}];
diff --git a/browser/devtools/shared/test/browser_profiler_tree-model-02.js b/browser/devtools/shared/test/browser_profiler_tree-model-02.js
new file mode 100644
index 0000000..26565a5
--- /dev/null
+++ b/browser/devtools/shared/test/browser_profiler_tree-model-02.js
@@ -0,0 +1,59 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests if a call tree model ignores samples with no timing information.
+ */
+
+function test() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+
+  // Create a root node from a given samples array.
+
+  let root = new ThreadNode(gSamples);
+
+  // Test the root node.
+
+  is(root.duration, 5,
+    "The correct duration was calculated for the root node.");
+
+  is(Object.keys(root.calls).length, 1,
+    "The correct number of child calls were calculated for the root node.");
+  is(Object.keys(root.calls)[0], "A",
+    "The root node's only child call is correct.");
+
+  // Test all the descendant nodes.
+
+  is(Object.keys(root.calls.A.calls).length, 1,
+    "The correct number of child calls were calculated for the '.A' node.");
+  is(Object.keys(root.calls.A.calls)[0], "B",
+    "The '.A.B' node's only child call is correct.");
+
+  is(Object.keys(root.calls.A.calls.B.calls).length, 1,
+    "The correct number of child calls were calculated for the '.A.B' node.");
+  is(Object.keys(root.calls.A.calls.B.calls)[0], "C",
+    "The '.A.B' node's only child call is correct.");
+
+  is(Object.keys(root.calls.A.calls.B.calls.C.calls).length, 0,
+    "The correct number of child calls were calculated for the '.A.B.C' node.");
+
+  finish();
+}
+
+let gSamples = [{
+  time: 5,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "C" }
+  ]
+}, {
+  time: null,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "D" }
+  ]
+}];
diff --git a/browser/devtools/shared/test/browser_profiler_tree-model-03.js b/browser/devtools/shared/test/browser_profiler_tree-model-03.js
new file mode 100644
index 0000000..ac4e0ac
--- /dev/null
+++ b/browser/devtools/shared/test/browser_profiler_tree-model-03.js
@@ -0,0 +1,86 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests if a call tree model can be correctly computed from a samples array,
+ * while at the same time filtering by duration.
+ */
+
+function test() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+
+  // Create a root node from a given samples array, filtering by time.
+
+  let root = new ThreadNode(gSamples, false, 11, 18);
+
+  // Test the root node.
+
+  is(root.duration, 18,
+    "The correct duration was calculated for the root node.");
+
+  is(Object.keys(root.calls).length, 1,
+    "The correct number of child calls were calculated for the root node.");
+  is(Object.keys(root.calls)[0], "A",
+    "The root node's only child call is correct.");
+
+  // Test all the descendant nodes.
+
+  is(Object.keys(root.calls.A.calls).length, 2,
+    "The correct number of child calls were calculated for the '.A' node.");
+  is(Object.keys(root.calls.A.calls)[0], "B",
+    "The '.A' node's first child call is correct.");
+  is(Object.keys(root.calls.A.calls)[1], "E",
+    "The '.A' node's second child call is correct.");
+
+  is(Object.keys(root.calls.A.calls.B.calls).length, 1,
+    "The correct number of child calls were calculated for the '.A.B' node.");
+  is(Object.keys(root.calls.A.calls.B.calls)[0], "D",
+    "The '.A.B' node's only child call is correct.");
+
+  is(Object.keys(root.calls.A.calls.E.calls).length, 1,
+    "The correct number of child calls were calculated for the '.A.E' node.");
+  is(Object.keys(root.calls.A.calls.E.calls)[0], "F",
+    "The '.A.E' node's only child call is correct.");
+
+  is(Object.keys(root.calls.A.calls.B.calls.D.calls).length, 0,
+    "The correct number of child calls were calculated for the '.A.B.D' node.");
+  is(Object.keys(root.calls.A.calls.E.calls.F.calls).length, 0,
+    "The correct number of child calls were calculated for the '.A.E.F' node.");
+
+  finish();
+}
+
+let gSamples = [{
+  time: 5,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "C" }
+  ]
+}, {
+  time: 5 + 6,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "D" }
+  ]
+}, {
+  time: 5 + 6 + 7,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "E" },
+    { location: "F" }
+  ]
+}, {
+  time: 5 + 6 + 7 + 8,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "C" },
+    { location: "D" }
+  ]
+}];
diff --git a/browser/devtools/shared/test/browser_profiler_tree-model-04.js b/browser/devtools/shared/test/browser_profiler_tree-model-04.js
new file mode 100644
index 0000000..7872c41
--- /dev/null
+++ b/browser/devtools/shared/test/browser_profiler_tree-model-04.js
@@ -0,0 +1,81 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests if a call tree model can be correctly computed from a samples array,
+ * while at the same time filtering by duration and content-only frames.
+ */
+
+function test() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+
+  // Create a root node from a given samples array, filtering by time.
+
+  let root = new ThreadNode(gSamples, true, 11, 18);
+
+  // Test the root node.
+
+  is(root.duration, 18,
+    "The correct duration was calculated for the root node.");
+
+  is(Object.keys(root.calls).length, 2,
+    "The correct number of child calls were calculated for the root node.");
+  is(Object.keys(root.calls)[0], "http://D",
+    "The root node's first child call is correct.");
+  is(Object.keys(root.calls)[1], "http://A",
+    "The root node's second child call is correct.");
+
+  // Test all the descendant nodes.
+
+  is(Object.keys(root.calls["http://A"].calls).length, 1,
+    "The correct number of child calls were calculated for the '.A' node.");
+  is(Object.keys(root.calls["http://A"].calls)[0], "https://E",
+    "The '.A' node's only child call is correct.");
+
+  is(Object.keys(root.calls["http://A"].calls["https://E"].calls).length, 1,
+    "The correct number of child calls were calculated for the '.A.E' node.");
+  is(Object.keys(root.calls["http://A"].calls["https://E"].calls)[0], "file://F",
+    "The '.A.E' node's only child call is correct.");
+
+  is(Object.keys(root.calls["http://A"].calls["https://E"].calls["file://F"].calls).length, 0,
+    "The correct number of child calls were calculated for the '.A.E.F' node.");
+  is(Object.keys(root.calls["http://D"].calls).length, 0,
+    "The correct number of child calls were calculated for the '.D' node.");
+
+  finish();
+}
+
+let gSamples = [{
+  time: 5,
+  frames: [
+    { location: "(root)" },
+    { location: "http://A" },
+    { location: "http://B" },
+    { location: "http://C" }
+  ]
+}, {
+  time: 5 + 6,
+  frames: [
+    { location: "(root)" },
+    { location: "chrome://A" },
+    { location: "resource://B" },
+    { location: "http://D" }
+  ]
+}, {
+  time: 5 + 6 + 7,
+  frames: [
+    { location: "(root)" },
+    { location: "http://A" },
+    { location: "https://E" },
+    { location: "file://F" }
+  ]
+}, {
+  time: 5 + 6 + 7 + 8,
+  frames: [
+    { location: "(root)" },
+    { location: "http://A" },
+    { location: "http://B" },
+    { location: "http://C" },
+    { location: "http://D" }
+  ]
+}];
diff --git a/browser/devtools/shared/test/browser_profiler_tree-model-05.js b/browser/devtools/shared/test/browser_profiler_tree-model-05.js
new file mode 100644
index 0000000..1d24807
--- /dev/null
+++ b/browser/devtools/shared/test/browser_profiler_tree-model-05.js
@@ -0,0 +1,79 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests if an inverted call tree model can be correctly computed from a samples
+ * array.
+ */
+
+let time = 1;
+
+let samples = [{
+  time: time++,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "C" }
+  ]
+}, {
+  time: time++,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "D" },
+    { location: "C" }
+  ]
+}, {
+  time: time++,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "E" },
+    { location: "C" }
+  ],
+}, {
+  time: time++,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "F" }
+  ]
+}];
+
+function test() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+
+  let root = new ThreadNode(samples, undefined, undefined, undefined, true);
+
+  is(Object.keys(root.calls).length, 2,
+     "Should get the 2 youngest frames, not the 1 oldest frame");
+
+  let C = root.calls.C;
+  ok(C, "Should have C as a child of the root.");
+
+  is(Object.keys(C.calls).length, 3,
+     "Should have 3 frames that called C.");
+  ok(C.calls.B, "B called C.");
+  ok(C.calls.D, "D called C.");
+  ok(C.calls.E, "E called C.");
+
+  is(Object.keys(C.calls.B.calls).length, 1);
+  ok(C.calls.B.calls.A, "A called B called C");
+  is(Object.keys(C.calls.D.calls).length, 1);
+  ok(C.calls.D.calls.A, "A called D called C");
+  is(Object.keys(C.calls.E.calls).length, 1);
+  ok(C.calls.E.calls.A, "A called E called C");
+
+  let F = root.calls.F;
+  ok(F, "Should have F as a child of the root.");
+
+  is(Object.keys(F.calls).length, 1);
+  ok(F.calls.B, "B called F");
+
+  is(Object.keys(F.calls.B.calls).length, 1);
+  ok(F.calls.B.calls.A, "A called B called F");
+
+  finish();
+}
diff --git a/browser/devtools/shared/test/browser_profiler_tree-view-01.js b/browser/devtools/shared/test/browser_profiler_tree-view-01.js
new file mode 100644
index 0000000..58887ec
--- /dev/null
+++ b/browser/devtools/shared/test/browser_profiler_tree-view-01.js
@@ -0,0 +1,95 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://foo/bar/creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests if the profiler's tree view implementation works properly and
+ * creates the correct column structure.
+ */
+
+function test() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+  let { CallView } = devtools.require("devtools/shared/tree-view");
+
+  let threadNode = new ThreadNode(gSamples);
+  let treeRoot = new CallView({ frame: threadNode });
+
+  let container = document.createElement("vbox");
+  treeRoot.autoExpandDepth = 0;
+  treeRoot.attachTo(container);
+
+  is(container.childNodes.length, 1,
+    "The container node should have one child available.");
+  is(container.childNodes[0].className, "call-tree-item",
+    "The root node in the tree has the correct class name.");
+
+  is(container.childNodes[0].childNodes.length, 6,
+    "The root node in the tree has the correct number of children.");
+  is(container.childNodes[0].querySelectorAll(".call-tree-cell").length, 6,
+    "The root node in the tree has only 'call-tree-cell' children.");
+
+  is(container.childNodes[0].childNodes[0].getAttribute("type"), "duration",
+    "The root node in the tree has a duration cell.");
+  is(container.childNodes[0].childNodes[0].getAttribute("value"), "15",
+    "The root node in the tree has the correct duration cell value.");
+
+  is(container.childNodes[0].childNodes[1].getAttribute("type"), "percentage",
+    "The root node in the tree has a percentage cell.");
+  is(container.childNodes[0].childNodes[1].getAttribute("value"), "100%",
+    "The root node in the tree has the correct percentage cell value.");
+
+  is(container.childNodes[0].childNodes[2].getAttribute("type"), "self-duration",
+    "The root node in the tree has a self-duration cell.");
+  is(container.childNodes[0].childNodes[2].getAttribute("value"), "0",
+    "The root node in the tree has the correct self-duration cell value.");
+
+  is(container.childNodes[0].childNodes[3].getAttribute("type"), "self-percentage",
+    "The root node in the tree has a self-percentage cell.");
+  is(container.childNodes[0].childNodes[3].getAttribute("value"), "0%",
+    "The root node in the tree has the correct self-percentage cell value.");
+
+  is(container.childNodes[0].childNodes[4].getAttribute("type"), "samples",
+    "The root node in the tree has an samples cell.");
+  is(container.childNodes[0].childNodes[4].getAttribute("value"), "4",
+    "The root node in the tree has the correct samples cell value.");
+
+  is(container.childNodes[0].childNodes[5].getAttribute("type"), "function",
+    "The root node in the tree has a function cell.");
+  is(container.childNodes[0].childNodes[5].style.MozMarginStart, "0px",
+    "The root node in the tree has the correct indentation.");
+
+  finish();
+}
+
+let gSamples = [{
+  time: 5,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 32, location: "C (http://foo/bar/baz:56)" }
+  ]
+}, {
+  time: 5 + 1,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 64, location: "D (http://foo/bar/baz:78)" }
+  ]
+}, {
+  time: 5 + 1 + 2,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 64, location: "D (http://foo/bar/baz:78)" }
+  ]
+}, {
+  time: 5 + 1 + 2 + 7,
+  frames: [
+    { category: 8,   location: "(root)" },
+    { category: 8,   location: "A (http://foo/bar/baz:12)" },
+    { category: 128, location: "E (http://foo/bar/baz:90)" },
+    { category: 256, location: "F (http://foo/bar/baz:99)" }
+  ]
+}];
diff --git a/browser/devtools/shared/test/browser_profiler_tree-view-02.js b/browser/devtools/shared/test/browser_profiler_tree-view-02.js
new file mode 100644
index 0000000..d32dafd
--- /dev/null
+++ b/browser/devtools/shared/test/browser_profiler_tree-view-02.js
@@ -0,0 +1,158 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests if the profiler's tree view implementation works properly and
+ * creates the correct column structure after expanding some of the nodes.
+ */
+
+function test() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+  let { CallView } = devtools.require("devtools/shared/tree-view");
+
+  let threadNode = new ThreadNode(gSamples);
+  let treeRoot = new CallView({ frame: threadNode });
+
+  let container = document.createElement("vbox");
+  treeRoot.autoExpandDepth = 0;
+  treeRoot.attachTo(container);
+
+  let $$fun = node => container.querySelectorAll(".call-tree-cell[type=function] > " + node);
+  let $$dur = i => container.querySelectorAll(".call-tree-cell[type=duration]")[i];
+  let $$perc = i => container.querySelectorAll(".call-tree-cell[type=percentage]")[i];
+  let $$sampl = i => container.querySelectorAll(".call-tree-cell[type=samples]")[i];
+
+  is(container.childNodes.length, 1,
+    "The container node should have one child available.");
+  is(container.childNodes[0].className, "call-tree-item",
+    "The root node in the tree has the correct class name.");
+
+  is($$dur(0).getAttribute("value"), "15",
+    "The root's duration cell displays the correct value.");
+  is($$perc(0).getAttribute("value"), "100%",
+    "The root's percentage cell displays the correct value.");
+  is($$sampl(0).getAttribute("value"), "4",
+    "The root's samples cell displays the correct value.");
+  is($$fun(".call-tree-name")[0].getAttribute("value"), "(root)",
+    "The root's function cell displays the correct name.");
+  is($$fun(".call-tree-url")[0].getAttribute("value"), "",
+    "The root's function cell displays the correct url.");
+  is($$fun(".call-tree-line")[0].getAttribute("value"), "",
+    "The root's function cell displays the correct line.");
+  is($$fun(".call-tree-host")[0].getAttribute("value"), "",
+    "The root's function cell displays the correct host.");
+  is($$fun(".call-tree-category")[0].getAttribute("value"), "",
+    "The root's function cell displays the correct category.");
+
+  treeRoot.expand();
+
+  is(container.childNodes.length, 2,
+    "The container node should have two children available.");
+  is(container.childNodes[0].className, "call-tree-item",
+    "The root node in the tree has the correct class name.");
+  is(container.childNodes[1].className, "call-tree-item",
+    "The .A node in the tree has the correct class name.");
+
+  is($$dur(1).getAttribute("value"), "15",
+    "The .A node's duration cell displays the correct value.");
+  is($$perc(1).getAttribute("value"), "100%",
+    "The .A node's percentage cell displays the correct value.");
+  is($$sampl(1).getAttribute("value"), "4",
+    "The .A node's samples cell displays the correct value.");
+  is($$fun(".call-tree-name")[1].getAttribute("value"), "A",
+    "The .A node's function cell displays the correct name.");
+  is($$fun(".call-tree-url")[1].getAttribute("value"), "baz",
+    "The .A node's function cell displays the correct url.");
+  ok($$fun(".call-tree-url")[1].getAttribute("tooltiptext").contains("http://foo/bar/baz"),
+    "The .A node's function cell displays the correct url tooltiptext.");
+  is($$fun(".call-tree-line")[1].getAttribute("value"), ":12",
+    "The .A node's function cell displays the correct line.");
+  is($$fun(".call-tree-host")[1].getAttribute("value"), "foo",
+    "The .A node's function cell displays the correct host.");
+  is($$fun(".call-tree-category")[1].getAttribute("value"), "Gecko",
+    "The .A node's function cell displays the correct category.");
+
+  let A = treeRoot.getChild();
+  A.expand();
+
+  is(container.childNodes.length, 4,
+    "The container node should have four children available.");
+  is(container.childNodes[2].className, "call-tree-item",
+    "The .B node in the tree has the correct class name.");
+  is(container.childNodes[3].className, "call-tree-item",
+    "The .E node in the tree has the correct class name.");
+
+  is($$dur(2).getAttribute("value"), "8",
+    "The .A.B node's duration cell displays the correct value.");
+  is($$perc(2).getAttribute("value"), "75%",
+    "The .A.B node's percentage cell displays the correct value.");
+  is($$sampl(2).getAttribute("value"), "3",
+    "The .A.B node's samples cell displays the correct value.");
+  is($$fun(".call-tree-name")[2].getAttribute("value"), "B",
+    "The .A.B node's function cell displays the correct name.");
+  is($$fun(".call-tree-url")[2].getAttribute("value"), "baz",
+    "The .A.B node's function cell displays the correct url.");
+  ok($$fun(".call-tree-url")[2].getAttribute("tooltiptext").contains("http://foo/bar/baz"),
+    "The .A.B node's function cell displays the correct url tooltiptext.");
+  is($$fun(".call-tree-line")[2].getAttribute("value"), ":34",
+    "The .A.B node's function cell displays the correct line.");
+  is($$fun(".call-tree-host")[2].getAttribute("value"), "foo",
+    "The .A.B node's function cell displays the correct host.");
+  is($$fun(".call-tree-category")[2].getAttribute("value"), "Styles",
+    "The .A.B node's function cell displays the correct category.");
+
+  is($$dur(3).getAttribute("value"), "7",
+    "The .A.E node's duration cell displays the correct value.");
+  is($$perc(3).getAttribute("value"), "25%",
+    "The .A.E node's percentage cell displays the correct value.");
+  is($$sampl(3).getAttribute("value"), "1",
+    "The .A.E node's samples cell displays the correct value.");
+  is($$fun(".call-tree-name")[3].getAttribute("value"), "E",
+    "The .A.E node's function cell displays the correct name.");
+  is($$fun(".call-tree-url")[3].getAttribute("value"), "baz",
+    "The .A.E node's function cell displays the correct url.");
+  ok($$fun(".call-tree-url")[3].getAttribute("tooltiptext").contains("http://foo/bar/baz"),
+    "The .A.E node's function cell displays the correct url tooltiptext.");
+  is($$fun(".call-tree-line")[3].getAttribute("value"), ":90",
+    "The .A.E node's function cell displays the correct line.");
+  is($$fun(".call-tree-host")[3].getAttribute("value"), "foo",
+    "The .A.E node's function cell displays the correct host.");
+  is($$fun(".call-tree-category")[3].getAttribute("value"), "GC",
+    "The .A.E node's function cell displays the correct category.");
+
+  finish();
+}
+
+let gSamples = [{
+  time: 5,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 32, location: "C (http://foo/bar/baz:56)" }
+  ]
+}, {
+  time: 5 + 1,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 64, location: "D (http://foo/bar/baz:78)" }
+  ]
+}, {
+  time: 5 + 1 + 2,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 64, location: "D (http://foo/bar/baz:78)" }
+  ]
+}, {
+  time: 5 + 1 + 2 + 7,
+  frames: [
+    { category: 8,   location: "(root)" },
+    { category: 8,   location: "A (http://foo/bar/baz:12)" },
+    { category: 128, location: "E (http://foo/bar/baz:90)" },
+    { category: 256, location: "F (http://foo/bar/baz:99)" }
+  ]
+}];
diff --git a/browser/devtools/shared/test/browser_profiler_tree-view-03.js b/browser/devtools/shared/test/browser_profiler_tree-view-03.js
new file mode 100644
index 0000000..6980292
--- /dev/null
+++ b/browser/devtools/shared/test/browser_profiler_tree-view-03.js
@@ -0,0 +1,109 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests if the profiler's tree view implementation works properly and
+ * creates the correct column structure and can auto-expand all nodes.
+ */
+
+function test() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+  let { CallView } = devtools.require("devtools/shared/tree-view");
+
+  let threadNode = new ThreadNode(gSamples);
+  let treeRoot = new CallView({ frame: threadNode });
+
+  let container = document.createElement("vbox");
+  treeRoot.attachTo(container);
+
+  let $$fun = i => container.querySelectorAll(".call-tree-cell[type=function]")[i];
+  let $$name = i => container.querySelectorAll(".call-tree-cell[type=function] > .call-tree-name")[i];
+  let $$duration = i => container.querySelectorAll(".call-tree-cell[type=duration]")[i];
+
+  is(container.childNodes.length, 7,
+    "The container node should have all children available.");
+  is(Array.filter(container.childNodes, e => e.className != "call-tree-item").length, 0,
+    "All item nodes in the tree have the correct class name.");
+
+  is($$fun(0).style.MozMarginStart, "0px",
+    "The root node's function cell has the correct indentation.");
+  is($$fun(1).style.MozMarginStart, "16px",
+    "The .A node's function cell has the correct indentation.");
+  is($$fun(2).style.MozMarginStart, "32px",
+    "The .A.B node's function cell has the correct indentation.");
+  is($$fun(3).style.MozMarginStart, "48px",
+    "The .A.B.D node's function cell has the correct indentation.");
+  is($$fun(4).style.MozMarginStart, "48px",
+    "The .A.B.C node's function cell has the correct indentation.");
+  is($$fun(5).style.MozMarginStart, "32px",
+    "The .A.E node's function cell has the correct indentation.");
+  is($$fun(6).style.MozMarginStart, "48px",
+    "The .A.E.F node's function cell has the correct indentation.");
+
+  is($$name(0).getAttribute("value"), "(root)",
+    "The root node's function cell displays the correct name.");
+  is($$name(1).getAttribute("value"), "A",
+    "The .A node's function cell displays the correct name.");
+  is($$name(2).getAttribute("value"), "B",
+    "The .A.B node's function cell displays the correct name.");
+  is($$name(3).getAttribute("value"), "D",
+    "The .A.B.D node's function cell displays the correct name.");
+  is($$name(4).getAttribute("value"), "C",
+    "The .A.B.C node's function cell displays the correct name.");
+  is($$name(5).getAttribute("value"), "E",
+    "The .A.E node's function cell displays the correct name.");
+  is($$name(6).getAttribute("value"), "F",
+    "The .A.E.F node's function cell displays the correct name.");
+
+  is($$duration(0).getAttribute("value"), "15",
+    "The root node's function cell displays the correct duration.");
+  is($$duration(1).getAttribute("value"), "15",
+    "The .A node's function cell displays the correct duration.");
+  is($$duration(2).getAttribute("value"), "8",
+    "The .A.B node's function cell displays the correct duration.");
+  is($$duration(3).getAttribute("value"), "3",
+    "The .A.B.D node's function cell displays the correct duration.");
+  is($$duration(4).getAttribute("value"), "5",
+    "The .A.B.C node's function cell displays the correct duration.");
+  is($$duration(5).getAttribute("value"), "7",
+    "The .A.E node's function cell displays the correct duration.");
+  is($$duration(6).getAttribute("value"), "7",
+    "The .A.E.F node's function cell displays the correct duration.");
+
+  finish();
+}
+
+let gSamples = [{
+  time: 5,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 32, location: "C (http://foo/bar/baz:56)" }
+  ]
+}, {
+  time: 5 + 1,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 64, location: "D (http://foo/bar/baz:78)" }
+  ]
+}, {
+  time: 5 + 1 + 2,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 64, location: "D (http://foo/bar/baz:78)" }
+  ]
+}, {
+  time: 5 + 1 + 2 + 7,
+  frames: [
+    { category: 8,   location: "(root)" },
+    { category: 8,   location: "A (http://foo/bar/baz:12)" },
+    { category: 128, location: "E (http://foo/bar/baz:90)" },
+    { category: 256, location: "F (http://foo/bar/baz:99)" }
+  ]
+}];
+
diff --git a/browser/devtools/shared/test/browser_profiler_tree-view-04.js b/browser/devtools/shared/test/browser_profiler_tree-view-04.js
new file mode 100644
index 0000000..dcbc738
--- /dev/null
+++ b/browser/devtools/shared/test/browser_profiler_tree-view-04.js
@@ -0,0 +1,117 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests if the profiler's tree view implementation works properly and
+ * creates the correct DOM nodes in the correct order.
+ */
+
+function test() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+  let { CallView } = devtools.require("devtools/shared/tree-view");
+
+  let threadNode = new ThreadNode(gSamples);
+  let treeRoot = new CallView({ frame: threadNode });
+
+  let container = document.createElement("vbox");
+  treeRoot.attachTo(container);
+
+  is(treeRoot.target.getAttribute("origin"), "chrome",
+    "The root node's 'origin' attribute is correct.");
+  is(treeRoot.target.getAttribute("category"), "",
+    "The root node's 'category' attribute is correct.");
+  is(treeRoot.target.getAttribute("tooltiptext"), "",
+    "The root node's 'tooltiptext' attribute is correct.");
+  ok(treeRoot.target.querySelector(".call-tree-zoom").hidden,
+    "The root node's zoom button cell should be hidden.");
+  ok(treeRoot.target.querySelector(".call-tree-category").hidden,
+    "The root node's category label cell should be hidden.");
+
+  let A = treeRoot.getChild();
+  let B = A.getChild();
+  let D = B.getChild();
+
+  is(D.target.getAttribute("origin"), "chrome",
+    "The .A.B.D node's 'origin' attribute is correct.");
+  is(D.target.getAttribute("category"), "gc",
+    "The .A.B.D node's 'category' attribute is correct.");
+  is(D.target.getAttribute("tooltiptext"), "D (http://foo/bar/baz:78)",
+    "The .A.B.D node's 'tooltiptext' attribute is correct.");
+  ok(!A.target.querySelector(".call-tree-zoom").hidden,
+    "The .A.B.D node's zoom button cell should not be hidden.");
+  ok(!A.target.querySelector(".call-tree-category").hidden,
+    "The .A.B.D node's category label cell should not be hidden.");
+
+  is(D.target.childNodes.length, 6,
+    "The number of columns displayed for tree items is correct.");
+  is(D.target.childNodes[0].getAttribute("type"), "duration",
+    "The first column displayed for tree items is correct.");
+  is(D.target.childNodes[1].getAttribute("type"), "percentage",
+    "The third column displayed for tree items is correct.");
+  is(D.target.childNodes[2].getAttribute("type"), "self-duration",
+    "The second column displayed for tree items is correct.");
+  is(D.target.childNodes[3].getAttribute("type"), "self-percentage",
+    "The fourth column displayed for tree items is correct.");
+  is(D.target.childNodes[4].getAttribute("type"), "samples",
+    "The fifth column displayed for tree items is correct.");
+  is(D.target.childNodes[5].getAttribute("type"), "function",
+    "The sixth column displayed for tree items is correct.");
+
+  let functionCell = D.target.childNodes[5];
+
+  is(functionCell.childNodes.length, 8,
+    "The number of columns displayed for function cells is correct.");
+  is(functionCell.childNodes[0].className, "arrow theme-twisty",
+    "The first node displayed for function cells is correct.");
+  is(functionCell.childNodes[1].className, "plain call-tree-name",
+    "The second node displayed for function cells is correct.");
+  is(functionCell.childNodes[2].className, "plain call-tree-url",
+    "The third node displayed for function cells is correct.");
+  is(functionCell.childNodes[3].className, "plain call-tree-line",
+    "The fourth node displayed for function cells is correct.");
+  is(functionCell.childNodes[4].className, "plain call-tree-host",
+    "The fifth node displayed for function cells is correct.");
+  is(functionCell.childNodes[5].className, "plain call-tree-zoom",
+    "The sixth node displayed for function cells is correct.");
+  is(functionCell.childNodes[6].tagName, "spacer",
+    "The seventh node displayed for function cells is correct.");
+  is(functionCell.childNodes[7].className, "plain call-tree-category",
+    "The eight node displayed for function cells is correct.");
+
+  finish();
+}
+
+let gSamples = [{
+  time: 5,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 32, location: "C (http://foo/bar/baz:56)" }
+  ]
+}, {
+  time: 5 + 1,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 64, location: "D (http://foo/bar/baz:78)" }
+  ]
+}, {
+  time: 5 + 1 + 2,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 64, location: "D (http://foo/bar/baz:78)" }
+  ]
+}, {
+  time: 5 + 1 + 2 + 7,
+  frames: [
+    { category: 8,   location: "(root)" },
+    { category: 8,   location: "A (http://foo/bar/baz:12)" },
+    { category: 128, location: "E (http://foo/bar/baz:90)" },
+    { category: 256, location: "F (http://foo/bar/baz:99)" }
+  ]
+}];
+
diff --git a/browser/devtools/shared/test/browser_profiler_tree-view-05.js b/browser/devtools/shared/test/browser_profiler_tree-view-05.js
new file mode 100644
index 0000000..b4dd56d
--- /dev/null
+++ b/browser/devtools/shared/test/browser_profiler_tree-view-05.js
@@ -0,0 +1,66 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests if the profiler's tree view implementation works properly and
+ * can toggle categories hidden or visible.
+ */
+
+function test() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+  let { CallView } = devtools.require("devtools/shared/tree-view");
+
+  let threadNode = new ThreadNode(gSamples);
+  let treeRoot = new CallView({ frame: threadNode });
+
+  let container = document.createElement("vbox");
+  treeRoot.attachTo(container);
+
+  let categories = container.querySelectorAll(".call-tree-category");
+  is(categories.length, 7,
+    "The call tree displays a correct number of categories.");
+  ok(!container.hasAttribute("categories-hidden"),
+    "All categories should be visible in the tree.");
+
+  treeRoot.toggleCategories(false);
+  is(categories.length, 7,
+    "The call tree displays the same number of categories.");
+  ok(container.hasAttribute("categories-hidden"),
+    "All categories should now be hidden in the tree.");
+
+  finish();
+}
+
+let gSamples = [{
+  time: 5,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 32, location: "C (http://foo/bar/baz:56)" }
+  ]
+}, {
+  time: 5 + 1,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 64, location: "D (http://foo/bar/baz:78)" }
+  ]
+}, {
+  time: 5 + 1 + 2,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 64, location: "D (http://foo/bar/baz:78)" }
+  ]
+}, {
+  time: 5 + 1 + 2 + 7,
+  frames: [
+    { category: 8,   location: "(root)" },
+    { category: 8,   location: "A (http://foo/bar/baz:12)" },
+    { category: 128, location: "E (http://foo/bar/baz:90)" },
+    { category: 256, location: "F (http://foo/bar/baz:99)" }
+  ]
+}];
diff --git a/browser/devtools/shared/test/browser_profiler_tree-view-06.js b/browser/devtools/shared/test/browser_profiler_tree-view-06.js
new file mode 100644
index 0000000..d9658c3
--- /dev/null
+++ b/browser/devtools/shared/test/browser_profiler_tree-view-06.js
@@ -0,0 +1,71 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests if the profiler's tree view implementation works properly and
+ * correctly emits events when certain DOM nodes are clicked.
+ */
+
+let test = Task.async(function*() {
+  waitForExplicitFinish();
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+  let { CallView } = devtools.require("devtools/shared/tree-view");
+
+  let threadNode = new ThreadNode(gSamples);
+  let treeRoot = new CallView({ frame: threadNode });
+
+  let container = document.createElement("vbox");
+  treeRoot.attachTo(container);
+
+  let A = treeRoot.getChild();
+  let B = A.getChild();
+  let D = B.getChild();
+
+  let receivedLinkEvent = treeRoot.once("link");
+  EventUtils.sendMouseEvent({ type: "mousedown" }, D.target.querySelector(".call-tree-url"));
+
+  let eventItem = yield receivedLinkEvent;
+  is(eventItem, D, "The 'link' event target is correct.");
+
+  let receivedZoomEvent = treeRoot.once("zoom");
+  EventUtils.sendMouseEvent({ type: "mousedown" }, D.target.querySelector(".call-tree-zoom"));
+
+  eventItem = yield receivedZoomEvent;
+  is(eventItem, D, "The 'zoom' event target is correct.");
+
+  finish();
+});
+
+let gSamples = [{
+  time: 5,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 32, location: "C (http://foo/bar/baz:56)" }
+  ]
+}, {
+  time: 5 + 1,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 64, location: "D (http://foo/bar/baz:78)" }
+  ]
+}, {
+  time: 5 + 1 + 2,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 64, location: "D (http://foo/bar/baz:78)" }
+  ]
+}, {
+  time: 5 + 1 + 2 + 7,
+  frames: [
+    { category: 8,   location: "(root)" },
+    { category: 8,   location: "A (http://foo/bar/baz:12)" },
+    { category: 128, location: "E (http://foo/bar/baz:90)" },
+    { category: 256, location: "F (http://foo/bar/baz:99)" }
+  ]
+}];
diff --git a/browser/devtools/shared/test/browser_profiler_tree-view-07.js b/browser/devtools/shared/test/browser_profiler_tree-view-07.js
new file mode 100644
index 0000000..121623f
--- /dev/null
+++ b/browser/devtools/shared/test/browser_profiler_tree-view-07.js
@@ -0,0 +1,70 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests if the profiler's tree view implementation works properly and
+ * has the correct 'root', 'parent', 'level' etc. accessors on child nodes.
+ */
+
+function test() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+  let { CallView } = devtools.require("devtools/shared/tree-view");
+
+  let threadNode = new ThreadNode(gSamples);
+  let treeRoot = new CallView({ frame: threadNode });
+
+  let container = document.createElement("vbox");
+  container.id = "call-tree-container";
+  treeRoot.attachTo(container);
+
+  let A = treeRoot.getChild();
+  let B = A.getChild();
+  let D = B.getChild();
+
+  is(D.root, treeRoot,
+    "The .A.B.D node has the correct root.");
+  is(D.parent, B,
+    "The .A.B.D node has the correct parent.");
+  is(D.level, 3,
+    "The .A.B.D node has the correct level.");
+  is(D.target.className, "call-tree-item",
+    "The .A.B.D node has the correct target node.");
+  is(D.container.id, "call-tree-container",
+    "The .A.B.D node has the correct container node.");
+
+  finish();
+}
+
+let gSamples = [{
+  time: 5,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 32, location: "C (http://foo/bar/baz:56)" }
+  ]
+}, {
+  time: 5 + 1,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 64, location: "D (http://foo/bar/baz:78)" }
+  ]
+}, {
+  time: 5 + 1 + 2,
+  frames: [
+    { category: 8,  location: "(root)" },
+    { category: 8,  location: "A (http://foo/bar/baz:12)" },
+    { category: 16, location: "B (http://foo/bar/baz:34)" },
+    { category: 64, location: "D (http://foo/bar/baz:78)" }
+  ]
+}, {
+  time: 5 + 1 + 2 + 7,
+  frames: [
+    { category: 8,   location: "(root)" },
+    { category: 8,   location: "A (http://foo/bar/baz:12)" },
+    { category: 128, location: "E (http://foo/bar/baz:90)" },
+    { category: 256, location: "F (http://foo/bar/baz:99)" }
+  ]
+}];
diff --git a/browser/devtools/shared/tree-model.js b/browser/devtools/shared/tree-model.js
new file mode 100644
index 0000000..14a0737
--- /dev/null
+++ b/browser/devtools/shared/tree-model.js
@@ -0,0 +1,276 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const {Cc, Ci, Cu, Cr} = require("chrome");
+
+loader.lazyRequireGetter(this, "Services");
+loader.lazyRequireGetter(this, "L10N",
+  "devtools/profiler/global", true);
+loader.lazyRequireGetter(this, "CATEGORY_MAPPINGS",
+  "devtools/profiler/global", true);
+loader.lazyRequireGetter(this, "CATEGORY_JIT",
+  "devtools/profiler/global", true);
+
+const CHROME_SCHEMES = ["chrome://", "resource://"];
+const CONTENT_SCHEMES = ["http://", "https://", "file://"];
+
+exports.ThreadNode = ThreadNode;
+exports.FrameNode = FrameNode;
+exports._isContent = isContent; // used in tests
+
+/**
+ * A call tree for a thread. This is essentially a linkage between all frames
+ * of all samples into a single tree structure, with additional information
+ * on each node, like the time spent (in milliseconds) and samples count.
+ *
+ * Example:
+ * {
+ *   duration: number,
+ *   calls: {
+ *     "FunctionName (url:line)": {
+ *       line: number,
+ *       category: number,
+ *       samples: number,
+ *       duration: number,
+ *       calls: {
+ *         ...
+ *       }
+ *     }, // FrameNode
+ *     ...
+ *   }
+ * } // ThreadNode
+ *
+ * @param object threadSamples
+ *        The raw samples array received from the backend.
+ * @param boolean contentOnly [optional]
+ *        @see ThreadNode.prototype.insert
+ * @param number beginAt [optional]
+ *        @see ThreadNode.prototype.insert
+ * @param number endAt [optional]
+ *        @see ThreadNode.prototype.insert
+ * @param boolean invert [optional]
+ *        @see ThreadNode.prototype.insert
+ */
+function ThreadNode(threadSamples, contentOnly, beginAt, endAt, invert) {
+  this.samples = 0;
+  this.duration = 0;
+  this.calls = {};
+  this._previousSampleTime = 0;
+
+  for (let sample of threadSamples) {
+    this.insert(sample, contentOnly, beginAt, endAt, invert);
+  }
+}
+
+ThreadNode.prototype = {
+  /**
+   * Adds function calls in the tree from a sample's frames.
+   *
+   * @param object sample
+   *        The { frames, time } sample, containing an array of frames and
+   *        the time the sample was taken. This sample is assumed to be older
+   *        than the most recently inserted one.
+   * @param boolean contentOnly [optional]
+   *        Specifies if platform frames shouldn't be taken into consideration.
+   * @param number beginAt [optional]
+   *        The earliest sample to start at (in milliseconds).
+   * @param number endAt [optional]
+   *        The latest sample to end at (in milliseconds).
+   * @param boolean inverted [optional]
+   *        Specifies if the call tree should be inverted (youngest -> oldest
+   *        frames).
+   */
+  insert: function(sample, contentOnly = false, beginAt = 0, endAt = Infinity,
+                   inverted = false) {
+    let sampleTime = sample.time;
+    if (!sampleTime || sampleTime < beginAt || sampleTime > endAt) {
+      return;
+    }
+
+    let sampleFrames = sample.frames;
+
+    // Filter out platform frames if only content-related function calls
+    // should be taken into consideration.
+    if (contentOnly) {
+      sampleFrames = sampleFrames.filter(isContent);
+    }
+
+    if (!sampleFrames.length) {
+      return;
+    }
+
+    if (inverted) {
+      sampleFrames.reverse();
+      if (!contentOnly) {
+        // Remove the (root) node -- we don't want it as a leaf in the inverted
+        // tree.
+        sampleFrames.pop();
+      }
+    }
+
+    let startIndex = (inverted || contentOnly) ? 0 : 1;
+
+    let sampleDuration = sampleTime - this._previousSampleTime;
+    this._previousSampleTime = sampleTime;
+    this.samples++;
+    this.duration += sampleDuration;
+
+    FrameNode.prototype.insert(
+      sampleFrames, startIndex, sampleTime, sampleDuration, this.calls);
+  },
+
+  /**
+   * Gets additional details about this node.
+   * @return object
+   */
+  getInfo: function() {
+    return {
+      nodeType: "Thread",
+      functionName: L10N.getStr("table.root"),
+      categoryData: {}
+    };
+  }
+};
+
+/**
+ * A function call node in a tree.
+ *
+ * @param string location
+ *        The location of this function call. Note that this isn't sanitized,
+ *        so it may very well (not?) include the function name, url, etc.
+ * @param number line
+ *        The line number inside the source containing this function call.
+ * @param number category
+ *        The category type of this function call ("js", "graphics" etc.).
+ */
+function FrameNode({ location, line, category }) {
+  this.location = location;
+  this.line = line;
+  this.category = category;
+  this.sampleTimes = [];
+  this.samples = 0;
+  this.duration = 0;
+  this.calls = {};
+}
+
+FrameNode.prototype = {
+  /**
+   * Adds function calls in the tree from a sample's frames. For example, given
+   * the the frames below (which would account for three calls to `insert` on
+   * the root frame), the following tree structure is created:
+   *
+   *                          A
+   *   A -> B -> C           / \
+   *   A -> B -> D    ~>    B   E
+   *   A -> E -> F         / \   \
+   *                      C   D   F
+   * @param frames
+   *        The sample call stack.
+   * @param index
+   *        The index of the call in the stack representing this node.
+   * @param number time
+   *        The delta time (in milliseconds) when the frame was sampled.
+   * @param number duration
+   *        The amount of time spent executing all functions on the stack.
+   */
+  insert: function(frames, index, time, duration, _store = this.calls) {
+    let frame = frames[index];
+    if (!frame) {
+      return;
+    }
+    let location = frame.location;
+    let child = _store[location] || (_store[location] = new FrameNode(frame));
+    child.sampleTimes.push({ start: time, end: time + duration });
+    child.samples++;
+    child.duration += duration;
+    child.insert(frames, ++index, time, duration);
+  },
+
+  /**
+   * Parses the raw location of this function call to retrieve the actual
+   * function name and source url.
+   *
+   * @return object
+   *         The computed { name, file, url, line } properties for this
+   *         function call.
+   */
+  getInfo: function() {
+    // "EnterJIT" pseudoframes are special, not actually on the stack.
+    if (this.location == "EnterJIT") {
+      this.category = CATEGORY_JIT;
+    }
+
+    // Since only C++ stack frames have associated category information,
+    // default to an "unknown" category otherwise.
+    let categoryData = CATEGORY_MAPPINGS[this.category] || {};
+
+    // Parse the `location` for the function name, source url and line.
+    let firstParen = this.location.indexOf("(");
+    let lastColon = this.location.lastIndexOf(":");
+    let resource = this.location.substring(firstParen + 1, lastColon);
+    let line = this.location.substring(lastColon + 1).replace(")", "");
+    let url = resource.split(" -> ").pop();
+    let uri = nsIURL(url);
+    let functionName, fileName, hostName;
+
+    // If the URI digged out from the `location` is valid, this is a JS frame.
+    if (uri) {
+      functionName = this.location.substring(0, firstParen - 1);
+      fileName = (uri.fileName + (uri.ref ? "#" + uri.ref : "")) || "/";
+      hostName = uri.host;
+    } else {
+      functionName = this.location;
+      url = null;
+      line = null;
+    }
+
+    return {
+      nodeType: "Frame",
+      functionName: functionName,
+      fileName: fileName,
+      hostName: hostName,
+      url: url,
+      line: line || this.line,
+      categoryData: categoryData,
+      isContent: !!isContent(this)
+    };
+  }
+};
+
+/**
+ * Checks if the specified function represents a chrome or content frame.
+ *
+ * @param object frame
+ *        The { category, location } properties of the frame.
+ * @return boolean
+ *         True if a content frame, false if a chrome frame.
+ */
+function isContent({ category, location }) {
+  // Only C++ stack frames have associated category information.
+  return !category &&
+    !CHROME_SCHEMES.find(e => location.contains(e)) &&
+    CONTENT_SCHEMES.find(e => location.contains(e));
+}
+
+/**
+ * Helper for getting an nsIURL instance out of a string.
+ */
+function nsIURL(url) {
+  let cached = gNSURLStore.get(url);
+  if (cached) {
+    return cached;
+  }
+  let uri = null;
+  try {
+    uri = Services.io.newURI(url, null, null).QueryInterface(Ci.nsIURL);
+  } catch(e) {
+    // The passed url string is invalid.
+  }
+  gNSURLStore.set(url, uri);
+  return uri;
+}
+
+// The cache used in the `nsIURL` function.
+let gNSURLStore = new Map();
diff --git a/browser/devtools/shared/tree-view.js b/browser/devtools/shared/tree-view.js
new file mode 100644
index 0000000..393eb4b
--- /dev/null
+++ b/browser/devtools/shared/tree-view.js
@@ -0,0 +1,295 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const {Cc, Ci, Cu, Cr} = require("chrome");
+
+loader.lazyRequireGetter(this, "L10N",
+  "devtools/profiler/global", true);
+
+loader.lazyImporter(this, "Heritage",
+  "resource:///modules/devtools/ViewHelpers.jsm");
+loader.lazyImporter(this, "AbstractTreeItem",
+  "resource:///modules/devtools/AbstractTreeItem.jsm");
+
+const URL_LABEL_TOOLTIP = L10N.getStr("table.url.tooltiptext");
+const ZOOM_BUTTON_TOOLTIP = L10N.getStr("table.zoom.tooltiptext");
+const CALL_TREE_INDENTATION = 16; // px
+const CALL_TREE_AUTO_EXPAND = 3; // depth
+
+const clamp = (val, min, max) => Math.max(min, Math.min(max, val));
+const sum = vals => vals.reduce((a, b) => a + b, 0);
+
+exports.CallView = CallView;
+
+/**
+ * An item in a call tree view, which looks like this:
+ *
+ *   Time (ms)  |   Cost   | Calls | Function
+ * ============================================================================
+ *     1,000.00 |  100.00% |       | ▼ (root)
+ *       500.12 |   50.01% |   300 |   ▼ foo                          Categ. 1
+ *       300.34 |   30.03% |  1500 |     ▼ bar                        Categ. 2
+ *        10.56 |    0.01% |    42 |       ▶ call_with_children       Categ. 3
+ *        90.78 |    0.09% |    25 |         call_without_children    Categ. 4
+ *
+ * Every instance of a `CallView` represents a row in the call tree. The same
+ * parent node is used for all rows.
+ *
+ * @param number autoExpandDepth [optional]
+ *        The depth to which the tree should automatically expand. Defualts to
+ *        the caller's autoExpandDepth if a caller exists, otherwise defaults to
+ *        CALL_TREE_AUTO_EXPAND.
+ * @param CallView caller
+ *        The CallView considered the "caller" frame. This instance will be
+ *        represent the "callee". Should be null for root nodes.
+ * @param ThreadNode | FrameNode frame
+ *        Details about this function, like { samples, duration, calls } etc.
+ * @param number level
+ *        The indentation level in the call tree. The root node is at level 0.
+ * @param boolean hidden [optional]
+ *        Whether this node should be hidden and not contribute to depth/level
+ *        calculations. Defaults to false.
+ * @param boolean inverted [optional]
+ *        Whether the call tree has been inverted (bottom up, rather than
+ *        top-down). Defaults to false.
+ */
+function CallView({ autoExpandDepth, caller, frame, level, hidden, inverted }) {
+  level = level || 0;
+  if (hidden) {
+    level--;
+  }
+
+  AbstractTreeItem.call(this, {
+    parent: caller,
+    level
+  });
+
+  this.caller = caller;
+  this.autoExpandDepth = autoExpandDepth != null
+    ? autoExpandDepth
+    : caller ? caller.autoExpandDepth : CALL_TREE_AUTO_EXPAND;
+  this.frame = frame;
+  this.hidden = hidden;
+  this.inverted = inverted;
+
+  this._onUrlClick = this._onUrlClick.bind(this);
+  this._onZoomClick = this._onZoomClick.bind(this);
+};
+
+CallView.prototype = Heritage.extend(AbstractTreeItem.prototype, {
+  /**
+   * Creates the view for this tree node.
+   * @param nsIDOMNode document
+   * @param nsIDOMNode arrowNode
+   * @return nsIDOMNode
+   */
+  _displaySelf: function(document, arrowNode) {
+    this.document = document;
+
+    let frameInfo = this.frame.getInfo();
+    let framePercentage = this._getPercentage(this.frame.samples);
+
+    let selfPercentage;
+    let selfDuration;
+    if (!this._getChildCalls().length) {
+      selfPercentage = framePercentage;
+      selfDuration = this.frame.duration;
+    } else {
+      let childrenPercentage = sum([this._getPercentage(c.samples)
+                                    for (c of this._getChildCalls())]);
+      selfPercentage = clamp(framePercentage - childrenPercentage, 0, 100);
+
+      let childrenDuration = sum([c.duration
+                                  for (c of this._getChildCalls())]);
+      selfDuration = this.frame.duration - childrenDuration;
+
+      if (this.inverted) {
+        selfPercentage = framePercentage - selfPercentage;
+        selfDuration = this.frame.duration - selfDuration;
+      }
+    }
+
+    let durationCell = this._createTimeCell(this.frame.duration);
+    let selfDurationCell = this._createTimeCell(selfDuration, true);
+    let percentageCell = this._createExecutionCell(framePercentage);
+    let selfPercentageCell = this._createExecutionCell(selfPercentage, true);
+    let samplesCell = this._createSamplesCell(this.frame.samples);
+    let functionCell = this._createFunctionCell(arrowNode, frameInfo, this.level);
+
+    let targetNode = document.createElement("hbox");
+    targetNode.className = "call-tree-item";
+    targetNode.setAttribute("origin", frameInfo.isContent ? "content" : "chrome");
+    targetNode.setAttribute("category", frameInfo.categoryData.abbrev || "");
+    targetNode.setAttribute("tooltiptext", this.frame.location || "");
+    if (this.hidden) {
+      targetNode.style.display = "none";
+    }
+
+    let isRoot = frameInfo.nodeType == "Thread";
+    if (isRoot) {
+      functionCell.querySelector(".call-tree-zoom").hidden = true;
+      functionCell.querySelector(".call-tree-category").hidden = true;
+    }
+
+    targetNode.appendChild(durationCell);
+    targetNode.appendChild(percentageCell);
+    targetNode.appendChild(selfDurationCell);
+    targetNode.appendChild(selfPercentageCell);
+    targetNode.appendChild(samplesCell);
+    targetNode.appendChild(functionCell);
+
+    return targetNode;
+  },
+
+  /**
+   * Calculate what percentage of all samples the given number of samples is.
+   */
+  _getPercentage: function(samples) {
+    return samples / this.root.frame.samples * 100;
+  },
+
+  /**
+   * Return an array of this frame's child calls.
+   */
+  _getChildCalls: function() {
+    return Object.keys(this.frame.calls).map(k => this.frame.calls[k]);
+  },
+
+  /**
+   * Populates this node in the call tree with the corresponding "callees".
+   * These are defined in the `frame` data source for this call view.
+   * @param array:AbstractTreeItem children
+   */
+  _populateSelf: function(children) {
+    let newLevel = this.level + 1;
+
+    for (let newFrame of this._getChildCalls()) {
+      children.push(new CallView({
+        caller: this,
+        frame: newFrame,
+        level: newLevel,
+        inverted: this.inverted
+      }));
+    }
+
+    // Sort the "callees" asc. by samples, before inserting them in the tree.
+    children.sort((a, b) => a.frame.samples < b.frame.samples ? 1 : -1);
+  },
+
+  /**
+   * Functions creating each cell in this call view.
+   * Invoked by `_displaySelf`.
+   */
+  _createTimeCell: function(duration, isSelf = false) {
+    let cell = this.document.createElement("label");
+    cell.className = "plain call-tree-cell";
+    cell.setAttribute("type", isSelf ? "self-duration" : "duration");
+    cell.setAttribute("crop", "end");
+    cell.setAttribute("value", L10N.numberWithDecimals(duration, 2));
+    return cell;
+  },
+  _createExecutionCell: function(percentage, isSelf = false) {
+    let cell = this.document.createElement("label");
+    cell.className = "plain call-tree-cell";
+    cell.setAttribute("type", isSelf ? "self-percentage" : "percentage");
+    cell.setAttribute("crop", "end");
+    cell.setAttribute("value", L10N.numberWithDecimals(percentage, 2) + "%");
+    return cell;
+  },
+  _createSamplesCell: function(count) {
+    let cell = this.document.createElement("label");
+    cell.className = "plain call-tree-cell";
+    cell.setAttribute("type", "samples");
+    cell.setAttribute("crop", "end");
+    cell.setAttribute("value", count || "");
+    return cell;
+  },
+  _createFunctionCell: function(arrowNode, frameInfo, frameLevel) {
+    let cell = this.document.createElement("hbox");
+    cell.className = "call-tree-cell";
+    cell.style.MozMarginStart = (frameLevel * CALL_TREE_INDENTATION) + "px";
+    cell.setAttribute("type", "function");
+    cell.appendChild(arrowNode);
+
+    let nameNode = this.document.createElement("label");
+    nameNode.className = "plain call-tree-name";
+    nameNode.setAttribute("flex", "1");
+    nameNode.setAttribute("crop", "end");
+    nameNode.setAttribute("value", frameInfo.functionName || "");
+    cell.appendChild(nameNode);
+
+    let urlNode = this.document.createElement("label");
+    urlNode.className = "plain call-tree-url";
+    urlNode.setAttribute("flex", "1");
+    urlNode.setAttribute("crop", "end");
+    urlNode.setAttribute("value", frameInfo.fileName || "");
+    urlNode.setAttribute("tooltiptext", URL_LABEL_TOOLTIP + " → " + frameInfo.url);
+    urlNode.addEventListener("mousedown", this._onUrlClick);
+    cell.appendChild(urlNode);
+
+    let lineNode = this.document.createElement("label");
+    lineNode.className = "plain call-tree-line";
+    lineNode.setAttribute("value", frameInfo.line ? ":" + frameInfo.line : "");
+    cell.appendChild(lineNode);
+
+    let hostNode = this.document.createElement("label");
+    hostNode.className = "plain call-tree-host";
+    hostNode.setAttribute("value", frameInfo.hostName || "");
+    cell.appendChild(hostNode);
+
+    let zoomNode = this.document.createElement("button");
+    zoomNode.className = "plain call-tree-zoom";
+    zoomNode.setAttribute("tooltiptext", ZOOM_BUTTON_TOOLTIP);
+    zoomNode.addEventListener("mousedown", this._onZoomClick);
+    cell.appendChild(zoomNode);
+
+    let spacerNode = this.document.createElement("spacer");
+    spacerNode.setAttribute("flex", "10000");
+    cell.appendChild(spacerNode);
+
+    let categoryNode = this.document.createElement("label");
+    categoryNode.className = "plain call-tree-category";
+    categoryNode.style.color = frameInfo.categoryData.color;
+    categoryNode.setAttribute("value", frameInfo.categoryData.label || "");
+    cell.appendChild(categoryNode);
+
+    let hasDescendants = Object.keys(this.frame.calls).length > 0;
+    if (hasDescendants == false) {
+      arrowNode.setAttribute("invisible", "");
+    }
+
+    return cell;
+  },
+
+  /**
+   * Toggles the category information hidden or visible.
+   * @param boolean visible
+   */
+  toggleCategories: function(visible) {
+    if (!visible) {
+      this.container.setAttribute("categories-hidden", "");
+    } else {
+      this.container.removeAttribute("categories-hidden");
+    }
+  },
+
+  /**
+   * Handler for the "click" event on the url node of this call view.
+   */
+  _onUrlClick: function(e) {
+    e.preventDefault();
+    e.stopPropagation();
+    this.root.emit("link", this);
+  },
+
+  /**
+   * Handler for the "click" event on the zoom node of this call view.
+   */
+  _onZoomClick: function(e) {
+    e.preventDefault();
+    e.stopPropagation();
+    this.root.emit("zoom", this);
+  }
+});
-- 
1.8.4.2

