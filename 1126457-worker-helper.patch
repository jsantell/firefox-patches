From: Jordan Santell <jsantell@mozilla.com>
Date: Mon, 4 May 2015 17:51:50 -0700
Subject: Bug 1126457 - Implement a worker utility to easily offload tasks into a worker. r=bgrins

diff --git a/browser/devtools/shared/moz.build b/browser/devtools/shared/moz.build
index 9f473be..cf02174 100644
--- a/browser/devtools/shared/moz.build
+++ b/browser/devtools/shared/moz.build
@@ -56,16 +56,18 @@ EXTRA_JS_MODULES.devtools.shared += [
     'observable-object.js',
     'options-view.js',
     'poller.js',
     'source-utils.js',
     'telemetry.js',
     'theme-switching.js',
     'theme.js',
     'undo.js',
+    'worker-helper.js',
+    'worker.js',
 ]
 
 EXTRA_JS_MODULES.devtools.shared.widgets += [
     'widgets/CubicBezierPresets.js',
     'widgets/CubicBezierWidget.js',
     'widgets/FastListWidget.js',
     'widgets/FilterWidget.js',
     'widgets/FlameGraph.js',
diff --git a/browser/devtools/shared/test/browser.ini b/browser/devtools/shared/test/browser.ini
index c7cf6c8..ca98ac6 100644
--- a/browser/devtools/shared/test/browser.ini
+++ b/browser/devtools/shared/test/browser.ini
@@ -20,16 +20,19 @@ support-files =
 
 [browser_css_color.js]
 [browser_cubic-bezier-01.js]
 [browser_cubic-bezier-02.js]
 [browser_cubic-bezier-03.js]
 [browser_cubic-bezier-04.js]
 [browser_cubic-bezier-05.js]
 [browser_cubic-bezier-06.js]
+[browser_devtools-worker-01.js]
+[browser_devtools-worker-02.js]
+[browser_devtools-worker-03.js]
 [browser_filter-editor-01.js]
 [browser_filter-editor-02.js]
 [browser_filter-editor-03.js]
 [browser_filter-editor-04.js]
 [browser_filter-editor-05.js]
 [browser_filter-editor-06.js]
 [browser_filter-editor-07.js]
 [browser_filter-editor-08.js]
diff --git a/browser/devtools/shared/test/browser_devtools-worker-01.js b/browser/devtools/shared/test/browser_devtools-worker-01.js
new file mode 100644
index 0000000..e7e6173
--- /dev/null
+++ b/browser/devtools/shared/test/browser_devtools-worker-01.js
@@ -0,0 +1,31 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Tests that the devtools/shared/worker communicates properly.
+
+const { DevToolsWorker } = devtools.require("devtools/shared/worker");
+const WORKER_URL = "resource:///modules/devtools/GraphsWorker.js";
+
+const count = 100000;
+const WORKER_DATA = (function () {
+  let timestamps = [];
+  for (let i = 0; i < count; i++) {
+    timestamps.push(i);
+  }
+  return timestamps;
+})();
+const INTERVAL = 100;
+const DURATION = 1000;
+
+add_task(function*() {
+  let worker = new DevToolsWorker(WORKER_URL);
+  let results = yield worker.performTask("plotTimestampsGraph", {
+    timestamps: WORKER_DATA,
+    interval: INTERVAL,
+    duration: DURATION
+  });
+
+  ok(results.plottedData.length, "worker should have returned an object with array properties");
+
+  worker.destroy();
+});
diff --git a/browser/devtools/shared/test/browser_devtools-worker-02.js b/browser/devtools/shared/test/browser_devtools-worker-02.js
new file mode 100644
index 0000000..d7c88d2
--- /dev/null
+++ b/browser/devtools/shared/test/browser_devtools-worker-02.js
@@ -0,0 +1,32 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Tests that the devtools/shared/worker communicates properly
+// when loaded as a JSM.
+
+const { DevToolsWorker } = Cu.import("resource:///modules/devtools/shared/worker.js", {});
+const WORKER_URL = "resource:///modules/devtools/GraphsWorker.js";
+
+const count = 1000;
+const WORKER_DATA = (function () {
+  let timestamps = [];
+  for (let i = 0; i < count; i++) {
+    timestamps.push(i);
+  }
+  return timestamps;
+})();
+const INTERVAL = 100;
+const DURATION = 1000;
+
+add_task(function*() {
+  let worker = new DevToolsWorker(WORKER_URL);
+  let results = yield worker.performTask("plotTimestampsGraph", {
+    timestamps: WORKER_DATA,
+    interval: INTERVAL,
+    duration: DURATION
+  });
+
+  ok(results.plottedData.length, "worker should have returned an object with array properties");
+
+  worker.destroy();
+});
diff --git a/browser/devtools/shared/test/browser_devtools-worker-03.js b/browser/devtools/shared/test/browser_devtools-worker-03.js
new file mode 100644
index 0000000..d6f6e8e
--- /dev/null
+++ b/browser/devtools/shared/test/browser_devtools-worker-03.js
@@ -0,0 +1,43 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Tests errors are handled properly by the DevToolsWorker.
+
+const { DevToolsWorker } = devtools.require("devtools/shared/worker");
+const WORKER_URL = "resource:///modules/devtools/GraphsWorker.js";
+
+add_task(function*() {
+  try {
+    let workerNotFound = new DevToolsWorker("resource://i/dont/exist.js");
+    ok(false, "Creating a DevToolsWorker with an invalid URL throws");
+  } catch (e) {
+    ok(true, "Creating a DevToolsWorker with an invalid URL throws");
+  }
+
+  let worker = new DevToolsWorker(WORKER_URL);
+  try {
+    let results = yield worker.performTask("plotTimestampsGraph", {});
+    ok(false, "DevToolsWorker returns a rejected promise when an error occurs in the worker");
+  } catch (e) {
+    ok(true, "DevToolsWorker returns a rejected promise when an error occurs in the worker");
+  }
+
+  try {
+    let results = yield worker.performTask("not a real task");
+    ok(false, "DevToolsWorker returns a rejected promise when task does not exist");
+  } catch (e) {
+    ok(true, "DevToolsWorker returns a rejected promise when task does not exist");
+  }
+
+  worker.destroy();
+  try {
+    let results = yield worker.performTask("plotTimestampsGraph", {
+      timestamps: [0,1,2,3,4,5,6,7,8,9],
+      interval: 1,
+      duration: 1
+    });
+    ok(false, "DevToolsWorker rejects when performing a task on a destroyed worker");
+  } catch (e) {
+    ok(true, "DevToolsWorker rejects when performing a task on a destroyed worker");
+  };
+});
diff --git a/browser/devtools/shared/widgets/Graphs.jsm b/browser/devtools/shared/widgets/Graphs.jsm
index 67d815d..7b1d592 100644
--- a/browser/devtools/shared/widgets/Graphs.jsm
+++ b/browser/devtools/shared/widgets/Graphs.jsm
@@ -4,16 +4,17 @@
 "use strict";
 
 const Cu = Components.utils;
 
 Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
 const promise = Cu.import("resource://gre/modules/Promise.jsm", {}).Promise;
 const {Task} = Cu.import("resource://gre/modules/Task.jsm", {});
 const {EventEmitter} = Cu.import("resource://gre/modules/devtools/event-emitter.js", {});
+const {DevToolsWorker} = Cu.import("resource:///modules/devtools/shared/worker.js", {});
 
 this.EXPORTED_SYMBOLS = [
   "GraphCursor",
   "GraphArea",
   "GraphAreaDragger",
   "GraphAreaResizer",
   "AbstractCanvasGraph",
   "LineGraphWidget",
@@ -2118,50 +2119,26 @@ this.CanvasGraphUtils = {
     });
   },
 
   /**
    * Performs the given task in a chrome worker, assuming it exists.
    *
    * @param string task
    *        The task name. Currently supported: "plotTimestampsGraph".
-   * @param any args
+   * @param data args
    *        Extra arguments to pass to the worker.
    * @param array transferrable [optional]
    *        A list of transferrable objects, if any.
    * @return object
    *         A promise that is resolved once the worker finishes the task.
    */
-  _performTaskInWorker: function(task, args, transferrable) {
-    let worker = this._graphUtilsWorker || new ChromeWorker(WORKER_URL);
-    let id = this._graphUtilsTaskId++;
-    worker.postMessage({ task, id, args }, transferrable);
-    return this._waitForWorkerResponse(worker, id);
-  },
-
-  /**
-   * Waits for the specified worker to finish a task.
-   *
-   * @param ChromeWorker worker
-   *        The worker for which to add a message listener.
-   * @param number id
-   *        The worker task id.
-   */
-  _waitForWorkerResponse: function(worker, id) {
-    let deferred = promise.defer();
-
-    worker.addEventListener("message", function listener({ data }) {
-      if (data.id != id) {
-        return;
-      }
-      worker.removeEventListener("message", listener);
-      deferred.resolve(data);
-    });
-
-    return deferred.promise;
+  _performTaskInWorker: function(task, data, transferrable) {
+    let worker = this._graphUtilsWorker || new DevToolsWorker(WORKER_URL);
+    return worker.performTask(task, data, transferrable);
   }
 };
 
 /**
  * Maps a value from one range to another.
  * @param number value, istart, istop, ostart, ostop
  * @return number
  */
diff --git a/browser/devtools/shared/widgets/GraphsWorker.js b/browser/devtools/shared/widgets/GraphsWorker.js
index b231e58..494757c 100644
--- a/browser/devtools/shared/widgets/GraphsWorker.js
+++ b/browser/devtools/shared/widgets/GraphsWorker.js
@@ -1,40 +1,33 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
-self.onmessage = e => {
-  const { id, task, args } = e.data;
-
-  switch (task) {
-    case "plotTimestampsGraph":
-      plotTimestampsGraph(id, args);
-      break;
-    default:
-      self.postMessage({ id, error: e.message + "\n" + e.stack });
-      break;
-  }
-};
+/**
+ * Import `createTask` to communicate with `devtools/shared/worker`.
+ */
+importScripts("resource://gre/modules/workers/require.js");
+const { createTask } = require("resource:///modules/devtools/shared/worker-helper");
 
 /**
  * @see LineGraphWidget.prototype.setDataFromTimestamps in Graphs.jsm
  * @param number id
  * @param array timestamps
  * @param number interval
  * @param number duration
  */
-function plotTimestampsGraph(id, args) {
-  let plottedData = plotTimestamps(args.timestamps, args.interval);
-  let plottedMinMaxSum = getMinMaxAvg(plottedData, args.timestamps, args.duration);
+createTask(self, "plotTimestampsGraph", function ({ timestamps, interval, duration }, callback) {
+  let plottedData = plotTimestamps(timestamps, interval);
+  let plottedMinMaxSum = getMinMaxAvg(plottedData, timestamps, duration);
+
+  callback(null, { plottedData, plottedMinMaxSum });
+});
 
-  let response = { id, plottedData, plottedMinMaxSum };
-  self.postMessage(response);
-}
 
 /**
  * Gets the min, max and average of the values in an array.
  * @param array source
  * @param array timestamps
  * @param number duration
  * @return object
  */
diff --git a/browser/devtools/shared/worker-helper.js b/browser/devtools/shared/worker-helper.js
new file mode 100644
index 0000000..b445761
--- /dev/null
+++ b/browser/devtools/shared/worker-helper.js
@@ -0,0 +1,74 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+/**
+ * This file is to only be included by ChromeWorkers. This exposes
+ * a `createTask` function to workers to register tasks for communication
+ * back to `devtools/shared/worker`.
+ */
+
+/**
+ * Takes a worker's `self` object, a task name, and a function to
+ * be called when that task is called. The task is called with the
+ * passed in data as the first argument, and a node-style callback as the second
+ * argument. Pass in an error as the first argument, or the response as the second
+ * argument in the callback.
+ *
+ * @param {object} self
+ * @param {string} name
+ * @param {function} fn
+ */
+function createTask (self, name, fn) {
+  // Store a hash of task name to function on the Worker
+  if (!self._tasks) {
+    self._tasks = {};
+  }
+
+  // Create the onmessage handler if not yet created.
+  if (!self.onmessage) {
+    self.onmessage = createHandler(self);
+  }
+
+  // Store the task on the worker.
+  self._tasks[name] = fn;
+}
+
+exports.createTask = createTask;
+
+/**
+ * Creates the `self.onmessage` handler for a Worker.
+ *
+ * @param {object} self
+ * @return {function}
+ */
+function createHandler (self) {
+  return function (e) {
+    let { id, task, data } = e.data;
+    let taskFn = self._tasks[task];
+
+    if (!taskFn) {
+      self.postMessage({ id, error: `Task "${task}" not found in worker.` });
+      return;
+    }
+
+    try {
+      taskFn(data, callback);
+    } catch (e) {
+      handleError(e);
+    }
+
+    function callback (err, response) {
+      if (err) {
+        handleError(err);
+      } else {
+        self.postMessage({ id, response });
+      }
+    }
+
+    function handleError (e) {
+      self.postMessage({ id, error: e.message });
+    }
+  }
+}
diff --git a/browser/devtools/shared/worker.js b/browser/devtools/shared/worker.js
new file mode 100644
index 0000000..4195a37
--- /dev/null
+++ b/browser/devtools/shared/worker.js
@@ -0,0 +1,80 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+(function (factory) { // Module boilerplate
+  if (this.module && module.id.indexOf("worker") >= 0) { // require
+    const { Cc, Ci, ChromeWorker } = require("chrome");
+    factory.call(this, require, exports, module, { Cc, Ci }, ChromeWorker);
+  } else { // Cu.import
+      const { classes: Cc, interfaces: Ci, utils: Cu } = Components;
+      const { devtools } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
+      this.isWorker = false;
+      this.Promise = Cu.import("resource://gre/modules/Promise.jsm", {}).Promise;
+      factory.call(this, devtools.require, this, { exports: this }, { Cc, Ci }, ChromeWorker);
+      this.EXPORTED_SYMBOLS = ["DevToolsWorker"];
+  }
+}).call(this, function (require, exports, module, { Ci, Cc }, ChromeWorker ) {
+
+const { generateUUID } = Cc['@mozilla.org/uuid-generator;1'].getService(Ci.nsIUUIDGenerator);
+
+/**
+ * Creates a wrapper around a ChromeWorker, providing easy
+ * communication to offload demanding tasks. The corresponding URL
+ * must implement the interface provided by `devtools/shared/worker-helper`.
+ *
+ * @see `./browser/devtools/shared/widgets/GraphsWorker.js`
+ *
+ * @param {string} url
+ *        The URL of the worker.
+ */
+function DevToolsWorker (url) {
+  this._worker = new ChromeWorker(url);
+}
+exports.DevToolsWorker = DevToolsWorker;
+
+/**
+ * Performs the given task in a chrome worker, passing in data.
+ * Returns a promise that resolves when the task is completed, resulting in
+ * the return value of the task.
+ *
+ * @param {string} task
+ *        The name of the task to execute in the worker.
+ * @param {any} data
+ *        Data to be passed into the task implemented by the worker.
+ * @return {Promise}
+ */
+DevToolsWorker.prototype.performTask = function DevToolsWorkerPerformTask (task, data) {
+  if (this._destroyed) {
+    return Promise.reject("Cannot call performTask on a destroyed DevToolsWorker");
+  }
+  let worker = this._worker;
+  let id = generateUUID().toString();
+  worker.postMessage({ task, id, data });
+
+  return new Promise(function (resolve, reject) {
+    worker.addEventListener("message", function listener({ data }) {
+      if (data.id !== id) {
+        return;
+      }
+      worker.removeEventListener("message", listener);
+      if (data.error) {
+        reject(data.error);
+      } else {
+        resolve(data.response);
+      }
+    });
+  });
+}
+
+/**
+ * Terminates the underlying worker. Use when no longer needing the worker.
+ */
+DevToolsWorker.prototype.destroy = function DevToolsWorkerDestroy () {
+  this._worker.terminate();
+  this._worker = null;
+  this._destroyed = true;
+};
+
+});
-- 
2.2.1

