From: Jordan Santell <jsantell@mozilla.com>
Date: Wed, 28 Oct 2015 23:34:59 -0700
Subject: Bug 1214799 - Localization strings for the memory tool. r=fitzgen

diff --git a/browser/locales/en-US/chrome/browser/devtools/memory.properties b/browser/locales/en-US/chrome/browser/devtools/memory.properties
new file mode 100644
index 0000000..2065e9a
--- /dev/null
+++ b/browser/locales/en-US/chrome/browser/devtools/memory.properties
@@ -0,0 +1,103 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+# LOCALIZATION NOTE These strings are used inside the Memory Tools
+# which is available from the Web Developer sub-menu -> 'Memory'.
+# The correct localization of this file might be to keep it in
+# English, or another language commonly spoken among web developers.
+# You want to make that choice consistent across the developer tools.
+# A good criteria is the language in which you'd find the best
+# documentation on web development on the web.
+
+# LOCALIZATION NOTE (memory.label):
+# This string is displayed in the title of the tab when the memory tool is
+# displayed inside the developer tools window and in the Developer Tools Menu.
+memory.label=Memory
+
+# LOCALIZATION NOTE (memory.panelLabel):
+# This is used as the label for the toolbox panel.
+memory.panelLabel=Memory Panel
+
+# LOCALIZATION NOTE (memory.tooltip):
+# This string is displayed in the tooltip of the tab when the memory tool is
+# displayed inside the developer tools window.
+memory.tooltip=Memory
+
+# LOCALIZATION NOTE (checkbox.invertTree): The label describing the boolean
+# checkbox whether or not to invert the tree.
+checkbox.invertTree=Invert tree
+
+# LOCALIZATION NOTE (checkbox.recordAllocationStacks): The label describing the boolean
+# checkbox whether or not to record allocation stacks.
+checkbox.recordAllocationStacks=Record allocation stacks
+
+# LOCALIZATION NOTE (toolbar.breakdownBy): The label describing the select menu
+# options of the breakdown options.
+toolbar.breakdownBy=Group by:
+
+# LOCALIZATION NOTE (take-snapshot): The label describing the button that initiates
+# taking a snapshot, either as the main label, or a tooltip.
+take-snapshot=Take snapshot
+
+# LOCALIZATION NOTE (viewsourceindebugger): The label for the tooltip when hovering over
+# a link in the heap tree to jump to the debugger view.
+# %S represents the URL to match in the debugger.
+viewsourceindebugger=View source in Debugger → %S
+
+# LOCALIZATION NOTE (tree-item.nostack): The label describing the row in the heap tree
+# that represents a row broken down by allocation stack when no stack was available.
+tree-item.nostack=(no stack available)
+
+# LOCALIZATION NOTE (tree-item.root): The label describing the row in the heap tree
+# that represents the root of the tree when inverted.
+tree-item.root=(root)
+
+# LOCALIZATION NOTE (snapshot.state.saving.full): The label describing the snapshot
+# state SAVING, used in the main heap view.
+snapshot.state.saving.full=Saving snapshot…
+
+# LOCALIZATION NOTE (snapshot.state.reading.full): The label describing the snapshot
+# state READING, and SAVED, due to these states being combined visually, used
+# in the main heap view.
+snapshot.state.reading.full=Reading snapshot…
+
+# LOCALIZATION NOTE (snapshot.state.saving-census.full): The label describing the snapshot
+# state SAVING, used in the main heap view.
+snapshot.state.saving-census.full=Saving census…
+
+# LOCALIZATION NOTE (snapshot.state.error.full): The label describing the snapshot
+# state ERROR, used in the main heap view.
+snapshot.state.error.full=There was an error processing this snapshot.
+
+# LOCALIZATION NOTE (snapshot.state.saving): The label describing the snapshot
+# state SAVING, used in the snapshot list view
+snapshot.state.saving=Saving snapshot…
+
+# LOCALIZATION NOTE (snapshot.state.reading): The label describing the snapshot
+# state READING, and SAVED, due to these states being combined visually, used
+# in the snapshot list view.
+snapshot.state.reading=Reading snapshot…
+
+# LOCALIZATION NOTE (snapshot.state.saving-census): The label describing the snapshot
+# state SAVING, used in snapshot list view.
+snapshot.state.saving-census=Saving census…
+
+# LOCALIZATION NOTE (snapshot.state.error): The label describing the snapshot
+# state ERROR, used in the snapshot list view.
+snapshot.state.error=Error
+
+# LOCALIZATION NOTE (heapview.field.bytes): The name of the column in the heap view for bytes.
+heapview.field.bytes=Bytes
+
+# LOCALIZATION NOTE (heapview.field.count): The name of the column in the heap view for count.
+heapview.field.count=Count
+
+# LOCALIZATION NOTE (heapview.field.totalbytes): The name of the column in the heap view for total bytes.
+heapview.field.totalbytes=Total Bytes
+
+# LOCALIZATION NOTE (heapview.field.totalcount): The name of the column in the heap view for total count.
+heapview.field.totalcount=Total Count
+
+# LOCALIZATION NOTE (heapview.field.name): The name of the column in the heap view for name.
+heapview.field.name=Name
diff --git a/browser/locales/jar.mn b/browser/locales/jar.mn
index 82ab9a3..f6243f1 100644
--- a/browser/locales/jar.mn
+++ b/browser/locales/jar.mn
@@ -60,16 +60,17 @@
     locale/browser/devtools/webConsole.dtd            (%chrome/browser/devtools/webConsole.dtd)
     locale/browser/devtools/VariablesView.dtd         (%chrome/browser/devtools/VariablesView.dtd)
     locale/browser/devtools/sourceeditor.properties   (%chrome/browser/devtools/sourceeditor.properties)
     locale/browser/devtools/sourceeditor.dtd          (%chrome/browser/devtools/sourceeditor.dtd)
     locale/browser/devtools/promisedebugger.dtd       (%chrome/browser/devtools/promisedebugger.dtd)
     locale/browser/devtools/promisedebugger.properties  (%chrome/browser/devtools/promisedebugger.properties)
     locale/browser/devtools/performance.dtd           (%chrome/browser/devtools/performance.dtd)
     locale/browser/devtools/performance.properties    (%chrome/browser/devtools/performance.properties)
+    locale/browser/devtools/memory.properties         (%chrome/browser/devtools/memory.properties)
     locale/browser/devtools/graphs.properties         (%chrome/browser/devtools/graphs.properties)
     locale/browser/devtools/layoutview.dtd            (%chrome/browser/devtools/layoutview.dtd)
     locale/browser/devtools/responsiveUI.properties   (%chrome/browser/devtools/responsiveUI.properties)
     locale/browser/devtools/toolbox.dtd            (%chrome/browser/devtools/toolbox.dtd)
     locale/browser/devtools/toolbox.properties     (%chrome/browser/devtools/toolbox.properties)
     locale/browser/devtools/inspector.dtd          (%chrome/browser/devtools/inspector.dtd)
     locale/browser/devtools/markers.properties     (%chrome/browser/devtools/markers.properties)
     locale/browser/devtools/projecteditor.properties     (%chrome/browser/devtools/projecteditor.properties)
diff --git a/devtools/client/definitions.js b/devtools/client/definitions.js
index 23cf3ff..3b33a17 100644
--- a/devtools/client/definitions.js
+++ b/devtools/client/definitions.js
@@ -33,29 +33,31 @@ const debuggerProps = "chrome://browser/locale/devtools/debugger.properties";
 const styleEditorProps = "chrome://browser/locale/devtools/styleeditor.properties";
 const shaderEditorProps = "chrome://browser/locale/devtools/shadereditor.properties";
 const canvasDebuggerProps = "chrome://browser/locale/devtools/canvasdebugger.properties";
 const webAudioEditorProps = "chrome://browser/locale/devtools/webaudioeditor.properties";
 const performanceProps = "chrome://browser/locale/devtools/performance.properties";
 const netMonitorProps = "chrome://browser/locale/devtools/netmonitor.properties";
 const storageProps = "chrome://browser/locale/devtools/storage.properties";
 const scratchpadProps = "chrome://browser/locale/devtools/scratchpad.properties";
+const memoryProps = "chrome://browser/locale/devtools/memory.properties";
 
 loader.lazyGetter(this, "toolboxStrings", () => Services.strings.createBundle(toolboxProps));
 loader.lazyGetter(this, "performanceStrings",() => Services.strings.createBundle(performanceProps));
 loader.lazyGetter(this, "webConsoleStrings", () => Services.strings.createBundle(webConsoleProps));
 loader.lazyGetter(this, "debuggerStrings", () => Services.strings.createBundle(debuggerProps));
 loader.lazyGetter(this, "styleEditorStrings", () => Services.strings.createBundle(styleEditorProps));
 loader.lazyGetter(this, "shaderEditorStrings", () => Services.strings.createBundle(shaderEditorProps));
 loader.lazyGetter(this, "canvasDebuggerStrings", () => Services.strings.createBundle(canvasDebuggerProps));
 loader.lazyGetter(this, "webAudioEditorStrings", () => Services.strings.createBundle(webAudioEditorProps));
 loader.lazyGetter(this, "inspectorStrings", () => Services.strings.createBundle(inspectorProps));
 loader.lazyGetter(this, "netMonitorStrings", () => Services.strings.createBundle(netMonitorProps));
 loader.lazyGetter(this, "storageStrings", () => Services.strings.createBundle(storageProps));
 loader.lazyGetter(this, "scratchpadStrings", () => Services.strings.createBundle(scratchpadProps));
+loader.lazyGetter(this, "memoryStrings", () => Services.strings.createBundle(memoryProps));
 
 var Tools = {};
 exports.Tools = Tools;
 
 // Definitions
 Tools.options = {
   id: "options",
   ordinal: 0,
@@ -278,19 +280,19 @@ Tools.performance = {
 Tools.memory = {
   id: "memory",
   ordinal: 8,
   icon: "chrome://devtools/skin/themes/images/tool-memory.svg",
   invertIconForLightTheme: true,
   highlightedicon: "chrome://devtools/skin/themes/images/tool-memory-active.svg",
   url: "chrome://devtools/content/memory/memory.xhtml",
   visibilityswitch: "devtools.memory.enabled",
-  label: "Memory",
-  panelLabel: "Memory Panel",
-  tooltip: "Memory (keyboardshortcut)",
+  label: l10n("memory.label", memoryStrings),
+  panelLabel: l10n("memory.panelLabel", memoryStrings),
+  tooltip: l10n("memory.tooltip", memoryStrings),
 
   isTargetSupported: function (target) {
     return target.getTrait("heapSnapshots");
   },
 
   build: function (frame, target) {
     return new MemoryPanel(frame, target);
   }
diff --git a/devtools/client/memory/components/frame.js b/devtools/client/memory/components/frame.js
index a33ef38..48ab266 100644
--- a/devtools/client/memory/components/frame.js
+++ b/devtools/client/memory/components/frame.js
@@ -1,13 +1,14 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const { DOM: dom, createClass, PropTypes } = require("devtools/client/shared/vendor/react");
+const { L10N } = require("../utils");
 const { URL } = require("sdk/url");
 
 const Frame = module.exports = createClass({
   displayName: "frame-view",
 
   propTypes: {
     frame: PropTypes.object.isRequired,
     toolbox: PropTypes.object.isRequired,
@@ -15,21 +16,22 @@ const Frame = module.exports = createClass({
 
   render() {
     let { toolbox, frame } = this.props;
 
     let url = new URL(frame.source);
     let spec = url.toString();
     let func = frame.functionDisplayFrame || "";
     let tooltip = `${func} (${spec}:${frame.line}:${frame.column})`;
+    let viewTooltip = L10N.getFormatStr("viewsourceindebugger", `${spec}:${frame.line}:${frame.column}`);
     let onClick = () => toolbox.viewSourceInDebugger(spec, frame.line);
 
     let fields = [
       dom.span({ className: "frame-link-function-display-name" }, func),
-      dom.a({ className: "frame-link-filename", onClick }, url.fileName),
+      dom.a({ className: "frame-link-filename", onClick, title: viewTooltip }, url.fileName),
       dom.span({ className: "frame-link-colon" }, ":"),
       dom.span({ className: "frame-link-line" }, frame.line),
       dom.span({ className: "frame-link-colon" }, ":"),
       dom.span({ className: "frame-link-column" }, frame.column)
     ];
 
     if (url.scheme === "http" || url.scheme === "https" || url.scheme === "ftp") {
       fields.push(dom.span({ className: "frame-link-host" }, url.host));
diff --git a/devtools/client/memory/components/heap.js b/devtools/client/memory/components/heap.js
index ff5d411..27a171a 100644
--- a/devtools/client/memory/components/heap.js
+++ b/devtools/client/memory/components/heap.js
@@ -1,20 +1,19 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const { DOM: dom, createClass, PropTypes, createFactory } = require("devtools/client/shared/vendor/react");
 const { safeErrorString } = require("devtools/shared/DevToolsUtils");
 const Tree = createFactory(require("./tree"));
 const TreeItem = createFactory(require("./tree-item"));
-const { getSnapshotStatusTextFull } = require("../utils");
+const { getSnapshotStatusTextFull, L10N } = require("../utils");
 const { snapshotState: states } = require("../constants");
 const { snapshot: snapshotModel } = require("../models");
-const TAKE_SNAPSHOT_TEXT = "Take snapshot";
 // If HEAP_TREE_ROW_HEIGHT changes, be sure to change `var(--heap-tree-row-height)`
 // in `devtools/client/themes/memory.css`
 const HEAP_TREE_ROW_HEIGHT = 14;
 
 /**
  * Creates a hash map mapping node IDs to its parent node.
  *
  * @param {CensusTreeNode} node
@@ -78,39 +77,39 @@ const Heap = module.exports = createClass({
       case "initial":
         content = [dom.button({
           className: "devtools-toolbarbutton take-snapshot",
           onClick: onSnapshotClick,
           // Want to use the [standalone] tag to leverage our styles,
           // but React hates that evidently
           "data-standalone": true,
           "data-text-only": true,
-        }, TAKE_SNAPSHOT_TEXT)];
+        }, L10N.getStr("take-snapshot"))];
         break;
       case states.ERROR:
         content = [
           dom.span({ className: "snapshot-status error" }, statusText),
-          dom.pre({}, safeErrorString(snapshot.error || new Error("blahblah"))),
+          dom.pre({}, safeErrorString(snapshot.error))
         ];
         break;
       case states.SAVING:
       case states.SAVED:
       case states.READING:
       case states.READ:
       case states.SAVING_CENSUS:
         content = [dom.span({ className: "snapshot-status devtools-throbber" }, statusText)];
         break;
       case states.SAVED_CENSUS:
         content = [
           dom.div({ className: "header" },
-            dom.span({ className: "heap-tree-item-bytes" }, "Bytes"),
-            dom.span({ className: "heap-tree-item-count" }, "Count"),
-            dom.span({ className: "heap-tree-item-total-bytes" }, "Total Bytes"),
-            dom.span({ className: "heap-tree-item-total-count" }, "Total Count"),
-            dom.span({ className: "heap-tree-item-name" }, "Name")
+            dom.span({ className: "heap-tree-item-bytes" }, L10N.getStr("heapview.field.bytes")),
+            dom.span({ className: "heap-tree-item-count" }, L10N.getStr("heapview.field.count")),
+            dom.span({ className: "heap-tree-item-total-bytes" }, L10N.getStr("heapview.field.totalbytes")),
+            dom.span({ className: "heap-tree-item-total-count" }, L10N.getStr("heapview.field.totalcount")),
+            dom.span({ className: "heap-tree-item-name" }, L10N.getStr("heapview.field.name"))
           ),
           Tree(createTreeProperties(snapshot.census, toolbox))
         ];
         break;
     }
     let pane = dom.div({ className: "heap-view-panel", "data-state": state }, ...content);
 
     return (
diff --git a/devtools/client/memory/components/snapshot-list-item.js b/devtools/client/memory/components/snapshot-list-item.js
index 890edb1..0d084cf 100644
--- a/devtools/client/memory/components/snapshot-list-item.js
+++ b/devtools/client/memory/components/snapshot-list-item.js
@@ -1,14 +1,14 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const { DOM: dom, createClass, PropTypes } = require("devtools/client/shared/vendor/react");
-const { getSnapshotStatusText } = require("../utils");
+const { L10N, getSnapshotStatusText } = require("../utils");
 const { snapshot: snapshotModel } = require("../models");
 
 const SnapshotListItem = module.exports = createClass({
   displayName: "snapshot-list-item",
 
   propTypes: {
     onClick: PropTypes.func,
     item: snapshotModel.isRequired,
diff --git a/devtools/client/memory/components/toolbar.js b/devtools/client/memory/components/toolbar.js
index 1458996..4fb64e6 100644
--- a/devtools/client/memory/components/toolbar.js
+++ b/devtools/client/memory/components/toolbar.js
@@ -1,14 +1,14 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const { DOM: dom, createClass, PropTypes } = require("devtools/client/shared/vendor/react");
-
+const { L10N } = require("../utils");
 const models = require("../models");
 
 const Toolbar = module.exports = createClass({
   displayName: "toolbar",
   propTypes: {
     breakdowns: PropTypes.arrayOf(PropTypes.shape({
       name: PropTypes.string.isRequired,
       displayName: PropTypes.string.isRequired,
@@ -29,42 +29,44 @@ const Toolbar = module.exports = createClass({
       onToggleRecordAllocationStacks,
       allocations,
       onToggleInverted,
       inverted
     } = this.props;
 
     return (
       dom.div({ className: "devtools-toolbar" },
-        dom.button({ className: `take-snapshot devtools-button`, onClick: onTakeSnapshotClick }),
+        dom.button({
+          className: `take-snapshot devtools-button`,
+          onClick: onTakeSnapshotClick,
+          title: L10N.getStr("take-snapshot")
+        }),
 
         dom.label({},
-          "Breakdown by ",
+          L10N.getStr("toolbar.breakdownBy"),
           dom.select({
             className: `select-breakdown`,
             onChange: e => onBreakdownChange(e.target.value),
           }, ...breakdowns.map(({ name, displayName }) => dom.option({ key: name, value: name }, displayName)))
         ),
 
         dom.label({},
           dom.input({
             type: "checkbox",
             checked: inverted,
             onChange: onToggleInverted,
           }),
-          // TODO bug 1214799
-          "Invert tree"
+          L10N.getStr("checkbox.invertTree")
         ),
 
         dom.label({},
           dom.input({
             type: "checkbox",
             checked: allocations.recording,
             disabled: allocations.togglingInProgress,
             onChange: onToggleRecordAllocationStacks,
           }),
-          // TODO bug 1214799
-          "Record allocation stacks"
+          L10N.getStr("checkbox.recordAllocationStacks")
         )
       )
     );
   }
 });
diff --git a/devtools/client/memory/components/tree-item.js b/devtools/client/memory/components/tree-item.js
index 0383d40..b62c5d8 100644
--- a/devtools/client/memory/components/tree-item.js
+++ b/devtools/client/memory/components/tree-item.js
@@ -1,14 +1,15 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const { isSavedFrame } = require("devtools/shared/DevToolsUtils");
 const { DOM: dom, createClass, createFactory, PropTypes } = require("devtools/client/shared/vendor/react");
+const { L10N } = require("../utils");
 const FrameView = createFactory(require("./frame"));
 
 const INDENT = 10;
 const MAX_SOURCE_LENGTH = 200;
 
 
 /**
  * An arrow that displays whether its node is expanded (▼) or collapsed
@@ -28,13 +29,14 @@ const TreeItem = module.exports = createClass({
       dom.span({ className: "heap-tree-item-field heap-tree-item-name", style: { marginLeft: depth * INDENT }},
         arrow,
         this.toLabel(item.name, toolbox)
       )
     );
   },
 
   toLabel(name, toolbox) {
-    return isSavedFrame(name)
-      ? FrameView({ frame: name, toolbox })
-      : String(name);
+    return isSavedFrame(name) ? FrameView({ frame: name, toolbox }) :
+           name === "noStack" ? L10N.getStr("tree-item.nostack") :
+           name === null ? L10N.getStr("tree-item.root") :
+           String(name);
   },
 });
diff --git a/devtools/client/memory/utils.js b/devtools/client/memory/utils.js
index 2e67066..1cd37f5 100644
--- a/devtools/client/memory/utils.js
+++ b/devtools/client/memory/utils.js
@@ -1,22 +1,21 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+const { Cu } = require("chrome");
+Cu.import("resource://devtools/client/shared/widgets/ViewHelpers.jsm");
+const STRINGS_URI = "chrome://browser/locale/devtools/memory.properties"
+const L10N = exports.L10N = new ViewHelpers.L10N(STRINGS_URI);
 const { assert } = require("devtools/shared/DevToolsUtils");
 const { Preferences } = require("resource://gre/modules/Preferences.jsm");
 const CUSTOM_BREAKDOWN_PREF = "devtools.memory.custom-breakdowns";
 const DevToolsUtils = require("devtools/shared/DevToolsUtils");
 const { snapshotState: states, breakdowns } = require("./constants");
-const FULL_ERROR_TEXT = "There was an error processing this snapshot.";
-const ERROR_SNAPSHOT_TEXT = "⚠ Error!";
-const SAVING_SNAPSHOT_TEXT = "Saving snapshot...";
-const READING_SNAPSHOT_TEXT = "Reading snapshot...";
-const SAVING_CENSUS_TEXT = "Taking heap census...";
 
 /**
  * Returns an array of objects with the unique key `name`
  * and `displayName` for each breakdown.
  *
  * @return {Object{name, displayName}}
  */
 exports.getBreakdownDisplayData = function () {
@@ -93,27 +92,26 @@ exports.breakdownNameToSpec = function (name) {
  * @return {String}
  */
 exports.getSnapshotStatusText = function (snapshot) {
   assert((snapshot || {}).state,
     `Snapshot must have expected state, found ${(snapshot || {}).state}.`);
 
   switch (snapshot.state) {
     case states.ERROR:
-      return ERROR_SNAPSHOT_TEXT;
+      return L10N.getStr("snapshot.state.error");
     case states.SAVING:
-      return SAVING_SNAPSHOT_TEXT;
+      return L10N.getStr("snapshot.state.saving");
     case states.SAVED:
     case states.READING:
-      return READING_SNAPSHOT_TEXT;
+      return L10N.getStr("snapshot.state.reading");
     case states.SAVING_CENSUS:
-      return SAVING_CENSUS_TEXT;
-    // If it's read, it shouldn't have any label, as we could've cleared the
-    // census cache by changing the breakdown, and we should lazily
-    // go to SAVING_CENSUS. If it's SAVED_CENSUS, we have no status to display.
+      return L10N.getStr("snapshot.state.saving-census");
+    // Both READ and SAVED_CENSUS state do not have any message
+    // to show as other content will be displayed.
     case states.READ:
     case states.SAVED_CENSUS:
       return "";
   }
 
   assert(false, `Snapshot in unexpected state: ${snapshot.state}`);
   return "";
 }
@@ -125,19 +123,30 @@ exports.getSnapshotStatusText = function (snapshot) {
  * @param {Snapshot} snapshot
  * @return {String}
  */
 exports.getSnapshotStatusTextFull = function (snapshot) {
   assert((snapshot || {}).state,
     `Snapshot must have expected state, found ${(snapshot || {}).state}.`);
   switch (snapshot.state) {
     case states.ERROR:
-      return FULL_ERROR_TEXT;
+      return L10N.getStr("snapshot.state.error.full");
+    case states.SAVING:
+      return L10N.getStr("snapshot.state.saving.full");
+    case states.SAVED:
+    case states.READING:
+      return L10N.getStr("snapshot.state.reading.full");
+    case states.SAVING_CENSUS:
+      return L10N.getStr("snapshot.state.saving-census.full");
+    // Both READ and SAVED_CENSUS state do not have any full message
+    // to show as other content will be displayed.
+    case states.READ:
+    case states.SAVED_CENSUS:
+      return "";
   }
-  return exports.getSnapshotStatusText(snapshot);
 }
 
 /**
  * Takes an array of snapshots and a snapshot and returns
  * the snapshot instance in `snapshots` that matches
  * the snapshot passed in.
  *
  * @param {Array<Snapshot>} snapshots
-- 
2.3.1

