From: Jordan Santell <jsantell@gmail.com>
Date: Sat, 21 Feb 2015 11:43:29 -0800
Subject: prog

diff --git a/browser/devtools/jar.mn b/browser/devtools/jar.mn
index afa1729..41673fa 100644
--- a/browser/devtools/jar.mn
+++ b/browser/devtools/jar.mn
@@ -67,18 +67,20 @@ browser.jar:
     content/browser/devtools/codemirror/show-hint.js                   (sourceeditor/codemirror/hint/show-hint.js)
     content/browser/devtools/codemirror/mozilla.css                    (sourceeditor/codemirror/mozilla.css)
     content/browser/devtools/debugger.xul                              (debugger/debugger.xul)
     content/browser/devtools/debugger.css                              (debugger/debugger.css)
     content/browser/devtools/debugger-controller.js                    (debugger/debugger-controller.js)
     content/browser/devtools/debugger-view.js                          (debugger/debugger-view.js)
     content/browser/devtools/debugger-toolbar.js                       (debugger/debugger-toolbar.js)
     content/browser/devtools/debugger-panes.js                         (debugger/debugger-panes.js)
+    content/browser/devtools/shadereditor/texture.png                  (shadereditor/texture.png)
     content/browser/devtools/shadereditor.xul                          (shadereditor/shadereditor.xul)
     content/browser/devtools/shadereditor.js                           (shadereditor/shadereditor.js)
+    content/browser/devtools/shadereditor/render.js                    (shadereditor/render.js)
     content/browser/devtools/canvasdebugger.xul                        (canvasdebugger/canvasdebugger.xul)
     content/browser/devtools/canvasdebugger.js                         (canvasdebugger/canvasdebugger.js)
     content/browser/devtools/d3.js                                     (shared/d3.js)
     content/browser/devtools/webaudioeditor.xul                        (webaudioeditor/webaudioeditor.xul)
     content/browser/devtools/dagre-d3.js                               (webaudioeditor/lib/dagre-d3.js)
     content/browser/devtools/webaudioeditor/includes.js                (webaudioeditor/includes.js)
     content/browser/devtools/webaudioeditor/models.js                  (webaudioeditor/models.js)
     content/browser/devtools/webaudioeditor/controller.js              (webaudioeditor/controller.js)
diff --git a/browser/devtools/shadereditor/modules/gl-matrix.js b/browser/devtools/shadereditor/modules/gl-matrix.js
new file mode 100644
index 0000000..5f7d811
--- /dev/null
+++ b/browser/devtools/shadereditor/modules/gl-matrix.js
@@ -0,0 +1,4315 @@
+/**
+ * @fileoverview gl-matrix - High performance matrix and vector operations
+ * @author Brandon Jones
+ * @author Colin MacKenzie IV
+ * @version 2.2.2
+ */
+
+/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+  * Redistributions of source code must retain the above copyright notice, this
+    list of conditions and the following disclaimer.
+  * Redistributions in binary form must reproduce the above copyright notice,
+    this list of conditions and the following disclaimer in the documentation
+    and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
+
+
+(function(_global) {
+  "use strict";
+
+  var shim = {};
+  if (typeof(exports) === 'undefined') {
+    if(typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
+      shim.exports = {};
+      define(function() {
+        return shim.exports;
+      });
+    } else {
+      // gl-matrix lives in a browser, define its namespaces in global
+      shim.exports = typeof(window) !== 'undefined' ? window : _global;
+    }
+  }
+  else {
+    // gl-matrix lives in commonjs, define its namespaces in exports
+    shim.exports = exports;
+  }
+
+  (function(exports) {
+    /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+  * Redistributions of source code must retain the above copyright notice, this
+    list of conditions and the following disclaimer.
+  * Redistributions in binary form must reproduce the above copyright notice,
+    this list of conditions and the following disclaimer in the documentation 
+    and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
+
+
+if(!GLMAT_EPSILON) {
+    var GLMAT_EPSILON = 0.000001;
+}
+
+if(!GLMAT_ARRAY_TYPE) {
+    var GLMAT_ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
+}
+
+if(!GLMAT_RANDOM) {
+    var GLMAT_RANDOM = Math.random;
+}
+
+/**
+ * @class Common utilities
+ * @name glMatrix
+ */
+var glMatrix = {};
+
+/**
+ * Sets the type of array used when creating new vectors and matrices
+ *
+ * @param {Type} type Array type, such as Float32Array or Array
+ */
+glMatrix.setMatrixArrayType = function(type) {
+    GLMAT_ARRAY_TYPE = type;
+}
+
+if(typeof(exports) !== 'undefined') {
+    exports.glMatrix = glMatrix;
+}
+
+var degree = Math.PI / 180;
+
+/**
+* Convert Degree To Radian
+*
+* @param {Number} Angle in Degrees
+*/
+glMatrix.toRadian = function(a){
+     return a * degree;
+}
+;
+/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+  * Redistributions of source code must retain the above copyright notice, this
+    list of conditions and the following disclaimer.
+  * Redistributions in binary form must reproduce the above copyright notice,
+    this list of conditions and the following disclaimer in the documentation 
+    and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
+
+/**
+ * @class 2 Dimensional Vector
+ * @name vec2
+ */
+
+var vec2 = {};
+
+/**
+ * Creates a new, empty vec2
+ *
+ * @returns {vec2} a new 2D vector
+ */
+vec2.create = function() {
+    var out = new GLMAT_ARRAY_TYPE(2);
+    out[0] = 0;
+    out[1] = 0;
+    return out;
+};
+
+/**
+ * Creates a new vec2 initialized with values from an existing vector
+ *
+ * @param {vec2} a vector to clone
+ * @returns {vec2} a new 2D vector
+ */
+vec2.clone = function(a) {
+    var out = new GLMAT_ARRAY_TYPE(2);
+    out[0] = a[0];
+    out[1] = a[1];
+    return out;
+};
+
+/**
+ * Creates a new vec2 initialized with the given values
+ *
+ * @param {Number} x X component
+ * @param {Number} y Y component
+ * @returns {vec2} a new 2D vector
+ */
+vec2.fromValues = function(x, y) {
+    var out = new GLMAT_ARRAY_TYPE(2);
+    out[0] = x;
+    out[1] = y;
+    return out;
+};
+
+/**
+ * Copy the values from one vec2 to another
+ *
+ * @param {vec2} out the receiving vector
+ * @param {vec2} a the source vector
+ * @returns {vec2} out
+ */
+vec2.copy = function(out, a) {
+    out[0] = a[0];
+    out[1] = a[1];
+    return out;
+};
+
+/**
+ * Set the components of a vec2 to the given values
+ *
+ * @param {vec2} out the receiving vector
+ * @param {Number} x X component
+ * @param {Number} y Y component
+ * @returns {vec2} out
+ */
+vec2.set = function(out, x, y) {
+    out[0] = x;
+    out[1] = y;
+    return out;
+};
+
+/**
+ * Adds two vec2's
+ *
+ * @param {vec2} out the receiving vector
+ * @param {vec2} a the first operand
+ * @param {vec2} b the second operand
+ * @returns {vec2} out
+ */
+vec2.add = function(out, a, b) {
+    out[0] = a[0] + b[0];
+    out[1] = a[1] + b[1];
+    return out;
+};
+
+/**
+ * Subtracts vector b from vector a
+ *
+ * @param {vec2} out the receiving vector
+ * @param {vec2} a the first operand
+ * @param {vec2} b the second operand
+ * @returns {vec2} out
+ */
+vec2.subtract = function(out, a, b) {
+    out[0] = a[0] - b[0];
+    out[1] = a[1] - b[1];
+    return out;
+};
+
+/**
+ * Alias for {@link vec2.subtract}
+ * @function
+ */
+vec2.sub = vec2.subtract;
+
+/**
+ * Multiplies two vec2's
+ *
+ * @param {vec2} out the receiving vector
+ * @param {vec2} a the first operand
+ * @param {vec2} b the second operand
+ * @returns {vec2} out
+ */
+vec2.multiply = function(out, a, b) {
+    out[0] = a[0] * b[0];
+    out[1] = a[1] * b[1];
+    return out;
+};
+
+/**
+ * Alias for {@link vec2.multiply}
+ * @function
+ */
+vec2.mul = vec2.multiply;
+
+/**
+ * Divides two vec2's
+ *
+ * @param {vec2} out the receiving vector
+ * @param {vec2} a the first operand
+ * @param {vec2} b the second operand
+ * @returns {vec2} out
+ */
+vec2.divide = function(out, a, b) {
+    out[0] = a[0] / b[0];
+    out[1] = a[1] / b[1];
+    return out;
+};
+
+/**
+ * Alias for {@link vec2.divide}
+ * @function
+ */
+vec2.div = vec2.divide;
+
+/**
+ * Returns the minimum of two vec2's
+ *
+ * @param {vec2} out the receiving vector
+ * @param {vec2} a the first operand
+ * @param {vec2} b the second operand
+ * @returns {vec2} out
+ */
+vec2.min = function(out, a, b) {
+    out[0] = Math.min(a[0], b[0]);
+    out[1] = Math.min(a[1], b[1]);
+    return out;
+};
+
+/**
+ * Returns the maximum of two vec2's
+ *
+ * @param {vec2} out the receiving vector
+ * @param {vec2} a the first operand
+ * @param {vec2} b the second operand
+ * @returns {vec2} out
+ */
+vec2.max = function(out, a, b) {
+    out[0] = Math.max(a[0], b[0]);
+    out[1] = Math.max(a[1], b[1]);
+    return out;
+};
+
+/**
+ * Scales a vec2 by a scalar number
+ *
+ * @param {vec2} out the receiving vector
+ * @param {vec2} a the vector to scale
+ * @param {Number} b amount to scale the vector by
+ * @returns {vec2} out
+ */
+vec2.scale = function(out, a, b) {
+    out[0] = a[0] * b;
+    out[1] = a[1] * b;
+    return out;
+};
+
+/**
+ * Adds two vec2's after scaling the second operand by a scalar value
+ *
+ * @param {vec2} out the receiving vector
+ * @param {vec2} a the first operand
+ * @param {vec2} b the second operand
+ * @param {Number} scale the amount to scale b by before adding
+ * @returns {vec2} out
+ */
+vec2.scaleAndAdd = function(out, a, b, scale) {
+    out[0] = a[0] + (b[0] * scale);
+    out[1] = a[1] + (b[1] * scale);
+    return out;
+};
+
+/**
+ * Calculates the euclidian distance between two vec2's
+ *
+ * @param {vec2} a the first operand
+ * @param {vec2} b the second operand
+ * @returns {Number} distance between a and b
+ */
+vec2.distance = function(a, b) {
+    var x = b[0] - a[0],
+        y = b[1] - a[1];
+    return Math.sqrt(x*x + y*y);
+};
+
+/**
+ * Alias for {@link vec2.distance}
+ * @function
+ */
+vec2.dist = vec2.distance;
+
+/**
+ * Calculates the squared euclidian distance between two vec2's
+ *
+ * @param {vec2} a the first operand
+ * @param {vec2} b the second operand
+ * @returns {Number} squared distance between a and b
+ */
+vec2.squaredDistance = function(a, b) {
+    var x = b[0] - a[0],
+        y = b[1] - a[1];
+    return x*x + y*y;
+};
+
+/**
+ * Alias for {@link vec2.squaredDistance}
+ * @function
+ */
+vec2.sqrDist = vec2.squaredDistance;
+
+/**
+ * Calculates the length of a vec2
+ *
+ * @param {vec2} a vector to calculate length of
+ * @returns {Number} length of a
+ */
+vec2.length = function (a) {
+    var x = a[0],
+        y = a[1];
+    return Math.sqrt(x*x + y*y);
+};
+
+/**
+ * Alias for {@link vec2.length}
+ * @function
+ */
+vec2.len = vec2.length;
+
+/**
+ * Calculates the squared length of a vec2
+ *
+ * @param {vec2} a vector to calculate squared length of
+ * @returns {Number} squared length of a
+ */
+vec2.squaredLength = function (a) {
+    var x = a[0],
+        y = a[1];
+    return x*x + y*y;
+};
+
+/**
+ * Alias for {@link vec2.squaredLength}
+ * @function
+ */
+vec2.sqrLen = vec2.squaredLength;
+
+/**
+ * Negates the components of a vec2
+ *
+ * @param {vec2} out the receiving vector
+ * @param {vec2} a vector to negate
+ * @returns {vec2} out
+ */
+vec2.negate = function(out, a) {
+    out[0] = -a[0];
+    out[1] = -a[1];
+    return out;
+};
+
+/**
+ * Returns the inverse of the components of a vec2
+ *
+ * @param {vec2} out the receiving vector
+ * @param {vec2} a vector to invert
+ * @returns {vec2} out
+ */
+vec2.inverse = function(out, a) {
+  out[0] = 1.0 / a[0];
+  out[1] = 1.0 / a[1];
+  return out;
+};
+
+/**
+ * Normalize a vec2
+ *
+ * @param {vec2} out the receiving vector
+ * @param {vec2} a vector to normalize
+ * @returns {vec2} out
+ */
+vec2.normalize = function(out, a) {
+    var x = a[0],
+        y = a[1];
+    var len = x*x + y*y;
+    if (len > 0) {
+        //TODO: evaluate use of glm_invsqrt here?
+        len = 1 / Math.sqrt(len);
+        out[0] = a[0] * len;
+        out[1] = a[1] * len;
+    }
+    return out;
+};
+
+/**
+ * Calculates the dot product of two vec2's
+ *
+ * @param {vec2} a the first operand
+ * @param {vec2} b the second operand
+ * @returns {Number} dot product of a and b
+ */
+vec2.dot = function (a, b) {
+    return a[0] * b[0] + a[1] * b[1];
+};
+
+/**
+ * Computes the cross product of two vec2's
+ * Note that the cross product must by definition produce a 3D vector
+ *
+ * @param {vec3} out the receiving vector
+ * @param {vec2} a the first operand
+ * @param {vec2} b the second operand
+ * @returns {vec3} out
+ */
+vec2.cross = function(out, a, b) {
+    var z = a[0] * b[1] - a[1] * b[0];
+    out[0] = out[1] = 0;
+    out[2] = z;
+    return out;
+};
+
+/**
+ * Performs a linear interpolation between two vec2's
+ *
+ * @param {vec2} out the receiving vector
+ * @param {vec2} a the first operand
+ * @param {vec2} b the second operand
+ * @param {Number} t interpolation amount between the two inputs
+ * @returns {vec2} out
+ */
+vec2.lerp = function (out, a, b, t) {
+    var ax = a[0],
+        ay = a[1];
+    out[0] = ax + t * (b[0] - ax);
+    out[1] = ay + t * (b[1] - ay);
+    return out;
+};
+
+/**
+ * Generates a random vector with the given scale
+ *
+ * @param {vec2} out the receiving vector
+ * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
+ * @returns {vec2} out
+ */
+vec2.random = function (out, scale) {
+    scale = scale || 1.0;
+    var r = GLMAT_RANDOM() * 2.0 * Math.PI;
+    out[0] = Math.cos(r) * scale;
+    out[1] = Math.sin(r) * scale;
+    return out;
+};
+
+/**
+ * Transforms the vec2 with a mat2
+ *
+ * @param {vec2} out the receiving vector
+ * @param {vec2} a the vector to transform
+ * @param {mat2} m matrix to transform with
+ * @returns {vec2} out
+ */
+vec2.transformMat2 = function(out, a, m) {
+    var x = a[0],
+        y = a[1];
+    out[0] = m[0] * x + m[2] * y;
+    out[1] = m[1] * x + m[3] * y;
+    return out;
+};
+
+/**
+ * Transforms the vec2 with a mat2d
+ *
+ * @param {vec2} out the receiving vector
+ * @param {vec2} a the vector to transform
+ * @param {mat2d} m matrix to transform with
+ * @returns {vec2} out
+ */
+vec2.transformMat2d = function(out, a, m) {
+    var x = a[0],
+        y = a[1];
+    out[0] = m[0] * x + m[2] * y + m[4];
+    out[1] = m[1] * x + m[3] * y + m[5];
+    return out;
+};
+
+/**
+ * Transforms the vec2 with a mat3
+ * 3rd vector component is implicitly '1'
+ *
+ * @param {vec2} out the receiving vector
+ * @param {vec2} a the vector to transform
+ * @param {mat3} m matrix to transform with
+ * @returns {vec2} out
+ */
+vec2.transformMat3 = function(out, a, m) {
+    var x = a[0],
+        y = a[1];
+    out[0] = m[0] * x + m[3] * y + m[6];
+    out[1] = m[1] * x + m[4] * y + m[7];
+    return out;
+};
+
+/**
+ * Transforms the vec2 with a mat4
+ * 3rd vector component is implicitly '0'
+ * 4th vector component is implicitly '1'
+ *
+ * @param {vec2} out the receiving vector
+ * @param {vec2} a the vector to transform
+ * @param {mat4} m matrix to transform with
+ * @returns {vec2} out
+ */
+vec2.transformMat4 = function(out, a, m) {
+    var x = a[0], 
+        y = a[1];
+    out[0] = m[0] * x + m[4] * y + m[12];
+    out[1] = m[1] * x + m[5] * y + m[13];
+    return out;
+};
+
+/**
+ * Perform some operation over an array of vec2s.
+ *
+ * @param {Array} a the array of vectors to iterate over
+ * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
+ * @param {Number} offset Number of elements to skip at the beginning of the array
+ * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
+ * @param {Function} fn Function to call for each vector in the array
+ * @param {Object} [arg] additional argument to pass to fn
+ * @returns {Array} a
+ * @function
+ */
+vec2.forEach = (function() {
+    var vec = vec2.create();
+
+    return function(a, stride, offset, count, fn, arg) {
+        var i, l;
+        if(!stride) {
+            stride = 2;
+        }
+
+        if(!offset) {
+            offset = 0;
+        }
+        
+        if(count) {
+            l = Math.min((count * stride) + offset, a.length);
+        } else {
+            l = a.length;
+        }
+
+        for(i = offset; i < l; i += stride) {
+            vec[0] = a[i]; vec[1] = a[i+1];
+            fn(vec, vec, arg);
+            a[i] = vec[0]; a[i+1] = vec[1];
+        }
+        
+        return a;
+    };
+})();
+
+/**
+ * Returns a string representation of a vector
+ *
+ * @param {vec2} vec vector to represent as a string
+ * @returns {String} string representation of the vector
+ */
+vec2.str = function (a) {
+    return 'vec2(' + a[0] + ', ' + a[1] + ')';
+};
+
+if(typeof(exports) !== 'undefined') {
+    exports.vec2 = vec2;
+}
+;
+/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+  * Redistributions of source code must retain the above copyright notice, this
+    list of conditions and the following disclaimer.
+  * Redistributions in binary form must reproduce the above copyright notice,
+    this list of conditions and the following disclaimer in the documentation 
+    and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
+
+/**
+ * @class 3 Dimensional Vector
+ * @name vec3
+ */
+
+var vec3 = {};
+
+/**
+ * Creates a new, empty vec3
+ *
+ * @returns {vec3} a new 3D vector
+ */
+vec3.create = function() {
+    var out = new GLMAT_ARRAY_TYPE(3);
+    out[0] = 0;
+    out[1] = 0;
+    out[2] = 0;
+    return out;
+};
+
+/**
+ * Creates a new vec3 initialized with values from an existing vector
+ *
+ * @param {vec3} a vector to clone
+ * @returns {vec3} a new 3D vector
+ */
+vec3.clone = function(a) {
+    var out = new GLMAT_ARRAY_TYPE(3);
+    out[0] = a[0];
+    out[1] = a[1];
+    out[2] = a[2];
+    return out;
+};
+
+/**
+ * Creates a new vec3 initialized with the given values
+ *
+ * @param {Number} x X component
+ * @param {Number} y Y component
+ * @param {Number} z Z component
+ * @returns {vec3} a new 3D vector
+ */
+vec3.fromValues = function(x, y, z) {
+    var out = new GLMAT_ARRAY_TYPE(3);
+    out[0] = x;
+    out[1] = y;
+    out[2] = z;
+    return out;
+};
+
+/**
+ * Copy the values from one vec3 to another
+ *
+ * @param {vec3} out the receiving vector
+ * @param {vec3} a the source vector
+ * @returns {vec3} out
+ */
+vec3.copy = function(out, a) {
+    out[0] = a[0];
+    out[1] = a[1];
+    out[2] = a[2];
+    return out;
+};
+
+/**
+ * Set the components of a vec3 to the given values
+ *
+ * @param {vec3} out the receiving vector
+ * @param {Number} x X component
+ * @param {Number} y Y component
+ * @param {Number} z Z component
+ * @returns {vec3} out
+ */
+vec3.set = function(out, x, y, z) {
+    out[0] = x;
+    out[1] = y;
+    out[2] = z;
+    return out;
+};
+
+/**
+ * Adds two vec3's
+ *
+ * @param {vec3} out the receiving vector
+ * @param {vec3} a the first operand
+ * @param {vec3} b the second operand
+ * @returns {vec3} out
+ */
+vec3.add = function(out, a, b) {
+    out[0] = a[0] + b[0];
+    out[1] = a[1] + b[1];
+    out[2] = a[2] + b[2];
+    return out;
+};
+
+/**
+ * Subtracts vector b from vector a
+ *
+ * @param {vec3} out the receiving vector
+ * @param {vec3} a the first operand
+ * @param {vec3} b the second operand
+ * @returns {vec3} out
+ */
+vec3.subtract = function(out, a, b) {
+    out[0] = a[0] - b[0];
+    out[1] = a[1] - b[1];
+    out[2] = a[2] - b[2];
+    return out;
+};
+
+/**
+ * Alias for {@link vec3.subtract}
+ * @function
+ */
+vec3.sub = vec3.subtract;
+
+/**
+ * Multiplies two vec3's
+ *
+ * @param {vec3} out the receiving vector
+ * @param {vec3} a the first operand
+ * @param {vec3} b the second operand
+ * @returns {vec3} out
+ */
+vec3.multiply = function(out, a, b) {
+    out[0] = a[0] * b[0];
+    out[1] = a[1] * b[1];
+    out[2] = a[2] * b[2];
+    return out;
+};
+
+/**
+ * Alias for {@link vec3.multiply}
+ * @function
+ */
+vec3.mul = vec3.multiply;
+
+/**
+ * Divides two vec3's
+ *
+ * @param {vec3} out the receiving vector
+ * @param {vec3} a the first operand
+ * @param {vec3} b the second operand
+ * @returns {vec3} out
+ */
+vec3.divide = function(out, a, b) {
+    out[0] = a[0] / b[0];
+    out[1] = a[1] / b[1];
+    out[2] = a[2] / b[2];
+    return out;
+};
+
+/**
+ * Alias for {@link vec3.divide}
+ * @function
+ */
+vec3.div = vec3.divide;
+
+/**
+ * Returns the minimum of two vec3's
+ *
+ * @param {vec3} out the receiving vector
+ * @param {vec3} a the first operand
+ * @param {vec3} b the second operand
+ * @returns {vec3} out
+ */
+vec3.min = function(out, a, b) {
+    out[0] = Math.min(a[0], b[0]);
+    out[1] = Math.min(a[1], b[1]);
+    out[2] = Math.min(a[2], b[2]);
+    return out;
+};
+
+/**
+ * Returns the maximum of two vec3's
+ *
+ * @param {vec3} out the receiving vector
+ * @param {vec3} a the first operand
+ * @param {vec3} b the second operand
+ * @returns {vec3} out
+ */
+vec3.max = function(out, a, b) {
+    out[0] = Math.max(a[0], b[0]);
+    out[1] = Math.max(a[1], b[1]);
+    out[2] = Math.max(a[2], b[2]);
+    return out;
+};
+
+/**
+ * Scales a vec3 by a scalar number
+ *
+ * @param {vec3} out the receiving vector
+ * @param {vec3} a the vector to scale
+ * @param {Number} b amount to scale the vector by
+ * @returns {vec3} out
+ */
+vec3.scale = function(out, a, b) {
+    out[0] = a[0] * b;
+    out[1] = a[1] * b;
+    out[2] = a[2] * b;
+    return out;
+};
+
+/**
+ * Adds two vec3's after scaling the second operand by a scalar value
+ *
+ * @param {vec3} out the receiving vector
+ * @param {vec3} a the first operand
+ * @param {vec3} b the second operand
+ * @param {Number} scale the amount to scale b by before adding
+ * @returns {vec3} out
+ */
+vec3.scaleAndAdd = function(out, a, b, scale) {
+    out[0] = a[0] + (b[0] * scale);
+    out[1] = a[1] + (b[1] * scale);
+    out[2] = a[2] + (b[2] * scale);
+    return out;
+};
+
+/**
+ * Calculates the euclidian distance between two vec3's
+ *
+ * @param {vec3} a the first operand
+ * @param {vec3} b the second operand
+ * @returns {Number} distance between a and b
+ */
+vec3.distance = function(a, b) {
+    var x = b[0] - a[0],
+        y = b[1] - a[1],
+        z = b[2] - a[2];
+    return Math.sqrt(x*x + y*y + z*z);
+};
+
+/**
+ * Alias for {@link vec3.distance}
+ * @function
+ */
+vec3.dist = vec3.distance;
+
+/**
+ * Calculates the squared euclidian distance between two vec3's
+ *
+ * @param {vec3} a the first operand
+ * @param {vec3} b the second operand
+ * @returns {Number} squared distance between a and b
+ */
+vec3.squaredDistance = function(a, b) {
+    var x = b[0] - a[0],
+        y = b[1] - a[1],
+        z = b[2] - a[2];
+    return x*x + y*y + z*z;
+};
+
+/**
+ * Alias for {@link vec3.squaredDistance}
+ * @function
+ */
+vec3.sqrDist = vec3.squaredDistance;
+
+/**
+ * Calculates the length of a vec3
+ *
+ * @param {vec3} a vector to calculate length of
+ * @returns {Number} length of a
+ */
+vec3.length = function (a) {
+    var x = a[0],
+        y = a[1],
+        z = a[2];
+    return Math.sqrt(x*x + y*y + z*z);
+};
+
+/**
+ * Alias for {@link vec3.length}
+ * @function
+ */
+vec3.len = vec3.length;
+
+/**
+ * Calculates the squared length of a vec3
+ *
+ * @param {vec3} a vector to calculate squared length of
+ * @returns {Number} squared length of a
+ */
+vec3.squaredLength = function (a) {
+    var x = a[0],
+        y = a[1],
+        z = a[2];
+    return x*x + y*y + z*z;
+};
+
+/**
+ * Alias for {@link vec3.squaredLength}
+ * @function
+ */
+vec3.sqrLen = vec3.squaredLength;
+
+/**
+ * Negates the components of a vec3
+ *
+ * @param {vec3} out the receiving vector
+ * @param {vec3} a vector to negate
+ * @returns {vec3} out
+ */
+vec3.negate = function(out, a) {
+    out[0] = -a[0];
+    out[1] = -a[1];
+    out[2] = -a[2];
+    return out;
+};
+
+/**
+ * Returns the inverse of the components of a vec3
+ *
+ * @param {vec3} out the receiving vector
+ * @param {vec3} a vector to invert
+ * @returns {vec3} out
+ */
+vec3.inverse = function(out, a) {
+  out[0] = 1.0 / a[0];
+  out[1] = 1.0 / a[1];
+  out[2] = 1.0 / a[2];
+  return out;
+};
+
+/**
+ * Normalize a vec3
+ *
+ * @param {vec3} out the receiving vector
+ * @param {vec3} a vector to normalize
+ * @returns {vec3} out
+ */
+vec3.normalize = function(out, a) {
+    var x = a[0],
+        y = a[1],
+        z = a[2];
+    var len = x*x + y*y + z*z;
+    if (len > 0) {
+        //TODO: evaluate use of glm_invsqrt here?
+        len = 1 / Math.sqrt(len);
+        out[0] = a[0] * len;
+        out[1] = a[1] * len;
+        out[2] = a[2] * len;
+    }
+    return out;
+};
+
+/**
+ * Calculates the dot product of two vec3's
+ *
+ * @param {vec3} a the first operand
+ * @param {vec3} b the second operand
+ * @returns {Number} dot product of a and b
+ */
+vec3.dot = function (a, b) {
+    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
+};
+
+/**
+ * Computes the cross product of two vec3's
+ *
+ * @param {vec3} out the receiving vector
+ * @param {vec3} a the first operand
+ * @param {vec3} b the second operand
+ * @returns {vec3} out
+ */
+vec3.cross = function(out, a, b) {
+    var ax = a[0], ay = a[1], az = a[2],
+        bx = b[0], by = b[1], bz = b[2];
+
+    out[0] = ay * bz - az * by;
+    out[1] = az * bx - ax * bz;
+    out[2] = ax * by - ay * bx;
+    return out;
+};
+
+/**
+ * Performs a linear interpolation between two vec3's
+ *
+ * @param {vec3} out the receiving vector
+ * @param {vec3} a the first operand
+ * @param {vec3} b the second operand
+ * @param {Number} t interpolation amount between the two inputs
+ * @returns {vec3} out
+ */
+vec3.lerp = function (out, a, b, t) {
+    var ax = a[0],
+        ay = a[1],
+        az = a[2];
+    out[0] = ax + t * (b[0] - ax);
+    out[1] = ay + t * (b[1] - ay);
+    out[2] = az + t * (b[2] - az);
+    return out;
+};
+
+/**
+ * Generates a random vector with the given scale
+ *
+ * @param {vec3} out the receiving vector
+ * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
+ * @returns {vec3} out
+ */
+vec3.random = function (out, scale) {
+    scale = scale || 1.0;
+
+    var r = GLMAT_RANDOM() * 2.0 * Math.PI;
+    var z = (GLMAT_RANDOM() * 2.0) - 1.0;
+    var zScale = Math.sqrt(1.0-z*z) * scale;
+
+    out[0] = Math.cos(r) * zScale;
+    out[1] = Math.sin(r) * zScale;
+    out[2] = z * scale;
+    return out;
+};
+
+/**
+ * Transforms the vec3 with a mat4.
+ * 4th vector component is implicitly '1'
+ *
+ * @param {vec3} out the receiving vector
+ * @param {vec3} a the vector to transform
+ * @param {mat4} m matrix to transform with
+ * @returns {vec3} out
+ */
+vec3.transformMat4 = function(out, a, m) {
+    var x = a[0], y = a[1], z = a[2],
+        w = m[3] * x + m[7] * y + m[11] * z + m[15];
+    w = w || 1.0;
+    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
+    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
+    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
+    return out;
+};
+
+/**
+ * Transforms the vec3 with a mat3.
+ *
+ * @param {vec3} out the receiving vector
+ * @param {vec3} a the vector to transform
+ * @param {mat4} m the 3x3 matrix to transform with
+ * @returns {vec3} out
+ */
+vec3.transformMat3 = function(out, a, m) {
+    var x = a[0], y = a[1], z = a[2];
+    out[0] = x * m[0] + y * m[3] + z * m[6];
+    out[1] = x * m[1] + y * m[4] + z * m[7];
+    out[2] = x * m[2] + y * m[5] + z * m[8];
+    return out;
+};
+
+/**
+ * Transforms the vec3 with a quat
+ *
+ * @param {vec3} out the receiving vector
+ * @param {vec3} a the vector to transform
+ * @param {quat} q quaternion to transform with
+ * @returns {vec3} out
+ */
+vec3.transformQuat = function(out, a, q) {
+    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations
+
+    var x = a[0], y = a[1], z = a[2],
+        qx = q[0], qy = q[1], qz = q[2], qw = q[3],
+
+        // calculate quat * vec
+        ix = qw * x + qy * z - qz * y,
+        iy = qw * y + qz * x - qx * z,
+        iz = qw * z + qx * y - qy * x,
+        iw = -qx * x - qy * y - qz * z;
+
+    // calculate result * inverse quat
+    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
+    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
+    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
+    return out;
+};
+
+/**
+ * Rotate a 3D vector around the x-axis
+ * @param {vec3} out The receiving vec3
+ * @param {vec3} a The vec3 point to rotate
+ * @param {vec3} b The origin of the rotation
+ * @param {Number} c The angle of rotation
+ * @returns {vec3} out
+ */
+vec3.rotateX = function(out, a, b, c){
+   var p = [], r=[];
+	  //Translate point to the origin
+	  p[0] = a[0] - b[0];
+	  p[1] = a[1] - b[1];
+  	p[2] = a[2] - b[2];
+
+	  //perform rotation
+	  r[0] = p[0];
+	  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);
+	  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);
+
+	  //translate to correct position
+	  out[0] = r[0] + b[0];
+	  out[1] = r[1] + b[1];
+	  out[2] = r[2] + b[2];
+
+  	return out;
+};
+
+/**
+ * Rotate a 3D vector around the y-axis
+ * @param {vec3} out The receiving vec3
+ * @param {vec3} a The vec3 point to rotate
+ * @param {vec3} b The origin of the rotation
+ * @param {Number} c The angle of rotation
+ * @returns {vec3} out
+ */
+vec3.rotateY = function(out, a, b, c){
+  	var p = [], r=[];
+  	//Translate point to the origin
+  	p[0] = a[0] - b[0];
+  	p[1] = a[1] - b[1];
+  	p[2] = a[2] - b[2];
+  
+  	//perform rotation
+  	r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);
+  	r[1] = p[1];
+  	r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);
+  
+  	//translate to correct position
+  	out[0] = r[0] + b[0];
+  	out[1] = r[1] + b[1];
+  	out[2] = r[2] + b[2];
+  
+  	return out;
+};
+
+/**
+ * Rotate a 3D vector around the z-axis
+ * @param {vec3} out The receiving vec3
+ * @param {vec3} a The vec3 point to rotate
+ * @param {vec3} b The origin of the rotation
+ * @param {Number} c The angle of rotation
+ * @returns {vec3} out
+ */
+vec3.rotateZ = function(out, a, b, c){
+  	var p = [], r=[];
+  	//Translate point to the origin
+  	p[0] = a[0] - b[0];
+  	p[1] = a[1] - b[1];
+  	p[2] = a[2] - b[2];
+  
+  	//perform rotation
+  	r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);
+  	r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);
+  	r[2] = p[2];
+  
+  	//translate to correct position
+  	out[0] = r[0] + b[0];
+  	out[1] = r[1] + b[1];
+  	out[2] = r[2] + b[2];
+  
+  	return out;
+};
+
+/**
+ * Perform some operation over an array of vec3s.
+ *
+ * @param {Array} a the array of vectors to iterate over
+ * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
+ * @param {Number} offset Number of elements to skip at the beginning of the array
+ * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
+ * @param {Function} fn Function to call for each vector in the array
+ * @param {Object} [arg] additional argument to pass to fn
+ * @returns {Array} a
+ * @function
+ */
+vec3.forEach = (function() {
+    var vec = vec3.create();
+
+    return function(a, stride, offset, count, fn, arg) {
+        var i, l;
+        if(!stride) {
+            stride = 3;
+        }
+
+        if(!offset) {
+            offset = 0;
+        }
+        
+        if(count) {
+            l = Math.min((count * stride) + offset, a.length);
+        } else {
+            l = a.length;
+        }
+
+        for(i = offset; i < l; i += stride) {
+            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
+            fn(vec, vec, arg);
+            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
+        }
+        
+        return a;
+    };
+})();
+
+/**
+ * Get the angle between two 3D vectors
+ * @param {vec3} a The first operand
+ * @param {vec3} b The second operand
+ * @returns {Number} The angle in radians
+ */
+vec3.angle = function(a, b) {
+   
+    var tempA = vec3.fromValues(a[0], a[1], a[2]);
+    var tempB = vec3.fromValues(b[0], b[1], b[2]);
+ 
+    vec3.normalize(tempA, tempA);
+    vec3.normalize(tempB, tempB);
+ 
+    var cosine = vec3.dot(tempA, tempB);
+
+    if(cosine > 1.0){
+        return 0;
+    } else {
+        return Math.acos(cosine);
+    }     
+};
+
+/**
+ * Returns a string representation of a vector
+ *
+ * @param {vec3} vec vector to represent as a string
+ * @returns {String} string representation of the vector
+ */
+vec3.str = function (a) {
+    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
+};
+
+if(typeof(exports) !== 'undefined') {
+    exports.vec3 = vec3;
+}
+;
+/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+  * Redistributions of source code must retain the above copyright notice, this
+    list of conditions and the following disclaimer.
+  * Redistributions in binary form must reproduce the above copyright notice,
+    this list of conditions and the following disclaimer in the documentation 
+    and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
+
+/**
+ * @class 4 Dimensional Vector
+ * @name vec4
+ */
+
+var vec4 = {};
+
+/**
+ * Creates a new, empty vec4
+ *
+ * @returns {vec4} a new 4D vector
+ */
+vec4.create = function() {
+    var out = new GLMAT_ARRAY_TYPE(4);
+    out[0] = 0;
+    out[1] = 0;
+    out[2] = 0;
+    out[3] = 0;
+    return out;
+};
+
+/**
+ * Creates a new vec4 initialized with values from an existing vector
+ *
+ * @param {vec4} a vector to clone
+ * @returns {vec4} a new 4D vector
+ */
+vec4.clone = function(a) {
+    var out = new GLMAT_ARRAY_TYPE(4);
+    out[0] = a[0];
+    out[1] = a[1];
+    out[2] = a[2];
+    out[3] = a[3];
+    return out;
+};
+
+/**
+ * Creates a new vec4 initialized with the given values
+ *
+ * @param {Number} x X component
+ * @param {Number} y Y component
+ * @param {Number} z Z component
+ * @param {Number} w W component
+ * @returns {vec4} a new 4D vector
+ */
+vec4.fromValues = function(x, y, z, w) {
+    var out = new GLMAT_ARRAY_TYPE(4);
+    out[0] = x;
+    out[1] = y;
+    out[2] = z;
+    out[3] = w;
+    return out;
+};
+
+/**
+ * Copy the values from one vec4 to another
+ *
+ * @param {vec4} out the receiving vector
+ * @param {vec4} a the source vector
+ * @returns {vec4} out
+ */
+vec4.copy = function(out, a) {
+    out[0] = a[0];
+    out[1] = a[1];
+    out[2] = a[2];
+    out[3] = a[3];
+    return out;
+};
+
+/**
+ * Set the components of a vec4 to the given values
+ *
+ * @param {vec4} out the receiving vector
+ * @param {Number} x X component
+ * @param {Number} y Y component
+ * @param {Number} z Z component
+ * @param {Number} w W component
+ * @returns {vec4} out
+ */
+vec4.set = function(out, x, y, z, w) {
+    out[0] = x;
+    out[1] = y;
+    out[2] = z;
+    out[3] = w;
+    return out;
+};
+
+/**
+ * Adds two vec4's
+ *
+ * @param {vec4} out the receiving vector
+ * @param {vec4} a the first operand
+ * @param {vec4} b the second operand
+ * @returns {vec4} out
+ */
+vec4.add = function(out, a, b) {
+    out[0] = a[0] + b[0];
+    out[1] = a[1] + b[1];
+    out[2] = a[2] + b[2];
+    out[3] = a[3] + b[3];
+    return out;
+};
+
+/**
+ * Subtracts vector b from vector a
+ *
+ * @param {vec4} out the receiving vector
+ * @param {vec4} a the first operand
+ * @param {vec4} b the second operand
+ * @returns {vec4} out
+ */
+vec4.subtract = function(out, a, b) {
+    out[0] = a[0] - b[0];
+    out[1] = a[1] - b[1];
+    out[2] = a[2] - b[2];
+    out[3] = a[3] - b[3];
+    return out;
+};
+
+/**
+ * Alias for {@link vec4.subtract}
+ * @function
+ */
+vec4.sub = vec4.subtract;
+
+/**
+ * Multiplies two vec4's
+ *
+ * @param {vec4} out the receiving vector
+ * @param {vec4} a the first operand
+ * @param {vec4} b the second operand
+ * @returns {vec4} out
+ */
+vec4.multiply = function(out, a, b) {
+    out[0] = a[0] * b[0];
+    out[1] = a[1] * b[1];
+    out[2] = a[2] * b[2];
+    out[3] = a[3] * b[3];
+    return out;
+};
+
+/**
+ * Alias for {@link vec4.multiply}
+ * @function
+ */
+vec4.mul = vec4.multiply;
+
+/**
+ * Divides two vec4's
+ *
+ * @param {vec4} out the receiving vector
+ * @param {vec4} a the first operand
+ * @param {vec4} b the second operand
+ * @returns {vec4} out
+ */
+vec4.divide = function(out, a, b) {
+    out[0] = a[0] / b[0];
+    out[1] = a[1] / b[1];
+    out[2] = a[2] / b[2];
+    out[3] = a[3] / b[3];
+    return out;
+};
+
+/**
+ * Alias for {@link vec4.divide}
+ * @function
+ */
+vec4.div = vec4.divide;
+
+/**
+ * Returns the minimum of two vec4's
+ *
+ * @param {vec4} out the receiving vector
+ * @param {vec4} a the first operand
+ * @param {vec4} b the second operand
+ * @returns {vec4} out
+ */
+vec4.min = function(out, a, b) {
+    out[0] = Math.min(a[0], b[0]);
+    out[1] = Math.min(a[1], b[1]);
+    out[2] = Math.min(a[2], b[2]);
+    out[3] = Math.min(a[3], b[3]);
+    return out;
+};
+
+/**
+ * Returns the maximum of two vec4's
+ *
+ * @param {vec4} out the receiving vector
+ * @param {vec4} a the first operand
+ * @param {vec4} b the second operand
+ * @returns {vec4} out
+ */
+vec4.max = function(out, a, b) {
+    out[0] = Math.max(a[0], b[0]);
+    out[1] = Math.max(a[1], b[1]);
+    out[2] = Math.max(a[2], b[2]);
+    out[3] = Math.max(a[3], b[3]);
+    return out;
+};
+
+/**
+ * Scales a vec4 by a scalar number
+ *
+ * @param {vec4} out the receiving vector
+ * @param {vec4} a the vector to scale
+ * @param {Number} b amount to scale the vector by
+ * @returns {vec4} out
+ */
+vec4.scale = function(out, a, b) {
+    out[0] = a[0] * b;
+    out[1] = a[1] * b;
+    out[2] = a[2] * b;
+    out[3] = a[3] * b;
+    return out;
+};
+
+/**
+ * Adds two vec4's after scaling the second operand by a scalar value
+ *
+ * @param {vec4} out the receiving vector
+ * @param {vec4} a the first operand
+ * @param {vec4} b the second operand
+ * @param {Number} scale the amount to scale b by before adding
+ * @returns {vec4} out
+ */
+vec4.scaleAndAdd = function(out, a, b, scale) {
+    out[0] = a[0] + (b[0] * scale);
+    out[1] = a[1] + (b[1] * scale);
+    out[2] = a[2] + (b[2] * scale);
+    out[3] = a[3] + (b[3] * scale);
+    return out;
+};
+
+/**
+ * Calculates the euclidian distance between two vec4's
+ *
+ * @param {vec4} a the first operand
+ * @param {vec4} b the second operand
+ * @returns {Number} distance between a and b
+ */
+vec4.distance = function(a, b) {
+    var x = b[0] - a[0],
+        y = b[1] - a[1],
+        z = b[2] - a[2],
+        w = b[3] - a[3];
+    return Math.sqrt(x*x + y*y + z*z + w*w);
+};
+
+/**
+ * Alias for {@link vec4.distance}
+ * @function
+ */
+vec4.dist = vec4.distance;
+
+/**
+ * Calculates the squared euclidian distance between two vec4's
+ *
+ * @param {vec4} a the first operand
+ * @param {vec4} b the second operand
+ * @returns {Number} squared distance between a and b
+ */
+vec4.squaredDistance = function(a, b) {
+    var x = b[0] - a[0],
+        y = b[1] - a[1],
+        z = b[2] - a[2],
+        w = b[3] - a[3];
+    return x*x + y*y + z*z + w*w;
+};
+
+/**
+ * Alias for {@link vec4.squaredDistance}
+ * @function
+ */
+vec4.sqrDist = vec4.squaredDistance;
+
+/**
+ * Calculates the length of a vec4
+ *
+ * @param {vec4} a vector to calculate length of
+ * @returns {Number} length of a
+ */
+vec4.length = function (a) {
+    var x = a[0],
+        y = a[1],
+        z = a[2],
+        w = a[3];
+    return Math.sqrt(x*x + y*y + z*z + w*w);
+};
+
+/**
+ * Alias for {@link vec4.length}
+ * @function
+ */
+vec4.len = vec4.length;
+
+/**
+ * Calculates the squared length of a vec4
+ *
+ * @param {vec4} a vector to calculate squared length of
+ * @returns {Number} squared length of a
+ */
+vec4.squaredLength = function (a) {
+    var x = a[0],
+        y = a[1],
+        z = a[2],
+        w = a[3];
+    return x*x + y*y + z*z + w*w;
+};
+
+/**
+ * Alias for {@link vec4.squaredLength}
+ * @function
+ */
+vec4.sqrLen = vec4.squaredLength;
+
+/**
+ * Negates the components of a vec4
+ *
+ * @param {vec4} out the receiving vector
+ * @param {vec4} a vector to negate
+ * @returns {vec4} out
+ */
+vec4.negate = function(out, a) {
+    out[0] = -a[0];
+    out[1] = -a[1];
+    out[2] = -a[2];
+    out[3] = -a[3];
+    return out;
+};
+
+/**
+ * Returns the inverse of the components of a vec4
+ *
+ * @param {vec4} out the receiving vector
+ * @param {vec4} a vector to invert
+ * @returns {vec4} out
+ */
+vec4.inverse = function(out, a) {
+  out[0] = 1.0 / a[0];
+  out[1] = 1.0 / a[1];
+  out[2] = 1.0 / a[2];
+  out[3] = 1.0 / a[3];
+  return out;
+};
+
+/**
+ * Normalize a vec4
+ *
+ * @param {vec4} out the receiving vector
+ * @param {vec4} a vector to normalize
+ * @returns {vec4} out
+ */
+vec4.normalize = function(out, a) {
+    var x = a[0],
+        y = a[1],
+        z = a[2],
+        w = a[3];
+    var len = x*x + y*y + z*z + w*w;
+    if (len > 0) {
+        len = 1 / Math.sqrt(len);
+        out[0] = a[0] * len;
+        out[1] = a[1] * len;
+        out[2] = a[2] * len;
+        out[3] = a[3] * len;
+    }
+    return out;
+};
+
+/**
+ * Calculates the dot product of two vec4's
+ *
+ * @param {vec4} a the first operand
+ * @param {vec4} b the second operand
+ * @returns {Number} dot product of a and b
+ */
+vec4.dot = function (a, b) {
+    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
+};
+
+/**
+ * Performs a linear interpolation between two vec4's
+ *
+ * @param {vec4} out the receiving vector
+ * @param {vec4} a the first operand
+ * @param {vec4} b the second operand
+ * @param {Number} t interpolation amount between the two inputs
+ * @returns {vec4} out
+ */
+vec4.lerp = function (out, a, b, t) {
+    var ax = a[0],
+        ay = a[1],
+        az = a[2],
+        aw = a[3];
+    out[0] = ax + t * (b[0] - ax);
+    out[1] = ay + t * (b[1] - ay);
+    out[2] = az + t * (b[2] - az);
+    out[3] = aw + t * (b[3] - aw);
+    return out;
+};
+
+/**
+ * Generates a random vector with the given scale
+ *
+ * @param {vec4} out the receiving vector
+ * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
+ * @returns {vec4} out
+ */
+vec4.random = function (out, scale) {
+    scale = scale || 1.0;
+
+    //TODO: This is a pretty awful way of doing this. Find something better.
+    out[0] = GLMAT_RANDOM();
+    out[1] = GLMAT_RANDOM();
+    out[2] = GLMAT_RANDOM();
+    out[3] = GLMAT_RANDOM();
+    vec4.normalize(out, out);
+    vec4.scale(out, out, scale);
+    return out;
+};
+
+/**
+ * Transforms the vec4 with a mat4.
+ *
+ * @param {vec4} out the receiving vector
+ * @param {vec4} a the vector to transform
+ * @param {mat4} m matrix to transform with
+ * @returns {vec4} out
+ */
+vec4.transformMat4 = function(out, a, m) {
+    var x = a[0], y = a[1], z = a[2], w = a[3];
+    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
+    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
+    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
+    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
+    return out;
+};
+
+/**
+ * Transforms the vec4 with a quat
+ *
+ * @param {vec4} out the receiving vector
+ * @param {vec4} a the vector to transform
+ * @param {quat} q quaternion to transform with
+ * @returns {vec4} out
+ */
+vec4.transformQuat = function(out, a, q) {
+    var x = a[0], y = a[1], z = a[2],
+        qx = q[0], qy = q[1], qz = q[2], qw = q[3],
+
+        // calculate quat * vec
+        ix = qw * x + qy * z - qz * y,
+        iy = qw * y + qz * x - qx * z,
+        iz = qw * z + qx * y - qy * x,
+        iw = -qx * x - qy * y - qz * z;
+
+    // calculate result * inverse quat
+    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
+    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
+    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
+    return out;
+};
+
+/**
+ * Perform some operation over an array of vec4s.
+ *
+ * @param {Array} a the array of vectors to iterate over
+ * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
+ * @param {Number} offset Number of elements to skip at the beginning of the array
+ * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
+ * @param {Function} fn Function to call for each vector in the array
+ * @param {Object} [arg] additional argument to pass to fn
+ * @returns {Array} a
+ * @function
+ */
+vec4.forEach = (function() {
+    var vec = vec4.create();
+
+    return function(a, stride, offset, count, fn, arg) {
+        var i, l;
+        if(!stride) {
+            stride = 4;
+        }
+
+        if(!offset) {
+            offset = 0;
+        }
+        
+        if(count) {
+            l = Math.min((count * stride) + offset, a.length);
+        } else {
+            l = a.length;
+        }
+
+        for(i = offset; i < l; i += stride) {
+            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
+            fn(vec, vec, arg);
+            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
+        }
+        
+        return a;
+    };
+})();
+
+/**
+ * Returns a string representation of a vector
+ *
+ * @param {vec4} vec vector to represent as a string
+ * @returns {String} string representation of the vector
+ */
+vec4.str = function (a) {
+    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
+};
+
+if(typeof(exports) !== 'undefined') {
+    exports.vec4 = vec4;
+}
+;
+/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+  * Redistributions of source code must retain the above copyright notice, this
+    list of conditions and the following disclaimer.
+  * Redistributions in binary form must reproduce the above copyright notice,
+    this list of conditions and the following disclaimer in the documentation 
+    and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
+
+/**
+ * @class 2x2 Matrix
+ * @name mat2
+ */
+
+var mat2 = {};
+
+/**
+ * Creates a new identity mat2
+ *
+ * @returns {mat2} a new 2x2 matrix
+ */
+mat2.create = function() {
+    var out = new GLMAT_ARRAY_TYPE(4);
+    out[0] = 1;
+    out[1] = 0;
+    out[2] = 0;
+    out[3] = 1;
+    return out;
+};
+
+/**
+ * Creates a new mat2 initialized with values from an existing matrix
+ *
+ * @param {mat2} a matrix to clone
+ * @returns {mat2} a new 2x2 matrix
+ */
+mat2.clone = function(a) {
+    var out = new GLMAT_ARRAY_TYPE(4);
+    out[0] = a[0];
+    out[1] = a[1];
+    out[2] = a[2];
+    out[3] = a[3];
+    return out;
+};
+
+/**
+ * Copy the values from one mat2 to another
+ *
+ * @param {mat2} out the receiving matrix
+ * @param {mat2} a the source matrix
+ * @returns {mat2} out
+ */
+mat2.copy = function(out, a) {
+    out[0] = a[0];
+    out[1] = a[1];
+    out[2] = a[2];
+    out[3] = a[3];
+    return out;
+};
+
+/**
+ * Set a mat2 to the identity matrix
+ *
+ * @param {mat2} out the receiving matrix
+ * @returns {mat2} out
+ */
+mat2.identity = function(out) {
+    out[0] = 1;
+    out[1] = 0;
+    out[2] = 0;
+    out[3] = 1;
+    return out;
+};
+
+/**
+ * Transpose the values of a mat2
+ *
+ * @param {mat2} out the receiving matrix
+ * @param {mat2} a the source matrix
+ * @returns {mat2} out
+ */
+mat2.transpose = function(out, a) {
+    // If we are transposing ourselves we can skip a few steps but have to cache some values
+    if (out === a) {
+        var a1 = a[1];
+        out[1] = a[2];
+        out[2] = a1;
+    } else {
+        out[0] = a[0];
+        out[1] = a[2];
+        out[2] = a[1];
+        out[3] = a[3];
+    }
+    
+    return out;
+};
+
+/**
+ * Inverts a mat2
+ *
+ * @param {mat2} out the receiving matrix
+ * @param {mat2} a the source matrix
+ * @returns {mat2} out
+ */
+mat2.invert = function(out, a) {
+    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
+
+        // Calculate the determinant
+        det = a0 * a3 - a2 * a1;
+
+    if (!det) {
+        return null;
+    }
+    det = 1.0 / det;
+    
+    out[0] =  a3 * det;
+    out[1] = -a1 * det;
+    out[2] = -a2 * det;
+    out[3] =  a0 * det;
+
+    return out;
+};
+
+/**
+ * Calculates the adjugate of a mat2
+ *
+ * @param {mat2} out the receiving matrix
+ * @param {mat2} a the source matrix
+ * @returns {mat2} out
+ */
+mat2.adjoint = function(out, a) {
+    // Caching this value is nessecary if out == a
+    var a0 = a[0];
+    out[0] =  a[3];
+    out[1] = -a[1];
+    out[2] = -a[2];
+    out[3] =  a0;
+
+    return out;
+};
+
+/**
+ * Calculates the determinant of a mat2
+ *
+ * @param {mat2} a the source matrix
+ * @returns {Number} determinant of a
+ */
+mat2.determinant = function (a) {
+    return a[0] * a[3] - a[2] * a[1];
+};
+
+/**
+ * Multiplies two mat2's
+ *
+ * @param {mat2} out the receiving matrix
+ * @param {mat2} a the first operand
+ * @param {mat2} b the second operand
+ * @returns {mat2} out
+ */
+mat2.multiply = function (out, a, b) {
+    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
+    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
+    out[0] = a0 * b0 + a2 * b1;
+    out[1] = a1 * b0 + a3 * b1;
+    out[2] = a0 * b2 + a2 * b3;
+    out[3] = a1 * b2 + a3 * b3;
+    return out;
+};
+
+/**
+ * Alias for {@link mat2.multiply}
+ * @function
+ */
+mat2.mul = mat2.multiply;
+
+/**
+ * Rotates a mat2 by the given angle
+ *
+ * @param {mat2} out the receiving matrix
+ * @param {mat2} a the matrix to rotate
+ * @param {Number} rad the angle to rotate the matrix by
+ * @returns {mat2} out
+ */
+mat2.rotate = function (out, a, rad) {
+    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
+        s = Math.sin(rad),
+        c = Math.cos(rad);
+    out[0] = a0 *  c + a2 * s;
+    out[1] = a1 *  c + a3 * s;
+    out[2] = a0 * -s + a2 * c;
+    out[3] = a1 * -s + a3 * c;
+    return out;
+};
+
+/**
+ * Scales the mat2 by the dimensions in the given vec2
+ *
+ * @param {mat2} out the receiving matrix
+ * @param {mat2} a the matrix to rotate
+ * @param {vec2} v the vec2 to scale the matrix by
+ * @returns {mat2} out
+ **/
+mat2.scale = function(out, a, v) {
+    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
+        v0 = v[0], v1 = v[1];
+    out[0] = a0 * v0;
+    out[1] = a1 * v0;
+    out[2] = a2 * v1;
+    out[3] = a3 * v1;
+    return out;
+};
+
+/**
+ * Returns a string representation of a mat2
+ *
+ * @param {mat2} mat matrix to represent as a string
+ * @returns {String} string representation of the matrix
+ */
+mat2.str = function (a) {
+    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
+};
+
+/**
+ * Returns Frobenius norm of a mat2
+ *
+ * @param {mat2} a the matrix to calculate Frobenius norm of
+ * @returns {Number} Frobenius norm
+ */
+mat2.frob = function (a) {
+    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))
+};
+
+/**
+ * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
+ * @param {mat2} L the lower triangular matrix 
+ * @param {mat2} D the diagonal matrix 
+ * @param {mat2} U the upper triangular matrix 
+ * @param {mat2} a the input matrix to factorize
+ */
+
+mat2.LDU = function (L, D, U, a) { 
+    L[2] = a[2]/a[0]; 
+    U[0] = a[0]; 
+    U[1] = a[1]; 
+    U[3] = a[3] - L[2] * U[1]; 
+    return [L, D, U];       
+}; 
+
+if(typeof(exports) !== 'undefined') {
+    exports.mat2 = mat2;
+}
+;
+/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+  * Redistributions of source code must retain the above copyright notice, this
+    list of conditions and the following disclaimer.
+  * Redistributions in binary form must reproduce the above copyright notice,
+    this list of conditions and the following disclaimer in the documentation 
+    and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
+
+/**
+ * @class 2x3 Matrix
+ * @name mat2d
+ * 
+ * @description 
+ * A mat2d contains six elements defined as:
+ * <pre>
+ * [a, c, tx,
+ *  b, d, ty]
+ * </pre>
+ * This is a short form for the 3x3 matrix:
+ * <pre>
+ * [a, c, tx,
+ *  b, d, ty,
+ *  0, 0, 1]
+ * </pre>
+ * The last row is ignored so the array is shorter and operations are faster.
+ */
+
+var mat2d = {};
+
+/**
+ * Creates a new identity mat2d
+ *
+ * @returns {mat2d} a new 2x3 matrix
+ */
+mat2d.create = function() {
+    var out = new GLMAT_ARRAY_TYPE(6);
+    out[0] = 1;
+    out[1] = 0;
+    out[2] = 0;
+    out[3] = 1;
+    out[4] = 0;
+    out[5] = 0;
+    return out;
+};
+
+/**
+ * Creates a new mat2d initialized with values from an existing matrix
+ *
+ * @param {mat2d} a matrix to clone
+ * @returns {mat2d} a new 2x3 matrix
+ */
+mat2d.clone = function(a) {
+    var out = new GLMAT_ARRAY_TYPE(6);
+    out[0] = a[0];
+    out[1] = a[1];
+    out[2] = a[2];
+    out[3] = a[3];
+    out[4] = a[4];
+    out[5] = a[5];
+    return out;
+};
+
+/**
+ * Copy the values from one mat2d to another
+ *
+ * @param {mat2d} out the receiving matrix
+ * @param {mat2d} a the source matrix
+ * @returns {mat2d} out
+ */
+mat2d.copy = function(out, a) {
+    out[0] = a[0];
+    out[1] = a[1];
+    out[2] = a[2];
+    out[3] = a[3];
+    out[4] = a[4];
+    out[5] = a[5];
+    return out;
+};
+
+/**
+ * Set a mat2d to the identity matrix
+ *
+ * @param {mat2d} out the receiving matrix
+ * @returns {mat2d} out
+ */
+mat2d.identity = function(out) {
+    out[0] = 1;
+    out[1] = 0;
+    out[2] = 0;
+    out[3] = 1;
+    out[4] = 0;
+    out[5] = 0;
+    return out;
+};
+
+/**
+ * Inverts a mat2d
+ *
+ * @param {mat2d} out the receiving matrix
+ * @param {mat2d} a the source matrix
+ * @returns {mat2d} out
+ */
+mat2d.invert = function(out, a) {
+    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],
+        atx = a[4], aty = a[5];
+
+    var det = aa * ad - ab * ac;
+    if(!det){
+        return null;
+    }
+    det = 1.0 / det;
+
+    out[0] = ad * det;
+    out[1] = -ab * det;
+    out[2] = -ac * det;
+    out[3] = aa * det;
+    out[4] = (ac * aty - ad * atx) * det;
+    out[5] = (ab * atx - aa * aty) * det;
+    return out;
+};
+
+/**
+ * Calculates the determinant of a mat2d
+ *
+ * @param {mat2d} a the source matrix
+ * @returns {Number} determinant of a
+ */
+mat2d.determinant = function (a) {
+    return a[0] * a[3] - a[1] * a[2];
+};
+
+/**
+ * Multiplies two mat2d's
+ *
+ * @param {mat2d} out the receiving matrix
+ * @param {mat2d} a the first operand
+ * @param {mat2d} b the second operand
+ * @returns {mat2d} out
+ */
+mat2d.multiply = function (out, a, b) {
+    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
+        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
+    out[0] = a0 * b0 + a2 * b1;
+    out[1] = a1 * b0 + a3 * b1;
+    out[2] = a0 * b2 + a2 * b3;
+    out[3] = a1 * b2 + a3 * b3;
+    out[4] = a0 * b4 + a2 * b5 + a4;
+    out[5] = a1 * b4 + a3 * b5 + a5;
+    return out;
+};
+
+/**
+ * Alias for {@link mat2d.multiply}
+ * @function
+ */
+mat2d.mul = mat2d.multiply;
+
+
+/**
+ * Rotates a mat2d by the given angle
+ *
+ * @param {mat2d} out the receiving matrix
+ * @param {mat2d} a the matrix to rotate
+ * @param {Number} rad the angle to rotate the matrix by
+ * @returns {mat2d} out
+ */
+mat2d.rotate = function (out, a, rad) {
+    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
+        s = Math.sin(rad),
+        c = Math.cos(rad);
+    out[0] = a0 *  c + a2 * s;
+    out[1] = a1 *  c + a3 * s;
+    out[2] = a0 * -s + a2 * c;
+    out[3] = a1 * -s + a3 * c;
+    out[4] = a4;
+    out[5] = a5;
+    return out;
+};
+
+/**
+ * Scales the mat2d by the dimensions in the given vec2
+ *
+ * @param {mat2d} out the receiving matrix
+ * @param {mat2d} a the matrix to translate
+ * @param {vec2} v the vec2 to scale the matrix by
+ * @returns {mat2d} out
+ **/
+mat2d.scale = function(out, a, v) {
+    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
+        v0 = v[0], v1 = v[1];
+    out[0] = a0 * v0;
+    out[1] = a1 * v0;
+    out[2] = a2 * v1;
+    out[3] = a3 * v1;
+    out[4] = a4;
+    out[5] = a5;
+    return out;
+};
+
+/**
+ * Translates the mat2d by the dimensions in the given vec2
+ *
+ * @param {mat2d} out the receiving matrix
+ * @param {mat2d} a the matrix to translate
+ * @param {vec2} v the vec2 to translate the matrix by
+ * @returns {mat2d} out
+ **/
+mat2d.translate = function(out, a, v) {
+    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
+        v0 = v[0], v1 = v[1];
+    out[0] = a0;
+    out[1] = a1;
+    out[2] = a2;
+    out[3] = a3;
+    out[4] = a0 * v0 + a2 * v1 + a4;
+    out[5] = a1 * v0 + a3 * v1 + a5;
+    return out;
+};
+
+/**
+ * Returns a string representation of a mat2d
+ *
+ * @param {mat2d} a matrix to represent as a string
+ * @returns {String} string representation of the matrix
+ */
+mat2d.str = function (a) {
+    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
+                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';
+};
+
+/**
+ * Returns Frobenius norm of a mat2d
+ *
+ * @param {mat2d} a the matrix to calculate Frobenius norm of
+ * @returns {Number} Frobenius norm
+ */
+mat2d.frob = function (a) { 
+    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))
+}; 
+
+if(typeof(exports) !== 'undefined') {
+    exports.mat2d = mat2d;
+}
+;
+/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+  * Redistributions of source code must retain the above copyright notice, this
+    list of conditions and the following disclaimer.
+  * Redistributions in binary form must reproduce the above copyright notice,
+    this list of conditions and the following disclaimer in the documentation 
+    and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
+
+/**
+ * @class 3x3 Matrix
+ * @name mat3
+ */
+
+var mat3 = {};
+
+/**
+ * Creates a new identity mat3
+ *
+ * @returns {mat3} a new 3x3 matrix
+ */
+mat3.create = function() {
+    var out = new GLMAT_ARRAY_TYPE(9);
+    out[0] = 1;
+    out[1] = 0;
+    out[2] = 0;
+    out[3] = 0;
+    out[4] = 1;
+    out[5] = 0;
+    out[6] = 0;
+    out[7] = 0;
+    out[8] = 1;
+    return out;
+};
+
+/**
+ * Copies the upper-left 3x3 values into the given mat3.
+ *
+ * @param {mat3} out the receiving 3x3 matrix
+ * @param {mat4} a   the source 4x4 matrix
+ * @returns {mat3} out
+ */
+mat3.fromMat4 = function(out, a) {
+    out[0] = a[0];
+    out[1] = a[1];
+    out[2] = a[2];
+    out[3] = a[4];
+    out[4] = a[5];
+    out[5] = a[6];
+    out[6] = a[8];
+    out[7] = a[9];
+    out[8] = a[10];
+    return out;
+};
+
+/**
+ * Creates a new mat3 initialized with values from an existing matrix
+ *
+ * @param {mat3} a matrix to clone
+ * @returns {mat3} a new 3x3 matrix
+ */
+mat3.clone = function(a) {
+    var out = new GLMAT_ARRAY_TYPE(9);
+    out[0] = a[0];
+    out[1] = a[1];
+    out[2] = a[2];
+    out[3] = a[3];
+    out[4] = a[4];
+    out[5] = a[5];
+    out[6] = a[6];
+    out[7] = a[7];
+    out[8] = a[8];
+    return out;
+};
+
+/**
+ * Copy the values from one mat3 to another
+ *
+ * @param {mat3} out the receiving matrix
+ * @param {mat3} a the source matrix
+ * @returns {mat3} out
+ */
+mat3.copy = function(out, a) {
+    out[0] = a[0];
+    out[1] = a[1];
+    out[2] = a[2];
+    out[3] = a[3];
+    out[4] = a[4];
+    out[5] = a[5];
+    out[6] = a[6];
+    out[7] = a[7];
+    out[8] = a[8];
+    return out;
+};
+
+/**
+ * Set a mat3 to the identity matrix
+ *
+ * @param {mat3} out the receiving matrix
+ * @returns {mat3} out
+ */
+mat3.identity = function(out) {
+    out[0] = 1;
+    out[1] = 0;
+    out[2] = 0;
+    out[3] = 0;
+    out[4] = 1;
+    out[5] = 0;
+    out[6] = 0;
+    out[7] = 0;
+    out[8] = 1;
+    return out;
+};
+
+/**
+ * Transpose the values of a mat3
+ *
+ * @param {mat3} out the receiving matrix
+ * @param {mat3} a the source matrix
+ * @returns {mat3} out
+ */
+mat3.transpose = function(out, a) {
+    // If we are transposing ourselves we can skip a few steps but have to cache some values
+    if (out === a) {
+        var a01 = a[1], a02 = a[2], a12 = a[5];
+        out[1] = a[3];
+        out[2] = a[6];
+        out[3] = a01;
+        out[5] = a[7];
+        out[6] = a02;
+        out[7] = a12;
+    } else {
+        out[0] = a[0];
+        out[1] = a[3];
+        out[2] = a[6];
+        out[3] = a[1];
+        out[4] = a[4];
+        out[5] = a[7];
+        out[6] = a[2];
+        out[7] = a[5];
+        out[8] = a[8];
+    }
+    
+    return out;
+};
+
+/**
+ * Inverts a mat3
+ *
+ * @param {mat3} out the receiving matrix
+ * @param {mat3} a the source matrix
+ * @returns {mat3} out
+ */
+mat3.invert = function(out, a) {
+    var a00 = a[0], a01 = a[1], a02 = a[2],
+        a10 = a[3], a11 = a[4], a12 = a[5],
+        a20 = a[6], a21 = a[7], a22 = a[8],
+
+        b01 = a22 * a11 - a12 * a21,
+        b11 = -a22 * a10 + a12 * a20,
+        b21 = a21 * a10 - a11 * a20,
+
+        // Calculate the determinant
+        det = a00 * b01 + a01 * b11 + a02 * b21;
+
+    if (!det) { 
+        return null; 
+    }
+    det = 1.0 / det;
+
+    out[0] = b01 * det;
+    out[1] = (-a22 * a01 + a02 * a21) * det;
+    out[2] = (a12 * a01 - a02 * a11) * det;
+    out[3] = b11 * det;
+    out[4] = (a22 * a00 - a02 * a20) * det;
+    out[5] = (-a12 * a00 + a02 * a10) * det;
+    out[6] = b21 * det;
+    out[7] = (-a21 * a00 + a01 * a20) * det;
+    out[8] = (a11 * a00 - a01 * a10) * det;
+    return out;
+};
+
+/**
+ * Calculates the adjugate of a mat3
+ *
+ * @param {mat3} out the receiving matrix
+ * @param {mat3} a the source matrix
+ * @returns {mat3} out
+ */
+mat3.adjoint = function(out, a) {
+    var a00 = a[0], a01 = a[1], a02 = a[2],
+        a10 = a[3], a11 = a[4], a12 = a[5],
+        a20 = a[6], a21 = a[7], a22 = a[8];
+
+    out[0] = (a11 * a22 - a12 * a21);
+    out[1] = (a02 * a21 - a01 * a22);
+    out[2] = (a01 * a12 - a02 * a11);
+    out[3] = (a12 * a20 - a10 * a22);
+    out[4] = (a00 * a22 - a02 * a20);
+    out[5] = (a02 * a10 - a00 * a12);
+    out[6] = (a10 * a21 - a11 * a20);
+    out[7] = (a01 * a20 - a00 * a21);
+    out[8] = (a00 * a11 - a01 * a10);
+    return out;
+};
+
+/**
+ * Calculates the determinant of a mat3
+ *
+ * @param {mat3} a the source matrix
+ * @returns {Number} determinant of a
+ */
+mat3.determinant = function (a) {
+    var a00 = a[0], a01 = a[1], a02 = a[2],
+        a10 = a[3], a11 = a[4], a12 = a[5],
+        a20 = a[6], a21 = a[7], a22 = a[8];
+
+    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
+};
+
+/**
+ * Multiplies two mat3's
+ *
+ * @param {mat3} out the receiving matrix
+ * @param {mat3} a the first operand
+ * @param {mat3} b the second operand
+ * @returns {mat3} out
+ */
+mat3.multiply = function (out, a, b) {
+    var a00 = a[0], a01 = a[1], a02 = a[2],
+        a10 = a[3], a11 = a[4], a12 = a[5],
+        a20 = a[6], a21 = a[7], a22 = a[8],
+
+        b00 = b[0], b01 = b[1], b02 = b[2],
+        b10 = b[3], b11 = b[4], b12 = b[5],
+        b20 = b[6], b21 = b[7], b22 = b[8];
+
+    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
+    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
+    out[2] = b00 * a02 + b01 * a12 + b02 * a22;
+
+    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
+    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
+    out[5] = b10 * a02 + b11 * a12 + b12 * a22;
+
+    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
+    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
+    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
+    return out;
+};
+
+/**
+ * Alias for {@link mat3.multiply}
+ * @function
+ */
+mat3.mul = mat3.multiply;
+
+/**
+ * Translate a mat3 by the given vector
+ *
+ * @param {mat3} out the receiving matrix
+ * @param {mat3} a the matrix to translate
+ * @param {vec2} v vector to translate by
+ * @returns {mat3} out
+ */
+mat3.translate = function(out, a, v) {
+    var a00 = a[0], a01 = a[1], a02 = a[2],
+        a10 = a[3], a11 = a[4], a12 = a[5],
+        a20 = a[6], a21 = a[7], a22 = a[8],
+        x = v[0], y = v[1];
+
+    out[0] = a00;
+    out[1] = a01;
+    out[2] = a02;
+
+    out[3] = a10;
+    out[4] = a11;
+    out[5] = a12;
+
+    out[6] = x * a00 + y * a10 + a20;
+    out[7] = x * a01 + y * a11 + a21;
+    out[8] = x * a02 + y * a12 + a22;
+    return out;
+};
+
+/**
+ * Rotates a mat3 by the given angle
+ *
+ * @param {mat3} out the receiving matrix
+ * @param {mat3} a the matrix to rotate
+ * @param {Number} rad the angle to rotate the matrix by
+ * @returns {mat3} out
+ */
+mat3.rotate = function (out, a, rad) {
+    var a00 = a[0], a01 = a[1], a02 = a[2],
+        a10 = a[3], a11 = a[4], a12 = a[5],
+        a20 = a[6], a21 = a[7], a22 = a[8],
+
+        s = Math.sin(rad),
+        c = Math.cos(rad);
+
+    out[0] = c * a00 + s * a10;
+    out[1] = c * a01 + s * a11;
+    out[2] = c * a02 + s * a12;
+
+    out[3] = c * a10 - s * a00;
+    out[4] = c * a11 - s * a01;
+    out[5] = c * a12 - s * a02;
+
+    out[6] = a20;
+    out[7] = a21;
+    out[8] = a22;
+    return out;
+};
+
+/**
+ * Scales the mat3 by the dimensions in the given vec2
+ *
+ * @param {mat3} out the receiving matrix
+ * @param {mat3} a the matrix to rotate
+ * @param {vec2} v the vec2 to scale the matrix by
+ * @returns {mat3} out
+ **/
+mat3.scale = function(out, a, v) {
+    var x = v[0], y = v[1];
+
+    out[0] = x * a[0];
+    out[1] = x * a[1];
+    out[2] = x * a[2];
+
+    out[3] = y * a[3];
+    out[4] = y * a[4];
+    out[5] = y * a[5];
+
+    out[6] = a[6];
+    out[7] = a[7];
+    out[8] = a[8];
+    return out;
+};
+
+/**
+ * Copies the values from a mat2d into a mat3
+ *
+ * @param {mat3} out the receiving matrix
+ * @param {mat2d} a the matrix to copy
+ * @returns {mat3} out
+ **/
+mat3.fromMat2d = function(out, a) {
+    out[0] = a[0];
+    out[1] = a[1];
+    out[2] = 0;
+
+    out[3] = a[2];
+    out[4] = a[3];
+    out[5] = 0;
+
+    out[6] = a[4];
+    out[7] = a[5];
+    out[8] = 1;
+    return out;
+};
+
+/**
+* Calculates a 3x3 matrix from the given quaternion
+*
+* @param {mat3} out mat3 receiving operation result
+* @param {quat} q Quaternion to create matrix from
+*
+* @returns {mat3} out
+*/
+mat3.fromQuat = function (out, q) {
+    var x = q[0], y = q[1], z = q[2], w = q[3],
+        x2 = x + x,
+        y2 = y + y,
+        z2 = z + z,
+
+        xx = x * x2,
+        yx = y * x2,
+        yy = y * y2,
+        zx = z * x2,
+        zy = z * y2,
+        zz = z * z2,
+        wx = w * x2,
+        wy = w * y2,
+        wz = w * z2;
+
+    out[0] = 1 - yy - zz;
+    out[3] = yx - wz;
+    out[6] = zx + wy;
+
+    out[1] = yx + wz;
+    out[4] = 1 - xx - zz;
+    out[7] = zy - wx;
+
+    out[2] = zx - wy;
+    out[5] = zy + wx;
+    out[8] = 1 - xx - yy;
+
+    return out;
+};
+
+/**
+* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
+*
+* @param {mat3} out mat3 receiving operation result
+* @param {mat4} a Mat4 to derive the normal matrix from
+*
+* @returns {mat3} out
+*/
+mat3.normalFromMat4 = function (out, a) {
+    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
+        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
+        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
+        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],
+
+        b00 = a00 * a11 - a01 * a10,
+        b01 = a00 * a12 - a02 * a10,
+        b02 = a00 * a13 - a03 * a10,
+        b03 = a01 * a12 - a02 * a11,
+        b04 = a01 * a13 - a03 * a11,
+        b05 = a02 * a13 - a03 * a12,
+        b06 = a20 * a31 - a21 * a30,
+        b07 = a20 * a32 - a22 * a30,
+        b08 = a20 * a33 - a23 * a30,
+        b09 = a21 * a32 - a22 * a31,
+        b10 = a21 * a33 - a23 * a31,
+        b11 = a22 * a33 - a23 * a32,
+
+        // Calculate the determinant
+        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
+
+    if (!det) { 
+        return null; 
+    }
+    det = 1.0 / det;
+
+    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
+    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
+    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
+
+    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
+    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
+    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
+
+    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
+    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
+    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
+
+    return out;
+};
+
+/**
+ * Returns a string representation of a mat3
+ *
+ * @param {mat3} mat matrix to represent as a string
+ * @returns {String} string representation of the matrix
+ */
+mat3.str = function (a) {
+    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
+                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + 
+                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';
+};
+
+/**
+ * Returns Frobenius norm of a mat3
+ *
+ * @param {mat3} a the matrix to calculate Frobenius norm of
+ * @returns {Number} Frobenius norm
+ */
+mat3.frob = function (a) {
+    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))
+};
+
+
+if(typeof(exports) !== 'undefined') {
+    exports.mat3 = mat3;
+}
+;
+/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+  * Redistributions of source code must retain the above copyright notice, this
+    list of conditions and the following disclaimer.
+  * Redistributions in binary form must reproduce the above copyright notice,
+    this list of conditions and the following disclaimer in the documentation 
+    and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
+
+/**
+ * @class 4x4 Matrix
+ * @name mat4
+ */
+
+var mat4 = {};
+
+/**
+ * Creates a new identity mat4
+ *
+ * @returns {mat4} a new 4x4 matrix
+ */
+mat4.create = function() {
+    var out = new GLMAT_ARRAY_TYPE(16);
+    out[0] = 1;
+    out[1] = 0;
+    out[2] = 0;
+    out[3] = 0;
+    out[4] = 0;
+    out[5] = 1;
+    out[6] = 0;
+    out[7] = 0;
+    out[8] = 0;
+    out[9] = 0;
+    out[10] = 1;
+    out[11] = 0;
+    out[12] = 0;
+    out[13] = 0;
+    out[14] = 0;
+    out[15] = 1;
+    return out;
+};
+
+/**
+ * Creates a new mat4 initialized with values from an existing matrix
+ *
+ * @param {mat4} a matrix to clone
+ * @returns {mat4} a new 4x4 matrix
+ */
+mat4.clone = function(a) {
+    var out = new GLMAT_ARRAY_TYPE(16);
+    out[0] = a[0];
+    out[1] = a[1];
+    out[2] = a[2];
+    out[3] = a[3];
+    out[4] = a[4];
+    out[5] = a[5];
+    out[6] = a[6];
+    out[7] = a[7];
+    out[8] = a[8];
+    out[9] = a[9];
+    out[10] = a[10];
+    out[11] = a[11];
+    out[12] = a[12];
+    out[13] = a[13];
+    out[14] = a[14];
+    out[15] = a[15];
+    return out;
+};
+
+/**
+ * Copy the values from one mat4 to another
+ *
+ * @param {mat4} out the receiving matrix
+ * @param {mat4} a the source matrix
+ * @returns {mat4} out
+ */
+mat4.copy = function(out, a) {
+    out[0] = a[0];
+    out[1] = a[1];
+    out[2] = a[2];
+    out[3] = a[3];
+    out[4] = a[4];
+    out[5] = a[5];
+    out[6] = a[6];
+    out[7] = a[7];
+    out[8] = a[8];
+    out[9] = a[9];
+    out[10] = a[10];
+    out[11] = a[11];
+    out[12] = a[12];
+    out[13] = a[13];
+    out[14] = a[14];
+    out[15] = a[15];
+    return out;
+};
+
+/**
+ * Set a mat4 to the identity matrix
+ *
+ * @param {mat4} out the receiving matrix
+ * @returns {mat4} out
+ */
+mat4.identity = function(out) {
+    out[0] = 1;
+    out[1] = 0;
+    out[2] = 0;
+    out[3] = 0;
+    out[4] = 0;
+    out[5] = 1;
+    out[6] = 0;
+    out[7] = 0;
+    out[8] = 0;
+    out[9] = 0;
+    out[10] = 1;
+    out[11] = 0;
+    out[12] = 0;
+    out[13] = 0;
+    out[14] = 0;
+    out[15] = 1;
+    return out;
+};
+
+/**
+ * Transpose the values of a mat4
+ *
+ * @param {mat4} out the receiving matrix
+ * @param {mat4} a the source matrix
+ * @returns {mat4} out
+ */
+mat4.transpose = function(out, a) {
+    // If we are transposing ourselves we can skip a few steps but have to cache some values
+    if (out === a) {
+        var a01 = a[1], a02 = a[2], a03 = a[3],
+            a12 = a[6], a13 = a[7],
+            a23 = a[11];
+
+        out[1] = a[4];
+        out[2] = a[8];
+        out[3] = a[12];
+        out[4] = a01;
+        out[6] = a[9];
+        out[7] = a[13];
+        out[8] = a02;
+        out[9] = a12;
+        out[11] = a[14];
+        out[12] = a03;
+        out[13] = a13;
+        out[14] = a23;
+    } else {
+        out[0] = a[0];
+        out[1] = a[4];
+        out[2] = a[8];
+        out[3] = a[12];
+        out[4] = a[1];
+        out[5] = a[5];
+        out[6] = a[9];
+        out[7] = a[13];
+        out[8] = a[2];
+        out[9] = a[6];
+        out[10] = a[10];
+        out[11] = a[14];
+        out[12] = a[3];
+        out[13] = a[7];
+        out[14] = a[11];
+        out[15] = a[15];
+    }
+    
+    return out;
+};
+
+/**
+ * Inverts a mat4
+ *
+ * @param {mat4} out the receiving matrix
+ * @param {mat4} a the source matrix
+ * @returns {mat4} out
+ */
+mat4.invert = function(out, a) {
+    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
+        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
+        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
+        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],
+
+        b00 = a00 * a11 - a01 * a10,
+        b01 = a00 * a12 - a02 * a10,
+        b02 = a00 * a13 - a03 * a10,
+        b03 = a01 * a12 - a02 * a11,
+        b04 = a01 * a13 - a03 * a11,
+        b05 = a02 * a13 - a03 * a12,
+        b06 = a20 * a31 - a21 * a30,
+        b07 = a20 * a32 - a22 * a30,
+        b08 = a20 * a33 - a23 * a30,
+        b09 = a21 * a32 - a22 * a31,
+        b10 = a21 * a33 - a23 * a31,
+        b11 = a22 * a33 - a23 * a32,
+
+        // Calculate the determinant
+        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
+
+    if (!det) { 
+        return null; 
+    }
+    det = 1.0 / det;
+
+    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
+    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
+    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
+    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
+    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
+    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
+    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
+    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
+    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
+    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
+    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
+    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
+    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
+    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
+    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
+    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
+
+    return out;
+};
+
+/**
+ * Calculates the adjugate of a mat4
+ *
+ * @param {mat4} out the receiving matrix
+ * @param {mat4} a the source matrix
+ * @returns {mat4} out
+ */
+mat4.adjoint = function(out, a) {
+    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
+        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
+        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
+        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
+
+    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
+    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
+    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
+    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
+    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
+    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
+    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
+    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
+    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
+    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
+    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
+    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
+    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
+    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
+    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
+    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
+    return out;
+};
+
+/**
+ * Calculates the determinant of a mat4
+ *
+ * @param {mat4} a the source matrix
+ * @returns {Number} determinant of a
+ */
+mat4.determinant = function (a) {
+    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
+        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
+        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
+        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],
+
+        b00 = a00 * a11 - a01 * a10,
+        b01 = a00 * a12 - a02 * a10,
+        b02 = a00 * a13 - a03 * a10,
+        b03 = a01 * a12 - a02 * a11,
+        b04 = a01 * a13 - a03 * a11,
+        b05 = a02 * a13 - a03 * a12,
+        b06 = a20 * a31 - a21 * a30,
+        b07 = a20 * a32 - a22 * a30,
+        b08 = a20 * a33 - a23 * a30,
+        b09 = a21 * a32 - a22 * a31,
+        b10 = a21 * a33 - a23 * a31,
+        b11 = a22 * a33 - a23 * a32;
+
+    // Calculate the determinant
+    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
+};
+
+/**
+ * Multiplies two mat4's
+ *
+ * @param {mat4} out the receiving matrix
+ * @param {mat4} a the first operand
+ * @param {mat4} b the second operand
+ * @returns {mat4} out
+ */
+mat4.multiply = function (out, a, b) {
+    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
+        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
+        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
+        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
+
+    // Cache only the current line of the second matrix
+    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  
+    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
+    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
+    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
+    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
+
+    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
+    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
+    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
+    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
+    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
+
+    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
+    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
+    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
+    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
+    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
+
+    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
+    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
+    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
+    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
+    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
+    return out;
+};
+
+/**
+ * Alias for {@link mat4.multiply}
+ * @function
+ */
+mat4.mul = mat4.multiply;
+
+/**
+ * Translate a mat4 by the given vector
+ *
+ * @param {mat4} out the receiving matrix
+ * @param {mat4} a the matrix to translate
+ * @param {vec3} v vector to translate by
+ * @returns {mat4} out
+ */
+mat4.translate = function (out, a, v) {
+    var x = v[0], y = v[1], z = v[2],
+        a00, a01, a02, a03,
+        a10, a11, a12, a13,
+        a20, a21, a22, a23;
+
+    if (a === out) {
+        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
+        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
+        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
+        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
+    } else {
+        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
+        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
+        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];
+
+        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
+        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
+        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;
+
+        out[12] = a00 * x + a10 * y + a20 * z + a[12];
+        out[13] = a01 * x + a11 * y + a21 * z + a[13];
+        out[14] = a02 * x + a12 * y + a22 * z + a[14];
+        out[15] = a03 * x + a13 * y + a23 * z + a[15];
+    }
+
+    return out;
+};
+
+/**
+ * Scales the mat4 by the dimensions in the given vec3
+ *
+ * @param {mat4} out the receiving matrix
+ * @param {mat4} a the matrix to scale
+ * @param {vec3} v the vec3 to scale the matrix by
+ * @returns {mat4} out
+ **/
+mat4.scale = function(out, a, v) {
+    var x = v[0], y = v[1], z = v[2];
+
+    out[0] = a[0] * x;
+    out[1] = a[1] * x;
+    out[2] = a[2] * x;
+    out[3] = a[3] * x;
+    out[4] = a[4] * y;
+    out[5] = a[5] * y;
+    out[6] = a[6] * y;
+    out[7] = a[7] * y;
+    out[8] = a[8] * z;
+    out[9] = a[9] * z;
+    out[10] = a[10] * z;
+    out[11] = a[11] * z;
+    out[12] = a[12];
+    out[13] = a[13];
+    out[14] = a[14];
+    out[15] = a[15];
+    return out;
+};
+
+/**
+ * Rotates a mat4 by the given angle
+ *
+ * @param {mat4} out the receiving matrix
+ * @param {mat4} a the matrix to rotate
+ * @param {Number} rad the angle to rotate the matrix by
+ * @param {vec3} axis the axis to rotate around
+ * @returns {mat4} out
+ */
+mat4.rotate = function (out, a, rad, axis) {
+    var x = axis[0], y = axis[1], z = axis[2],
+        len = Math.sqrt(x * x + y * y + z * z),
+        s, c, t,
+        a00, a01, a02, a03,
+        a10, a11, a12, a13,
+        a20, a21, a22, a23,
+        b00, b01, b02,
+        b10, b11, b12,
+        b20, b21, b22;
+
+    if (Math.abs(len) < GLMAT_EPSILON) { return null; }
+    
+    len = 1 / len;
+    x *= len;
+    y *= len;
+    z *= len;
+
+    s = Math.sin(rad);
+    c = Math.cos(rad);
+    t = 1 - c;
+
+    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
+    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
+    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];
+
+    // Construct the elements of the rotation matrix
+    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
+    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
+    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;
+
+    // Perform rotation-specific matrix multiplication
+    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
+    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
+    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
+    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
+    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
+    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
+    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
+    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
+    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
+    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
+    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
+    out[11] = a03 * b20 + a13 * b21 + a23 * b22;
+
+    if (a !== out) { // If the source and destination differ, copy the unchanged last row
+        out[12] = a[12];
+        out[13] = a[13];
+        out[14] = a[14];
+        out[15] = a[15];
+    }
+    return out;
+};
+
+/**
+ * Rotates a matrix by the given angle around the X axis
+ *
+ * @param {mat4} out the receiving matrix
+ * @param {mat4} a the matrix to rotate
+ * @param {Number} rad the angle to rotate the matrix by
+ * @returns {mat4} out
+ */
+mat4.rotateX = function (out, a, rad) {
+    var s = Math.sin(rad),
+        c = Math.cos(rad),
+        a10 = a[4],
+        a11 = a[5],
+        a12 = a[6],
+        a13 = a[7],
+        a20 = a[8],
+        a21 = a[9],
+        a22 = a[10],
+        a23 = a[11];
+
+    if (a !== out) { // If the source and destination differ, copy the unchanged rows
+        out[0]  = a[0];
+        out[1]  = a[1];
+        out[2]  = a[2];
+        out[3]  = a[3];
+        out[12] = a[12];
+        out[13] = a[13];
+        out[14] = a[14];
+        out[15] = a[15];
+    }
+
+    // Perform axis-specific matrix multiplication
+    out[4] = a10 * c + a20 * s;
+    out[5] = a11 * c + a21 * s;
+    out[6] = a12 * c + a22 * s;
+    out[7] = a13 * c + a23 * s;
+    out[8] = a20 * c - a10 * s;
+    out[9] = a21 * c - a11 * s;
+    out[10] = a22 * c - a12 * s;
+    out[11] = a23 * c - a13 * s;
+    return out;
+};
+
+/**
+ * Rotates a matrix by the given angle around the Y axis
+ *
+ * @param {mat4} out the receiving matrix
+ * @param {mat4} a the matrix to rotate
+ * @param {Number} rad the angle to rotate the matrix by
+ * @returns {mat4} out
+ */
+mat4.rotateY = function (out, a, rad) {
+    var s = Math.sin(rad),
+        c = Math.cos(rad),
+        a00 = a[0],
+        a01 = a[1],
+        a02 = a[2],
+        a03 = a[3],
+        a20 = a[8],
+        a21 = a[9],
+        a22 = a[10],
+        a23 = a[11];
+
+    if (a !== out) { // If the source and destination differ, copy the unchanged rows
+        out[4]  = a[4];
+        out[5]  = a[5];
+        out[6]  = a[6];
+        out[7]  = a[7];
+        out[12] = a[12];
+        out[13] = a[13];
+        out[14] = a[14];
+        out[15] = a[15];
+    }
+
+    // Perform axis-specific matrix multiplication
+    out[0] = a00 * c - a20 * s;
+    out[1] = a01 * c - a21 * s;
+    out[2] = a02 * c - a22 * s;
+    out[3] = a03 * c - a23 * s;
+    out[8] = a00 * s + a20 * c;
+    out[9] = a01 * s + a21 * c;
+    out[10] = a02 * s + a22 * c;
+    out[11] = a03 * s + a23 * c;
+    return out;
+};
+
+/**
+ * Rotates a matrix by the given angle around the Z axis
+ *
+ * @param {mat4} out the receiving matrix
+ * @param {mat4} a the matrix to rotate
+ * @param {Number} rad the angle to rotate the matrix by
+ * @returns {mat4} out
+ */
+mat4.rotateZ = function (out, a, rad) {
+    var s = Math.sin(rad),
+        c = Math.cos(rad),
+        a00 = a[0],
+        a01 = a[1],
+        a02 = a[2],
+        a03 = a[3],
+        a10 = a[4],
+        a11 = a[5],
+        a12 = a[6],
+        a13 = a[7];
+
+    if (a !== out) { // If the source and destination differ, copy the unchanged last row
+        out[8]  = a[8];
+        out[9]  = a[9];
+        out[10] = a[10];
+        out[11] = a[11];
+        out[12] = a[12];
+        out[13] = a[13];
+        out[14] = a[14];
+        out[15] = a[15];
+    }
+
+    // Perform axis-specific matrix multiplication
+    out[0] = a00 * c + a10 * s;
+    out[1] = a01 * c + a11 * s;
+    out[2] = a02 * c + a12 * s;
+    out[3] = a03 * c + a13 * s;
+    out[4] = a10 * c - a00 * s;
+    out[5] = a11 * c - a01 * s;
+    out[6] = a12 * c - a02 * s;
+    out[7] = a13 * c - a03 * s;
+    return out;
+};
+
+/**
+ * Creates a matrix from a quaternion rotation and vector translation
+ * This is equivalent to (but much faster than):
+ *
+ *     mat4.identity(dest);
+ *     mat4.translate(dest, vec);
+ *     var quatMat = mat4.create();
+ *     quat4.toMat4(quat, quatMat);
+ *     mat4.multiply(dest, quatMat);
+ *
+ * @param {mat4} out mat4 receiving operation result
+ * @param {quat4} q Rotation quaternion
+ * @param {vec3} v Translation vector
+ * @returns {mat4} out
+ */
+mat4.fromRotationTranslation = function (out, q, v) {
+    // Quaternion math
+    var x = q[0], y = q[1], z = q[2], w = q[3],
+        x2 = x + x,
+        y2 = y + y,
+        z2 = z + z,
+
+        xx = x * x2,
+        xy = x * y2,
+        xz = x * z2,
+        yy = y * y2,
+        yz = y * z2,
+        zz = z * z2,
+        wx = w * x2,
+        wy = w * y2,
+        wz = w * z2;
+
+    out[0] = 1 - (yy + zz);
+    out[1] = xy + wz;
+    out[2] = xz - wy;
+    out[3] = 0;
+    out[4] = xy - wz;
+    out[5] = 1 - (xx + zz);
+    out[6] = yz + wx;
+    out[7] = 0;
+    out[8] = xz + wy;
+    out[9] = yz - wx;
+    out[10] = 1 - (xx + yy);
+    out[11] = 0;
+    out[12] = v[0];
+    out[13] = v[1];
+    out[14] = v[2];
+    out[15] = 1;
+    
+    return out;
+};
+
+mat4.fromQuat = function (out, q) {
+    var x = q[0], y = q[1], z = q[2], w = q[3],
+        x2 = x + x,
+        y2 = y + y,
+        z2 = z + z,
+
+        xx = x * x2,
+        yx = y * x2,
+        yy = y * y2,
+        zx = z * x2,
+        zy = z * y2,
+        zz = z * z2,
+        wx = w * x2,
+        wy = w * y2,
+        wz = w * z2;
+
+    out[0] = 1 - yy - zz;
+    out[1] = yx + wz;
+    out[2] = zx - wy;
+    out[3] = 0;
+
+    out[4] = yx - wz;
+    out[5] = 1 - xx - zz;
+    out[6] = zy + wx;
+    out[7] = 0;
+
+    out[8] = zx + wy;
+    out[9] = zy - wx;
+    out[10] = 1 - xx - yy;
+    out[11] = 0;
+
+    out[12] = 0;
+    out[13] = 0;
+    out[14] = 0;
+    out[15] = 1;
+
+    return out;
+};
+
+/**
+ * Generates a frustum matrix with the given bounds
+ *
+ * @param {mat4} out mat4 frustum matrix will be written into
+ * @param {Number} left Left bound of the frustum
+ * @param {Number} right Right bound of the frustum
+ * @param {Number} bottom Bottom bound of the frustum
+ * @param {Number} top Top bound of the frustum
+ * @param {Number} near Near bound of the frustum
+ * @param {Number} far Far bound of the frustum
+ * @returns {mat4} out
+ */
+mat4.frustum = function (out, left, right, bottom, top, near, far) {
+    var rl = 1 / (right - left),
+        tb = 1 / (top - bottom),
+        nf = 1 / (near - far);
+    out[0] = (near * 2) * rl;
+    out[1] = 0;
+    out[2] = 0;
+    out[3] = 0;
+    out[4] = 0;
+    out[5] = (near * 2) * tb;
+    out[6] = 0;
+    out[7] = 0;
+    out[8] = (right + left) * rl;
+    out[9] = (top + bottom) * tb;
+    out[10] = (far + near) * nf;
+    out[11] = -1;
+    out[12] = 0;
+    out[13] = 0;
+    out[14] = (far * near * 2) * nf;
+    out[15] = 0;
+    return out;
+};
+
+/**
+ * Generates a perspective projection matrix with the given bounds
+ *
+ * @param {mat4} out mat4 frustum matrix will be written into
+ * @param {number} fovy Vertical field of view in radians
+ * @param {number} aspect Aspect ratio. typically viewport width/height
+ * @param {number} near Near bound of the frustum
+ * @param {number} far Far bound of the frustum
+ * @returns {mat4} out
+ */
+mat4.perspective = function (out, fovy, aspect, near, far) {
+    var f = 1.0 / Math.tan(fovy / 2),
+        nf = 1 / (near - far);
+    out[0] = f / aspect;
+    out[1] = 0;
+    out[2] = 0;
+    out[3] = 0;
+    out[4] = 0;
+    out[5] = f;
+    out[6] = 0;
+    out[7] = 0;
+    out[8] = 0;
+    out[9] = 0;
+    out[10] = (far + near) * nf;
+    out[11] = -1;
+    out[12] = 0;
+    out[13] = 0;
+    out[14] = (2 * far * near) * nf;
+    out[15] = 0;
+    return out;
+};
+
+/**
+ * Generates a orthogonal projection matrix with the given bounds
+ *
+ * @param {mat4} out mat4 frustum matrix will be written into
+ * @param {number} left Left bound of the frustum
+ * @param {number} right Right bound of the frustum
+ * @param {number} bottom Bottom bound of the frustum
+ * @param {number} top Top bound of the frustum
+ * @param {number} near Near bound of the frustum
+ * @param {number} far Far bound of the frustum
+ * @returns {mat4} out
+ */
+mat4.ortho = function (out, left, right, bottom, top, near, far) {
+    var lr = 1 / (left - right),
+        bt = 1 / (bottom - top),
+        nf = 1 / (near - far);
+    out[0] = -2 * lr;
+    out[1] = 0;
+    out[2] = 0;
+    out[3] = 0;
+    out[4] = 0;
+    out[5] = -2 * bt;
+    out[6] = 0;
+    out[7] = 0;
+    out[8] = 0;
+    out[9] = 0;
+    out[10] = 2 * nf;
+    out[11] = 0;
+    out[12] = (left + right) * lr;
+    out[13] = (top + bottom) * bt;
+    out[14] = (far + near) * nf;
+    out[15] = 1;
+    return out;
+};
+
+/**
+ * Generates a look-at matrix with the given eye position, focal point, and up axis
+ *
+ * @param {mat4} out mat4 frustum matrix will be written into
+ * @param {vec3} eye Position of the viewer
+ * @param {vec3} center Point the viewer is looking at
+ * @param {vec3} up vec3 pointing up
+ * @returns {mat4} out
+ */
+mat4.lookAt = function (out, eye, center, up) {
+    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
+        eyex = eye[0],
+        eyey = eye[1],
+        eyez = eye[2],
+        upx = up[0],
+        upy = up[1],
+        upz = up[2],
+        centerx = center[0],
+        centery = center[1],
+        centerz = center[2];
+
+    if (Math.abs(eyex - centerx) < GLMAT_EPSILON &&
+        Math.abs(eyey - centery) < GLMAT_EPSILON &&
+        Math.abs(eyez - centerz) < GLMAT_EPSILON) {
+        return mat4.identity(out);
+    }
+
+    z0 = eyex - centerx;
+    z1 = eyey - centery;
+    z2 = eyez - centerz;
+
+    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
+    z0 *= len;
+    z1 *= len;
+    z2 *= len;
+
+    x0 = upy * z2 - upz * z1;
+    x1 = upz * z0 - upx * z2;
+    x2 = upx * z1 - upy * z0;
+    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
+    if (!len) {
+        x0 = 0;
+        x1 = 0;
+        x2 = 0;
+    } else {
+        len = 1 / len;
+        x0 *= len;
+        x1 *= len;
+        x2 *= len;
+    }
+
+    y0 = z1 * x2 - z2 * x1;
+    y1 = z2 * x0 - z0 * x2;
+    y2 = z0 * x1 - z1 * x0;
+
+    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
+    if (!len) {
+        y0 = 0;
+        y1 = 0;
+        y2 = 0;
+    } else {
+        len = 1 / len;
+        y0 *= len;
+        y1 *= len;
+        y2 *= len;
+    }
+
+    out[0] = x0;
+    out[1] = y0;
+    out[2] = z0;
+    out[3] = 0;
+    out[4] = x1;
+    out[5] = y1;
+    out[6] = z1;
+    out[7] = 0;
+    out[8] = x2;
+    out[9] = y2;
+    out[10] = z2;
+    out[11] = 0;
+    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
+    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
+    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
+    out[15] = 1;
+
+    return out;
+};
+
+/**
+ * Returns a string representation of a mat4
+ *
+ * @param {mat4} mat matrix to represent as a string
+ * @returns {String} string representation of the matrix
+ */
+mat4.str = function (a) {
+    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
+                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
+                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + 
+                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
+};
+
+/**
+ * Returns Frobenius norm of a mat4
+ *
+ * @param {mat4} a the matrix to calculate Frobenius norm of
+ * @returns {Number} Frobenius norm
+ */
+mat4.frob = function (a) {
+    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))
+};
+
+
+if(typeof(exports) !== 'undefined') {
+    exports.mat4 = mat4;
+}
+;
+/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+  * Redistributions of source code must retain the above copyright notice, this
+    list of conditions and the following disclaimer.
+  * Redistributions in binary form must reproduce the above copyright notice,
+    this list of conditions and the following disclaimer in the documentation 
+    and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
+
+/**
+ * @class Quaternion
+ * @name quat
+ */
+
+var quat = {};
+
+/**
+ * Creates a new identity quat
+ *
+ * @returns {quat} a new quaternion
+ */
+quat.create = function() {
+    var out = new GLMAT_ARRAY_TYPE(4);
+    out[0] = 0;
+    out[1] = 0;
+    out[2] = 0;
+    out[3] = 1;
+    return out;
+};
+
+/**
+ * Sets a quaternion to represent the shortest rotation from one
+ * vector to another.
+ *
+ * Both vectors are assumed to be unit length.
+ *
+ * @param {quat} out the receiving quaternion.
+ * @param {vec3} a the initial vector
+ * @param {vec3} b the destination vector
+ * @returns {quat} out
+ */
+quat.rotationTo = (function() {
+    var tmpvec3 = vec3.create();
+    var xUnitVec3 = vec3.fromValues(1,0,0);
+    var yUnitVec3 = vec3.fromValues(0,1,0);
+
+    return function(out, a, b) {
+        var dot = vec3.dot(a, b);
+        if (dot < -0.999999) {
+            vec3.cross(tmpvec3, xUnitVec3, a);
+            if (vec3.length(tmpvec3) < 0.000001)
+                vec3.cross(tmpvec3, yUnitVec3, a);
+            vec3.normalize(tmpvec3, tmpvec3);
+            quat.setAxisAngle(out, tmpvec3, Math.PI);
+            return out;
+        } else if (dot > 0.999999) {
+            out[0] = 0;
+            out[1] = 0;
+            out[2] = 0;
+            out[3] = 1;
+            return out;
+        } else {
+            vec3.cross(tmpvec3, a, b);
+            out[0] = tmpvec3[0];
+            out[1] = tmpvec3[1];
+            out[2] = tmpvec3[2];
+            out[3] = 1 + dot;
+            return quat.normalize(out, out);
+        }
+    };
+})();
+
+/**
+ * Sets the specified quaternion with values corresponding to the given
+ * axes. Each axis is a vec3 and is expected to be unit length and
+ * perpendicular to all other specified axes.
+ *
+ * @param {vec3} view  the vector representing the viewing direction
+ * @param {vec3} right the vector representing the local "right" direction
+ * @param {vec3} up    the vector representing the local "up" direction
+ * @returns {quat} out
+ */
+quat.setAxes = (function() {
+    var matr = mat3.create();
+
+    return function(out, view, right, up) {
+        matr[0] = right[0];
+        matr[3] = right[1];
+        matr[6] = right[2];
+
+        matr[1] = up[0];
+        matr[4] = up[1];
+        matr[7] = up[2];
+
+        matr[2] = -view[0];
+        matr[5] = -view[1];
+        matr[8] = -view[2];
+
+        return quat.normalize(out, quat.fromMat3(out, matr));
+    };
+})();
+
+/**
+ * Creates a new quat initialized with values from an existing quaternion
+ *
+ * @param {quat} a quaternion to clone
+ * @returns {quat} a new quaternion
+ * @function
+ */
+quat.clone = vec4.clone;
+
+/**
+ * Creates a new quat initialized with the given values
+ *
+ * @param {Number} x X component
+ * @param {Number} y Y component
+ * @param {Number} z Z component
+ * @param {Number} w W component
+ * @returns {quat} a new quaternion
+ * @function
+ */
+quat.fromValues = vec4.fromValues;
+
+/**
+ * Copy the values from one quat to another
+ *
+ * @param {quat} out the receiving quaternion
+ * @param {quat} a the source quaternion
+ * @returns {quat} out
+ * @function
+ */
+quat.copy = vec4.copy;
+
+/**
+ * Set the components of a quat to the given values
+ *
+ * @param {quat} out the receiving quaternion
+ * @param {Number} x X component
+ * @param {Number} y Y component
+ * @param {Number} z Z component
+ * @param {Number} w W component
+ * @returns {quat} out
+ * @function
+ */
+quat.set = vec4.set;
+
+/**
+ * Set a quat to the identity quaternion
+ *
+ * @param {quat} out the receiving quaternion
+ * @returns {quat} out
+ */
+quat.identity = function(out) {
+    out[0] = 0;
+    out[1] = 0;
+    out[2] = 0;
+    out[3] = 1;
+    return out;
+};
+
+/**
+ * Sets a quat from the given angle and rotation axis,
+ * then returns it.
+ *
+ * @param {quat} out the receiving quaternion
+ * @param {vec3} axis the axis around which to rotate
+ * @param {Number} rad the angle in radians
+ * @returns {quat} out
+ **/
+quat.setAxisAngle = function(out, axis, rad) {
+    rad = rad * 0.5;
+    var s = Math.sin(rad);
+    out[0] = s * axis[0];
+    out[1] = s * axis[1];
+    out[2] = s * axis[2];
+    out[3] = Math.cos(rad);
+    return out;
+};
+
+/**
+ * Adds two quat's
+ *
+ * @param {quat} out the receiving quaternion
+ * @param {quat} a the first operand
+ * @param {quat} b the second operand
+ * @returns {quat} out
+ * @function
+ */
+quat.add = vec4.add;
+
+/**
+ * Multiplies two quat's
+ *
+ * @param {quat} out the receiving quaternion
+ * @param {quat} a the first operand
+ * @param {quat} b the second operand
+ * @returns {quat} out
+ */
+quat.multiply = function(out, a, b) {
+    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
+        bx = b[0], by = b[1], bz = b[2], bw = b[3];
+
+    out[0] = ax * bw + aw * bx + ay * bz - az * by;
+    out[1] = ay * bw + aw * by + az * bx - ax * bz;
+    out[2] = az * bw + aw * bz + ax * by - ay * bx;
+    out[3] = aw * bw - ax * bx - ay * by - az * bz;
+    return out;
+};
+
+/**
+ * Alias for {@link quat.multiply}
+ * @function
+ */
+quat.mul = quat.multiply;
+
+/**
+ * Scales a quat by a scalar number
+ *
+ * @param {quat} out the receiving vector
+ * @param {quat} a the vector to scale
+ * @param {Number} b amount to scale the vector by
+ * @returns {quat} out
+ * @function
+ */
+quat.scale = vec4.scale;
+
+/**
+ * Rotates a quaternion by the given angle about the X axis
+ *
+ * @param {quat} out quat receiving operation result
+ * @param {quat} a quat to rotate
+ * @param {number} rad angle (in radians) to rotate
+ * @returns {quat} out
+ */
+quat.rotateX = function (out, a, rad) {
+    rad *= 0.5; 
+
+    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
+        bx = Math.sin(rad), bw = Math.cos(rad);
+
+    out[0] = ax * bw + aw * bx;
+    out[1] = ay * bw + az * bx;
+    out[2] = az * bw - ay * bx;
+    out[3] = aw * bw - ax * bx;
+    return out;
+};
+
+/**
+ * Rotates a quaternion by the given angle about the Y axis
+ *
+ * @param {quat} out quat receiving operation result
+ * @param {quat} a quat to rotate
+ * @param {number} rad angle (in radians) to rotate
+ * @returns {quat} out
+ */
+quat.rotateY = function (out, a, rad) {
+    rad *= 0.5; 
+
+    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
+        by = Math.sin(rad), bw = Math.cos(rad);
+
+    out[0] = ax * bw - az * by;
+    out[1] = ay * bw + aw * by;
+    out[2] = az * bw + ax * by;
+    out[3] = aw * bw - ay * by;
+    return out;
+};
+
+/**
+ * Rotates a quaternion by the given angle about the Z axis
+ *
+ * @param {quat} out quat receiving operation result
+ * @param {quat} a quat to rotate
+ * @param {number} rad angle (in radians) to rotate
+ * @returns {quat} out
+ */
+quat.rotateZ = function (out, a, rad) {
+    rad *= 0.5; 
+
+    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
+        bz = Math.sin(rad), bw = Math.cos(rad);
+
+    out[0] = ax * bw + ay * bz;
+    out[1] = ay * bw - ax * bz;
+    out[2] = az * bw + aw * bz;
+    out[3] = aw * bw - az * bz;
+    return out;
+};
+
+/**
+ * Calculates the W component of a quat from the X, Y, and Z components.
+ * Assumes that quaternion is 1 unit in length.
+ * Any existing W component will be ignored.
+ *
+ * @param {quat} out the receiving quaternion
+ * @param {quat} a quat to calculate W component of
+ * @returns {quat} out
+ */
+quat.calculateW = function (out, a) {
+    var x = a[0], y = a[1], z = a[2];
+
+    out[0] = x;
+    out[1] = y;
+    out[2] = z;
+    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
+    return out;
+};
+
+/**
+ * Calculates the dot product of two quat's
+ *
+ * @param {quat} a the first operand
+ * @param {quat} b the second operand
+ * @returns {Number} dot product of a and b
+ * @function
+ */
+quat.dot = vec4.dot;
+
+/**
+ * Performs a linear interpolation between two quat's
+ *
+ * @param {quat} out the receiving quaternion
+ * @param {quat} a the first operand
+ * @param {quat} b the second operand
+ * @param {Number} t interpolation amount between the two inputs
+ * @returns {quat} out
+ * @function
+ */
+quat.lerp = vec4.lerp;
+
+/**
+ * Performs a spherical linear interpolation between two quat
+ *
+ * @param {quat} out the receiving quaternion
+ * @param {quat} a the first operand
+ * @param {quat} b the second operand
+ * @param {Number} t interpolation amount between the two inputs
+ * @returns {quat} out
+ */
+quat.slerp = function (out, a, b, t) {
+    // benchmarks:
+    //    http://jsperf.com/quaternion-slerp-implementations
+
+    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
+        bx = b[0], by = b[1], bz = b[2], bw = b[3];
+
+    var        omega, cosom, sinom, scale0, scale1;
+
+    // calc cosine
+    cosom = ax * bx + ay * by + az * bz + aw * bw;
+    // adjust signs (if necessary)
+    if ( cosom < 0.0 ) {
+        cosom = -cosom;
+        bx = - bx;
+        by = - by;
+        bz = - bz;
+        bw = - bw;
+    }
+    // calculate coefficients
+    if ( (1.0 - cosom) > 0.000001 ) {
+        // standard case (slerp)
+        omega  = Math.acos(cosom);
+        sinom  = Math.sin(omega);
+        scale0 = Math.sin((1.0 - t) * omega) / sinom;
+        scale1 = Math.sin(t * omega) / sinom;
+    } else {        
+        // "from" and "to" quaternions are very close 
+        //  ... so we can do a linear interpolation
+        scale0 = 1.0 - t;
+        scale1 = t;
+    }
+    // calculate final values
+    out[0] = scale0 * ax + scale1 * bx;
+    out[1] = scale0 * ay + scale1 * by;
+    out[2] = scale0 * az + scale1 * bz;
+    out[3] = scale0 * aw + scale1 * bw;
+    
+    return out;
+};
+
+/**
+ * Calculates the inverse of a quat
+ *
+ * @param {quat} out the receiving quaternion
+ * @param {quat} a quat to calculate inverse of
+ * @returns {quat} out
+ */
+quat.invert = function(out, a) {
+    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
+        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,
+        invDot = dot ? 1.0/dot : 0;
+    
+    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
+
+    out[0] = -a0*invDot;
+    out[1] = -a1*invDot;
+    out[2] = -a2*invDot;
+    out[3] = a3*invDot;
+    return out;
+};
+
+/**
+ * Calculates the conjugate of a quat
+ * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
+ *
+ * @param {quat} out the receiving quaternion
+ * @param {quat} a quat to calculate conjugate of
+ * @returns {quat} out
+ */
+quat.conjugate = function (out, a) {
+    out[0] = -a[0];
+    out[1] = -a[1];
+    out[2] = -a[2];
+    out[3] = a[3];
+    return out;
+};
+
+/**
+ * Calculates the length of a quat
+ *
+ * @param {quat} a vector to calculate length of
+ * @returns {Number} length of a
+ * @function
+ */
+quat.length = vec4.length;
+
+/**
+ * Alias for {@link quat.length}
+ * @function
+ */
+quat.len = quat.length;
+
+/**
+ * Calculates the squared length of a quat
+ *
+ * @param {quat} a vector to calculate squared length of
+ * @returns {Number} squared length of a
+ * @function
+ */
+quat.squaredLength = vec4.squaredLength;
+
+/**
+ * Alias for {@link quat.squaredLength}
+ * @function
+ */
+quat.sqrLen = quat.squaredLength;
+
+/**
+ * Normalize a quat
+ *
+ * @param {quat} out the receiving quaternion
+ * @param {quat} a quaternion to normalize
+ * @returns {quat} out
+ * @function
+ */
+quat.normalize = vec4.normalize;
+
+/**
+ * Creates a quaternion from the given 3x3 rotation matrix.
+ *
+ * NOTE: The resultant quaternion is not normalized, so you should be sure
+ * to renormalize the quaternion yourself where necessary.
+ *
+ * @param {quat} out the receiving quaternion
+ * @param {mat3} m rotation matrix
+ * @returns {quat} out
+ * @function
+ */
+quat.fromMat3 = function(out, m) {
+    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
+    // article "Quaternion Calculus and Fast Animation".
+    var fTrace = m[0] + m[4] + m[8];
+    var fRoot;
+
+    if ( fTrace > 0.0 ) {
+        // |w| > 1/2, may as well choose w > 1/2
+        fRoot = Math.sqrt(fTrace + 1.0);  // 2w
+        out[3] = 0.5 * fRoot;
+        fRoot = 0.5/fRoot;  // 1/(4w)
+        out[0] = (m[5]-m[7])*fRoot;
+        out[1] = (m[6]-m[2])*fRoot;
+        out[2] = (m[1]-m[3])*fRoot;
+    } else {
+        // |w| <= 1/2
+        var i = 0;
+        if ( m[4] > m[0] )
+          i = 1;
+        if ( m[8] > m[i*3+i] )
+          i = 2;
+        var j = (i+1)%3;
+        var k = (i+2)%3;
+        
+        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);
+        out[i] = 0.5 * fRoot;
+        fRoot = 0.5 / fRoot;
+        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;
+        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;
+        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;
+    }
+    
+    return out;
+};
+
+/**
+ * Returns a string representation of a quatenion
+ *
+ * @param {quat} vec vector to represent as a string
+ * @returns {String} string representation of the vector
+ */
+quat.str = function (a) {
+    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
+};
+
+if(typeof(exports) !== 'undefined') {
+    exports.quat = quat;
+}
+;
+
+
+
+
+
+
+
+
+
+
+
+
+
+  })(shim.exports);
+})(this);
diff --git a/browser/devtools/shadereditor/modules/gl-utils.js b/browser/devtools/shadereditor/modules/gl-utils.js
new file mode 100644
index 0000000..dfcb907
--- /dev/null
+++ b/browser/devtools/shadereditor/modules/gl-utils.js
@@ -0,0 +1,233 @@
+const { mat3 } = require("./gl-matrix");
+const { defer } = require("sdk/core/promise");
+const DEFAULT_TEXTURE = "chrome://browser/content/devtools/shadereditor/texture.png";
+
+exports.loadTexture = function (gl, Image, url=DEFAULT_TEXTURE) {
+  let { resolve, promise } = defer();
+
+  let texture = gl.createTexture();
+  let image = new Image();
+  image.onload = function () {
+    gl.bindTexture(gl.TEXTURE_2D, texture);
+    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
+    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
+    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
+    gl.generateMipmap(gl.TEXTURE_2D);
+    gl.bindTexture(gl.TEXTURE_2D, null);
+    resolve(texture);
+  };
+  image.src = url;
+
+  return promise;
+};
+
+exports.createCubeBuffers = function (gl) {
+  // Create a buffer for the cube's vertices.
+  let cubeVerticesBuffer = gl.createBuffer();
+
+  // Select the cubeVerticesBuffer as the one to apply vertex
+  // operations to from here out.
+  gl.bindBuffer(gl.ARRAY_BUFFER, cubeVerticesBuffer);
+
+  // Now create an array of vertices for the cube.
+  let vertices = [
+    // Front face
+    -1.0, -1.0,  1.0,
+     1.0, -1.0,  1.0,
+     1.0,  1.0,  1.0,
+    -1.0,  1.0,  1.0,
+
+    // Back face
+    -1.0, -1.0, -1.0,
+    -1.0,  1.0, -1.0,
+     1.0,  1.0, -1.0,
+     1.0, -1.0, -1.0,
+
+    // Top face
+    -1.0,  1.0, -1.0,
+    -1.0,  1.0,  1.0,
+     1.0,  1.0,  1.0,
+     1.0,  1.0, -1.0,
+
+    // Bottom face
+    -1.0, -1.0, -1.0,
+     1.0, -1.0, -1.0,
+     1.0, -1.0,  1.0,
+    -1.0, -1.0,  1.0,
+
+    // Right face
+     1.0, -1.0, -1.0,
+     1.0,  1.0, -1.0,
+     1.0,  1.0,  1.0,
+     1.0, -1.0,  1.0,
+
+    // Left face
+    -1.0, -1.0, -1.0,
+    -1.0, -1.0,  1.0,
+    -1.0,  1.0,  1.0,
+    -1.0,  1.0, -1.0
+  ];
+
+  // Now pass the list of vertices into WebGL to build the shape. We
+  // do this by creating a Float32Array from the JavaScript array,
+  // then use it to fill the current vertex buffer.
+  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
+
+  // Set up the normals for the vertices, so that we can compute lighting.
+  let cubeVerticesNormalBuffer = gl.createBuffer();
+  gl.bindBuffer(gl.ARRAY_BUFFER, cubeVerticesNormalBuffer);
+
+  var vertexNormals = [
+    // Front
+     0.0,  0.0,  1.0,
+     0.0,  0.0,  1.0,
+     0.0,  0.0,  1.0,
+     0.0,  0.0,  1.0,
+
+    // Back
+     0.0,  0.0, -1.0,
+     0.0,  0.0, -1.0,
+     0.0,  0.0, -1.0,
+     0.0,  0.0, -1.0,
+
+    // Top
+     0.0,  1.0,  0.0,
+     0.0,  1.0,  0.0,
+     0.0,  1.0,  0.0,
+     0.0,  1.0,  0.0,
+
+    // Bottom
+     0.0, -1.0,  0.0,
+     0.0, -1.0,  0.0,
+     0.0, -1.0,  0.0,
+     0.0, -1.0,  0.0,
+
+    // Right
+     1.0,  0.0,  0.0,
+     1.0,  0.0,  0.0,
+     1.0,  0.0,  0.0,
+     1.0,  0.0,  0.0,
+
+    // Left
+    -1.0,  0.0,  0.0,
+    -1.0,  0.0,  0.0,
+    -1.0,  0.0,  0.0,
+    -1.0,  0.0,  0.0
+  ];
+
+  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexNormals), gl.STATIC_DRAW);
+
+  // Map the texture onto the cube's faces.
+
+  let cubeVerticesTextureCoordBuffer = gl.createBuffer();
+  gl.bindBuffer(gl.ARRAY_BUFFER, cubeVerticesTextureCoordBuffer);
+
+  let textureCoordinates = [
+    // Front
+    0.0,  0.0,
+    1.0,  0.0,
+    1.0,  1.0,
+    0.0,  1.0,
+    // Back
+    0.0,  0.0,
+    1.0,  0.0,
+    1.0,  1.0,
+    0.0,  1.0,
+    // Top
+    0.0,  0.0,
+    1.0,  0.0,
+    1.0,  1.0,
+    0.0,  1.0,
+    // Bottom
+    0.0,  0.0,
+    1.0,  0.0,
+    1.0,  1.0,
+    0.0,  1.0,
+    // Right
+    0.0,  0.0,
+    1.0,  0.0,
+    1.0,  1.0,
+    0.0,  1.0,
+    // Left
+    0.0,  0.0,
+    1.0,  0.0,
+    1.0,  1.0,
+    0.0,  1.0
+  ];
+
+  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates),
+                gl.STATIC_DRAW);
+
+  // Build the element array buffer; this specifies the indices
+  // into the vertex array for each face's vertices.
+
+  let cubeVerticesIndexBuffer = gl.createBuffer();
+  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVerticesIndexBuffer);
+
+  // This array defines each face as two triangles, using the
+  // indices into the vertex array to specify each triangle's
+  // position.
+
+  let cubeVertexIndices = [
+    0,  1,  2,      0,  2,  3,    // front
+    4,  5,  6,      4,  6,  7,    // back
+    8,  9,  10,     8,  10, 11,   // top
+    12, 13, 14,     12, 14, 15,   // bottom
+    16, 17, 18,     16, 18, 19,   // right
+    20, 21, 22,     20, 22, 23    // left
+  ]
+
+  // Now send the element array to GL
+
+  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,
+      new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW);
+
+  return {
+    vertices: cubeVerticesBuffer,
+    verticesTextureCoordinates: cubeVerticesTextureCoordBuffer,
+    verticesNormal: cubeVerticesNormalBuffer,
+    verticesIndex: cubeVerticesIndexBuffer 
+  };
+};
+
+exports.setMatrixUniforms = function (gl, program, pMatrix, mvMatrix) {
+  let normalMatrix = mat3.create();
+  let pUniform = gl.getUniformLocation(program, "uPMatrix");
+  let mvUniform = gl.getUniformLocation(program, "uMVMatrix");
+  gl.uniformMatrix4fv(pUniform, false, pMatrix);
+  gl.uniformMatrix4fv(mvUniform, false, mvMatrix);
+
+  let nUniform = gl.getUniformLocation(program, "uNormalMatrix");
+  mat3.normalFromMat4(normalMatrix, mvMatrix);
+  mat3.transpose(normalMatrix, normalMatrix);
+  gl.uniformMatrix3fv(nUniform, false, normalMatrix);
+};
+
+exports.loadShaders = function (gl, { vs: vsSource, fs: fsSource }) {
+  let fs = gl.createShader(gl.FRAGMENT_SHADER);
+  let vs = gl.createShader(gl.VERTEX_SHADER);
+  let program = gl.createProgram();
+
+  gl.shaderSource(fs, fsSource);
+  gl.shaderSource(vs, vsSource);
+
+  gl.compileShader(fs);
+  gl.compileShader(vs);
+
+  gl.attachShader(program, fs);
+  gl.attachShader(program, vs);
+  gl.linkProgram(program);
+
+  gl.useProgram(program);
+
+  program.vertexPositionAttribute = gl.getAttribLocation(program, "aVertexPosition");
+  gl.enableVertexAttribArray(program.vertexPositionAttribute);
+
+  program.textureCoordAttribute = gl.getAttribLocation(program, "aTextureCoord");
+  gl.enableVertexAttribArray(program.textureCoordAttribute);
+
+  program.vertexNormalAttribute = gl.getAttribLocation(program, "aVertexNormal");
+  gl.enableVertexAttribArray(program.vertexNormalAttribute);
+
+  return { vs, fs, program };
+};
diff --git a/browser/devtools/shadereditor/moz.build b/browser/devtools/shadereditor/moz.build
index 34121e1..4694fb3 100644
--- a/browser/devtools/shadereditor/moz.build
+++ b/browser/devtools/shadereditor/moz.build
@@ -1,10 +1,12 @@
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 EXTRA_JS_MODULES.devtools.shadereditor += [
+    'modules/gl-matrix.js',
+    'modules/gl-utils.js',
     'panel.js'
 ]
 
 BROWSER_CHROME_MANIFESTS += ['test/browser.ini']
diff --git a/browser/devtools/shadereditor/render.js b/browser/devtools/shadereditor/render.js
new file mode 100644
index 0000000..ede58c6
--- /dev/null
+++ b/browser/devtools/shadereditor/render.js
@@ -0,0 +1,100 @@
+const { loadTexture, setMatrixUniforms, loadShaders, createCubeBuffers } = require("devtools/shadereditor/gl-utils");
+const { mat4, vec3 } = require("devtools/shadereditor/gl-matrix");
+const { DOM } = require("devtools/tilt/tilt-utils");
+const ROTATE_CONSTANT = 2;
+
+let RenderView = {
+  initialize: function () {
+    let pane = $("#render-pane");
+    let canvas = DOM.initCanvas(pane, { append: true, width: 200, height: 200 });
+    this.render = this.render.bind(this);
+
+    try {
+      this.gl = canvas.getContext("webgl");
+      this.gl.viewportWidth = canvas.width;
+      this.gl.viewportHeight = canvas.height;
+      this.gl.viewport(0, 0, canvas.width, canvas.height);
+    } catch (e) {
+      this.UNSUPPORTED = true;
+    }
+  },
+
+  destroy: function () {
+
+  },
+
+  reset: function () {
+    this.gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque
+    this.gl.clearDepth(1.0);                 // Clear everything
+    this.gl.enable(this.gl.DEPTH_TEST);      // Enable depth testing
+    this.gl.depthFunc(this.gl.LEQUAL);       // Near things obscure far things
+  },
+
+  load: Task.async(function *(source) {
+    let { program, vs, fs } = loadShaders(this.gl, source);
+    this.buffers = createCubeBuffers(this.gl);
+    this.texture = yield loadTexture(this.gl, Image);
+
+    this.program = program;
+    this.pMatrix = mat4.create();
+    this.mvMatrix = mat4.create();
+  }),
+
+  play: function () {
+    this.reset();
+
+    this.rotation = 0;
+    this.time = Date.now();
+    this.raf = window.requestAnimationFrame(this.render);
+  },
+
+  stop: function () {
+    if (this.raf) {
+
+    }
+  },
+
+  render: function () {
+    let gl = this.gl;
+    let program = this.program;
+    let buffers = this.buffers;
+    
+    let now = Date.now();
+    let delta = now - this.time;
+    this.rotation += (ROTATE_CONSTANT * delta) / 1000;
+
+    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
+    gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
+    mat4.perspective(this.pMatrix, 45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0);
+
+    mat4.identity(this.mvMatrix);
+    mat4.translate(this.mvMatrix, this.mvMatrix, [0, 0, -6]);
+    mat4.rotate(this.mvMatrix, this.mvMatrix, this.rotation * Math.PI / 180, [1, 0, 1]);
+
+    // Draw the cube by binding the array buffer to the cube's vertices
+    // array, setting attributes, and pushing it to GL
+    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.vertices);
+    gl.vertexAttribPointer(program.vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);
+    
+    // Set the texture coordinates attribute for the vertices
+    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.verticesTextureCoordinates);
+    gl.vertexAttribPointer(program.textureCoordAttribute, 2, gl.FLOAT, false, 0, 0);
+
+    // Bind the normals buffer to the shader attribute
+    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.verticesNormal);
+    gl.vertexAttribPointer(program.vertexNormalAttribute, 3, gl.FLOAT, false, 0, 0);
+
+    // Specify the texture to map onto the faces
+    gl.activeTexture(gl.TEXTURE0);
+    gl.bindTexture(gl.TEXTURE_2D, this.texture);
+    gl.uniform1i(gl.getUniformLocation(program, "uSampler"), 0);
+
+    // Draw the cube
+    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.verticesIndex);
+    setMatrixUniforms(gl, program, this.pMatrix, this.mvMatrix);
+    gl.drawElements(gl.TRIANGLES, 36, gl.UNSIGNED_SHORT, 0);
+
+    this.raf = window.requestAnimationFrame(this.render);
+  },
+};
+
diff --git a/browser/devtools/shadereditor/shadereditor.js b/browser/devtools/shadereditor/shadereditor.js
index ec6eafe..23afb03 100644
--- a/browser/devtools/shadereditor/shadereditor.js
+++ b/browser/devtools/shadereditor/shadereditor.js
@@ -57,28 +57,30 @@ let gToolbox, gTarget, gFront;
 
 /**
  * Initializes the shader editor controller and views.
  */
 function startupShaderEditor() {
   return promise.all([
     EventsHandler.initialize(),
     ShadersListView.initialize(),
-    ShadersEditorsView.initialize()
+    ShadersEditorsView.initialize(),
+    RenderView.initialize()
   ]);
 }
 
 /**
  * Destroys the shader editor controller and views.
  */
 function shutdownShaderEditor() {
   return promise.all([
     EventsHandler.destroy(),
     ShadersListView.destroy(),
-    ShadersEditorsView.destroy()
+    ShadersEditorsView.destroy(),
+    RenderView.destroy()
   ]);
 }
 
 /**
  * Functions handling target-related lifetime events.
  */
 let EventsHandler = {
   /**
@@ -295,22 +297,29 @@ let ShadersListView = Heritage.extend(WidgetMethods, {
         vertexShaderActor.getText(),
         fragmentShaderActor.getText()
       ]);
     }
     function showSources([vertexShaderText, fragmentShaderText]) {
       return ShadersEditorsView.setText({
         vs: vertexShaderText,
         fs: fragmentShaderText
-      });
+      }).then(() => ({ fs: fragmentShaderText, vs: vertexShaderText }));
     }
+    let renderShader = Task.async(function* ({ vs, fs }) {
+      console.log("loading via shadereditor.js");
+      yield RenderView.load({ vs, fs });
+      console.log("playing from shadereditor.js");
+      RenderView.play();
+    });
 
     getShaders()
       .then(getSources)
       .then(showSources)
+      .then(renderShader)
       .then(null, Cu.reportError);
   },
 
   /**
    * The check listener for the programs container.
    */
   _onProgramCheck: function({ detail: { checked }, target }) {
     let sourceItem = this.getItemForElement(target);
diff --git a/browser/devtools/shadereditor/shadereditor.xul b/browser/devtools/shadereditor/shadereditor.xul
index e89fc76..814df28 100644
--- a/browser/devtools/shadereditor/shadereditor.xul
+++ b/browser/devtools/shadereditor/shadereditor.xul
@@ -13,16 +13,17 @@
 ]>
 
 <window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
 
   <script type="application/javascript;version=1.8"
           src="chrome://browser/content/devtools/theme-switching.js"/>
 
   <script type="application/javascript" src="shadereditor.js"/>
+  <script type="application/javascript" src="shadereditor/render.js"/>
 
   <vbox class="theme-body" flex="1">
     <hbox id="reload-notice"
           class="notice-container"
           align="center"
           pack="center"
           flex="1">
       <button id="requests-menu-reload-notice-button"
@@ -61,12 +62,14 @@
         <splitter id="editors-splitter" class="devtools-side-splitter"/>
         <vbox flex="1">
           <vbox id="fs-editor" flex="1"/>
           <label id="fs-editor-label"
                  class="plain editor-label"
                  value="&shaderEditorUI.fragmentShader;"/>
         </vbox>
       </box>
+      <splitter class="devtools-side-splitter"/>
+      <vbox id="render-pane" />
     </box>
   </vbox>
 
 </window>
diff --git a/browser/devtools/shadereditor/texture.png b/browser/devtools/shadereditor/texture.png
new file mode 100644
index 0000000000000000000000000000000000000000..3c9dc80fb86ad4f3fcbf648234935cb58d9df38e
GIT binary patch
literal 83920
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

literal 0
HcmV?d00001

diff --git a/browser/themes/shared/devtools/shadereditor.inc.css b/browser/themes/shared/devtools/shadereditor.inc.css
index 6d961c1..2086366 100644
--- a/browser/themes/shared/devtools/shadereditor.inc.css
+++ b/browser/themes/shared/devtools/shadereditor.inc.css
@@ -112,8 +112,12 @@
     background-image: none !important;
   }
 
   .editor-label {
     -moz-box-ordinal-group: 0;
     border-bottom: 1px solid;
   }
 }
+
+#render-pane {
+  width: 200px;
+}
-- 
2.2.1

