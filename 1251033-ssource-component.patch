From: Jordan Santell <jsantell@mozilla.com>
Date: Tue, 8 Mar 2016 23:43:24 -0800
Subject: Bug 1251033 - Part 4 - Integrate Frame component in webconsole. r=linclark

diff --git a/devtools/client/themes/webconsole.css b/devtools/client/themes/webconsole.css
index f5edf47..e804f88 100644
--- a/devtools/client/themes/webconsole.css
+++ b/devtools/client/themes/webconsole.css
@@ -97,24 +97,18 @@ a {
   white-space: nowrap;
 }
 
 .message-location:hover,
 .message-location:focus {
   text-decoration: underline;
 }
 
-.message-location > .filename {
-  text-overflow: ellipsis;
-  text-align: end;
-  overflow: hidden;
-}
-
-.message-location > .line-number {
-  flex: none;
+.message-location > .frame-link {
+  width: 10em;
 }
 
 .message-flex-body {
   display: flex;
 }
 
 .message-body > * {
   white-space: pre-wrap;
diff --git a/devtools/client/webconsole/console-output.js b/devtools/client/webconsole/console-output.js
index d1318e1..69e332e 100644
--- a/devtools/client/webconsole/console-output.js
+++ b/devtools/client/webconsole/console-output.js
@@ -3662,18 +3662,17 @@ Widgets.Stacktrace.prototype = Heritage.extend(Widgets.BaseWidget.prototype,
       fn.appendChild(span);
       fn.appendChild(this.document.createTextNode("()"));
     } else {
       fn.classList.add("cm-comment");
       fn.textContent = asyncCause + l10n.getStr("stacktrace.anonymousFunction");
     }
 
     let location = this.output.owner.createLocationNode({url: frame.filename,
-                                                        line: frame.lineNumber},
-                                                        "jsdebugger");
+                                                        line: frame.lineNumber});
 
     // .devtools-monospace sets font-size to 80%, however .body already has
     // .devtools-monospace. If we keep it here, the location would be rendered
     // smaller.
     location.classList.remove("devtools-monospace");
 
     let elem = this.document.createElementNS(XHTML_NS, "li");
     elem.appendChild(fn);
diff --git a/devtools/client/webconsole/test/browser_console_addonsdk_loader_exception.js b/devtools/client/webconsole/test/browser_console_addonsdk_loader_exception.js
index 1a49f87..5ddee3d 100644
--- a/devtools/client/webconsole/test/browser_console_addonsdk_loader_exception.js
+++ b/devtools/client/webconsole/test/browser_console_addonsdk_loader_exception.js
@@ -52,22 +52,22 @@ function test() {
         severity: SEVERITY_ERROR,
       }],
     });
 
     fixToolbox();
 
     let msg = [...result.matched][0];
     ok(msg, "message element found");
-    let locationNode = msg.querySelector(".message > .message-location");
+    let locationNode = msg.querySelector(".message > .message-location > .frame-link");
     ok(locationNode, "message location element found");
 
-    let title = locationNode.getAttribute("title");
-    info("location node title: " + title);
-    isnot(title.indexOf(" -> "), -1, "error comes from a subscript");
+    let url = locationNode.getAttribute("data-url");
+    info("location node url: " + url);
+    ok(url.indexOf("resource://") === 0, "error comes from a subscript");
 
     let viewSource = browserconsole.viewSource;
     let URL = null;
     let clickPromise = promise.defer();
     browserconsole.viewSourceInDebugger = (aURL) => {
       info("browserconsole.viewSourceInDebugger() was invoked: " + aURL);
       URL = aURL;
       clickPromise.resolve(null);
diff --git a/devtools/client/webconsole/test/browser_console_error_source_click.js b/devtools/client/webconsole/test/browser_console_error_source_click.js
index 8023fc1..b359654 100644
--- a/devtools/client/webconsole/test/browser_console_error_source_click.js
+++ b/devtools/client/webconsole/test/browser_console_error_source_click.js
@@ -56,17 +56,17 @@ function test() {
     let viewSourceCalled = false;
     hud.viewSourceInDebugger = () => viewSourceCalled = true;
 
     for (let result of results) {
       viewSourceCalled = false;
 
       let msg = [...results[0].matched][0];
       ok(msg, "message element found for: " + result.text);
-      let locationNode = msg.querySelector(".message > .message-location");
+      let locationNode = msg.querySelector(".message > .message-location .frame-link-filename");
       ok(locationNode, "message location element found");
 
       EventUtils.synthesizeMouse(locationNode, 2, 2, {}, hud.iframeWindow);
 
       ok(viewSourceCalled, "view source opened");
     }
 
     hud.viewSourceInDebugger = viewSource;
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_587617_output_copy.js b/devtools/client/webconsole/test/browser_webconsole_bug_587617_output_copy.js
index 4182de7..a0733e2 100644
--- a/devtools/client/webconsole/test/browser_webconsole_bug_587617_output_copy.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_587617_output_copy.js
@@ -49,25 +49,27 @@ function consoleOpened(aHud) {
 
     outputNode.focus();
 
     goUpdateCommand("cmd_copy");
     controller = top.document.commandDispatcher
                              .getControllerForCommand("cmd_copy");
     is(controller.isCommandEnabled("cmd_copy"), true, "cmd_copy is enabled");
 
-    // Remove new lines since getSelection() includes one between message and
-    // line number, but the clipboard doesn't (see bug 1119503)
+    // Remove new lines and whitespace since getSelection() includes
+    // a new line between message and line number, but the clipboard doesn't
+    // @see bug 1119503
     let selection = (HUD.iframeWindow.getSelection() + "")
-      .replace(/\r?\n|\r/g, " ");
+      .replace(/\r?\n|\r| /g, "");
     isnot(selection.indexOf("bug587617"), -1,
           "selection text includes 'bug587617'");
 
     waitForClipboard((str) => {
-      return selection.trim() == str.trim();
+      // Strip out spaces for comparison ease
+      return selection.trim() == str.trim().replace(/ /g, "");
     }, () => {
       goDoCommand("cmd_copy");
     }, deferred.resolve, deferred.resolve);
   });
   return deferred.promise;
 }
 
 // Test that the context menu "Copy" (which has a different code path) works
@@ -77,24 +79,26 @@ function testContextMenuCopy() {
 
   let contextMenuId = HUD.ui.outputWrapper.getAttribute("context");
   let contextMenu = HUD.ui.document.getElementById(contextMenuId);
   ok(contextMenu, "the output node has a context menu");
 
   let copyItem = contextMenu.querySelector("*[command='cmd_copy']");
   ok(copyItem, "the context menu on the output node has a \"Copy\" item");
 
-  // Remove new lines since getSelection() includes one between message and line
-  // number, but the clipboard doesn't (see bug 1119503)
+  // Remove new lines and whitespace since getSelection() includes
+  // a new line between message and line number, but the clipboard doesn't
+  // @see bug 1119503
   let selection = (HUD.iframeWindow.getSelection() + "")
-    .replace(/\r?\n|\r/g, " ");
+    .replace(/\r?\n|\r| /g, "");
 
   copyItem.doCommand();
 
   waitForClipboard((str) => {
-    return selection.trim() == str.trim();
+    // Strip out spaces for comparison ease
+    return selection.trim() == str.trim().replace(/ /g, "");
   }, () => {
     goDoCommand("cmd_copy");
   }, deferred.resolve, deferred.resolve);
   HUD = outputNode = null;
 
   return deferred.promise;
 }
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_613280_jsterm_copy.js b/devtools/client/webconsole/test/browser_webconsole_bug_613280_jsterm_copy.js
index 7418ef1..b7e9ee7 100644
--- a/devtools/client/webconsole/test/browser_webconsole_bug_613280_jsterm_copy.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_613280_jsterm_copy.js
@@ -63,19 +63,20 @@ function performTest(HUD, [result]) {
   HUD.outputNode.focus();
 
   goUpdateCommand("cmd_copy");
 
   controller = top.document.commandDispatcher
                            .getControllerForCommand("cmd_copy");
   is(controller.isCommandEnabled("cmd_copy"), true, "cmd_copy is enabled");
 
-  // Remove new lines since getSelection() includes one between message and line
-  // number, but the clipboard doesn't (see bug 1119503)
+  // Remove new lines and whitespace since getSelection() includes
+  // a new line between message and line number, but the clipboard doesn't
+  // @see bug 1119503
   let selectionText = (HUD.iframeWindow.getSelection() + "")
-    .replace(/\r?\n|\r/g, " ");
+    .replace(/\r?\n|\r| /g, "");
   isnot(selectionText.indexOf("foobarBazBug613280"), -1,
         "selection text includes 'foobarBazBug613280'");
 
   waitForClipboard((str) => {
-    return str.trim() == selectionText.trim();
+    return selectionText.trim() === str.trim().replace(/ /g, "");
   }, clipboardSetup, clipboardCopyDone, clipboardCopyDone);
 }
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_766001_JS_Console_in_Debugger.js b/devtools/client/webconsole/test/browser_webconsole_bug_766001_JS_Console_in_Debugger.js
index b8237b0..a2c28f0 100644
--- a/devtools/client/webconsole/test/browser_webconsole_bug_766001_JS_Console_in_Debugger.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_766001_JS_Console_in_Debugger.js
@@ -38,41 +38,41 @@ function test() {
         text: "Blah Blah",
         category: CATEGORY_WEBDEV,
         severity: SEVERITY_LOG,
       }],
     });
 
     let exceptionMsg = [...exceptionRule.matched][0];
     let consoleMsg = [...consoleRule.matched][0];
-    let nodes = [exceptionMsg.querySelector(".message-location"),
-                 consoleMsg.querySelector(".message-location")];
+    let nodes = [exceptionMsg.querySelector(".message-location > .frame-link"),
+                 consoleMsg.querySelector(".message-location > .frame-link")];
     ok(nodes[0], ".location node for the exception message");
     ok(nodes[1], ".location node for the console message");
 
     for (let i = 0; i < nodes.length; i++) {
       yield checkClickOnNode(i, nodes[i]);
       yield gDevTools.showToolbox(hud.target, "webconsole");
     }
 
     // check again the first node.
     yield checkClickOnNode(0, nodes[0]);
   }
 
   function* checkClickOnNode(index, node) {
     info("checking click on node index " + index);
 
-    let url = node.getAttribute("title");
+    let url = node.getAttribute("data-url");
     ok(url, "source url found for index " + index);
 
-    let line = node.sourceLine;
+    let line = node.getAttribute("data-line");
     ok(line, "found source line for index " + index);
 
     executeSoon(() => {
-      EventUtils.sendMouseEvent({ type: "click" }, node);
+      EventUtils.sendMouseEvent({ type: "click" }, node.querySelector(".frame-link-filename"));
     });
 
     yield hud.ui.once("source-in-debugger-opened");
 
     let toolbox = yield gDevTools.getToolbox(hud.target);
     let {panelWin: { DebuggerView: view }} = toolbox.getPanel("jsdebugger");
     is(view.Sources.selectedValue,
        getSourceActor(view.Sources, url),
diff --git a/devtools/client/webconsole/test/browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js b/devtools/client/webconsole/test/browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js
index 8f1ce15..a9196a0 100644
--- a/devtools/client/webconsole/test/browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js
+++ b/devtools/client/webconsole/test/browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js
@@ -34,29 +34,29 @@ function testViewSource() {
     {
       text: "'color'",
       category: CATEGORY_CSS,
       severity: SEVERITY_WARNING,
     }],
   }).then(([error1Rule, error2Rule]) => {
     let error1Msg = [...error1Rule.matched][0];
     let error2Msg = [...error2Rule.matched][0];
-    nodes = [error1Msg.querySelector(".message-location"),
-             error2Msg.querySelector(".message-location")];
-    ok(nodes[0], ".message-location node for the first error");
-    ok(nodes[1], ".message-location node for the second error");
+    nodes = [error1Msg.querySelector(".message-location .frame-link"),
+             error2Msg.querySelector(".message-location .frame-link")];
+    ok(nodes[0], ".frame-link node for the first error");
+    ok(nodes[1], ".frame-link node for the second error");
 
     let target = TargetFactory.forTab(gBrowser.selectedTab);
     let toolbox = gDevTools.getToolbox(target);
     toolbox.once("styleeditor-selected", (event, panel) => {
       StyleEditorUI = panel.UI;
       deferred.resolve(panel);
     });
 
-    EventUtils.sendMouseEvent({ type: "click" }, nodes[0]);
+    EventUtils.sendMouseEvent({ type: "click" }, nodes[0].querySelector(".frame-link-filename"));
   });
 
   return deferred.promise;
 }
 
 function onStyleEditorReady(panel) {
   let deferred = promise.defer();
 
@@ -66,34 +66,34 @@ function onStyleEditorReady(panel) {
 
   function fireEvent(toolbox, href, line) {
     toolbox.once("styleeditor-selected", function(evt) {
       info(evt + " event fired");
 
       checkStyleEditorForSheetAndLine(href, line - 1).then(deferred.resolve);
     });
 
-    EventUtils.sendMouseEvent({ type: "click" }, nodes[1]);
+    EventUtils.sendMouseEvent({ type: "click" }, nodes[1].querySelector(".frame-link-filename"));
   }
 
   waitForFocus(function() {
     info("style editor window focused");
 
-    let href = nodes[0].getAttribute("title");
-    let line = nodes[0].sourceLine;
+    let href = nodes[0].getAttribute("data-url");
+    let line = nodes[0].getAttribute("data-line");
     ok(line, "found source line");
 
     checkStyleEditorForSheetAndLine(href, line - 1).then(function() {
       info("first check done");
 
       let target = TargetFactory.forTab(gBrowser.selectedTab);
       let toolbox = gDevTools.getToolbox(target);
 
-      href = nodes[1].getAttribute("title");
-      line = nodes[1].sourceLine;
+      href = nodes[1].getAttribute("data-url");
+      line = nodes[1].getAttribute("data-line");
       ok(line, "found source line");
 
       toolbox.selectTool("webconsole").then(function() {
         info("webconsole selected");
         fireEvent(toolbox, href, line);
       });
     });
   }, win);
diff --git a/devtools/client/webconsole/test/browser_webconsole_scratchpad_panel_link.js b/devtools/client/webconsole/test/browser_webconsole_scratchpad_panel_link.js
index c805600..d7fd87a 100644
--- a/devtools/client/webconsole/test/browser_webconsole_scratchpad_panel_link.js
+++ b/devtools/client/webconsole/test/browser_webconsole_scratchpad_panel_link.js
@@ -53,17 +53,17 @@ add_task(function*() {
     webconsole: hud,
     messages: [{ text: "foobar-from-scratchpad" }]
   });
 
   info("Clicking link to switch to and focus Scratchpad");
 
   let [matched] = [...messages[0].matched];
   ok(matched, "Found logged message from Scratchpad");
-  let anchor = matched.querySelector("a.message-location");
+  let anchor = matched.querySelector(".message-location .frame-link-filename");
 
   toolbox.on("scratchpad-selected", function selected() {
     toolbox.off("scratchpad-selected", selected);
 
     is(toolbox.getCurrentPanel(), scratchpadPanel,
       "Clicking link switches to Scratchpad panel");
 
     is(Services.ww.activeWindow, toolbox.frame.ownerGlobal,
diff --git a/devtools/client/webconsole/test/browser_webconsole_view_source.js b/devtools/client/webconsole/test/browser_webconsole_view_source.js
index deda992..2a2e438 100644
--- a/devtools/client/webconsole/test/browser_webconsole_view_source.js
+++ b/devtools/client/webconsole/test/browser_webconsole_view_source.js
@@ -6,66 +6,46 @@
 // Tests that source URLs in the Web Console can be clicked to display the
 // standard View Source window.
 
 "use strict";
 
 const TEST_URI = "http://example.com/browser/devtools/client/webconsole/" +
                  "test/test-error.html";
 
-var getItemForAttachment;
-var Sources;
-var getItemInvoked = false;
-
 add_task(function*() {
   yield loadTab(TEST_URI);
   let hud = yield openConsole(null);
   info("console opened");
 
   let button = content.document.querySelector("button");
   ok(button, "we have the button on the page");
 
   // On e10s, the exception is triggered in child process
   // and is ignored by test harness
   if (!Services.appinfo.browserTabsRemoteAutostart) {
     expectUncaughtException();
   }
   EventUtils.sendMouseEvent({ type: "click" }, button, content);
 
-  let { panelWin: { DebuggerView } } = yield openDebugger();
-  info("debugger opened");
-  Sources = DebuggerView.Sources;
-  hud = yield openConsole();
-  info("console opened again");
-
   let [result] = yield waitForMessages({
     webconsole: hud,
     messages: [{
       text: "fooBazBaz is not defined",
       category: CATEGORY_JS,
       severity: SEVERITY_ERROR,
     }],
   });
 
   let msg = [...result.matched][0];
   ok(msg, "error message");
-  let locationNode = msg.querySelector(".message-location");
+  let locationNode = msg.querySelector(".message-location .frame-link-filename");
   ok(locationNode, "location node");
 
   let onTabOpen = waitForTab();
 
-  getItemForAttachment = Sources.getItemForAttachment;
-  Sources.getItemForAttachment = () => {
-    getItemInvoked = true;
-    return false;
-  };
-
   EventUtils.sendMouseEvent({ type: "click" }, locationNode);
 
   let tab = yield onTabOpen;
   ok(true, "the view source tab was opened in response to clicking " +
            "the location node");
   gBrowser.removeTab(tab);
-
-  ok(getItemInvoked, "custom getItemForAttachment() was invoked");
-  Sources.getItemForAttachment = getItemForAttachment;
-  Sources = getItemForAttachment = null;
 });
diff --git a/devtools/client/webconsole/test/head.js b/devtools/client/webconsole/test/head.js
index abe291b..8582bec 100644
--- a/devtools/client/webconsole/test/head.js
+++ b/devtools/client/webconsole/test/head.js
@@ -1065,26 +1065,26 @@ function waitForMessages(options) {
     }
     rule.category = CATEGORY_WEBDEV;
     rule.severity = SEVERITY_LOG;
 
     return true;
   }
 
   function checkSource(rule, element) {
-    let location = element.querySelector(".message-location");
+    let location = getRenderedSource(element);
     if (!location) {
       return false;
     }
 
-    if (!checkText(rule.source.url, location.getAttribute("title"))) {
+    if (!checkText(rule.source.url, location.url)) {
       return false;
     }
 
-    if ("line" in rule.source && location.sourceLine != rule.source.line) {
+    if ("line" in rule.source && location.line === rule.source.line) {
       return false;
     }
 
     return true;
   }
 
   function checkCollapsible(rule, element) {
     let msg = element._messageObject;
@@ -1106,37 +1106,37 @@ function waitForMessages(options) {
       let frame = frames[i];
       let expected = stack[i];
       if (!frame) {
         ok(false, "expected frame #" + i + " but didnt find it");
         return false;
       }
 
       if (expected.file) {
-        let file = frame.querySelector(".message-location").title;
-        if (!checkText(expected.file, file)) {
+        let url = getRenderedSource(frame).url;
+        if (!checkText(expected.file, url)) {
           ok(false, "frame #" + i + " does not match file name: " +
-                    expected.file + " != " + file);
+                    expected.file + " != " + url);
           displayErrorContext(rule, element);
           return false;
         }
       }
 
       if (expected.fn) {
         let fn = frame.querySelector(".function").textContent;
         if (!checkText(expected.fn, fn)) {
           ok(false, "frame #" + i + " does not match the function name: " +
                     expected.fn + " != " + fn);
           displayErrorContext(rule, element);
           return false;
         }
       }
 
       if (expected.line) {
-        let line = frame.querySelector(".message-location").sourceLine;
+        let line = getRenderedSource(frame).line;
         if (!checkText(expected.line, line)) {
           ok(false, "frame #" + i + " does not match the line number: " +
                     expected.line + " != " + line);
           displayErrorContext(rule, element);
           return false;
         }
       }
     }
@@ -1312,19 +1312,19 @@ function waitForMessages(options) {
     rule.matched.add(element);
 
     return rule.matched.size == count;
   }
 
   function onMessagesAdded(event, newMessages) {
     for (let msg of newMessages) {
       let elem = msg.node;
-      let location = elem.querySelector(".message-location");
-      if (location) {
-        let url = location.title;
+      let location = getRenderedSource(elem);
+      if (location && location.url) {
+        let url = location.url;
         // Prevent recursion with the browser console and any potential
         // messages coming from head.js.
         if (url.indexOf("devtools/client/webconsole/test/head.js") != -1) {
           continue;
         }
       }
 
       for (let rule of rules) {
@@ -1748,8 +1748,17 @@ function simulateMessageLinkClick(element, expectedLink) {
     button: 0,
     bubbles: true,
     cancelable: true
   });
   element.dispatchEvent(event);
 
   return deferred.promise;
 }
+
+function getRenderedSource (root) {
+  let location = root.querySelector(".message-location .frame-link");
+  return location ? {
+    url: location.getAttribute("data-url"),
+    line: location.getAttribute("data-line"),
+    column: location.getAttribute("data-column"),
+  } : null;
+}
diff --git a/devtools/client/webconsole/webconsole.js b/devtools/client/webconsole/webconsole.js
index 153dba6..7deeaf2 100644
--- a/devtools/client/webconsole/webconsole.js
+++ b/devtools/client/webconsole/webconsole.js
@@ -6,16 +6,19 @@
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
 
 const {Utils: WebConsoleUtils, CONSOLE_WORKER_IDS} =
   require("devtools/shared/webconsole/utils");
 const { getSourceNames } = require("devtools/client/shared/source-utils");
+const BrowserLoaderModule = {};
+Cu.import("resource://devtools/client/shared/browser-loader.js", BrowserLoaderModule);
+
 const promise = require("promise");
 const Debugger = require("Debugger");
 const Services = require("Services");
 
 loader.lazyServiceGetter(this, "clipboardHelper",
                          "@mozilla.org/widget/clipboardhelper;1",
                          "nsIClipboardHelper");
 loader.lazyRequireGetter(this, "EventEmitter", "devtools/shared/event-emitter");
@@ -214,26 +217,36 @@ function WebConsoleFrame(webConsoleOwner) {
   this._repeatNodes = {};
   this._outputQueue = [];
   this._itemDestroyQueue = [];
   this._pruneCategoriesQueue = {};
   this.filterPrefs = {};
 
   this.output = new ConsoleOutput(this);
 
+  this.unmountMessage = this.unmountMessage.bind(this);
   this._toggleFilter = this._toggleFilter.bind(this);
   this.resize = this.resize.bind(this);
   this._onPanelSelected = this._onPanelSelected.bind(this);
   this._flushMessageQueue = this._flushMessageQueue.bind(this);
   this._onToolboxPrefChanged = this._onToolboxPrefChanged.bind(this);
   this._onUpdateListeners = this._onUpdateListeners.bind(this);
 
   this._outputTimer = Cc["@mozilla.org/timer;1"].createInstance(Ci.nsITimer);
   this._outputTimerInitialized = false;
 
+  let require = BrowserLoaderModule.BrowserLoader({
+    window: this.window,
+    useOnlyShared: true
+  }).require;
+
+  this.React = require("devtools/client/shared/vendor/react");
+  this.ReactDOM = require("devtools/client/shared/vendor/react-dom");
+  this.FrameView = this.React.createFactory(require("devtools/client/shared/components/frame"));
+
   EventEmitter.decorate(this);
 }
 exports.WebConsoleFrame = WebConsoleFrame;
 
 WebConsoleFrame.prototype = {
   /**
    * The WebConsole instance that owns this frame.
    * @see hudservice.js::WebConsole
@@ -1157,16 +1170,20 @@ WebConsoleFrame.prototype = {
         lastMessage.getElementsByClassName("message-repeats")[0];
       if (lastRepeatNode && lastRepeatNode._uid == uid) {
         dupeNode = lastMessage;
       }
     }
 
     if (dupeNode) {
       this.mergeFilteredMessageNode(dupeNode);
+      // Even though this node was never rendered, we create the location
+      // nodes before rendering, so we still have to clean up any
+      // React components
+      this.unmountMessage(node);
       return dupeNode;
     }
 
     return null;
   },
 
   /**
    * Display cached messages that may have been collected before the UI is
@@ -2266,16 +2283,32 @@ WebConsoleFrame.prototype = {
                methodOrNode == this._reportLogMessage) {
       if (WebConsoleUtils.isActorGrip(args[0].message)) {
         this._releaseObject(args[0].message.actor);
       }
     }
   },
 
   /**
+   * Cleans up a message via a node that may or may not
+   * have actually been rendered in the DOM. Currently, only
+   * cleans up React components.
+   *
+   * @param nsIDOMNode node
+   *        The message node you want to clean up.
+   */
+  unmountMessage(node) {
+    // Select all `.message-location` within this node to ensure we get
+    // messages of stacktraces, which contain multiple location nodes.
+    for (let locationNode of node.querySelectorAll(".message-location")) {
+      this.ReactDOM.unmountComponentAtNode(locationNode);
+    }
+  },
+
+  /**
    * Ensures that the number of message nodes of type category don't exceed that
    * category's line limit by removing old messages as needed.
    *
    * @param integer category
    *        The category of message nodes to prune if needed.
    * @return number
    *         The number of removed nodes.
    */
@@ -2319,16 +2352,18 @@ WebConsoleFrame.prototype = {
     } else if (node.classList.contains("inlined-variables-view")) {
       let view = node._variablesView;
       if (view) {
         view.controller.releaseActors();
       }
       node._variablesView = null;
     }
 
+    this.unmountMessage(node);
+
     node.remove();
   },
 
   /**
    * Given a category and message body, creates a DOM node to represent an
    * incoming message. The timestamp is automatically added.
    *
    * @param number category
@@ -2473,90 +2508,66 @@ WebConsoleFrame.prototype = {
 
     return node;
   },
 
   /**
    * Creates the anchor that displays the textual location of an incoming
    * message.
    *
-   * @param object aLocation
+   * @param {Object} aLocation
    *        An object containing url, line and column number of the message
    *        source (destructured).
-   * @param string target [optional]
-   *        Tells which tool to open the link with, on click. Supported tools:
-   *        jsdebugger, styleeditor, scratchpad.
-   * @return nsIDOMNode
+   * @return {Element}
    *         The new anchor element, ready to be added to the message node.
    */
-  createLocationNode: function({url, line, column}, target) {
+  createLocationNode: function({url, line, column}) {
     if (!url) {
       url = "";
     }
-    let locationNode = this.document.createElementNS(XHTML_NS, "a");
-    let filenameNode = this.document.createElementNS(XHTML_NS, "span");
-
-    // Create the text, which consists of an abbreviated version of the URL
-    // Scratchpad URLs should not be abbreviated.
-    let filename;
-    let fullURL;
-    let isScratchpad = false;
-
-    if (/^Scratchpad\/\d+$/.test(url)) {
-      filename = url;
-      fullURL = url;
-      isScratchpad = true;
-    } else {
-      fullURL = url.split(" -> ").pop();
-      filename = getSourceNames(fullURL).short;
-    }
-
-    filenameNode.className = "filename";
-    filenameNode.textContent = ` ${filename}`;
-    locationNode.appendChild(filenameNode);
 
-    locationNode.href = isScratchpad || !fullURL ? "#" : fullURL;
+    let fullURL = url.split(" -> ").pop();
+    let locationNode = this.document.createElementNS(XHTML_NS, "a");
     locationNode.draggable = false;
-    if (target) {
-      locationNode.target = target;
-    }
-    locationNode.setAttribute("title", url);
-    locationNode.className = "message-location theme-link devtools-monospace";
+    locationNode.className = "message-location devtools-monospace";
 
     // Make the location clickable.
     let onClick = () => {
-      let nodeTarget = locationNode.target;
-      if (nodeTarget == "scratchpad" || isScratchpad) {
-        this.owner.viewSourceInScratchpad(url, line);
-        return;
-      }
-
       let category = locationNode.parentNode.category;
-      if (nodeTarget == "styleeditor" || category == CATEGORY_CSS) {
-        this.owner.viewSourceInStyleEditor(fullURL, line);
-      } else if (nodeTarget == "jsdebugger" ||
-                 category == CATEGORY_JS || category == CATEGORY_WEBDEV) {
-        this.owner.viewSourceInDebugger(fullURL, line);
-      } else {
-        this.owner.viewSource(fullURL, line);
+      let target = category === CATEGORY_CSS ? "styleeditor" :
+                   category === CATEGORY_JS ? "jsdebugger" :
+                   category === CATEGORY_WEBDEV ? "jsdebugger" :
+                   /^Scratchpad\/\d+$/.test(url) ? "scratchpad" :
+                   // If it ends in .js, let's attempt to open in debugger
+                   // anyway, as this falls back to normal view-source.
+                   /\.js$/.test(fullURL) ? "jsdebugger" : null;
+
+      switch (target) {
+        case "scratchpad":
+          this.owner.viewSourceInScratchpad(url, line);
+          return;
+        case "jsdebugger":
+          this.owner.viewSourceInDebugger(fullURL, line);
+          return;
+        case "styleeditor":
+          this.owner.viewSourceInStyleEditor(fullURL, line);
+          return;
       }
+      // No matching tool found; use old school view-source
+      this.owner.viewSource(fullURL, line);
     };
 
-    if (fullURL) {
-      this._addMessageLinkCallback(locationNode, onClick);
-    }
-
-    if (line) {
-      let lineNumberNode = this.document.createElementNS(XHTML_NS, "span");
-      lineNumberNode.className = "line-number";
-      lineNumberNode.textContent =
-        ":" + line + (column >= 0 ? ":" + column : "");
-      locationNode.appendChild(lineNumberNode);
-      locationNode.sourceLine = line;
-    }
+    this.ReactDOM.render(this.FrameView({
+      frame: {
+        source: fullURL,
+        line,
+        column,
+      },
+      onClick
+    }), locationNode);
 
     return locationNode;
   },
 
   /**
    * Adjusts the category and severity of the given message.
    *
    * @param nsIDOMNode messageNode
@@ -2783,30 +2794,38 @@ WebConsoleFrame.prototype = {
     this._repeatNodes = {};
     this._outputQueue.forEach(this._destroyItem, this);
     this._outputQueue = [];
     this._itemDestroyQueue.forEach(this._destroyItem, this);
     this._itemDestroyQueue = [];
     this._pruneCategoriesQueue = {};
     this.webConsoleClient.clearNetworkRequests();
 
+    // Unmount any currently living frame components in DOM, since
+    // currently we only clean up messages in `this.removeOutputMessage`,
+    // via `this.pruneOutputIfNecessary`.
+    let liveMessages = this.outputNode.querySelectorAll(".message");
+    Array.prototype.forEach.call(liveMessages, this.unmountMessage);
+
     if (this._outputTimerInitialized) {
       this._outputTimerInitialized = false;
       this._outputTimer.cancel();
     }
     this._outputTimer = null;
     if (this.jsterm) {
       this.jsterm.off("sidebar-opened", this.resize);
       this.jsterm.off("sidebar-closed", this.resize);
       this.jsterm.destroy();
       this.jsterm = null;
     }
     this.output.destroy();
     this.output = null;
 
+    this.React = this.ReactDOM = this.FrameView = null;
+
     if (this._contextMenuHandler) {
       this._contextMenuHandler.destroy();
       this._contextMenuHandler = null;
     }
 
     this._commandController = null;
 
     let onDestroy = () => {
diff --git a/devtools/client/webconsole/webconsole.xul b/devtools/client/webconsole/webconsole.xul
index 131497e..2d5b560 100644
--- a/devtools/client/webconsole/webconsole.xul
+++ b/devtools/client/webconsole/webconsole.xul
@@ -6,16 +6,18 @@
 <!ENTITY % webConsoleDTD SYSTEM "chrome://devtools/locale/webConsole.dtd">
 %webConsoleDTD;
 ]>
 <?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
 <?xml-stylesheet href="chrome://devtools/skin/widgets.css"
                  type="text/css"?>
 <?xml-stylesheet href="chrome://devtools/skin/webconsole.css"
                  type="text/css"?>
+<?xml-stylesheet href="chrome://devtools/skin/components-frame.css"
+                 type="text/css"?>
 <?xul-overlay href="chrome://global/content/editMenuOverlay.xul"?>
 <window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
         id="devtools-webconsole"
         macanimationtype="document"
         fullscreenbutton="true"
         title="&window.title;"
         browserConsoleTitle="&browserConsole.title;"
         windowtype="devtools:webconsole"
-- 
2.3.1

