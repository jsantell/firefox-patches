From b2a0d190e0e209901280e7129cd3ed0ff6e104a1 Mon Sep 17 00:00:00 2001
From: Jordan Santell <jsantell@gmail.com>
Date: Thu, 27 Mar 2014 12:05:09 -0700
Subject: Bug 987890 - Hide unused tools when using addon debugger, r=jryans

---
 browser/devtools/debugger/test/browser.ini         |  1 +
 .../debugger/test/browser_dbg_addon-panels.js      | 80 ++++++++++++++++++++++
 browser/devtools/framework/target.js               |  4 ++
 browser/devtools/main.js                           | 14 ++--
 4 files changed, 92 insertions(+), 7 deletions(-)
 create mode 100644 browser/devtools/debugger/test/browser_dbg_addon-panels.js

diff --git a/browser/devtools/debugger/test/browser.ini b/browser/devtools/debugger/test/browser.ini
index 01b4f4d..366cc8f 100644
--- a/browser/devtools/debugger/test/browser.ini
+++ b/browser/devtools/debugger/test/browser.ini
@@ -80,16 +80,17 @@ support-files =
   head.js
   sjs_random-javascript.sjs
   testactors.js
 
 [browser_dbg_aaa_run_first_leaktest.js]
 [browser_dbg_addonactor.js]
 [browser_dbg_addon-sources.js]
 [browser_dbg_addon-modules.js]
+[browser_dbg_addon-panels.js]
 [browser_dbg_auto-pretty-print-01.js]
 [browser_dbg_auto-pretty-print-02.js]
 [browser_dbg_bfcache.js]
 [browser_dbg_blackboxing-01.js]
 [browser_dbg_blackboxing-02.js]
 [browser_dbg_blackboxing-03.js]
 [browser_dbg_blackboxing-04.js]
 [browser_dbg_blackboxing-05.js]
diff --git a/browser/devtools/debugger/test/browser_dbg_addon-panels.js b/browser/devtools/debugger/test/browser_dbg_addon-panels.js
new file mode 100644
index 0000000..498b04b
--- /dev/null
+++ b/browser/devtools/debugger/test/browser_dbg_addon-panels.js
@@ -0,0 +1,80 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Ensure that only panels that are relevant to the addon debugger
+// display in the toolbox
+
+const ADDON3_URL = EXAMPLE_URL + "addon3.xpi";
+
+let gAddon, gClient, gThreadClient, gDebugger, gSources;
+
+function test() {
+  Task.spawn(function () {
+    if (!DebuggerServer.initialized) {
+      DebuggerServer.init(() => true);
+      DebuggerServer.addBrowserActors();
+    }
+
+    gBrowser.selectedTab = gBrowser.addTab();
+    let iframe = document.createElement("iframe");
+    document.documentElement.appendChild(iframe);
+
+    let transport = DebuggerServer.connectPipe();
+    gClient = new DebuggerClient(transport);
+
+    let connected = promise.defer();
+    gClient.connect(connected.resolve);
+    yield connected.promise;
+
+    yield installAddon();
+    let debuggerPanel = yield initAddonDebugger(gClient, ADDON3_URL, iframe);
+    gDebugger = debuggerPanel.panelWin;
+    gThreadClient = gDebugger.gThreadClient;
+    gSources = gDebugger.DebuggerView.Sources;
+
+    testPanels(iframe);
+    yield uninstallAddon();
+    yield closeConnection();
+    yield debuggerPanel._toolbox.destroy();
+    iframe.remove();
+    finish();
+  });
+}
+
+function installAddon () {
+  return addAddon(ADDON3_URL).then(aAddon => {
+    gAddon = aAddon;
+  });
+}
+
+function testPanels(frame) {
+  let tabs = frame.contentDocument.getElementById("toolbox-tabs").children;
+  let expectedTabs = ["options", "jsdebugger"];
+
+  is(tabs.length, 2, "displaying only 2 tabs in addon debugger");
+  Array.forEach(tabs, (tab, i) => {
+    let toolName = expectedTabs[i];
+    is(tab.getAttribute("toolid"), toolName, "displaying " + toolName);
+  });
+}
+
+function uninstallAddon() {
+  return removeAddon(gAddon);
+}
+
+function closeConnection () {
+  let deferred = promise.defer();
+  gClient.close(deferred.resolve);
+  return deferred.promise;
+}
+
+registerCleanupFunction(function() {
+  gClient = null;
+  gAddon = null;
+  gThreadClient = null;
+  gDebugger = null;
+  gSources = null;
+  while (gBrowser.tabs.length > 1) {
+    gBrowser.removeCurrentTab();
+  }
+});
diff --git a/browser/devtools/framework/target.js b/browser/devtools/framework/target.js
index f78bec3..770b806 100644
--- a/browser/devtools/framework/target.js
+++ b/browser/devtools/framework/target.js
@@ -237,16 +237,20 @@ TabTarget.prototype = {
     return this._tab ? this._tab.linkedBrowser.contentDocument.location.href :
                        this._form.url;
   },
 
   get isRemote() {
     return !this.isLocalTab;
   },
 
+  get isAddon() {
+    return !!(this._form && this._form.addonActor);
+  },
+
   get isLocalTab() {
     return !!this._tab;
   },
 
   get isThreadPaused() {
     return !!this._isThreadPaused;
   },
 
diff --git a/browser/devtools/main.js b/browser/devtools/main.js
index 9f37ef8..6393fef 100644
--- a/browser/devtools/main.js
+++ b/browser/devtools/main.js
@@ -92,17 +92,17 @@ Tools.webConsole = {
   onkey: function(panel, toolbox) {
     if (toolbox.splitConsole)
       return toolbox.focusConsoleInput();
 
     panel.focusInput();
   },
 
   isTargetSupported: function(target) {
-    return true;
+    return !target.isAddon;
   },
   build: function(iframeWindow, toolbox) {
     let panel = new WebConsolePanel(iframeWindow, toolbox);
     return panel.open();
   }
 };
 
 Tools.inspector = {
@@ -119,17 +119,17 @@ Tools.inspector = {
   inMenu: true,
 
   preventClosingOnKey: true,
   onkey: function(panel) {
     panel.toolbox.highlighterUtils.togglePicker();
   },
 
   isTargetSupported: function(target) {
-    return true;
+    return !target.isAddon;
   },
 
   build: function(iframeWindow, toolbox) {
     let panel = new InspectorPanel(iframeWindow, toolbox);
     return panel.open();
   }
 };
 
@@ -166,17 +166,17 @@ Tools.styleEditor = {
   icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
   invertIconForLightTheme: true,
   url: "chrome://browser/content/devtools/styleeditor.xul",
   label: l10n("ToolboxStyleEditor.label", styleEditorStrings),
   tooltip: l10n("ToolboxStyleEditor.tooltip2", styleEditorStrings),
   inMenu: true,
 
   isTargetSupported: function(target) {
-    return true;
+    return !target.isAddon;
   },
 
   build: function(iframeWindow, toolbox) {
     let panel = new StyleEditorPanel(iframeWindow, toolbox);
     return panel.open();
   }
 };
 
@@ -186,17 +186,17 @@ Tools.shaderEditor = {
   visibilityswitch: "devtools.shadereditor.enabled",
   icon: "chrome://browser/skin/devtools/tool-styleeditor.svg",
   invertIconForLightTheme: true,
   url: "chrome://browser/content/devtools/shadereditor.xul",
   label: l10n("ToolboxShaderEditor.label", shaderEditorStrings),
   tooltip: l10n("ToolboxShaderEditor.tooltip", shaderEditorStrings),
 
   isTargetSupported: function(target) {
-    return true;
+    return !target.isAddon;
   },
 
   build: function(iframeWindow, toolbox) {
     let panel = new ShaderEditorPanel(iframeWindow, toolbox);
     return panel.open();
   }
 };
 
@@ -210,17 +210,17 @@ Tools.jsprofiler = {
   icon: "chrome://browser/skin/devtools/tool-profiler.svg",
   invertIconForLightTheme: true,
   url: "chrome://browser/content/devtools/profiler.xul",
   label: l10n("profiler.label", profilerStrings),
   tooltip: l10n("profiler.tooltip2", profilerStrings),
   inMenu: true,
 
   isTargetSupported: function (target) {
-    return true;
+    return !target.isAddon;
   },
 
   build: function (frame, target) {
     let panel = new ProfilerPanel(frame, target);
     return panel.open();
   }
 };
 
@@ -235,17 +235,17 @@ Tools.netMonitor = {
   invertIconForLightTheme: true,
   url: "chrome://browser/content/devtools/netmonitor.xul",
   label: l10n("netmonitor.label", netMonitorStrings),
   tooltip: l10n("netmonitor.tooltip", netMonitorStrings),
   inMenu: true,
 
   isTargetSupported: function(target) {
     let root = target.client.mainRoot;
-    return root.traits.networkMonitor || !target.isApp;
+    return !target.isAddon && (root.traits.networkMonitor || !target.isApp);
   },
 
   build: function(iframeWindow, toolbox) {
     let panel = new NetMonitorPanel(iframeWindow, toolbox);
     return panel.open();
   }
 };
 
@@ -256,17 +256,17 @@ Tools.scratchpad = {
   icon: "chrome://browser/skin/devtools/tool-scratchpad.svg",
   invertIconForLightTheme: true,
   url: "chrome://browser/content/devtools/scratchpad.xul",
   label: l10n("scratchpad.label", scratchpadStrings),
   tooltip: l10n("scratchpad.tooltip", scratchpadStrings),
   inMenu: false,
 
   isTargetSupported: function(target) {
-    return target.isRemote;
+    return !target.isAddon && target.isRemote;
   },
 
   build: function(iframeWindow, toolbox) {
     let panel = new ScratchpadPanel(iframeWindow, toolbox);
     return panel.open();
   }
 };
 
-- 
1.8.4.2

