From: Jordan Santell <jsantell@mozilla.com>
Date: Fri, 25 Sep 2015 20:09:58 -0700
Subject: Bug 1201949 - Initial redux-style controllers for front end memory tool heap snapshot. r=jlongster

diff --git a/devtools/client/jar.mn b/devtools/client/jar.mn
index c82897f..3c85d7c 100644
--- a/devtools/client/jar.mn
+++ b/devtools/client/jar.mn
@@ -106,17 +106,17 @@ devtools.jar:
     content/performance/views/details-waterfall.js (performance/views/details-waterfall.js)
     content/performance/views/details-js-call-tree.js (performance/views/details-js-call-tree.js)
     content/performance/views/details-js-flamegraph.js (performance/views/details-js-flamegraph.js)
     content/performance/views/details-memory-call-tree.js (performance/views/details-memory-call-tree.js)
     content/performance/views/details-memory-flamegraph.js (performance/views/details-memory-flamegraph.js)
     content/performance/views/optimizations-list.js (performance/views/optimizations-list.js)
     content/performance/views/recordings.js (performance/views/recordings.js)
     content/memory/memory.xhtml (memory/memory.xhtml)
-    content/memory/controller.js (memory/controller.js)
+    content/memory/initializer.js (memory/initializer.js)
     content/promisedebugger/promise-controller.js (promisedebugger/promise-controller.js)
     content/promisedebugger/promise-panel.js (promisedebugger/promise-panel.js)
     content/promisedebugger/promise-debugger.xhtml (promisedebugger/promise-debugger.xhtml)
     content/commandline/commandline.css (commandline/commandline.css)
     content/commandline/commandlineoutput.xhtml (commandline/commandlineoutput.xhtml)
     content/commandline/commandlinetooltip.xhtml (commandline/commandlinetooltip.xhtml)
 *   content/framework/toolbox-window.xul (framework/toolbox-window.xul)
     content/framework/toolbox-options.xul (framework/toolbox-options.xul)
diff --git a/devtools/client/memory/actions/moz.build b/devtools/client/memory/actions/moz.build
new file mode 100644
index 0000000..3ffb5eb
--- /dev/null
+++ b/devtools/client/memory/actions/moz.build
@@ -0,0 +1,8 @@
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DevToolsModules(
+    'snapshot.js',
+)
diff --git a/devtools/client/memory/actions/snapshot.js b/devtools/client/memory/actions/snapshot.js
new file mode 100644
index 0000000..d387e11
--- /dev/null
+++ b/devtools/client/memory/actions/snapshot.js
@@ -0,0 +1,14 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const { PROMISE } = require("devtools/client/shared/redux/middleware/promise");
+const { actions } = require("../constants");
+
+const takeSnapshot = exports.takeSnapshot = function takeSnapshot (front) {
+  return {
+    type: actions.TAKE_SNAPSHOT,
+    [PROMISE]: front.saveHeapSnapshot()
+  };
+};
diff --git a/devtools/client/memory/constants.js b/devtools/client/memory/constants.js
new file mode 100644
index 0000000..f9fc109
--- /dev/null
+++ b/devtools/client/memory/constants.js
@@ -0,0 +1,9 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const actions = exports.actions = {};
+
+// Fired by UI to request a snapshot from the actor.
+actions.TAKE_SNAPSHOT = "take-snapshot";
diff --git a/devtools/client/memory/controller.js b/devtools/client/memory/controller.js
index 8d672b9..00b26ff 100644
--- a/devtools/client/memory/controller.js
+++ b/devtools/client/memory/controller.js
@@ -1,28 +1,28 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
-const { classes: Cc, interfaces: Ci, utils: Cu, results: Cr } = Components;
-const { loader, require } = Cu.import("resource://gre/modules/devtools/shared/Loader.jsm", {});
-
 const { Task } = require("resource://gre/modules/Task.jsm");
-const { Heritage, ViewHelpers, WidgetMethods } = require("resource:///modules/devtools/client/shared/widgets/ViewHelpers.jsm");
+const Store = require("./store");
 
 /**
  * The current target, toolbox and MemoryFront, set by this tool's host.
  */
 var gToolbox, gTarget, gFront;
 
-/**
- * Initializes the profiler controller and views.
- */
-const MemoryController = {
-  initialize: Task.async(function *() {
-    yield gFront.attach();
-  }),
+const REDUX_METHODS_TO_PIPE = ["dispatch", "subscribe", "getState"];
+
+const MemoryController = exports.MemoryController = function ({ toolbox, target, front }) {
+  this.store = Store();
+  this.toolbox = toolbox;
+  this.target = target;
+  this.front = front;
+};
+
+REDUX_METHODS_TO_PIPE.map(m =>
+  MemoryController.prototype[m] = function (...args) { return this.store[m](...args); });
 
-  destroy: Task.async(function *() {
-    yield gFront.detach();
-  })
+MemoryController.prototype.destroy = function () {
+  this.store = this.toolbox = this.target = this.front = null;
 };
diff --git a/devtools/client/memory/initializer.js b/devtools/client/memory/initializer.js
new file mode 100644
index 0000000..6c829df
--- /dev/null
+++ b/devtools/client/memory/initializer.js
@@ -0,0 +1,30 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const { classes: Cc, interfaces: Ci, utils: Cu, results: Cr } = Components;
+const { require } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
+const { Task } = require("resource://gre/modules/Task.jsm");
+const { MemoryController } = require("devtools/client/memory/controller");
+
+/**
+ * The current target, toolbox and MemoryFront, set by this tool's host.
+ */
+let gToolbox, gTarget, gFront;
+
+/**
+ * Initializes the profiler controller and views.
+ */
+var controller = null;
+function initialize () {
+  return Task.spawn(function *() {
+    controller = new MemoryController({ toolbox: gToolbox, target: gTarget, front: gFront });
+  });
+}
+
+function destroy () {
+  return Task.spawn(function *() {
+    controller.destroy();
+  });
+}
diff --git a/devtools/client/memory/memory.xhtml b/devtools/client/memory/memory.xhtml
index 6c5175f..9734a98 100644
--- a/devtools/client/memory/memory.xhtml
+++ b/devtools/client/memory/memory.xhtml
@@ -7,33 +7,31 @@
 ]>
 
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 <html xmlns="http://www.w3.org/1999/xhtml">
   <head>
     <link rel="stylesheet" href="chrome://browser/skin/" type="text/css"/>
-    <link rel="stylesheet" href="chrome://devtools/content/shared/widgets/widgets.css" type="text/css"/>
-    <link rel="stylesheet" href="chrome://devtools/skin/themes/common.css" type="text/css"/>
-    <link rel="stylesheet" href="chrome://devtools/skin/themes/widgets.css" type="text/css"/>
-    <link rel="stylesheet" href="chrome://devtools/skin/themes/memory.css" type="text/css"/>
+    <link rel="stylesheet" href="chrome://browser/content/devtools/widgets.css" type="text/css"/>
+    <link rel="stylesheet" href="chrome://browser/skin/devtools/common.css" type="text/css"/>
+    <link rel="stylesheet" href="chrome://browser/skin/devtools/widgets.css" type="text/css"/>
+    <link rel="stylesheet" href="chrome://browser/skin/devtools/memory.css" type="text/css"/>
 
     <script type="application/javascript;version=1.8"
-            src="chrome://devtools/content/shared/theme-switching.js"></script>
+            src="chrome://devtools/content/shared/theme-switching.js"/>
     <script type="application/javascript;version=1.8"
-            src="controller.js"></script>
+            src="initializer.js"></script>
   </head>
   <body class="theme-body">
-    <toolbar class="devtools-toolbar">
-      <toolbarbutton id="snapshot-button" class="devtools-toolbarbutton"
-                     tabindex="0"/>
-      <spacer flex="1"></spacer>
-    </toolbar>
-    <splitter class="devtools-horizontal-splitter"/>
+    <div class="devtools-toolbar">
+      <div id="snapshot-button" class="devtools-toolbarbutton" />
+    </div>
+    <div class="devtools-horizontal-splitter"></div>
     <div id="memory-content"
          class="devtools-responsive-container"
          flex="1">
       <toolbar class="devtools-toolbar">
         <spacer flex="1"></spacer>
       </toolbar>
       <hbox flex="1">
       </hbox>
diff --git a/devtools/client/memory/modules/census-view.js b/devtools/client/memory/modules/census-view.js
index c11e804..b017c03 100644
--- a/devtools/client/memory/modules/census-view.js
+++ b/devtools/client/memory/modules/census-view.js
@@ -4,17 +4,16 @@
 "use strict";
 
 /**
  * This file contains the tree view, displaying all the samples and frames
  * received from the proviler in a tree-like structure.
  */
 
 const { Cc, Ci, Cu, Cr } = require("chrome");
-const { L10N } = require("devtools/client/performance/modules/global");
 const { Heritage } = require("resource:///modules/devtools/client/shared/widgets/ViewHelpers.jsm");
 const { AbstractTreeItem } = require("resource:///modules/devtools/client/shared/widgets/AbstractTreeItem.jsm");
 
 const INDENTATION = exports.INDENTATION = 16; // px
 const DEFAULT_AUTO_EXPAND_DEPTH = 2;
 const COURSE_TYPES = ["objects", "scripts", "strings", "other"];
 
 /**
diff --git a/devtools/client/memory/moz.build b/devtools/client/memory/moz.build
index 5b2981f..a4241a1 100644
--- a/devtools/client/memory/moz.build
+++ b/devtools/client/memory/moz.build
@@ -1,15 +1,22 @@
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DIRS += [
+    'actions',
     'modules',
+    'reducers',
 ]
 
 DevToolsModules(
+    'constants.js',
+    'controller.js',
+    'initializer.js',
     'panel.js',
+    'reducers.js',
+    'store.js',
 )
 
 MOCHITEST_CHROME_MANIFESTS += ['test/mochitest/chrome.ini']
-BROWSER_CHROME_MANIFESTS += ['test/browser/browser.ini']
+XPCSHELL_TESTS_MANIFESTS += ['test/unit/xpcshell.ini']
diff --git a/devtools/client/memory/panel.js b/devtools/client/memory/panel.js
index 9f4ed8c..986e44e 100644
--- a/devtools/client/memory/panel.js
+++ b/devtools/client/memory/panel.js
@@ -27,41 +27,41 @@ MemoryPanel.prototype = {
     this.panelWin.gToolbox = this._toolbox;
     this.panelWin.gTarget = this.target;
 
     const rootForm = yield this.target.root;
     this.panelWin.gFront = new MemoryFront(this.target.client,
                                            this.target.form,
                                            rootForm);
 
-    console.log(this.panelWin, this.panelWin.MemoryController);
-    this._opening = this.panelWin.MemoryController.initialize().then(() => {
+    yield this.panelWin.gFront.attach();
+    return this._opening = this.panelWin.initialize().then(() => {
       this.isReady = true;
       this.emit("ready");
       return this;
     });
     return this._opening;
   }),
 
   // DevToolPanel API
 
   get target() {
     return this._toolbox.target;
   },
 
-  destroy: function () {
+  destroy: Task.async(function *() {
     // Make sure this panel is not already destroyed.
     if (this._destroyer) {
       return this._destroyer;
     }
 
-    this._destroyer = this.panelWin.MemoryController.destroy().then(() => {
+    yield this.panelWin.gFront.detach();
+    return this._destroyer = this.panelWin.destroy().then(() => {
       // Destroy front to ensure packet handler is removed from client
       this.panelWin.gFront.destroy();
       this.panelWin = null;
       this.emit("destroyed");
       return this;
     });
-    return this._destroyer;
-  }
+  })
 };
 
 exports.MemoryPanel = MemoryPanel;
diff --git a/devtools/client/memory/reducers.js b/devtools/client/memory/reducers.js
new file mode 100644
index 0000000..ef7d248
--- /dev/null
+++ b/devtools/client/memory/reducers.js
@@ -0,0 +1 @@
+exports.snapshots = require("./reducers/snapshot");
diff --git a/devtools/client/memory/reducers/moz.build b/devtools/client/memory/reducers/moz.build
new file mode 100644
index 0000000..3ffb5eb
--- /dev/null
+++ b/devtools/client/memory/reducers/moz.build
@@ -0,0 +1,8 @@
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DevToolsModules(
+    'snapshot.js',
+)
diff --git a/devtools/client/memory/reducers/snapshot.js b/devtools/client/memory/reducers/snapshot.js
new file mode 100644
index 0000000..b967133
--- /dev/null
+++ b/devtools/client/memory/reducers/snapshot.js
@@ -0,0 +1,37 @@
+const { actions } = require("../constants");
+const { PROMISE } = require("devtools/client/shared/redux/middleware/promise");
+const DevToolsUtils = require("devtools/shared/DevToolsUtils");
+
+function handleTakeSnapshot (state, action) {
+  switch (action.status) {
+
+    case "start":
+      return [...state, {
+        id: action.seqId,
+        status: action.status
+      }];
+
+    case "done":
+      let snapshot = state.find(s => s.id === action.seqId);
+      if (!snapshot) {
+        DevToolsUtils.reportException(`No snapshot with id "${action.seqId}" for TAKE_SNAPSHOT`);
+        break;
+      }
+      snapshot.status = "done";
+      snapshot.snapshotId = action.value;
+      return [...state];
+
+    case "error":
+      DevToolsUtils.reportException(`No async state found for ${action.type}`);
+  }
+  return [...state];
+}
+
+module.exports = function (state=[], action) {
+  switch (action.type) {
+    case actions.TAKE_SNAPSHOT:
+      return handleTakeSnapshot(state, action);
+  }
+
+  return state;
+};
diff --git a/devtools/client/memory/store.js b/devtools/client/memory/store.js
new file mode 100644
index 0000000..c9eef1f
--- /dev/null
+++ b/devtools/client/memory/store.js
@@ -0,0 +1,8 @@
+const { combineReducers } = require("../shared/vendor/redux");
+const createStore = require("../shared/redux/create-store");
+const reducers = require("./reducers");
+const DevToolsUtils = require("devtools/shared/DevToolsUtils");
+
+module.exports = function () {
+  return createStore({ log: DevToolsUtils.testing })(combineReducers(reducers), {});
+};
diff --git a/devtools/client/memory/test/mochitest/head.js b/devtools/client/memory/test/mochitest/head.js
index 2bf959a..7fa26b9 100644
--- a/devtools/client/memory/test/mochitest/head.js
+++ b/devtools/client/memory/test/mochitest/head.js
@@ -4,9 +4,9 @@
 "use strict";
 
 const Cc = Components.classes;
 const Ci = Components.interfaces;
 const Cu = Components.utils;
 const Cr = Components.results;
 const CC = Components.Constructor;
 
-const { require } = Cu.import("resource://gre/modules/devtools/shared/Loader.jsm", {});
+const { require } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
diff --git a/devtools/client/memory/test/mochitest/test_census-view-01.html b/devtools/client/memory/test/mochitest/test_census-view-01.html
index 7d5e604..1883dfb 100644
--- a/devtools/client/memory/test/mochitest/test_census-view-01.html
+++ b/devtools/client/memory/test/mochitest/test_census-view-01.html
@@ -2,21 +2,21 @@
 <html>
 <!--
 Bug 1067491 - Test taking a census over the RDP.
 -->
 <head>
   <meta charset="utf-8">
   <title>Census Tree 01</title>
   <script type="application/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
-  <link href="chrome://devtools/content/shared/widgets/widgets.css" type="text/css" />
-  <link href="chrome://devtools/skin/themes/light-theme.css" type="text/css" />
-  <link href="chrome://devtools/skin/themes/common.css" type="text/css" />
-  <link href="chrome://devtools/skin/themes/widgets.css" type="text/css" />
-  <link href="chrome://devtools/skin/themes/memory.css" type="text/css" />
+  <link href="chrome://browser/content/devtools/widgets.css" type="text/css" />
+  <link href="chrome://browser/skin/devtools/light-theme.css" type="text/css" />
+  <link href="chrome://browser/skin/devtools/common.css" type="text/css" />
+  <link href="chrome://browser/skin/devtools/widgets.css" type="text/css" />
+  <link href="chrome://browser/skin/devtools/memory.css" type="text/css" />
 </head>
 <body>
 <ul id="container" style="width:100%;height:300px;"></ul>
 <pre id="test">
 <script src="head.js" type="application/javascript;version=1.8"></script>
 <script>
 window.onload = function() {
   var { CensusTreeNode } = require("devtools/shared/heapsnapshot/census-tree-node");
diff --git a/devtools/client/memory/test/unit/head.js b/devtools/client/memory/test/unit/head.js
new file mode 100644
index 0000000..3e3761d2
--- /dev/null
+++ b/devtools/client/memory/test/unit/head.js
@@ -0,0 +1,56 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+var { classes: Cc, interfaces: Ci, utils: Cu, results: Cr } = Components;
+var { Services } = Cu.import("resource://gre/modules/Services.jsm", {});
+var { gDevTools } = Cu.import("resource:///modules/devtools/client/framework/gDevTools.jsm", {});
+var { console } = Cu.import("resource://gre/modules/devtools/shared/Console.jsm", {});
+var { require } = Cu.import("resource://gre/modules/devtools/shared/Loader.jsm", {});
+var { TargetFactory } = require("devtools/client/framework/target");
+var DevToolsUtils = require("devtools/shared/DevToolsUtils");
+var promise = require("promise");
+var { Task } = Cu.import("resource://gre/modules/Task.jsm", {});
+var { MemoryController } = require("devtools/client/memory/controller");
+var { expectState } = require("devtools/server/actors/common");
+var HeapSnapshotFileUtils = require("devtools/shared/heapsnapshot/HeapSnapshotFileUtils");
+var { addDebuggerToGlobal } = require("resource://gre/modules/jsdebugger.jsm");
+var SYSTEM_PRINCIPAL = Cc["@mozilla.org/systemprincipal;1"].createInstance(Ci.nsIPrincipal);
+var { setTimeout } = require("sdk/timers");
+
+DevToolsUtils.testing = true;
+
+function initDebugger () {
+  let global = new Cu.Sandbox(SYSTEM_PRINCIPAL, { freshZone: true });
+  addDebuggerToGlobal(global);
+  return new global.Debugger();
+}
+
+function StubbedMemoryFront () {
+  this.dbg = initDebugger();
+}
+
+StubbedMemoryFront.prototype.attach = Task.async(function *() {
+  this.state = "attached";
+});
+
+StubbedMemoryFront.prototype.detach = Task.async(function *() {
+  this.state = "detached";
+});
+
+StubbedMemoryFront.prototype.saveHeapSnapshot = expectState("attached", Task.async(function *() {
+  let path = ThreadSafeChromeUtils.saveHeapSnapshot({ debugger: this.dbg });
+  return HeapSnapshotFileUtils.getSnapshotIdFromPath(path);
+}), "saveHeapSnapshot");
+
+function waitUntilState (store, predicate) {
+  let deferred = promise.defer();
+  let unsubscribe = store.subscribe(() => {
+    if (predicate(store.getState())) {
+      unsubscribe();
+      deferred.resolve()
+    }
+  });
+  return deferred.promise;
+}
diff --git a/devtools/client/memory/test/unit/test_action-take-snapshot.js b/devtools/client/memory/test/unit/test_action-take-snapshot.js
new file mode 100644
index 0000000..ca81e16
--- /dev/null
+++ b/devtools/client/memory/test/unit/test_action-take-snapshot.js
@@ -0,0 +1,45 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests the async action creator `takeSnapshot(front)`
+ */
+
+let actions = require("devtools/client/memory/actions/snapshot");
+
+function run_test() {
+  run_next_test();
+}
+
+add_task(function *() {
+  let front = new StubbedMemoryFront();
+  yield front.attach();
+  let controller = new MemoryController({ toolbox: {}, target: {}, front });
+
+  let unsubscribe = controller.subscribe(checkState);
+
+  let foundPendingState = false;
+  let foundDoneState = false;
+
+  function checkState () {
+    let state = controller.getState();
+    if (state.snapshots.length === 1 && state.snapshots[0].status === "start") {
+      foundPendingState = true;
+      ok(foundPendingState, "Got state change for pending heap snapshot request");
+      ok(!(state.snapshots[0].snapshotId), "Snapshot does not yet have a snapshotId");
+    }
+    if (state.snapshots.length === 1 && state.snapshots[0].status === "done") {
+      foundDoneState = true;
+      ok(foundDoneState, "Got state change for completed heap snapshot request");
+      ok(state.snapshots[0].snapshotId, "Snapshot fetched with a snapshotId");
+    }
+    if (state.snapshots.lenght === 1 && state.snapshots[0].status === "error") {
+      ok(false, "takeSnapshot's promise returned with an error");
+    }
+  }
+
+  controller.dispatch(actions.takeSnapshot(front));
+  yield waitUntilState(controller, () => foundPendingState && foundDoneState);
+
+  unsubscribe();
+});
diff --git a/devtools/client/memory/test/unit/xpcshell.ini b/devtools/client/memory/test/unit/xpcshell.ini
new file mode 100644
index 0000000..555d31e
--- /dev/null
+++ b/devtools/client/memory/test/unit/xpcshell.ini
@@ -0,0 +1,8 @@
+[DEFAULT]
+tags = devtools
+head = head.js
+tail =
+firefox-appdir = browser
+skip-if = toolkit == 'android' || toolkit == 'gonk'
+
+[test_action-take-snapshot.js]
diff --git a/devtools/client/shared/redux/create-store.js b/devtools/client/shared/redux/create-store.js
index fa804a3..9eeabf7e 100644
--- a/devtools/client/shared/redux/create-store.js
+++ b/devtools/client/shared/redux/create-store.js
@@ -2,30 +2,32 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { createStore, applyMiddleware } = require("devtools/client/shared/vendor/redux");
 const { thunk } = require("./middleware/thunk");
 const { waitUntilService } = require("./middleware/wait-service");
 const { log } = require("./middleware/log");
+const { promise } = require("./middleware/promise");
 
 /**
  * This creates a dispatcher with all the standard middleware in place
  * that all code requires. It can also be optionally configured in
  * various ways, such as logging and recording.
  *
  * @param {object} opts - boolean configuration flags
  *        - log: log all dispatched actions to console
  *        - middleware: array of middleware to be included in the redux store
  */
 module.exports = (opts={}) => {
   const middleware = [
     thunk,
-    waitUntilService
+    waitUntilService,
+    promise,
   ];
 
   if (opts.log) {
     middleware.push(log);
   }
 
   if (opts.middleware) {
     opts.middleware.forEach(fn => middleware.push(fn));
diff --git a/devtools/client/shared/redux/middleware/moz.build b/devtools/client/shared/redux/middleware/moz.build
index 224b021..e8290a1 100644
--- a/devtools/client/shared/redux/middleware/moz.build
+++ b/devtools/client/shared/redux/middleware/moz.build
@@ -1,11 +1,12 @@
 # -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DevToolsModules(
     'log.js',
+    'promise.js',
     'thunk.js',
     'wait-service.js',
 )
diff --git a/devtools/client/shared/redux/middleware/promise.js b/devtools/client/shared/redux/middleware/promise.js
new file mode 100644
index 0000000..f869816
--- /dev/null
+++ b/devtools/client/shared/redux/middleware/promise.js
@@ -0,0 +1,52 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const uuidgen = require("sdk/util/uuid").uuid;
+const {
+  entries, toObject, reportException, executeSoon
+} = require("devtools/shared/DevToolsUtils");
+const PROMISE = exports.PROMISE = "@@dispatch/promise";
+
+function promiseMiddleware ({ dispatch, getState }) {
+  return next => action => {
+    if (!(PROMISE in action)) {
+      return next(action);
+    }
+
+    const promise = action[PROMISE];
+    const seqId = uuidgen().toString();
+
+    // Create a new action that doesn't have the promise field and has
+    // the `seqId` field that represents the sequence id
+    action = Object.assign(
+      toObject(entries(action).filter(pair => pair[0] !== PROMISE)), { seqId }
+    );
+
+    dispatch(Object.assign({}, action, { status: "start" }));
+
+    promise.then(value => {
+      executeSoon(() => {
+        dispatch(Object.assign({}, action, {
+          status: "done",
+          value: value
+        }));
+      });
+    }).catch(error => {
+      executeSoon(() => {
+        dispatch(Object.assign({}, action, {
+          status: "error",
+          error
+        }));
+      });
+      reportException(`@@redux/middleware/promise#${action.type}`, error);
+    });
+
+    // Return the promise so action creators can still compose if they
+    // want to.
+    return promise;
+  };
+}
+
+exports.promise = promiseMiddleware;
diff --git a/devtools/shared/DevToolsUtils.js b/devtools/shared/DevToolsUtils.js
index cc8500f..08e224b 100644
--- a/devtools/shared/DevToolsUtils.js
+++ b/devtools/shared/DevToolsUtils.js
@@ -7,16 +7,17 @@
 /* General utilities used throughout devtools. */
 
 var { Ci, Cu, Cc, components } = require("chrome");
 var Services = require("Services");
 var promise = require("promise");
 
 loader.lazyRequireGetter(this, "FileUtils",
                          "resource://gre/modules/FileUtils.jsm", true);
+loader.lazyRequireGetter(this, "setTimeout", "Timer", true);
 
 /**
  * Turn the error |aError| into a string, without fail.
  */
 exports.safeErrorString = function safeErrorString(aError) {
   try {
     let errorString = aError.toString();
     if (typeof errorString == "string") {
@@ -128,16 +129,28 @@ exports.zip = function zip(a, b) {
  * @param object obj
  * @returns array
  */
 exports.entries = function entries(obj) {
   return Object.keys(obj).map(k => [k, obj[k]]);
 }
 
 /**
+ * Takes an array of 2-element arrays as key/values pairs and
+ * constructs an object using them.
+ */
+exports.toObject = function(arr) {
+  const obj = {};
+  for(let pair of arr) {
+    obj[pair[0]] = pair[1];
+  }
+  return obj;
+}
+
+/**
  * Composes the given functions into a single function, which will
  * apply the results of each function right-to-left, starting with
  * applying the given arguments to the right-most function.
  * `compose(foo, bar, baz)` === `args => foo(bar(baz(args)`
  *
  * @param ...function funcs
  * @returns function
  */
@@ -181,17 +194,17 @@ exports.waitForTick = function waitForTick() {
  *
  * @param number aDelay
  *        The amount of time to wait, in milliseconds.
  * @return Promise
  *         A promise that is resolved after the specified amount of time passes.
  */
 exports.waitForTime = function waitForTime(aDelay) {
   let deferred = promise.defer();
-  require("Timer").setTimeout(deferred.resolve, aDelay);
+  setTimeout(deferred.resolve, aDelay);
   return deferred.promise;
 };
 
 /**
  * Like Array.prototype.forEach, but doesn't cause jankiness when iterating over
  * very large arrays by yielding to the browser and continuing execution on the
  * next tick.
  *
-- 
2.2.1

