From: Jordan Santell <jsantell@mozilla.com>
Date: Wed, 28 Oct 2015 11:51:20 -0700
Subject: Bug 1219073 - part 1 - Add  to sdk/url#URL objects. r=gozala

diff --git a/addon-sdk/source/lib/sdk/url.js b/addon-sdk/source/lib/sdk/url.js
index 5e11a4e..f9ed606 100644
--- a/addon-sdk/source/lib/sdk/url.js
+++ b/addon-sdk/source/lib/sdk/url.js
@@ -121,27 +121,37 @@ function URL(url, base) {
     port = uri.port == -1 ? null : uri.port;
   }
   catch (e) {
     if (e.result != Cr.NS_ERROR_FAILURE) {
       throw e;
     }
   }
 
+  let fileName = "/";
+  try {
+    fileName = uri.QueryInterface(Ci.nsIURL).fileName;
+  } catch (e) {
+    if (e.result != Cr.NS_NOINTERFACE) {
+      throw e;
+    }
+  }
+
   let uriData = [uri.path, uri.path.length, {}, {}, {}, {}, {}, {}];
   URLParser.parsePath.apply(URLParser, uriData);
   let [{ value: filepathPos }, { value: filepathLen },
     { value: queryPos }, { value: queryLen },
     { value: refPos }, { value: refLen }] = uriData.slice(2);
 
   let hash = uri.ref ? "#" + uri.ref : "";
   let pathname = uri.path.substr(filepathPos, filepathLen);
   let search = uri.path.substr(queryPos, queryLen);
   search = search ? "?" + search : "";
 
+  this.__defineGetter__("fileName", () => fileName);
   this.__defineGetter__("scheme", () => uri.scheme);
   this.__defineGetter__("userPass", () => userPass);
   this.__defineGetter__("host", () => host);
   this.__defineGetter__("hostname", () => host);
   this.__defineGetter__("port", () => port);
   this.__defineGetter__("path", () => uri.path);
   this.__defineGetter__("pathname", () => pathname);
   this.__defineGetter__("hash", () => hash);
diff --git a/addon-sdk/source/test/test-url.js b/addon-sdk/source/test/test-url.js
index 0009892..7c81a07 100644
--- a/addon-sdk/source/test/test-url.js
+++ b/addon-sdk/source/test/test-url.js
@@ -15,18 +15,16 @@ const {
 const { pathFor } = require('sdk/system');
 const file = require('sdk/io/file');
 const tabs = require('sdk/tabs');
 const { decode } = require('sdk/base64');
 
 const httpd = require('./lib/httpd');
 const port = 8099;
 
-const defaultLocation = '{\'scheme\':\'about\',\'userPass\':null,\'host\':null,\'hostname\':null,\'port\':null,\'path\':\'addons\',\'pathname\':\'addons\',\'hash\':\'\',\'href\':\'about:addons\',\'origin\':\'about:\',\'protocol\':\'about:\',\'search\':\'\'}'.replace(/'/g, '"');
-
 exports.testResolve = function(assert) {
   assert.equal(URL('bar', 'http://www.foo.com/').toString(),
                    'http://www.foo.com/bar');
 
   assert.equal(URL('bar', 'http://www.foo.com'),
                    'http://www.foo.com/bar');
 
   assert.equal(URL('http://bar.com/', 'http://foo.com/'),
@@ -60,16 +58,17 @@ exports.testParseHttp = function(assert) {
   assert.equal(info.hostname, 'sub.foo.com');
   assert.equal(info.port, null);
   assert.equal(info.userPass, null);
   assert.equal(info.path, '/bar?locale=en-US&otherArg=%20x%20#myhash');
   assert.equal(info.pathname, '/bar');
   assert.equal(info.href, aUrl);
   assert.equal(info.hash, '#myhash');
   assert.equal(info.search, '?locale=en-US&otherArg=%20x%20');
+  assert.equal(info.fileName, 'bar');
 };
 
 exports.testParseHttpSearchAndHash = function (assert) {
   var info = URL('https://www.moz.com/some/page.html');
   assert.equal(info.hash, '');
   assert.equal(info.search, '');
 
   var hashOnly = URL('https://www.sub.moz.com/page.html#justhash');
@@ -104,16 +103,17 @@ exports.testParseHttpWithPort = function(assert) {
 
 exports.testParseChrome = function(assert) {
   var info = URL('chrome://global/content/blah');
   assert.equal(info.scheme, 'chrome');
   assert.equal(info.host, 'global');
   assert.equal(info.port, null);
   assert.equal(info.userPass, null);
   assert.equal(info.path, '/content/blah');
+  assert.equal(info.fileName, 'blah');
 };
 
 exports.testParseAbout = function(assert) {
   var info = URL('about:boop');
   assert.equal(info.scheme, 'about');
   assert.equal(info.host, null);
   assert.equal(info.port, null);
   assert.equal(info.userPass, null);
@@ -122,16 +122,17 @@ exports.testParseAbout = function(assert) {
 
 exports.testParseFTP = function(assert) {
   var info = URL('ftp://1.2.3.4/foo');
   assert.equal(info.scheme, 'ftp');
   assert.equal(info.host, '1.2.3.4');
   assert.equal(info.port, null);
   assert.equal(info.userPass, null);
   assert.equal(info.path, '/foo');
+  assert.equal(info.fileName, 'foo');
 };
 
 exports.testParseFTPWithUserPass = function(assert) {
   var info = URL('ftp://user:pass@1.2.3.4/foo');
   assert.equal(info.userPass, 'user:pass');
 };
 
 exports.testToFilename = function(assert) {
@@ -211,17 +212,17 @@ exports.testURL = function(assert) {
 };
 
 exports.testStringInterface = function(assert) {
   var EM = 'about:addons';
   var a = URL(EM);
 
   // make sure the standard URL properties are enumerable and not the String interface bits
   assert.equal(Object.keys(a),
-    'scheme,userPass,host,hostname,port,path,pathname,hash,href,origin,protocol,search',
+    'fileName,scheme,userPass,host,hostname,port,path,pathname,hash,href,origin,protocol,search',
     'enumerable key list check for URL.');
   assert.equal(
       JSON.stringify(a),
       JSON.stringify(EM),
       'JSON.stringify on url should return the url as a flat string');
       // JSON.parse(JSON.stringify(url)) wont work like an url object
       // (missing methods). this makes it easier to re-create an url
       // instance from the whole string, and every place that
@@ -387,16 +388,30 @@ exports.testLocalURLwithInvalidURL = function(assert) {
     'data:foo and bar',
     'resource:// must fail',
     'chrome:// here too'
   ]).forEach(aUri => {
     assert.ok(!isLocalURL(aUri), aUri + ' is an invalid Local URL');
   });
 }
 
+exports.testFileName = function(assert) {
+  let urls = [
+    ['https://foo/bar.js', 'bar.js'],
+    ['app://myfxosapp/file.js', 'file.js'],
+    ['http://localhost:8888/file.js', 'file.js'],
+    ['http://foo/bar.js#hash', 'bar.js'],
+    ['http://foo/bar.js?q=go&query=yeah', 'bar.js'],
+    ['chrome://browser/content/content.js', 'content.js'],
+    ['resource://gre/foo.js', 'foo.js'],
+  ];
+
+  urls.forEach(([url, fileName]) => assert.equal(URL(url).fileName, fileName, 'file names are equal'));
+};
+
 function validURIs() {
   return [
   'http://foo.com/blah_blah',
   'http://foo.com/blah_blah/',
   'http://foo.com/blah_blah_(wikipedia)',
   'http://foo.com/blah_blah_(wikipedia)_(again)',
   'http://www.example.com/wpstyle/?p=364',
   'https://www.example.com/foo/?bar=baz&amp;inga=42&amp;quux',
-- 
2.3.1

