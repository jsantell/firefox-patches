From: Jordan Santell <jsantell@gmail.com>
Date: Wed, 18 Mar 2015 13:55:42 -0700
Subject: Bug 1143004 - markers from console.timeStamp() should be rendered in the performance tool's timeline. r=vp

diff --git a/browser/devtools/performance/test/browser.ini b/browser/devtools/performance/test/browser.ini
index e31f2b2..53b0de0 100644
--- a/browser/devtools/performance/test/browser.ini
+++ b/browser/devtools/performance/test/browser.ini
@@ -8,16 +8,17 @@ support-files =
   head.js
 
 # Commented out tests are profiler tests
 # that need to be moved over to performance tool
 
 [browser_perf-aaa-run-first-leaktest.js]
 [browser_markers-gc.js]
 [browser_markers-parse-html.js]
+[browser_markers-timestamp.js]
 [browser_perf-allocations-to-samples.js]
 [browser_perf-compatibility-01.js]
 [browser_perf-compatibility-02.js]
 [browser_perf-compatibility-03.js]
 [browser_perf-compatibility-04.js]
 [browser_perf-compatibility-05.js]
 [browser_perf-compatibility-06.js]
 [browser_perf-compatibility-07.js]
diff --git a/browser/devtools/performance/test/browser_markers-timestamp.js b/browser/devtools/performance/test/browser_markers-timestamp.js
new file mode 100644
index 0000000..db46a35
--- /dev/null
+++ b/browser/devtools/performance/test/browser_markers-timestamp.js
@@ -0,0 +1,46 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Test that we get a "TimeStamp" marker.
+ */
+
+const TIME_CLOSE_TO = 10000;
+
+function* spawnTest () {
+  let { target, front } = yield initBackend(SIMPLE_URL);
+  loadFrameScripts();
+  let markers = [];
+
+  front.on("timeline-data", handler);
+  let model = yield front.startRecording({ withTicks: true });
+
+  consoleMethod("timeStamp");
+  consoleMethod("timeStamp", "myLabel");
+  yield waitUntil(() => { return markers.length === 2; }, 100);
+
+  front.off("timeline-data", handler);
+  yield front.stopRecording(model);
+
+  info(`Got ${markers.length} markers.`);
+
+  let maxMarkerTime = model._timelineStartTime + model.getDuration() + TIME_CLOSE_TO;
+
+  ok(markers.every(({name}) => name === "TimeStamp"), "All markers found are TimeStamp markers");
+  ok(markers.length === 2, "found 2 TimeStamp markers");
+  ok(markers.every(({start}) => typeof start === "number" && start > 0 && start < maxMarkerTime),
+    "All markers have a start time between the valid range.");
+  ok(markers.every(({end}) => typeof end === "number" && end > 0 && end < maxMarkerTime),
+    "All markers have an end time between the valid range.");
+  is(markers[0].causeName, void 0, "Unlabeled timestamps have an empty causeName");
+  is(markers[1].causeName, "myLabel", "Labeled timestamps have correct causeName");
+
+  yield removeTab(target.tab);
+  finish();
+
+  function handler (_, name, m) {
+    if (name === "markers") {
+      markers = markers.concat(m.filter(marker => marker.name === "TimeStamp"));
+    }
+  }
+}
diff --git a/browser/devtools/shared/timeline/global.js b/browser/devtools/shared/timeline/global.js
index 28ee3ef..85caa6e 100644
--- a/browser/devtools/shared/timeline/global.js
+++ b/browser/devtools/shared/timeline/global.js
@@ -59,23 +59,28 @@ const TIMELINE_BLUEPRINT = {
     colorName: "highlight-lightorange",
     label: L10N.getStr("timeline.label.parseHTML")
   },
   "Parse XML": {
     group: 1,
     colorName: "highlight-lightorange",
     label: L10N.getStr("timeline.label.parseXML")
   },
+  "GarbageCollection": {
+    group: 1,
+    colorName: "highlight-red",
+    label: L10N.getStr("timeline.label.garbageCollection")
+  },
   "ConsoleTime": {
     group: 2,
     colorName: "highlight-bluegrey",
     label: L10N.getStr("timeline.label.consoleTime")
   },
-  "GarbageCollection": {
-    group: 1,
-    colorName: "highlight-red",
-    label: L10N.getStr("timeline.label.garbageCollection")
+  "TimeStamp": {
+    group: 2,
+    colorName: "content-color3",
+    label: L10N.getStr("timeline.label.timestamp")
   },
 };
 
 // Exported symbols.
 exports.L10N = L10N;
 exports.TIMELINE_BLUEPRINT = TIMELINE_BLUEPRINT;
diff --git a/browser/locales/en-US/chrome/browser/devtools/timeline.properties b/browser/locales/en-US/chrome/browser/devtools/timeline.properties
index fc11ada..77b745b 100644
--- a/browser/locales/en-US/chrome/browser/devtools/timeline.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/timeline.properties
@@ -40,16 +40,17 @@ timeline.label.styles2=Recalculate Style
 timeline.label.reflow2=Layout
 timeline.label.paint=Paint
 timeline.label.javascript2=Function Call
 timeline.label.parseHTML=Parse HTML
 timeline.label.parseXML=Parse XML
 timeline.label.domevent=DOM Event
 timeline.label.consoleTime=Console
 timeline.label.garbageCollection=GC Event
+timeline.label.timestamp=Timestamp
 
 # LOCALIZATION NOTE (graphs.memory):
 # This string is displayed in the memory graph of the Performance tool,
 # as the unit used to memory consumption. This label should be kept
 # AS SHORT AS POSSIBLE so it doesn't obstruct important parts of the graph.
 graphs.memory=MB
 
 # LOCALIZATION NOTE (timeline.markerDetailFormat):
diff --git a/browser/themes/shared/devtools/performance.inc.css b/browser/themes/shared/devtools/performance.inc.css
index 77098ae..b397940 100644
--- a/browser/themes/shared/devtools/performance.inc.css
+++ b/browser/themes/shared/devtools/performance.inc.css
@@ -498,17 +498,22 @@
   background-color: var(--theme-highlight-lightorange);
 }
 #performance-filter-menupopup > menuitem.highlight-red:before,
 .marker-details-bullet.highlight-red,
 .waterfall-marker-bar.highlight-red,
 .waterfall-marker-bullet.highlight-red {
   background-color: var(--theme-highlight-red);
 }
-
+#performance-filter-menupopup > menuitem.content-color3:before,
+.marker-details-bullet.content-color3,
+.waterfall-marker-bar.content-color3,
+.waterfall-marker-bullet.content-color3 {
+  background-color: var(--theme-content-color3);
+}
 
 #waterfall-details > * {
   padding-top: 3px;
 }
 
 .marker-details-labelname {
   -moz-padding-end: 4px;
 }
-- 
2.2.1

