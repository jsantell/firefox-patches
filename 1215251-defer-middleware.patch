From: Jordan Santell <jsantell@mozilla.com>
Date: Thu, 15 Oct 2015 13:56:56 -0700
Subject: Bug 1215251 - Add redux middleware for managing async action creators via generators and promises. r=fitzgen

diff --git a/devtools/client/shared/redux/create-store.js b/devtools/client/shared/redux/create-store.js
index 9eeabf7..26cdcb4 100644
--- a/devtools/client/shared/redux/create-store.js
+++ b/devtools/client/shared/redux/create-store.js
@@ -1,30 +1,32 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { createStore, applyMiddleware } = require("devtools/client/shared/vendor/redux");
 const { thunk } = require("./middleware/thunk");
 const { waitUntilService } = require("./middleware/wait-service");
+const { defer } = require("./middleware/defer");
 const { log } = require("./middleware/log");
 const { promise } = require("./middleware/promise");
 
 /**
  * This creates a dispatcher with all the standard middleware in place
  * that all code requires. It can also be optionally configured in
  * various ways, such as logging and recording.
  *
  * @param {object} opts - boolean configuration flags
  *        - log: log all dispatched actions to console
  *        - middleware: array of middleware to be included in the redux store
  */
 module.exports = (opts={}) => {
   const middleware = [
+    defer,
     thunk,
     waitUntilService,
     promise,
   ];
 
   if (opts.log) {
     middleware.push(log);
   }
diff --git a/devtools/client/shared/redux/middleware/defer.js b/devtools/client/shared/redux/middleware/defer.js
new file mode 100644
index 0000000..a2086ea
--- /dev/null
+++ b/devtools/client/shared/redux/middleware/defer.js
@@ -0,0 +1,45 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const { Task } = require("resource://gre/modules/Task.jsm");
+const { executeSoon } = require("devtools/shared/DevToolsUtils");
+
+function isGenerator (action) {
+  return typeof action === "function" && action.isGenerator();
+}
+
+function isPromise (action) {
+  return action && typeof action.then === "function";
+}
+
+/**
+ * A middleware that allows generator thunks (functions) and promise
+ * to be dispatched. If it's a generator, it is called with `dispatch` and `getState`,
+ * allowing the action to create multiple actions (most likely
+ * asynchronously) and yield on each. If called with a promise, calls `dispatch`
+ * on the results.
+ *
+ * If called with a generator, the return value of that generator is also
+ * dispatched if truthy, so it can also be consumed by another generator action.
+ */
+function defer ({ dispatch, getState }) {
+  return next => action => {
+    if (isGenerator(action)) {
+      return Task.spawn(function*() {
+        return yield action(dispatch, getState);
+      }).then(value => {
+        if (value) {
+          return dispatch(value);
+        }
+      });
+    }
+    if (isPromise(action)) {
+      return action.then(dispatch, err =>
+        executeSoon(() => reportException("@@redux/middleware/defer", err)));
+    }
+    return next(action);
+  };
+}
+exports.defer = defer;
diff --git a/devtools/client/shared/redux/middleware/moz.build b/devtools/client/shared/redux/middleware/moz.build
index e8290a1..2a3e534 100644
--- a/devtools/client/shared/redux/middleware/moz.build
+++ b/devtools/client/shared/redux/middleware/moz.build
@@ -1,12 +1,15 @@
 # -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DevToolsModules(
+    'defer.js',
     'log.js',
     'promise.js',
     'thunk.js',
     'wait-service.js',
 )
+
+XPCSHELL_TESTS_MANIFESTS += ['test/xpcshell.ini']
diff --git a/devtools/client/shared/redux/middleware/test/head.js b/devtools/client/shared/redux/middleware/test/head.js
new file mode 100644
index 0000000..fac055b
--- /dev/null
+++ b/devtools/client/shared/redux/middleware/test/head.js
@@ -0,0 +1,27 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+var { classes: Cc, interfaces: Ci, utils: Cu, results: Cr } = Components;
+var { require } = Cu.import("resource://gre/modules/devtools/shared/Loader.jsm", {});
+var DevToolsUtils = require("devtools/shared/DevToolsUtils");
+var promise = require("promise");
+
+DevToolsUtils.testing = true;
+
+function waitUntilState (store, predicate) {
+  let deferred = promise.defer();
+  let unsubscribe = store.subscribe(check);
+
+  function check () {
+    if (predicate(store.getState())) {
+      unsubscribe();
+      deferred.resolve()
+    }
+  }
+
+  // Fire the check immediately incase the action has already occurred
+  check();
+
+  return deferred.promise;
+}
diff --git a/devtools/client/shared/redux/middleware/test/test_middleware-defer-01.js b/devtools/client/shared/redux/middleware/test/test_middleware-defer-01.js
new file mode 100644
index 0000000..dad8eb6
--- /dev/null
+++ b/devtools/client/shared/redux/middleware/test/test_middleware-defer-01.js
@@ -0,0 +1,63 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const { createStore, applyMiddleware } = require("devtools/client/shared/vendor/redux");
+const { defer } = require("devtools/client/shared/redux/middleware/defer");
+
+/**
+ * Tests that defer middleware allows dispatching generators, promises and objects
+ * that return actions;
+ */
+
+function run_test() {
+  run_next_test();
+}
+
+add_task(function *() {
+  let store = applyMiddleware(defer)(createStore)(reducer);
+
+  store.dispatch(fetch1("generator"));
+  yield waitUntilState(store, () => store.getState().length === 1);
+  equal(store.getState()[0].data, "generator", "defer middleware async dispatches an action via generator");
+
+  store.dispatch(fetch2("promise"));
+  yield waitUntilState(store, () => store.getState().length === 2);
+  equal(store.getState()[1].data, "promise", "defer middleware async dispatches an action via promise");
+
+  store.dispatch(fetch3("sync"));
+  yield waitUntilState(store, () => store.getState().length === 3);
+  equal(store.getState()[2].data, "sync", "defer middleware sync dispatches an action via sync");
+});
+
+function fetch1 (data) {
+  return function *(dispatch, getState) {
+    equal(getState().length, 0, "`getState` is accessible in a generator action");
+    let moreData = yield new Promise(resolve => resolve(data));
+    return { type: "fetch1", data: moreData };
+  };
+}
+
+function fetch2 (data) {
+  return new Promise(resolve => {
+    resolve({
+      type: "fetch2",
+      data
+    });
+  });
+}
+
+function fetch3 (data) {
+  return {
+    type: "fetch3",
+    data
+  }
+}
+
+function reducer (state=[], action) {
+  do_print("Action called: " + action.type);
+  if (["fetch1", "fetch2", "fetch3"].includes(action.type)) {
+    state.push(action);
+  }
+  return [...state];
+}
diff --git a/devtools/client/shared/redux/middleware/test/test_middleware-defer-02.js b/devtools/client/shared/redux/middleware/test/test_middleware-defer-02.js
new file mode 100644
index 0000000..815e63f
--- /dev/null
+++ b/devtools/client/shared/redux/middleware/test/test_middleware-defer-02.js
@@ -0,0 +1,54 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/**
+ * Tests that defer middleware allows dispatching generators that dispatch
+ * additional sync and async actions.
+ */
+
+const { createStore, applyMiddleware } = require("devtools/client/shared/vendor/redux");
+const { defer } = require("devtools/client/shared/redux/middleware/defer");
+
+function run_test() {
+  run_next_test();
+}
+
+add_task(function *() {
+  let store = applyMiddleware(defer)(createStore)(reducer);
+
+  store.dispatch(comboAction());
+  yield waitUntilState(store, () => store.getState().length === 3);
+
+  equal(store.getState()[0].data, "async", "Async dispatched actions in a generator task are fired");
+  equal(store.getState()[1].data, "sync", "Sync dispatched actions in a generator task are fired");
+  equal(store.getState()[2].data.sync.type, "fetchSync", "Return values of yielded sync dispatched actions are correct");
+  equal(store.getState()[2].data.async.type, "fetchAsync", "Return values of yielded async dispatched actions are correct");
+});
+
+function comboAction () {
+  return function *(dispatch, getState) {
+    let data = {};
+    data.async = yield dispatch(fetchAsync("async"));
+    data.sync = yield dispatch(fetchSync("sync"));
+    dispatch({ type: "done", data });
+  }
+}
+
+function fetchSync (data) {
+  return { type: "fetchSync", data };
+}
+
+function fetchAsync (data) {
+  return function *(dispatch) {
+    return new Promise(resolve => resolve({ type: "fetchAsync", data }));
+  };
+}
+
+function reducer (state=[], action) {
+  do_print("Action called: " + action.type);
+  if (["fetchSync", "fetchAsync", "done"].includes(action.type)) {
+    state.push(action);
+  }
+  return [...state];
+}
diff --git a/devtools/client/shared/redux/middleware/test/xpcshell.ini b/devtools/client/shared/redux/middleware/test/xpcshell.ini
new file mode 100644
index 0000000..6395237
--- /dev/null
+++ b/devtools/client/shared/redux/middleware/test/xpcshell.ini
@@ -0,0 +1,9 @@
+[DEFAULT]
+tags = devtools
+head = head.js
+tail =
+firefox-appdir = browser
+skip-if = toolkit == 'android' || toolkit == 'gonk'
+
+[test_middleware-defer-01.js]
+[test_middleware-defer-02.js]
-- 
2.3.1

