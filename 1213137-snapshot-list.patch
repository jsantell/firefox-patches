From: Jordan Santell <jordan@jsantell.com>
Date: Sat, 10 Oct 2015 08:09:28 -0700
Subject: Bug 1213137 - Initial react app for memory tool with its snapshot list view. r=jlong

diff --git a/devtools/client/memory/actions/snapshot.js b/devtools/client/memory/actions/snapshot.js
index d387e11..3243e5d 100644
--- a/devtools/client/memory/actions/snapshot.js
+++ b/devtools/client/memory/actions/snapshot.js
@@ -1,14 +1,28 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { PROMISE } = require("devtools/client/shared/redux/middleware/promise");
 const { actions } = require("../constants");
 
+/**
+ * @param {MemoryFront}
+ */
 const takeSnapshot = exports.takeSnapshot = function takeSnapshot (front) {
   return {
     type: actions.TAKE_SNAPSHOT,
     [PROMISE]: front.saveHeapSnapshot()
   };
 };
+
+/**
+ * @param {Snapshot}
+ * @see {Snapshot} model defined in devtools/client/memory/app.js
+ */
+const selectSnapshot = exports.selectSnapshot = function takeSnapshot (snapshot) {
+  return {
+    type: actions.SELECT_SNAPSHOT,
+    snapshot
+  };
+};
diff --git a/devtools/client/memory/app.js b/devtools/client/memory/app.js
new file mode 100644
index 0000000..e048009
--- /dev/null
+++ b/devtools/client/memory/app.js
@@ -0,0 +1,77 @@
+const { DOM: dom, createClass, createFactory, PropTypes } = require("devtools/client/shared/vendor/react");
+const { connect } = require("devtools/client/shared/vendor/react-redux");
+const { selectSnapshot, takeSnapshot } = require("./actions/snapshot");
+const Toolbar = createFactory(require("./components/toolbar"));
+const List = createFactory(require("./components/list"));
+const SnapshotListItem = createFactory(require("./components/snapshot-list-item"));
+
+const stateModel = {
+  /**
+   * {MemoryFront}
+   * Used to communicate with the platform.
+   */
+  front: PropTypes.any,
+
+  /**
+   * {Array<Snapshot>}
+   * List of references to all snapshots taken
+   */
+  snapshots: PropTypes.arrayOf(PropTypes.shape({
+    id: PropTypes.number.isRequired,
+    snapshotId: PropTypes.string,
+    selected: PropTypes.bool.isRequired,
+    status: PropTypes.oneOf([
+      "start",
+      "done",
+      "error",
+    ]).isRequired,
+  }))
+};
+
+
+const App = createClass({
+  displayName: "memory-tool",
+
+  propTypes: stateModel,
+
+  childContextTypes: {
+    front: PropTypes.any,
+  },
+
+  getChildContext() {
+    return {
+      front: this.props.front,
+    }
+  },
+
+  render() {
+    let { dispatch, snapshots, front } = this.props;
+    return (
+      dom.div({ id: "memory-tool" }, [
+
+        Toolbar({
+          buttons: [{
+            className: "take-snapshot",
+            onClick: () => dispatch(takeSnapshot(front))
+          }]
+        }),
+
+        List({
+          itemComponent: SnapshotListItem,
+          items: snapshots,
+          onClick: snapshot => dispatch(selectSnapshot(snapshot))
+        })
+      ])
+    );
+  },
+});
+
+/**
+ * Passed into react-redux's `connect` method that is called on store change
+ * and passed to components.
+ */
+function mapStateToProps (state) {
+  return { snapshots: state.snapshots };
+}
+
+module.exports = connect(mapStateToProps)(App);
diff --git a/devtools/client/memory/components/list.js b/devtools/client/memory/components/list.js
new file mode 100644
index 0000000..4181833
--- /dev/null
+++ b/devtools/client/memory/components/list.js
@@ -0,0 +1,28 @@
+const { DOM: dom, createClass, PropTypes } = require("devtools/client/shared/vendor/react");
+
+/**
+ * Generic list component that takes another react component to represent
+ * the children nodes as `itemComponent`, and a list of items to render
+ * as that component with a click handler.
+ */
+const List = module.exports = createClass({
+  displayName: "list",
+
+  propTypes: {
+    itemComponent: PropTypes.any.isRequired,
+    onClick: PropTypes.func,
+    items: PropTypes.array.isRequired,
+  },
+
+  render() {
+    let { items, onClick, itemComponent: Item } = this.props;
+
+    return (
+      dom.ul({ className: "list" }, items.map((item, index) => {
+        return Item({
+          item, index, onClick: () => onClick(item),
+        });
+      }))
+    );
+  }
+});
diff --git a/devtools/client/memory/components/moz.build b/devtools/client/memory/components/moz.build
new file mode 100644
index 0000000..f71d199
--- /dev/null
+++ b/devtools/client/memory/components/moz.build
@@ -0,0 +1,10 @@
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DevToolsModules(
+    'list.js',
+    'snapshot-list-item.js',
+    'toolbar.js',
+)
diff --git a/devtools/client/memory/components/snapshot-list-item.js b/devtools/client/memory/components/snapshot-list-item.js
new file mode 100644
index 0000000..be4000b
--- /dev/null
+++ b/devtools/client/memory/components/snapshot-list-item.js
@@ -0,0 +1,22 @@
+const { DOM: dom, createClass, PropTypes } = require("devtools/client/shared/vendor/react");
+
+const SnapshotListItem = module.exports = createClass({
+  displayName: "snapshot-list-item",
+
+  propTypes: {
+    onClick: PropTypes.func,
+    item: PropTypes.any.isRequired,
+    index: PropTypes.number.isRequired,
+  },
+
+  render() {
+    let { index, item, onClick } = this.props;
+    let className = `snapshot-list-item ${item.selected ? " selected" : ""}`;
+    return (
+      dom.li({ className, onClick },
+        dom.span({ className: "snapshot-title" }, `Snapshot #${index}`)
+      )
+    );
+  }
+});
+
diff --git a/devtools/client/memory/components/toolbar.js b/devtools/client/memory/components/toolbar.js
new file mode 100644
index 0000000..48da52b
--- /dev/null
+++ b/devtools/client/memory/components/toolbar.js
@@ -0,0 +1,16 @@
+const { DOM, createClass } = require("devtools/client/shared/vendor/react");
+
+const Toolbar = module.exports = createClass({
+  displayName: "toolbar",
+
+  render() {
+    let buttons = this.props.buttons;
+    return (
+      DOM.div({ className: "devtools-toolbar" }, ...buttons.map(spec => {
+        return DOM.button(Object.assign({}, spec, {
+          className: `${spec.className || "" } devtools-button`
+        }));
+      }))
+    );
+  }
+});
diff --git a/devtools/client/memory/constants.js b/devtools/client/memory/constants.js
index f9fc109..64501ab 100644
--- a/devtools/client/memory/constants.js
+++ b/devtools/client/memory/constants.js
@@ -2,8 +2,11 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const actions = exports.actions = {};
 
 // Fired by UI to request a snapshot from the actor.
 actions.TAKE_SNAPSHOT = "take-snapshot";
+
+// Fired by UI to select a snapshot to view.
+actions.SELECT_SNAPSHOT = "select-snapshot";
diff --git a/devtools/client/memory/controller.js b/devtools/client/memory/controller.js
deleted file mode 100644
index 00b26ff..0000000
--- a/devtools/client/memory/controller.js
+++ /dev/null
@@ -1,28 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this file,
- * You can obtain one at http://mozilla.org/MPL/2.0/. */
-"use strict";
-
-const { Task } = require("resource://gre/modules/Task.jsm");
-const Store = require("./store");
-
-/**
- * The current target, toolbox and MemoryFront, set by this tool's host.
- */
-var gToolbox, gTarget, gFront;
-
-const REDUX_METHODS_TO_PIPE = ["dispatch", "subscribe", "getState"];
-
-const MemoryController = exports.MemoryController = function ({ toolbox, target, front }) {
-  this.store = Store();
-  this.toolbox = toolbox;
-  this.target = target;
-  this.front = front;
-};
-
-REDUX_METHODS_TO_PIPE.map(m =>
-  MemoryController.prototype[m] = function (...args) { return this.store[m](...args); });
-
-MemoryController.prototype.destroy = function () {
-  this.store = this.toolbox = this.target = this.front = null;
-};
diff --git a/devtools/client/memory/initializer.js b/devtools/client/memory/initializer.js
index eddbc27..00e8e20 100644
--- a/devtools/client/memory/initializer.js
+++ b/devtools/client/memory/initializer.js
@@ -1,30 +1,38 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
-var { classes: Cc, interfaces: Ci, utils: Cu, results: Cr } = Components;
-const { require } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
+const { classes: Cc, interfaces: Ci, utils: Cu, results: Cr } = Components;
+const BrowserLoaderModule = {};
+Cu.import("resource:///modules/devtools/client/shared/browser-loader.js", BrowserLoaderModule);
+const { require } = BrowserLoaderModule.BrowserLoader("resource:///modules/devtools/client/memory/", this);
 const { Task } = require("resource://gre/modules/Task.jsm");
-const { MemoryController } = require("devtools/client/memory/controller");
+const { createFactory, createElement, render } = require("devtools/client/shared/vendor/react");
+const { Provider } = require("devtools/client/shared/vendor/react-redux");
+const App = createFactory(require("devtools/client/memory/app"));
+const Store = require("devtools/client/memory/store");
 
 /**
  * The current target, toolbox and MemoryFront, set by this tool's host.
  */
 var gToolbox, gTarget, gFront;
 
 /**
- * Initializes the profiler controller and views.
+ * The current target, toolbox and MemoryFront, set by this tool's host.
  */
-var controller = null;
+var gToolbox, gTarget, gFront;
+
 function initialize () {
-  return Task.spawn(function *() {
-    controller = new MemoryController({ toolbox: gToolbox, target: gTarget, front: gFront });
+  return Task.spawn(function*() {
+    let root = document.querySelector("#app");
+    let store = Store();
+    let app = createElement(App, { front: gFront });
+    let provider = createElement(Provider, { store }, app);
+    render(provider, root);
   });
 }
 
 function destroy () {
-  return Task.spawn(function *() {
-    controller.destroy();
-  });
+  return Task.spawn(function*(){});
 }
diff --git a/devtools/client/memory/memory.xhtml b/devtools/client/memory/memory.xhtml
index 5508a66..c79e9ae 100644
--- a/devtools/client/memory/memory.xhtml
+++ b/devtools/client/memory/memory.xhtml
@@ -6,35 +6,22 @@
   %htmlDTD;
 ]>
 
 <!-- This Source Code Form is subject to the terms of the Mozilla Public
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 <html xmlns="http://www.w3.org/1999/xhtml">
   <head>
-    <link rel="stylesheet" href="chrome://browser/skin/" type="text/css"/>
-    <link rel="stylesheet" href="chrome://browser/content/devtools/widgets.css" type="text/css"/>
     <link rel="stylesheet" href="chrome://devtools/skin/themes/common.css" type="text/css"/>
     <link rel="stylesheet" href="chrome://devtools/skin/themes/widgets.css" type="text/css"/>
     <link rel="stylesheet" href="chrome://devtools/skin/themes/memory.css" type="text/css"/>
 
     <script type="application/javascript;version=1.8"
             src="chrome://devtools/content/shared/theme-switching.js"/>
     <script type="application/javascript;version=1.8"
             src="initializer.js"></script>
   </head>
   <body class="theme-body">
-    <div class="devtools-toolbar">
-      <div id="snapshot-button" class="devtools-toolbarbutton" />
-    </div>
-    <div class="devtools-horizontal-splitter"></div>
-    <div id="memory-content"
-         class="devtools-responsive-container"
-         flex="1">
-      <toolbar class="devtools-toolbar">
-        <spacer flex="1"></spacer>
-      </toolbar>
-      <hbox flex="1">
-      </hbox>
+    <div id="app">
     </div>
   </body>
 </html>
diff --git a/devtools/client/memory/moz.build b/devtools/client/memory/moz.build
index a4241a1..3c7cba0 100644
--- a/devtools/client/memory/moz.build
+++ b/devtools/client/memory/moz.build
@@ -1,22 +1,24 @@
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DIRS += [
     'actions',
+    'components',
     'modules',
     'reducers',
 ]
 
 DevToolsModules(
+    'app.js',
     'constants.js',
-    'controller.js',
     'initializer.js',
     'panel.js',
     'reducers.js',
     'store.js',
 )
 
+BROWSER_CHROME_MANIFESTS += ['test/browser/browser.ini']
 MOCHITEST_CHROME_MANIFESTS += ['test/mochitest/chrome.ini']
 XPCSHELL_TESTS_MANIFESTS += ['test/unit/xpcshell.ini']
diff --git a/devtools/client/memory/reducers/snapshot.js b/devtools/client/memory/reducers/snapshot.js
index b967133..cf1d61f 100644
--- a/devtools/client/memory/reducers/snapshot.js
+++ b/devtools/client/memory/reducers/snapshot.js
@@ -3,17 +3,19 @@ const { PROMISE } = require("devtools/client/shared/redux/middleware/promise");
 const DevToolsUtils = require("devtools/shared/DevToolsUtils");
 
 function handleTakeSnapshot (state, action) {
   switch (action.status) {
 
     case "start":
       return [...state, {
         id: action.seqId,
-        status: action.status
+        status: action.status,
+        // auto selected if this is the first snapshot
+        selected: state.length === 0
       }];
 
     case "done":
       let snapshot = state.find(s => s.id === action.seqId);
       if (!snapshot) {
         DevToolsUtils.reportException(`No snapshot with id "${action.seqId}" for TAKE_SNAPSHOT`);
         break;
       }
@@ -22,16 +24,31 @@ function handleTakeSnapshot (state, action) {
       return [...state];
 
     case "error":
       DevToolsUtils.reportException(`No async state found for ${action.type}`);
   }
   return [...state];
 }
 
+function handleSelectSnapshot (state, action) {
+  let selected = state.find(s => s.id === action.snapshot.id);
+
+  if (!selected) {
+    DevToolsUtils.reportException(`Cannot select non-existant snapshot ${snapshot.id}`);
+  }
+
+  return state.map(s => {
+    s.selected = s === selected;
+    return s;
+  });
+}
+
 module.exports = function (state=[], action) {
   switch (action.type) {
     case actions.TAKE_SNAPSHOT:
       return handleTakeSnapshot(state, action);
+    case actions.SELECT_SNAPSHOT:
+      return handleSelectSnapshot(state, action);
   }
 
   return state;
 };
diff --git a/devtools/client/memory/store.js b/devtools/client/memory/store.js
index c9eef1f..ea7e1ac 100644
--- a/devtools/client/memory/store.js
+++ b/devtools/client/memory/store.js
@@ -1,8 +1,9 @@
 const { combineReducers } = require("../shared/vendor/redux");
 const createStore = require("../shared/redux/create-store");
 const reducers = require("./reducers");
 const DevToolsUtils = require("devtools/shared/DevToolsUtils");
 
 module.exports = function () {
-  return createStore({ log: DevToolsUtils.testing })(combineReducers(reducers), {});
+  let shouldLog = DevToolsUtils.testing;
+  return createStore({ log: shouldLog })(combineReducers(reducers), {});
 };
diff --git a/devtools/client/memory/test/unit/head.js b/devtools/client/memory/test/unit/head.js
index 3e3761d2..43ffceb 100644
--- a/devtools/client/memory/test/unit/head.js
+++ b/devtools/client/memory/test/unit/head.js
@@ -7,22 +7,21 @@ var { classes: Cc, interfaces: Ci, utils: Cu, results: Cr } = Components;
 var { Services } = Cu.import("resource://gre/modules/Services.jsm", {});
 var { gDevTools } = Cu.import("resource:///modules/devtools/client/framework/gDevTools.jsm", {});
 var { console } = Cu.import("resource://gre/modules/devtools/shared/Console.jsm", {});
 var { require } = Cu.import("resource://gre/modules/devtools/shared/Loader.jsm", {});
 var { TargetFactory } = require("devtools/client/framework/target");
 var DevToolsUtils = require("devtools/shared/DevToolsUtils");
 var promise = require("promise");
 var { Task } = Cu.import("resource://gre/modules/Task.jsm", {});
-var { MemoryController } = require("devtools/client/memory/controller");
 var { expectState } = require("devtools/server/actors/common");
 var HeapSnapshotFileUtils = require("devtools/shared/heapsnapshot/HeapSnapshotFileUtils");
 var { addDebuggerToGlobal } = require("resource://gre/modules/jsdebugger.jsm");
+var Store = require("devtools/client/memory/store");
 var SYSTEM_PRINCIPAL = Cc["@mozilla.org/systemprincipal;1"].createInstance(Ci.nsIPrincipal);
-var { setTimeout } = require("sdk/timers");
 
 DevToolsUtils.testing = true;
 
 function initDebugger () {
   let global = new Cu.Sandbox(SYSTEM_PRINCIPAL, { freshZone: true });
   addDebuggerToGlobal(global);
   return new global.Debugger();
 }
@@ -41,16 +40,22 @@ StubbedMemoryFront.prototype.detach = Task.async(function *() {
 
 StubbedMemoryFront.prototype.saveHeapSnapshot = expectState("attached", Task.async(function *() {
   let path = ThreadSafeChromeUtils.saveHeapSnapshot({ debugger: this.dbg });
   return HeapSnapshotFileUtils.getSnapshotIdFromPath(path);
 }), "saveHeapSnapshot");
 
 function waitUntilState (store, predicate) {
   let deferred = promise.defer();
-  let unsubscribe = store.subscribe(() => {
+  let unsubscribe = store.subscribe(check);
+
+  function check () {
     if (predicate(store.getState())) {
       unsubscribe();
       deferred.resolve()
     }
-  });
+  }
+
+  // Fire the check immediately incase the action has already occurred
+  check();
+
   return deferred.promise;
 }
diff --git a/devtools/client/memory/test/unit/test_action-select-snapshot.js b/devtools/client/memory/test/unit/test_action-select-snapshot.js
new file mode 100644
index 0000000..c4882f1
--- /dev/null
+++ b/devtools/client/memory/test/unit/test_action-select-snapshot.js
@@ -0,0 +1,38 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests the reducer responding to the action `selectSnapshot(snapshot)`
+ */
+
+let actions = require("devtools/client/memory/actions/snapshot");
+
+function run_test() {
+  run_next_test();
+}
+
+add_task(function *() {
+  let front = new StubbedMemoryFront();
+  yield front.attach();
+  let store = Store();
+
+  for (let i = 0; i < 5; i++) {
+    store.dispatch(actions.takeSnapshot(front));
+  }
+
+  yield waitUntilState(store, ({ snapshots }) => snapshots.length === 5 && snapshots.every(isDone));
+
+  ok(store.getState().snapshots[0].selected, "snapshot[0] selected by default");
+
+  for (let i = 1; i < 5; i++) {
+    do_print(`Selecting snapshot[${i}]`);
+    store.dispatch(actions.selectSnapshot(store.getState().snapshots[i]));
+    yield waitUntilState(store, ({ snapshots }) => snapshots[i].selected);
+
+    let { snapshots } = store.getState();
+    ok(snapshots[i].selected, `snapshot[${i}] selected`);
+    equal(snapshots.filter(s => !s.selected).length, 4, "All other snapshots are unselected");
+  }
+});
+
+function isDone (s) { return s.status === "done"; }
diff --git a/devtools/client/memory/test/unit/test_action-take-snapshot.js b/devtools/client/memory/test/unit/test_action-take-snapshot.js
index b4646e2..6961bd9 100644
--- a/devtools/client/memory/test/unit/test_action-take-snapshot.js
+++ b/devtools/client/memory/test/unit/test_action-take-snapshot.js
@@ -1,45 +1,63 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
- * Tests the async action creator `takeSnapshot(front)`
+ * Tests the async reducer responding to the action `takeSnapshot(front)`
  */
 
 var actions = require("devtools/client/memory/actions/snapshot");
 
 function run_test() {
   run_next_test();
 }
 
 add_task(function *() {
   let front = new StubbedMemoryFront();
   yield front.attach();
-  let controller = new MemoryController({ toolbox: {}, target: {}, front });
+  let store = Store();
 
-  let unsubscribe = controller.subscribe(checkState);
+  let unsubscribe = store.subscribe(checkState);
 
   let foundPendingState = false;
   let foundDoneState = false;
+  let foundAllSnapshots = false;
 
   function checkState () {
-    let state = controller.getState();
-    if (state.snapshots.length === 1 && state.snapshots[0].status === "start") {
+    let { snapshots } = store.getState();
+
+    if (snapshots.length === 1 && snapshots[0].status === "start") {
       foundPendingState = true;
       ok(foundPendingState, "Got state change for pending heap snapshot request");
-      ok(!(state.snapshots[0].snapshotId), "Snapshot does not yet have a snapshotId");
+      ok(snapshots[0].selected, "First snapshot is auto-selected");
+      ok(!(snapshots[0].snapshotId), "Snapshot does not yet have a snapshotId");
     }
-    if (state.snapshots.length === 1 && state.snapshots[0].status === "done") {
+    if (snapshots.length === 1 && snapshots[0].status === "done") {
       foundDoneState = true;
       ok(foundDoneState, "Got state change for completed heap snapshot request");
-      ok(state.snapshots[0].snapshotId, "Snapshot fetched with a snapshotId");
+      ok(snapshots[0].snapshotId, "Snapshot fetched with a snapshotId");
     }
-    if (state.snapshots.lenght === 1 && state.snapshots[0].status === "error") {
+    if (snapshots.length === 1 && snapshots[0].status === "error") {
       ok(false, "takeSnapshot's promise returned with an error");
     }
+
+    if (snapshots.length === 5 && snapshots.every(s => s.status === "done")) {
+      foundAllSnapshots = true;
+      ok(snapshots.every(s => s.status === "done"), "All snapshots have a snapshotId");
+      equal(snapshots.length, 5, "Found 5 snapshots");
+      ok(snapshots.every(s => s.snapshotId), "All snapshots have a snapshotId");
+      ok(snapshots[0].selected, "First snapshot still selected");
+      equal(snapshots.filter(s => !s.selected).length, 4, "All other snapshots are unselected");
+    }
   }
 
-  controller.dispatch(actions.takeSnapshot(front));
-  yield waitUntilState(controller, () => foundPendingState && foundDoneState);
+  store.dispatch(actions.takeSnapshot(front));
+
+  yield waitUntilState(store, () => foundPendingState && foundDoneState);
+
+  for (let i = 0; i < 4; i++) {
+    store.dispatch(actions.takeSnapshot(front));
+  }
 
+  yield waitUntilState(store, () => foundAllSnapshots);
   unsubscribe();
 });
diff --git a/devtools/client/memory/test/unit/xpcshell.ini b/devtools/client/memory/test/unit/xpcshell.ini
index 555d31e..ce47c63 100644
--- a/devtools/client/memory/test/unit/xpcshell.ini
+++ b/devtools/client/memory/test/unit/xpcshell.ini
@@ -1,8 +1,9 @@
 [DEFAULT]
 tags = devtools
 head = head.js
 tail =
 firefox-appdir = browser
 skip-if = toolkit == 'android' || toolkit == 'gonk'
 
+[test_action-select-snapshot.js]
 [test_action-take-snapshot.js]
diff --git a/devtools/client/shared/browser-loader.js b/devtools/client/shared/browser-loader.js
index efc672b..ef0f2fd 100644
--- a/devtools/client/shared/browser-loader.js
+++ b/devtools/client/shared/browser-loader.js
@@ -18,17 +18,17 @@ catch(e) {
   // will be loaded if this is true, and that file doesn't get built
   // into the release version of Firefox, so this will only work with
   // dev environments.
   appConstants = {
     DEBUG_JS_MODULES: true
   };
 }
 
-const VENDOR_CONTENT_URL = "resource:///modules/devtools/shared/vendor";
+const VENDOR_CONTENT_URL = "resource:///modules/devtools/client/shared/vendor";
 
 /*
  * Create a loader to be used in a browser environment. This evaluates
  * modules in their own environment, but sets window (the normal
  * global object) as the sandbox prototype, so when a variable is not
  * defined it checks `window` before throwing an error. This makes all
  * browser APIs available to modules by default, like a normal browser
  * environment, but modules are still evaluated in their own scope.
diff --git a/devtools/client/themes/common.css b/devtools/client/themes/common.css
index b298d47..da04210 100644
--- a/devtools/client/themes/common.css
+++ b/devtools/client/themes/common.css
@@ -10,16 +10,20 @@
   --monospace-font-family: Menlo, monospace;
 %elifdef XP_WIN
   --monospace-font-family: Consolas, monospace;
 %else
   --monospace-font-family: monospace;
 %endif
 }
 
+.theme-body {
+  margin: 0;
+}
+
 .devtools-monospace {
   font-family: var(--monospace-font-family);
 %if defined(MOZ_WIDGET_GTK) || defined(MOZ_WIDGET_QT)
   font-size: 80%;
 %endif
 }
 
 /* Bottom-docked toolbox minimize transition */
diff --git a/devtools/client/themes/memory.css b/devtools/client/themes/memory.css
index 78f8f1f..6c15ee8 100644
--- a/devtools/client/themes/memory.css
+++ b/devtools/client/themes/memory.css
@@ -15,16 +15,104 @@
 .theme-light {
   --cell-border-color: rgba(0,0,0,0.15);
   --cell-border-color-light: rgba(0,0,0,0.1);
   --focus-cell-border-color: rgba(0,0,0,0.3);
   --row-alt-background-color: rgba(76,158,217,0.1);
   --row-hover-background-color: rgba(76,158,217,0.2);
 }
 
+/**
+ * TODO bug 1213100
+ * should generalize toolbar buttons with images in them
+ * toolbars.inc.css contains definitions for .devtools-button,
+ * I wager that many of the below styles can be rolled into that
+ */
+.devtools-button.take-snapshot {
+  margin: 2px 1px;
+  padding: 1px;
+  border-width: 0px;
+  /* [standalone] buttons override min-height from 18px to 24px -- why? */
+  min-height: 18px;
+  /* not sure why this is needed for positioning */
+  display: -moz-box;
+}
+
+.devtools-button.take-snapshot::before {
+  background-image: url(images/command-screenshot.png);
+  -moz-appearance: none;
+  width: 16px;
+  height: 16px;
+  background-size: 64px 16px;
+  background-position: 0 center;
+  background-repeat: no-repeat;
+}
+@media (min-resolution: 1.1dppx) {
+  .devtools-button.take-snapshot::before {
+    background-image: url(images/command-screenshot@2x.png);
+  }
+}
+
+/**
+ * TODO bug 1213100
+ * Should this be codified in .devtools-toolbar itself?
+ */
+#memory-tool .devtools-toolbar {
+  display: flex;
+  flex-direction: row;
+  align-items: center;
+  height: 20px;
+}
+
+/**
+ * TODO bug 1213100
+ * Once we figure out how to store invertable buttons (pseudo element like in this case?)
+ * we should add a .invertable class to handle this generally, rather than the definitions
+ * in toolbars.inc.css.
+ *
+ * @see bug 1173397 for another inverted related bug
+ */
+.theme-light .devtools-toolbarbutton.take-snapshot::before {
+  filter: url(images/filters.svg#invert);
+}
+
+/**
+ * TODO bug 1213100
+ * The .list style is for a generalized React list component. It's children (.list > li)
+ * are generally styled here, as the component can take any type of child component.
+ * Memory tool specific styling are handling in (li.snapshot-list-item).
+ */
+
+.list {
+  margin: 0;
+  padding: 0;
+  width: 186px;
+  list-style-type: none;
+  font-size: 12px;
+}
+
+.list > li {
+  height: 40px;
+  color: var(--theme-body-color);
+  border-bottom: 1px solid transparent;
+  border-top: 1px solid rgba(128,128,128,0.15);
+  padding: 8px;
+  cursor: pointer;
+}
+
+.list > li.selected {
+  background-color: var(--theme-selection-background);
+  color: var(--theme-selection-color);
+}
+
+
+/**
+ * Heap View
+ */
+
 .heap-view {
   position: relative;
 }
 
 .heap-view .theme-twisty {
   text-align: end;
 }
 
-- 
2.3.1

