From 383905a776e51fce1c82514514fcfeb5852eac42 Mon Sep 17 00:00:00 2001
From: Jordan Santell <jsantell@gmail.com>
Date: Tue, 20 May 2014 11:17:04 -0700
Subject: Bug 1007920 - Handle non-primitive types in the AudioNode
 actor and in the web audio editor tool. r=vp

---
 .../devtools/webaudioeditor/test/440hz_sine.ogg    | Bin 0 -> 11822 bytes
 browser/devtools/webaudioeditor/test/browser.ini   |   7 +-
 .../test/browser_audionode-actor-get-params-01.js  |  46 ++++++++
 .../test/browser_audionode-actor-get-params-02.js  |  45 ++++++++
 .../test/browser_audionode-actor-get-params.js     |  51 ---------
 .../test/browser_audionode-actor-get-set-param.js  |   3 +-
 .../test/browser_wa_properties-view-edit.js        |   4 +-
 .../browser_wa_properties-view-params-objects.js   |  39 +++++++
 .../test/browser_wa_properties-view-params.js      |  39 +++++++
 .../webaudioeditor/test/doc_buffer-and-array.html  |  56 ++++++++++
 browser/devtools/webaudioeditor/test/head.js       | 120 ++++++++++++++++++---
 toolkit/devtools/server/actors/webaudio.js         |  52 +++++++--
 12 files changed, 383 insertions(+), 79 deletions(-)
 create mode 100644 browser/devtools/webaudioeditor/test/440hz_sine.ogg
 create mode 100644 browser/devtools/webaudioeditor/test/browser_audionode-actor-get-params-01.js
 create mode 100644 browser/devtools/webaudioeditor/test/browser_audionode-actor-get-params-02.js
 delete mode 100644 browser/devtools/webaudioeditor/test/browser_audionode-actor-get-params.js
 create mode 100644 browser/devtools/webaudioeditor/test/browser_wa_properties-view-params-objects.js
 create mode 100644 browser/devtools/webaudioeditor/test/browser_wa_properties-view-params.js
 create mode 100644 browser/devtools/webaudioeditor/test/doc_buffer-and-array.html

diff --git a/browser/devtools/webaudioeditor/test/440hz_sine.ogg b/browser/devtools/webaudioeditor/test/440hz_sine.ogg
new file mode 100644
index 0000000000000000000000000000000000000000..bd84564e2cd30d4bdceb85d6b9d9036257d38f69
GIT binary patch
literal 11822
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

literal 0
HcmV?d00001

diff --git a/browser/devtools/webaudioeditor/test/browser.ini b/browser/devtools/webaudioeditor/test/browser.ini
index 30cd892..2bc0dbe 100644
--- a/browser/devtools/webaudioeditor/test/browser.ini
+++ b/browser/devtools/webaudioeditor/test/browser.ini
@@ -1,27 +1,32 @@
 [DEFAULT]
 skip-if = e10s # Bug ?????? - devtools tests disabled with e10s
 subsuite = devtools
 support-files =
   doc_simple-context.html
   doc_complex-context.html
   doc_simple-node-creation.html
+  doc_buffer-and-array.html
+  440hz_sine.ogg
   head.js
 
 [browser_audionode-actor-get-set-param.js]
 [browser_audionode-actor-get-type.js]
-[browser_audionode-actor-get-params.js]
+[browser_audionode-actor-get-params-01.js]
+[browser_audionode-actor-get-params-02.js]
 [browser_audionode-actor-get-param-flags.js]
 [browser_audionode-actor-is-source.js]
 [browser_webaudio-actor-simple.js]
 
 [browser_wa_first-run.js]
 
 [browser_wa_graph-click.js]
 [browser_wa_graph-render-01.js]
 [browser_wa_graph-render-02.js]
 
 [browser_wa_properties-view.js]
 [browser_wa_properties-view-edit.js]
+[browser_wa_properties-view-params.js]
+[browser_wa_properties-view-params-objects.js]
 
 [browser_wa_inspector.js]
 [browser_wa_inspector-toggle.js]
diff --git a/browser/devtools/webaudioeditor/test/browser_audionode-actor-get-params-01.js b/browser/devtools/webaudioeditor/test/browser_audionode-actor-get-params-01.js
new file mode 100644
index 0000000..046dffa
--- /dev/null
+++ b/browser/devtools/webaudioeditor/test/browser_audionode-actor-get-params-01.js
@@ -0,0 +1,46 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Test AudioNode#getParams()
+ */
+
+function spawnTest () {
+  let [target, debuggee, front] = yield initBackend(SIMPLE_NODES_URL);
+  let [_, nodes] = yield Promise.all([
+    front.setup({ reload: true }),
+    getN(front, "create-node", 14)
+  ]);
+
+  let allNodeParams = yield Promise.all(nodes.map(node => node.getParams()));
+  let nodeTypes = [
+    "AudioDestinationNode",
+    "AudioBufferSourceNode", "ScriptProcessorNode", "AnalyserNode", "GainNode",
+    "DelayNode", "BiquadFilterNode", "WaveShaperNode", "PannerNode", "ConvolverNode",
+    "ChannelSplitterNode", "ChannelMergerNode", "DynamicsCompressorNode", "OscillatorNode"
+  ];
+
+  nodeTypes.forEach((type, i) => {
+    let params = allNodeParams[i];
+    params.forEach(({param, value, flags}) => {
+      ok(param in NODE_DEFAULT_VALUES[type], "expected parameter for " + type);
+
+      ok(typeof flags === "object", type + " has a flags object");
+
+      if (param === "buffer") {
+        is(flags.Buffer, true, "`buffer` params have Buffer flag");
+      }
+      else if (param === "bufferSize" || param === "frequencyBinCount") {
+        is(flags.readonly, true, param + " is readonly");
+      }
+      else if (param === "curve") {
+        is(flags["Float32Array"], true, "`curve` param has Float32Array flag");
+      } else {
+        is(Object.keys(flags), 0, type + "-" + param + " has no flags set")
+      }
+    });
+  });
+
+  yield removeTab(target.tab);
+  finish();
+}
diff --git a/browser/devtools/webaudioeditor/test/browser_audionode-actor-get-params-02.js b/browser/devtools/webaudioeditor/test/browser_audionode-actor-get-params-02.js
new file mode 100644
index 0000000..7a7bb95
--- /dev/null
+++ b/browser/devtools/webaudioeditor/test/browser_audionode-actor-get-params-02.js
@@ -0,0 +1,45 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that default properties are returned with the correct type
+ * from the AudioNode actors.
+ */
+
+function spawnTest() {
+  let [target, debuggee, front] = yield initBackend(SIMPLE_NODES_URL);
+  let [_, nodes] = yield Promise.all([
+    front.setup({ reload: true }),
+    getN(front, "create-node", 14)
+  ]);
+
+  let allParams = yield Promise.all(nodes.map(node => node.getParams()));
+  let types = [
+    "AudioDestinationNode", "AudioBufferSourceNode", "ScriptProcessorNode",
+    "AnalyserNode", "GainNode", "DelayNode", "BiquadFilterNode", "WaveShaperNode",
+    "PannerNode", "ConvolverNode", "ChannelSplitterNode", "ChannelMergerNode",
+    "DynamicsCompressorNode", "OscillatorNode"
+  ];
+
+  allParams.forEach((params, i) => {
+    compare(params, NODE_DEFAULT_VALUES[types[i]], types[i]);
+  });
+
+  yield removeTab(target.tab);
+  finish();
+}
+
+function compare (actual, expected, type) {
+  actual.forEach(({ value, param }) => {
+    value = getGripValue(value);
+    if (typeof expected[param] === "function") {
+      ok(expected[param](value), type + " has a passing value for " + param);
+    }
+    else {
+      ise(value, expected[param], type + " has correct default value and type for " + param);
+    }
+  });
+
+  is(actual.length, Object.keys(expected).length,
+    type + " has correct amount of properties.");
+}
diff --git a/browser/devtools/webaudioeditor/test/browser_audionode-actor-get-params.js b/browser/devtools/webaudioeditor/test/browser_audionode-actor-get-params.js
deleted file mode 100644
index 3a7867e..0000000
--- a/browser/devtools/webaudioeditor/test/browser_audionode-actor-get-params.js
+++ /dev/null
@@ -1,51 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Test AudioNode#getParams()
- */
-
-function spawnTest () {
-  let [target, debuggee, front] = yield initBackend(SIMPLE_NODES_URL);
-  let [_, nodes] = yield Promise.all([
-    front.setup({ reload: true }),
-    getN(front, "create-node", 14)
-  ]);
-
-  let allNodeParams = yield Promise.all(nodes.map(node => node.getParams()));
-  let nodeTypes = [
-    "AudioDestinationNode",
-    "AudioBufferSourceNode", "ScriptProcessorNode", "AnalyserNode", "GainNode",
-    "DelayNode", "BiquadFilterNode", "WaveShaperNode", "PannerNode", "ConvolverNode",
-    "ChannelSplitterNode", "ChannelMergerNode", "DynamicsCompressorNode", "OscillatorNode"
-  ];
-
-  nodeTypes.forEach((type, i) => {
-    let params = allNodeParams[i];
-    params.forEach(({param, value, flags}) => {
-      ok(~NODE_PROPERTIES[type].indexOf(param), "expected parameter for " + type);
-
-      // Skip over some properties that are undefined by default
-      if (!/buffer|loop|smoothing|curve|cone/.test(param)) {
-        ok(value != undefined, param + " is not undefined");
-      }
-
-      ok(typeof flags === "object", type + " has a flags object");
-
-      if (param === "buffer") {
-        is(flags.Buffer, true, "`buffer` params have Buffer flag");
-      }
-      else if (param === "bufferSize" || param === "frequencyBinCount") {
-        is(flags.readonly, true, param + " is readonly");
-      }
-      else if (param === "curve") {
-        is(flags["Float32Array"], true, "`curve` param has Float32Array flag");
-      } else {
-        is(Object.keys(flags), 0, type + "-" + param + " has no flags set")
-      }
-    });
-  });
-
-  yield removeTab(target.tab);
-  finish();
-}
diff --git a/browser/devtools/webaudioeditor/test/browser_audionode-actor-get-set-param.js b/browser/devtools/webaudioeditor/test/browser_audionode-actor-get-set-param.js
index 4748217..3122b8a 100644
--- a/browser/devtools/webaudioeditor/test/browser_audionode-actor-get-set-param.js
+++ b/browser/devtools/webaudioeditor/test/browser_audionode-actor-get-set-param.js
@@ -15,17 +15,18 @@ function spawnTest () {
   let freq = yield oscNode.getParam("frequency");
   info(typeof freq);
   ise(freq, 440, "AudioNode:getParam correctly fetches AudioParam");
 
   let type = yield oscNode.getParam("type");
   ise(type, "sine", "AudioNode:getParam correctly fetches non-AudioParam");
 
   let type = yield oscNode.getParam("not-a-valid-param");
-  is(type, undefined, "AudioNode:getParam correctly returns false for invalid param");
+  ok(type.type === "undefined",
+    "AudioNode:getParam correctly returns a grip value for `undefined` for an invalid param.");
 
   let resSuccess = yield oscNode.setParam("frequency", 220);
   let freq = yield oscNode.getParam("frequency");
   ise(freq, 220, "AudioNode:setParam correctly sets a `number` AudioParam");
   is(resSuccess, undefined, "AudioNode:setParam returns undefined for correctly set AudioParam");
 
   resSuccess = yield oscNode.setParam("type", "square");
   let type = yield oscNode.getParam("type");
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_properties-view-edit.js b/browser/devtools/webaudioeditor/test/browser_wa_properties-view-edit.js
index 3816f8c..073b58e 100644
--- a/browser/devtools/webaudioeditor/test/browser_wa_properties-view-edit.js
+++ b/browser/devtools/webaudioeditor/test/browser_wa_properties-view-edit.js
@@ -26,30 +26,30 @@ function spawnTest() {
   yield Promise.all([
     once(panelWin, EVENTS.UI_INSPECTOR_NODE_SET),
     once(panelWin, EVENTS.UI_INSPECTOR_TOGGLED)
   ]);
 
   let setAndCheck = setAndCheckVariable(panelWin, gVars);
 
   checkVariableView(gVars, 0, {
-    "type": "\"sine\"",
+    "type": "sine",
     "frequency": 440,
     "detune": 0
   }, "default loaded string");
 
   click(panelWin, findGraphNode(panelWin, nodeIds[2]));
   yield once(panelWin, EVENTS.UI_INSPECTOR_NODE_SET);
   checkVariableView(gVars, 0, {
     "gain": 0
   }, "default loaded number");
 
   click(panelWin, findGraphNode(panelWin, nodeIds[1]));
   yield once(panelWin, EVENTS.UI_INSPECTOR_NODE_SET);
-  yield setAndCheck(0, "type", "square", "\"square\"", "sets string as string");
+  yield setAndCheck(0, "type", "square", "square", "sets string as string");
 
   click(panelWin, findGraphNode(panelWin, nodeIds[2]));
   yield once(panelWin, EVENTS.UI_INSPECTOR_NODE_SET);
   yield setAndCheck(0, "gain", 0.005, 0.005, "sets number as number");
 
   yield teardown(panel);
   finish();
 }
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_properties-view-params-objects.js b/browser/devtools/webaudioeditor/test/browser_wa_properties-view-params-objects.js
new file mode 100644
index 0000000..58521b5
--- /dev/null
+++ b/browser/devtools/webaudioeditor/test/browser_wa_properties-view-params-objects.js
@@ -0,0 +1,39 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that params view correctly displays non-primitive properties
+ * like AudioBuffer and Float32Array in properties of AudioNodes.
+ */
+
+function spawnTest() {
+  let [target, debuggee, panel] = yield initWebAudioEditor(BUFFER_AND_ARRAY_URL);
+  let { panelWin } = panel;
+  let { gFront, $, $$, EVENTS, WebAudioInspectorView } = panelWin;
+  let gVars = WebAudioInspectorView._propsView;
+
+  let started = once(gFront, "start-context");
+
+  reload(target);
+
+  let [actors] = yield Promise.all([
+    getN(gFront, "create-node", 3),
+    waitForGraphRendered(panelWin, 3, 2)
+  ]);
+  let nodeIds = actors.map(actor => actor.actorID);
+
+  click(panelWin, findGraphNode(panelWin, nodeIds[2]));
+  yield once(panelWin, EVENTS.UI_INSPECTOR_NODE_SET);
+  checkVariableView(gVars, 0, {
+    "curve": "Float32Array"
+  }, "WaveShaper's `curve` is listed as an `Float32Array`.");
+
+  click(panelWin, findGraphNode(panelWin, nodeIds[1]));
+  yield once(panelWin, EVENTS.UI_INSPECTOR_NODE_SET);
+  checkVariableView(gVars, 0, {
+    "buffer": "AudioBuffer"
+  }, "AudioBufferSourceNode's `buffer` is listed as an `AudioBuffer`.");
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_properties-view-params.js b/browser/devtools/webaudioeditor/test/browser_wa_properties-view-params.js
new file mode 100644
index 0000000..0fce988
--- /dev/null
+++ b/browser/devtools/webaudioeditor/test/browser_wa_properties-view-params.js
@@ -0,0 +1,39 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that params view correctly displays all properties for nodes
+ * correctly, with default values and correct types.
+ */
+
+function spawnTest() {
+  let [target, debuggee, panel] = yield initWebAudioEditor(SIMPLE_NODES_URL);
+  let { panelWin } = panel;
+  let { gFront, $, $$, EVENTS, WebAudioInspectorView } = panelWin;
+  let gVars = WebAudioInspectorView._propsView;
+
+  let started = once(gFront, "start-context");
+
+  reload(target);
+
+  let [actors] = yield Promise.all([
+    getN(gFront, "create-node", 14),
+    waitForGraphRendered(panelWin, 14, 0)
+  ]);
+  let nodeIds = actors.map(actor => actor.actorID);
+  let types = [
+    "AudioDestinationNode", "AudioBufferSourceNode", "ScriptProcessorNode",
+    "AnalyserNode", "GainNode", "DelayNode", "BiquadFilterNode", "WaveShaperNode",
+    "PannerNode", "ConvolverNode", "ChannelSplitterNode", "ChannelMergerNode",
+    "DynamicsCompressorNode", "OscillatorNode"
+  ];
+
+  for (let i = 0; i < types.length; i++) {
+    click(panelWin, findGraphNode(panelWin, nodeIds[i]));
+    yield once(panelWin, EVENTS.UI_INSPECTOR_NODE_SET);
+    checkVariableView(gVars, 0, NODE_DEFAULT_VALUES[types[i]], types[i]);
+  }
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/webaudioeditor/test/doc_buffer-and-array.html b/browser/devtools/webaudioeditor/test/doc_buffer-and-array.html
new file mode 100644
index 0000000..49dc91f
--- /dev/null
+++ b/browser/devtools/webaudioeditor/test/doc_buffer-and-array.html
@@ -0,0 +1,56 @@
+<!-- Any copyright is dedicated to the Public Domain.
+     http://creativecommons.org/publicdomain/zero/1.0/ -->
+<!doctype html>
+
+<html>
+  <head>
+    <meta charset="utf-8"/>
+    <title>Web Audio Editor test page</title>
+  </head>
+
+  <body>
+
+    <script type="text/javascript;version=1.8">
+      "use strict";
+
+      let audioURL = "http://example.com/browser/browser/devtools/webaudioeditor/test/440hz_sine.ogg";
+
+      let ctx = new AudioContext();
+      let bufferNode = ctx.createBufferSource();
+      let shaperNode = ctx.createWaveShaper();
+      shaperNode.curve = generateWaveShapingCurve();
+
+      let xhr = getBuffer(audioURL, () => {
+        ctx.decodeAudioData(xhr.response, (buffer) => {
+          bufferNode.buffer = buffer;
+          bufferNode.connect(shaperNode);
+          shaperNode.connect(ctx.destination);
+        });
+      });
+
+      function generateWaveShapingCurve() {
+        let frames = 65536;
+        let curve = new Float32Array(frames);
+        let n = frames;
+        let n2 = n / 2;
+
+        for (let i = 0; i < n; ++i) {
+          let x = (i - n2) / n2;
+          let y = Math.atan(5 * x) / (0.5 * Math.PI);
+        }
+
+        return curve;
+      }
+
+      function getBuffer (url, callback) {
+        let xhr = new XMLHttpRequest();
+        xhr.open("GET", url, true);
+        xhr.responseType = "arraybuffer";
+        xhr.onload = callback;
+        xhr.send();
+        return xhr;
+      }
+    </script>
+  </body>
+
+</html>
diff --git a/browser/devtools/webaudioeditor/test/head.js b/browser/devtools/webaudioeditor/test/head.js
index d9d6f6b..587bbae 100644
--- a/browser/devtools/webaudioeditor/test/head.js
+++ b/browser/devtools/webaudioeditor/test/head.js
@@ -19,16 +19,17 @@ let { DebuggerServer } = Cu.import("resource://gre/modules/devtools/dbg-server.j
 
 let { WebAudioFront } = devtools.require("devtools/server/actors/webaudio");
 let TargetFactory = devtools.TargetFactory;
 
 const EXAMPLE_URL = "http://example.com/browser/browser/devtools/webaudioeditor/test/";
 const SIMPLE_CONTEXT_URL = EXAMPLE_URL + "doc_simple-context.html";
 const COMPLEX_CONTEXT_URL = EXAMPLE_URL + "doc_complex-context.html";
 const SIMPLE_NODES_URL = EXAMPLE_URL + "doc_simple-node-creation.html";
+const BUFFER_AND_ARRAY_URL = EXAMPLE_URL + "doc_buffer-and-array.html";
 
 // All tests are asynchronous.
 waitForExplicitFinish();
 
 let gToolEnabled = Services.prefs.getBoolPref("devtools.webaudioeditor.enabled");
 
 registerCleanupFunction(() => {
   info("finish() was called, cleaning up...");
@@ -214,18 +215,33 @@ function waitForGraphRendered (front, nodeCount, edgeCount) {
 function checkVariableView (view, index, hash, description = "") {
   info("Checking Variable View");
   let scope = view.getScopeAtIndex(index);
   let variables = Object.keys(hash);
   variables.forEach(variable => {
     let aVar = scope.get(variable);
     is(aVar.target.querySelector(".name").getAttribute("value"), variable,
       "Correct property name for " + variable);
-    is(aVar.target.querySelector(".value").getAttribute("value"), hash[variable],
-      "Correct property value of " + hash[variable] + " for " + variable + " " + description);
+    let value = aVar.target.querySelector(".value").getAttribute("value");
+
+    // Cast value with JSON.parse if possible;
+    // will fail when displaying Object types like "ArrayBuffer"
+    // and "Float32Array", but will match the original value.
+    try {
+      value = JSON.parse(value);
+    }
+    catch (e) {}
+    if (typeof hash[variable] === "function") {
+      ok(hash[variable](value),
+        "Passing property value of " + value + " for " + variable + " " + description);
+    }
+    else {
+      ise(value, hash[variable],
+        "Correct property value of " + hash[variable] + " for " + variable + " " + description);
+    }
   });
 }
 
 function modifyVariableView (win, view, index, prop, value) {
   let deferred = Promise.defer();
   let scope = view.getScopeAtIndex(index);
   let aVar = scope.get(prop);
   scope.expand();
@@ -288,27 +304,97 @@ function isVisible (element) {
 function wait (n) {
   let { promise, resolve } = Promise.defer();
   setTimeout(resolve, n);
   info("Waiting " + n/1000 + " seconds.");
   return promise;
 }
 
 /**
+ * Returns the primitive value of a grip's value, or the
+ * original form that the string grip.type comes from.
+ */
+function getGripValue (value) {
+  if (~["boolean", "string", "number"].indexOf(typeof value)) {
+    return value;
+  }
+
+  switch (value.type) {
+    case "undefined": return undefined;
+    case "Infinity": return Infinity;
+    case "-Infinity": return -Infinity;
+    case "NaN": return NaN;
+    case "-0": return -0;
+    case "null": return null;
+    default: return value;
+  }
+}
+
+/**
  * List of audio node properties to test against expectations of the AudioNode actor
  */
 
-const NODE_PROPERTIES = {
-  "OscillatorNode": ["type", "frequency", "detune"],
-  "GainNode": ["gain"],
-  "DelayNode": ["delayTime"],
-  "AudioBufferSourceNode": ["buffer", "playbackRate", "loop", "loopStart", "loopEnd"],
-  "ScriptProcessorNode": ["bufferSize"],
-  "PannerNode": ["panningModel", "distanceModel", "refDistance", "maxDistance", "rolloffFactor", "coneInnerAngle", "coneOuterAngle", "coneOuterGain"],
-  "ConvolverNode": ["buffer", "normalize"],
-  "DynamicsCompressorNode": ["threshold", "knee", "ratio", "reduction", "attack", "release"],
-  "BiquadFilterNode": ["type", "frequency", "Q", "detune", "gain"],
-  "WaveShaperNode": ["curve", "oversample"],
-  "AnalyserNode": ["fftSize", "minDecibels", "maxDecibels", "smoothingTimeConstraint", "frequencyBinCount"],
-  "AudioDestinationNode": [],
-  "ChannelSplitterNode": [],
-  "ChannelMergerNode": []
+const NODE_DEFAULT_VALUES = {
+  "AudioDestinationNode": {},
+  "AudioBufferSourceNode": {
+    "playbackRate": 1,
+    "loop": false,
+    "loopStart": 0,
+    "loopEnd": 0,
+    "buffer": null
+  },
+  "ScriptProcessorNode": {
+    "bufferSize": 4096
+  },
+  "AnalyserNode": {
+    "fftSize": 2048,
+    "minDecibels": -100,
+    "maxDecibels": -30,
+    "smoothingTimeConstant": 0.8,
+    "frequencyBinCount": 1024
+  },
+  "GainNode": {
+    "gain": 1
+  },
+  "DelayNode": {
+    "delayTime": 0
+  },
+  "BiquadFilterNode": {
+    "type": "lowpass",
+    "frequency": 350,
+    "Q": 1,
+    "detune": 0,
+    "gain": 0
+  },
+  "WaveShaperNode": {
+    "curve": null,
+    "oversample": "none"
+  },
+  "PannerNode": {
+    "panningModel": "HRTF",
+    "distanceModel": "inverse",
+    "refDistance": 1,
+    "maxDistance": 10000,
+    "rolloffFactor": 1,
+    "coneInnerAngle": 360,
+    "coneOuterAngle": 360,
+    "coneOuterGain": 0
+  },
+  "ConvolverNode": {
+    "buffer": null,
+    "normalize": true
+  },
+  "ChannelSplitterNode": {},
+  "ChannelMergerNode": {},
+  "DynamicsCompressorNode": {
+    "threshold": -24,
+    "knee": 30,
+    "ratio": 12,
+    "reduction": 0,
+    "attack": 0.003000000026077032,
+    "release": 0.25
+  },
+  "OscillatorNode": {
+    "type": "sine",
+    "frequency": 440,
+    "detune": 0
+  }
 };
diff --git a/toolkit/devtools/server/actors/webaudio.js b/toolkit/devtools/server/actors/webaudio.js
index 8118ee6..a2925d9 100644
--- a/toolkit/devtools/server/actors/webaudio.js
+++ b/toolkit/devtools/server/actors/webaudio.js
@@ -6,16 +6,17 @@
 const {Cc, Ci, Cu, Cr} = require("chrome");
 
 const Services = require("Services");
 
 const { Promise: promise } = Cu.import("resource://gre/modules/Promise.jsm", {});
 const events = require("sdk/event/core");
 const protocol = require("devtools/server/protocol");
 const { CallWatcherActor, CallWatcherFront } = require("devtools/server/actors/call-watcher");
+const { ThreadActor } = require("devtools/server/actors/script");
 
 const { on, once, off, emit } = events;
 const { method, Arg, Option, RetVal } = protocol;
 
 exports.register = function(handle) {
   handle.addTabActor(WebAudioActor, "webaudioActor");
 };
 
@@ -93,17 +94,17 @@ const NODE_PROPERTIES = {
   "WaveShaperNode": {
     "curve": { "Float32Array": true },
     "oversample": {}
   },
   "AnalyserNode": {
     "fftSize": {},
     "minDecibels": {},
     "maxDecibels": {},
-    "smoothingTimeConstraint": {},
+    "smoothingTimeConstant": {},
     "frequencyBinCount": { "readonly": true },
   },
   "AudioDestinationNode": {},
   "ChannelSplitterNode": {},
   "ChannelMergerNode": {}
 };
 
 /**
@@ -123,17 +124,17 @@ let AudioNodeActor = exports.AudioNodeActor = protocol.ActorClass({
    *        The server connection.
    * @param AudioNode node
    *        The AudioNode that was created.
    */
   initialize: function (conn, node) {
     protocol.Actor.prototype.initialize.call(this, conn);
     this.node = unwrap(node);
     try {
-      this.type = this.node.toString().match(/\[object (.*)\]$/)[1];
+      this.type = getConstructorName(this.node);
     } catch (e) {
       this.type = "";
     }
   },
 
   /**
    * Returns the name of the audio type.
    * Examples: "OscillatorNode", "MediaElementAudioSourceNode"
@@ -183,21 +184,33 @@ let AudioNodeActor = exports.AudioNodeActor = protocol.ActorClass({
 
   /**
    * Gets a param on the audio node.
    *
    * @param String param
    *        Name of the AudioParam to fetch.
    */
   getParam: method(function (param) {
-    // If property does not exist, just return "undefined"
-    if (!this.node[param])
-      return undefined;
+    // Check to see if it's an AudioParam -- if so,
+    // return the `value` property of the parameter.
     let value = isAudioParam(this.node, param) ? this.node[param].value : this.node[param];
-    return value;
+
+    // Return the grip form of the value; at this time,
+    // there shouldn't be any non-primitives at the moment, other than
+    // AudioBuffer or Float32Array references and the like,
+    // so this just formats the value to be displayed in the VariablesView,
+    // without using real grips and managing via actor pools.
+    let grip;
+    try {
+      grip = ThreadActor.prototype.createValueGrip(value);
+    }
+    catch (e) {
+      grip = createObjectGrip(value);
+    }
+    return grip;
   }, {
     request: {
       param: Arg(0, "string")
     },
     response: { text: RetVal("nullable:primitive") }
   }),
 
   /**
@@ -494,28 +507,53 @@ WebAudioFront.NODE_ROUTING_METHODS = new Set(NODE_ROUTING_METHODS);
  *
  * @param AudioNode node
  *        An AudioNode.
  * @param String prop
  *        Property of `node` to evaluate to see if it's an AudioParam.
  * @return Boolean
  */
 function isAudioParam (node, prop) {
-  return /AudioParam/.test(node[prop].toString());
+  return !!(node[prop] && /AudioParam/.test(node[prop].toString()));
 }
 
 /**
  * Takes an `Error` object and constructs a JSON-able response
  *
  * @param Error err
  *        A TypeError, RangeError, etc.
  * @return Object
  */
 function constructError (err) {
   return {
     message: err.message,
     type: err.constructor.name
   };
 }
 
+/**
+ * Takes an object and converts it's `toString()` form, like
+ * "[object OscillatorNode]" or "[object Float32Array]"
+ * to a string of just the constructor name, like "OscillatorNode",
+ * or "Float32Array".
+ */
+function getConstructorName (obj) {
+  return obj.toString().match(/\[object (.*)\]$/)[1];
+}
+
+/**
+ * Create a grip-like object to pass in renderable information
+ * to the front-end for things like Float32Arrays, AudioBuffers,
+ * without tracking them in an actor pool.
+ */
+function createObjectGrip (value) {
+  return {
+    type: "object",
+    preview: {
+      kind: "ObjectWithText",
+      text: ""
+    },
+    class: getConstructorName(value)
+  };
+}
 function unwrap (obj) {
   return XPCNativeWrapper.unwrap(obj);
 }
-- 
1.8.4.2

