From: Jordan Santell <jsantell@mozilla.com>
Date: Fri, 17 Jul 2015 14:51:22 -0700
Subject: Bug 1171489 - Clamp average framerate to 60. r=vp

diff --git a/browser/devtools/shared/test/browser_graphs-15.js b/browser/devtools/shared/test/browser_graphs-15.js
index cab35b4..8cc9502 100644
--- a/browser/devtools/shared/test/browser_graphs-15.js
+++ b/browser/devtools/shared/test/browser_graphs-15.js
@@ -1,48 +1,61 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
-// Tests that graph widgets correctly emit mouse input events.
+// Tests the framerate calculations in GraphsWorker
 
 const FAST_FPS = 60;
 const SLOW_FPS = 10;
 
 // Each element represents a second
-const FRAMES= [FAST_FPS, FAST_FPS, FAST_FPS, SLOW_FPS, FAST_FPS];
+const FRAMES = [FAST_FPS, FAST_FPS, FAST_FPS, SLOW_FPS, FAST_FPS];
 const TEST_DATA = [];
 const INTERVAL = 100;
 const DURATION = 5000; // 5s
 let t = 0;
 for (let frameRate of FRAMES) {
   for (let i = 0; i < frameRate; i++) {
     let delta = Math.floor(1000 / frameRate); // Duration between frames at this rate
     t += delta;
     TEST_DATA.push(t);
   }
 }
 
+const FPS_1000 = (function () {
+  let ticks = [];
+  for (let i = 0; i < 1000; i++) {
+    ticks.push(i);
+  }
+  return ticks;
+})();
+
 let LineGraphWidget = devtools.require("devtools/shared/widgets/LineGraphWidget");
 let {Promise} = devtools.require("resource://gre/modules/Promise.jsm");
 
 add_task(function*() {
   yield promiseTab("about:blank");
   yield performTest();
   gBrowser.removeCurrentTab();
 });
 
 function* performTest() {
   let [host, win, doc] = yield createHost();
   let graph = new LineGraphWidget(doc.body, "fps");
 
   yield testGraph(graph);
+  yield testClampedFPS(graph);
 
   yield graph.destroy();
   host.destroy();
 }
 
 function* testGraph(graph) {
-
-  console.log("test data", TEST_DATA);
   yield graph.setDataFromTimestamps(TEST_DATA, INTERVAL, DURATION);
   is(graph._avgTooltip.querySelector("[text=value]").textContent, "50",
     "The average tooltip displays the correct value.");
 }
+
+function* testClampedFPS(graph) {
+  yield graph.setDataFromTimestamps(FPS_1000, INTERVAL, 1000);
+  is(graph._avgTooltip.querySelector("[text=value]").textContent, "60",
+    "The average tooltip displays the correct value.");
+}
diff --git a/browser/devtools/shared/widgets/GraphsWorker.js b/browser/devtools/shared/widgets/GraphsWorker.js
index 5820651..2853664 100644
--- a/browser/devtools/shared/widgets/GraphsWorker.js
+++ b/browser/devtools/shared/widgets/GraphsWorker.js
@@ -3,16 +3,17 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 /**
  * Import `createTask` to communicate with `devtools/toolkit/shared/worker`.
  */
 importScripts("resource://gre/modules/workers/require.js");
 const { createTask } = require("resource://gre/modules/devtools/shared/worker-helper");
+const MAX_FRAMERATE = 60;
 
 /**
  * @see LineGraphWidget.prototype.setDataFromTimestamps in Graphs.js
  * @param number id
  * @param array timestamps
  * @param number interval
  * @param number duration
  */
@@ -35,17 +36,17 @@ function getMinMaxAvg(source, timestamps, duration) {
   let totalTicks = source.length;
   let totalFrames = timestamps.length;
   let maxValue = Number.MIN_SAFE_INTEGER;
   let minValue = Number.MAX_SAFE_INTEGER;
   // Calculate the average by counting how many frames occurred
   // in the duration of the recording, rather than average the frame points
   // we have, as that weights higher FPS, as there'll be more timestamps for those
   // values
-  let avgValue = totalFrames / (duration / 1000);
+  let avgValue = Math.min(totalFrames / (duration / 1000), MAX_FRAMERATE);
 
   for (let { value } of source) {
     maxValue = Math.max(value, maxValue);
     minValue = Math.min(value, minValue);
   }
 
   return { minValue, maxValue, avgValue };
 }
@@ -61,17 +62,17 @@ function getMinMaxAvg(source, timestamps, duration) {
  * @param number interval
  *        The maximum amount of time to wait between calculations.
  * @param number clamp
  *        The maximum allowed value.
  * @return array
  *         A collection of { delta, value } objects representing the
  *         plotted value at every delta time.
  */
-function plotTimestamps(timestamps, interval = 100, clamp = 60) {
+function plotTimestamps(timestamps, interval = 100, clamp = MAX_FRAMERATE) {
   let timeline = [];
   let totalTicks = timestamps.length;
 
   // If the refresh driver didn't get a chance to tick before the
   // recording was stopped, assume rate was 0.
   if (totalTicks == 0) {
     timeline.push({ delta: 0, value: 0 });
     timeline.push({ delta: interval, value: 0 });
-- 
2.2.1

