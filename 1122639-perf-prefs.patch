From 4cbabb1da8307c74f87afc992275842159252ef5 Mon Sep 17 00:00:00 2001
From: Jordan Santell <jsantell@gmail.com>
Date: Wed, 21 Jan 2015 09:31:33 -0800
Subject: Bug 1122639 - Expose performance preferences to the tool and
 start migrating over previous profiler preferences. r=vp

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
index 2f35c65..a39dd64 100644
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1421,25 +1421,30 @@ pref("devtools.timeline.hiddenMarkers", "[]");
 
 // Enable perftools via build command
 #ifdef MOZ_DEVTOOLS_PERFTOOLS
   pref("devtools.performance_dev.enabled", true);
 #else
   pref("devtools.performance_dev.enabled", false);
 #endif
 
-pref("devtools.performance.ui.show-timeline-memory", false);
-
 // The default Profiler UI settings
+// TODO remove `devtools.profiler.ui.` branches when performance
+// tool lands (bug 1075567)
 pref("devtools.profiler.ui.flatten-tree-recursion", true);
 pref("devtools.profiler.ui.show-platform-data", false);
 pref("devtools.profiler.ui.show-idle-blocks", true);
 
 // The default Performance UI settings
 pref("devtools.performance.ui.invert-call-tree", true);
+pref("devtools.performance.ui.flatten-tree-recursion", true);
+pref("devtools.performance.ui.show-platform-data", false);
+pref("devtools.performance.ui.show-idle-blocks", true);
+pref("devtools.performance.ui.enable-memory", false);
+pref("devtools.performance.ui.enable-framerate", true);
 
 // The default cache UI setting
 pref("devtools.cache.disabled", false);
 
 // Enable the Network Monitor
 pref("devtools.netmonitor.enabled", true);
 
 // The default Network Monitor UI settings
diff --git a/browser/devtools/performance/performance-controller.js b/browser/devtools/performance/performance-controller.js
index fab0834..5919453 100644
--- a/browser/devtools/performance/performance-controller.js
+++ b/browser/devtools/performance/performance-controller.js
@@ -125,51 +125,32 @@ const EVENTS = {
  */
 let gToolbox, gTarget, gFront;
 
 /**
  * Initializes the profiler controller and views.
  */
 let startupPerformance = Task.async(function*() {
   yield promise.all([
-    PrefObserver.register(),
     PerformanceController.initialize(),
     PerformanceView.initialize()
   ]);
 });
 
 /**
  * Destroys the profiler controller and views.
  */
 let shutdownPerformance = Task.async(function*() {
   yield promise.all([
-    PrefObserver.unregister(),
     PerformanceController.destroy(),
     PerformanceView.destroy()
   ]);
 });
 
 /**
- * Observes pref changes on the devtools.profiler branch and triggers the
- * required frontend modifications.
- */
-let PrefObserver = {
-  register: function() {
-    this.branch = Services.prefs.getBranch("devtools.profiler.");
-    this.branch.addObserver("", this, false);
-  },
-  unregister: function() {
-    this.branch.removeObserver("", this);
-  },
-  observe: function(subject, topic, pref) {
-    Prefs.refresh();
-  }
-};
-
-/**
  * Functions handling target-related lifetime events and
  * UI interaction.
  */
 let PerformanceController = {
   _recordings: [],
   _currentRecording: null,
 
   /**
@@ -227,23 +208,23 @@ let PerformanceController = {
 
   /**
    * Starts recording with the PerformanceFront. Emits `EVENTS.RECORDING_STARTED`
    * when the front has started to record.
    */
   startRecording: Task.async(function *() {
     let recording = this._createRecording();
 
+    let withMemory = this.getPref("enable-memory");
+    let withTicks = this.getPref("enable-framerate");
+    let withAllocations = true;
+
     this.emit(EVENTS.RECORDING_WILL_START, recording);
-    yield recording.startRecording({
-      withTicks: true,
-      withMemory: true,
-      withAllocations: true
-    });
-    this.emit(EVENTS.RECORDING_STARTED, recording);
+    yield recording.startRecording({ withTicks, withMemory, withAllocations });
+    this.emit(EVENTS.RECORDING_STARTED, recording, { withTicks, withMemory, withAllocations });
 
     this.setCurrentRecording(recording);
   }),
 
   /**
    * Stops recording with the PerformanceFront. Emits `EVENTS.RECORDING_STOPPED`
    * when the front has stopped recording.
    */
@@ -356,25 +337,16 @@ let PerformanceController = {
 };
 
 /**
  * Convenient way of emitting events from the controller.
  */
 EventEmitter.decorate(PerformanceController);
 
 /**
- * Shortcuts for accessing various profiler preferences.
- */
-const Prefs = new ViewHelpers.Prefs("devtools.profiler", {
-  flattenTreeRecursion: ["Bool", "ui.flatten-tree-recursion"],
-  showPlatformData: ["Bool", "ui.show-platform-data"],
-  showIdleBlocks: ["Bool", "ui.show-idle-blocks"],
-});
-
-/**
  * DOM query helpers.
  */
 function $(selector, target = document) {
   return target.querySelector(selector);
 }
 function $$(selector, target = document) {
   return target.querySelectorAll(selector);
 }
diff --git a/browser/devtools/performance/performance.xul b/browser/devtools/performance/performance.xul
index 2062eb5..fe9b376 100644
--- a/browser/devtools/performance/performance.xul
+++ b/browser/devtools/performance/performance.xul
@@ -25,21 +25,41 @@
   <script type="application/javascript" src="performance/views/details-js-flamegraph.js"/>
   <script type="application/javascript" src="performance/views/details-memory-call-tree.js"/>
   <script type="application/javascript" src="performance/views/details-memory-flamegraph.js"/>
   <script type="application/javascript" src="performance/views/details.js"/>
   <script type="application/javascript" src="performance/views/recordings.js"/>
 
   <popupset id="performance-options-popupset">
     <menupopup id="performance-options-menupopup">
+      <menuitem id="option-show-platform-data"
+                type="checkbox"
+                data-pref="show-platform-data"
+                label="&profilerUI.showPlatformData;"
+                tooltiptext="&profilerUI.showPlatformData.tooltiptext;"/>
+      <menuitem id="option-enable-memory"
+                type="checkbox"
+                data-pref="enable-memory"
+                label="&profilerUI.enableMemory;"
+                tooltiptext="&profilerUI.enableMemory.tooltiptext;"/>
+      <menuitem id="option-enable-framerate"
+                type="checkbox"
+                data-pref="enable-framerate"
+                label="&profilerUI.enableFramerate;"
+                tooltiptext="&profilerUI.enableFramerate.tooltiptext;"/>
       <menuitem id="option-invert-call-tree"
                 type="checkbox"
                 data-pref="invert-call-tree"
                 label="&profilerUI.invertTree;"
                 tooltiptext="&profilerUI.invertTree.tooltiptext;"/>
+      <menuitem id="option-flatten-tree-recursion"
+                type="checkbox"
+                data-pref="flatten-tree-recursion"
+                label="&profilerUI.flattenTreeRecursion;"
+                tooltiptext="&profilerUI.flattenTreeRecursion.tooltiptext;"/>
     </menupopup>
   </popupset>
 
   <hbox class="theme-body" flex="1">
     <vbox id="recordings-pane">
       <toolbar id="recordings-toolbar"
                class="devtools-toolbar">
         <hbox id="recordings-controls"
diff --git a/browser/devtools/performance/test/browser.ini b/browser/devtools/performance/test/browser.ini
index 37adb30..58441a4 100644
--- a/browser/devtools/performance/test/browser.ini
+++ b/browser/devtools/performance/test/browser.ini
@@ -25,28 +25,37 @@ support-files =
 [browser_perf-front-profiler-02.js]
 [browser_perf-front-profiler-03.js]
 [browser_perf-front-profiler-04.js]
 #[browser_perf-front-profiler-05.js] bug 1077464
 #[browser_perf-front-profiler-06.js]
 [browser_perf-front.js]
 [browser_perf-jump-to-debugger-01.js]
 [browser_perf-jump-to-debugger-02.js]
+[browser_perf-options-01.js]
+[browser_perf-options-02.js]
 [browser_perf-options-invert-call-tree-01.js]
 [browser_perf-options-invert-call-tree-02.js]
+[browser_perf-options-flatten-tree-recursion-01.js]
+[browser_perf-options-flatten-tree-recursion-02.js]
+[browser_perf-options-show-platform-data-01.js]
+[browser_perf-options-show-platform-data-02.js]
+[browser_perf-options-show-idle-blocks-01.js]
+[browser_perf-options-show-idle-blocks-02.js]
+[browser_perf-options-enable-memory.js]
+[browser_perf-options-enable-framerate.js]
 [browser_perf-overview-render-01.js]
 [browser_perf-overview-render-02.js]
 [browser_perf-overview-render-03.js]
 [browser_perf-overview-selection-01.js]
 [browser_perf-overview-selection-02.js]
 [browser_perf-overview-selection-03.js]
 [browser_perf-overview-time-interval.js]
 [browser_perf-shared-connection-02.js]
 [browser_perf-shared-connection-03.js]
-# [browser_perf-shared-connection-04.js] bug 1077464
 [browser_perf-ui-recording.js]
 [browser_perf_recordings-io-01.js]
 [browser_perf_recordings-io-02.js]
 [browser_perf_recordings-io-03.js]
 [browser_perf_recordings-io-04.js]
 [browser_perf-range-changed-render.js]
 [browser_perf-recording-selected-01.js]
 [browser_perf-recording-selected-02.js]
diff --git a/browser/devtools/performance/test/browser_perf-options-01.js b/browser/devtools/performance/test/browser_perf-options-01.js
new file mode 100644
index 0000000..8f2de18
--- /dev/null
+++ b/browser/devtools/performance/test/browser_perf-options-01.js
@@ -0,0 +1,23 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that toggling preferences before there are any recordings does not throw.
+ */
+function spawnTest () {
+  let { panel } = yield initPerformance(SIMPLE_URL);
+  let { EVENTS, DetailsView, JsCallTreeView } = panel.panelWin;
+
+  DetailsView.selectView("js-calltree");
+
+  // Manually call the _onPrefChanged function so we can catch an error
+  try {
+    JsCallTreeView._onPrefChanged(null, "invert-call-tree", true);
+    ok(true, "Toggling preferences before there are any recordings should not fail.");
+  } catch (e) {
+    ok(false, "Toggling preferences before there are any recordings should not fail.");
+  }
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/performance/test/browser_perf-options-02.js b/browser/devtools/performance/test/browser_perf-options-02.js
new file mode 100644
index 0000000..3748f58
--- /dev/null
+++ b/browser/devtools/performance/test/browser_perf-options-02.js
@@ -0,0 +1,27 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that toggling preferences during a recording does not throw.
+ */
+function spawnTest () {
+  let { panel } = yield initPerformance(SIMPLE_URL);
+  let { EVENTS, DetailsView, JsCallTreeView } = panel.panelWin;
+
+  DetailsView.selectView("js-calltree");
+
+  yield startRecording(panel);
+
+  // Manually call the _onPrefChanged function so we can catch an error
+  try {
+    JsCallTreeView._onPrefChanged(null, "invert-call-tree", true);
+    ok(true, "Toggling preferences during a recording should not fail.");
+  } catch (e) {
+    ok(false, "Toggling preferences during a recording should not fail.");
+  }
+
+  yield stopRecording(panel);
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/performance/test/browser_perf-options-enable-framerate.js b/browser/devtools/performance/test/browser_perf-options-enable-framerate.js
new file mode 100644
index 0000000..79302a3
--- /dev/null
+++ b/browser/devtools/performance/test/browser_perf-options-enable-framerate.js
@@ -0,0 +1,40 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+const FRAMERATE_PREF = "devtools.performance.ui.enable-framerate";
+
+/**
+ * Tests that `enable-framerate` toggles the visibility of the fps graph,
+ * as well as enabling ticks data on the PerformanceFront.
+ */
+function spawnTest () {
+  let { panel } = yield initPerformance(SIMPLE_URL);
+  let { EVENTS, PerformanceController, $ } = panel.panelWin;
+
+  let recordedWithTicks = null;
+
+  let onStart = (_, recording, { withMemory, withTicks }) => {
+    recordedWithTicks = withTicks;
+  };
+  PerformanceController.on(EVENTS.RECORDING_STARTED, onStart);
+
+  Services.prefs.setBoolPref(FRAMERATE_PREF, false);
+  ok($("#time-framerate").hidden, "fps graph is hidden when ticks disabled");
+
+  yield startRecording(panel);
+  yield stopRecording(panel);
+
+  ok(recordedWithTicks === false, "PerformanceFront started without ticks recording.");
+
+  Services.prefs.setBoolPref(FRAMERATE_PREF, true);
+  ok(!$("#time-framerate").hidden, "fps graph is not hidden when ticks enabled");
+
+  yield startRecording(panel);
+  yield stopRecording(panel);
+
+  ok(recordedWithTicks === true, "PerformanceFront started with ticks recording.");
+
+  PerformanceController.off(EVENTS.RECORDING_STARTED, onStart);
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/performance/test/browser_perf-options-enable-memory.js b/browser/devtools/performance/test/browser_perf-options-enable-memory.js
new file mode 100644
index 0000000..79c61b0
--- /dev/null
+++ b/browser/devtools/performance/test/browser_perf-options-enable-memory.js
@@ -0,0 +1,40 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+const MEMORY_PREF = "devtools.performance.ui.enable-memory";
+
+/**
+ * Tests that `enable-memory` toggles the visibility of the memory graph,
+ * as well as enabling memory data on the PerformanceFront.
+ */
+function spawnTest () {
+  let { panel } = yield initPerformance(SIMPLE_URL);
+  let { EVENTS, PerformanceController, $ } = panel.panelWin;
+
+  let recordedWithMemory = null;
+
+  let onStart = (_, recording, { withMemory, withTicks }) => {
+    recordedWithMemory = withMemory;
+  };
+  PerformanceController.on(EVENTS.RECORDING_STARTED, onStart);
+
+  Services.prefs.setBoolPref(MEMORY_PREF, false);
+  ok($("#memory-overview").hidden, "memory graph is hidden when memory disabled");
+
+  yield startRecording(panel);
+  yield stopRecording(panel);
+
+  ok(recordedWithMemory === false, "PerformanceFront started without memory recording.");
+
+  Services.prefs.setBoolPref(MEMORY_PREF, true);
+  ok(!$("#memory-overview").hidden, "memory graph is not hidden when memory enabled");
+
+  yield startRecording(panel);
+  yield stopRecording(panel);
+
+  ok(recordedWithMemory === true, "PerformanceFront started with memory recording.");
+
+  PerformanceController.off(EVENTS.RECORDING_STARTED, onStart);
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/performance/test/browser_perf-options-flatten-tree-recursion-01.js b/browser/devtools/performance/test/browser_perf-options-flatten-tree-recursion-01.js
new file mode 100644
index 0000000..06561f4
--- /dev/null
+++ b/browser/devtools/performance/test/browser_perf-options-flatten-tree-recursion-01.js
@@ -0,0 +1,38 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+const FLATTEN_PREF = "devtools.performance.ui.flatten-tree-recursion";
+
+/**
+ * Tests that the js Flamegraphs gets rerendered when toggling `flatten-tree-recursion`
+ */
+function spawnTest () {
+  let { panel } = yield initPerformance(SIMPLE_URL);
+  let { EVENTS, DetailsView, JsFlameGraphView } = panel.panelWin;
+
+  DetailsView.selectView("js-flamegraph");
+
+  Services.prefs.setBoolPref(FLATTEN_PREF, true);
+
+  yield startRecording(panel);
+  yield busyWait(100);
+
+  let rendered = once(JsFlameGraphView, EVENTS.JS_FLAMEGRAPH_RENDERED);
+  yield stopRecording(panel);
+  yield rendered;
+
+  rendered = once(JsFlameGraphView, EVENTS.JS_FLAMEGRAPH_RENDERED);
+  Services.prefs.setBoolPref(FLATTEN_PREF, false);
+  yield rendered;
+
+  ok(true, "JsFlameGraphView rerendered when toggling flatten-tree-recursion.");
+
+  rendered = once(JsFlameGraphView, EVENTS.JS_FLAMEGRAPH_RENDERED);
+  Services.prefs.setBoolPref(FLATTEN_PREF, true);
+  yield rendered;
+
+  ok(true, "JsFlameGraphView rerendered when toggling back flatten-tree-recursion.");
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/performance/test/browser_perf-options-flatten-tree-recursion-02.js b/browser/devtools/performance/test/browser_perf-options-flatten-tree-recursion-02.js
new file mode 100644
index 0000000..6814d11
--- /dev/null
+++ b/browser/devtools/performance/test/browser_perf-options-flatten-tree-recursion-02.js
@@ -0,0 +1,38 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+const FLATTEN_PREF = "devtools.performance.ui.flatten-tree-recursion";
+
+/**
+ * Tests that the memory Flamegraphs gets rerendered when toggling `flatten-tree-recursion`
+ */
+function spawnTest () {
+  let { panel } = yield initPerformance(SIMPLE_URL);
+  let { EVENTS, DetailsView, MemoryFlameGraphView } = panel.panelWin;
+
+  DetailsView.selectView("memory-flamegraph");
+
+  Services.prefs.setBoolPref(FLATTEN_PREF, true);
+
+  yield startRecording(panel);
+  yield busyWait(100);
+
+  let rendered = once(MemoryFlameGraphView, EVENTS.MEMORY_FLAMEGRAPH_RENDERED);
+  yield stopRecording(panel);
+  yield rendered;
+
+  rendered = once(MemoryFlameGraphView, EVENTS.MEMORY_FLAMEGRAPH_RENDERED);
+  Services.prefs.setBoolPref(FLATTEN_PREF, false);
+  yield rendered;
+
+  ok(true, "MemoryFlameGraphView rerendered when toggling flatten-tree-recursion.");
+
+  rendered = once(MemoryFlameGraphView, EVENTS.MEMORY_FLAMEGRAPH_RENDERED);
+  Services.prefs.setBoolPref(FLATTEN_PREF, true);
+  yield rendered;
+
+  ok(true, "MemoryFlameGraphView rerendered when toggling back flatten-tree-recursion.");
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/performance/test/browser_perf-options-show-idle-blocks-01.js b/browser/devtools/performance/test/browser_perf-options-show-idle-blocks-01.js
new file mode 100644
index 0000000..56d3e51
--- /dev/null
+++ b/browser/devtools/performance/test/browser_perf-options-show-idle-blocks-01.js
@@ -0,0 +1,38 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+const IDLE_PREF = "devtools.performance.ui.show-idle-blocks";
+
+/**
+ * Tests that the js Flamegraphs gets rerendered when toggling `show-idle-blocks`
+ */
+function spawnTest () {
+  let { panel } = yield initPerformance(SIMPLE_URL);
+  let { EVENTS, DetailsView, JsFlameGraphView } = panel.panelWin;
+
+  DetailsView.selectView("js-flamegraph");
+
+  Services.prefs.setBoolPref(IDLE_PREF, true);
+
+  yield startRecording(panel);
+  yield busyWait(100);
+
+  let rendered = once(JsFlameGraphView, EVENTS.JS_FLAMEGRAPH_RENDERED);
+  yield stopRecording(panel);
+  yield rendered;
+
+  rendered = once(JsFlameGraphView, EVENTS.JS_FLAMEGRAPH_RENDERED);
+  Services.prefs.setBoolPref(IDLE_PREF, false);
+  yield rendered;
+
+  ok(true, "JsFlameGraphView rerendered when toggling show-idle-blocks.");
+
+  rendered = once(JsFlameGraphView, EVENTS.JS_FLAMEGRAPH_RENDERED);
+  Services.prefs.setBoolPref(IDLE_PREF, true);
+  yield rendered;
+
+  ok(true, "JsFlameGraphView rerendered when toggling back show-idle-blocks.");
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/performance/test/browser_perf-options-show-idle-blocks-02.js b/browser/devtools/performance/test/browser_perf-options-show-idle-blocks-02.js
new file mode 100644
index 0000000..1c0c6ce
--- /dev/null
+++ b/browser/devtools/performance/test/browser_perf-options-show-idle-blocks-02.js
@@ -0,0 +1,38 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+const IDLE_PREF = "devtools.performance.ui.show-idle-blocks";
+
+/**
+ * Tests that the memory Flamegraphs gets rerendered when toggling `show-idle-blocks`
+ */
+function spawnTest () {
+  let { panel } = yield initPerformance(SIMPLE_URL);
+  let { EVENTS, DetailsView, MemoryFlameGraphView } = panel.panelWin;
+
+  DetailsView.selectView("memory-flamegraph");
+
+  Services.prefs.setBoolPref(IDLE_PREF, true);
+
+  yield startRecording(panel);
+  yield busyWait(100);
+
+  let rendered = once(MemoryFlameGraphView, EVENTS.MEMORY_FLAMEGRAPH_RENDERED);
+  yield stopRecording(panel);
+  yield rendered;
+
+  rendered = once(MemoryFlameGraphView, EVENTS.MEMORY_FLAMEGRAPH_RENDERED);
+  Services.prefs.setBoolPref(IDLE_PREF, false);
+  yield rendered;
+
+  ok(true, "MemoryFlameGraphView rerendered when toggling show-idle-blocks.");
+
+  rendered = once(MemoryFlameGraphView, EVENTS.MEMORY_FLAMEGRAPH_RENDERED);
+  Services.prefs.setBoolPref(IDLE_PREF, true);
+  yield rendered;
+
+  ok(true, "MemoryFlameGraphView rerendered when toggling back show-idle-blocks.");
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/performance/test/browser_perf-options-show-platform-data-01.js b/browser/devtools/performance/test/browser_perf-options-show-platform-data-01.js
new file mode 100644
index 0000000..51aafad
--- /dev/null
+++ b/browser/devtools/performance/test/browser_perf-options-show-platform-data-01.js
@@ -0,0 +1,36 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+const PLATFORM_DATA_PREF = "devtools.performance.ui.show-platform-data";
+
+/**
+ * Tests that the JsCallTree get rerendered when toggling `show-platform-data`
+ */
+function spawnTest () {
+  let { panel } = yield initPerformance(SIMPLE_URL);
+  let { EVENTS, DetailsView, JsFlameGraphView, JsCallTreeView } = panel.panelWin;
+
+  DetailsView.selectView("js-calltree");
+
+  Services.prefs.setBoolPref(PLATFORM_DATA_PREF, true);
+
+  yield startRecording(panel);
+  yield busyWait(100);
+
+  let rendered = once(JsCallTreeView, EVENTS.JS_CALL_TREE_RENDERED);
+  yield stopRecording(panel);
+  yield rendered;
+
+  rendered = once(JsCallTreeView, EVENTS.JS_CALL_TREE_RENDERED);
+  Services.prefs.setBoolPref(PLATFORM_DATA_PREF, false);
+  yield rendered;
+  ok(true, "JsCallTreeView rerendered when toggling off show-platform-data.");
+
+  rendered = once(JsCallTreeView, EVENTS.JS_CALL_TREE_RENDERED);
+  Services.prefs.setBoolPref(PLATFORM_DATA_PREF, true);
+  yield rendered;
+  ok(true, "JsCallTreeView rerendered when toggling on show-platform-data.");
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/performance/test/browser_perf-options-show-platform-data-02.js b/browser/devtools/performance/test/browser_perf-options-show-platform-data-02.js
new file mode 100644
index 0000000..3679865
--- /dev/null
+++ b/browser/devtools/performance/test/browser_perf-options-show-platform-data-02.js
@@ -0,0 +1,35 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+const PLATFORM_DATA_PREF = "devtools.performance.ui.show-platform-data";
+
+/**
+ * Tests that the JsFlamegraphs get rerendered when toggling `show-platform-data`
+ */
+function spawnTest () {
+  let { panel } = yield initPerformance(SIMPLE_URL);
+  let { EVENTS, DetailsView, JsFlameGraphView } = panel.panelWin;
+
+  Services.prefs.setBoolPref(PLATFORM_DATA_PREF, false);
+  DetailsView.selectView("js-flamegraph");
+
+  yield startRecording(panel);
+  yield busyWait(100);
+
+  let rendered = once(JsFlameGraphView, EVENTS.JS_FLAMEGRAPH_RENDERED);
+  yield stopRecording(panel);
+  yield rendered;
+
+  rendered = once(JsFlameGraphView, EVENTS.JS_FLAMEGRAPH_RENDERED);
+  Services.prefs.setBoolPref(PLATFORM_DATA_PREF, true);
+  yield rendered;
+  ok(true, "JsFlameGraphView rerendered when toggling on show-platform-data.");
+
+  rendered = once(JsFlameGraphView, EVENTS.JS_FLAMEGRAPH_RENDERED);
+  Services.prefs.setBoolPref(PLATFORM_DATA_PREF, false);
+  yield rendered;
+  ok(true, "JsFlameGraphView rerendered when toggling off show-platform-data.");
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/performance/test/browser_perf-overview-render-03.js b/browser/devtools/performance/test/browser_perf-overview-render-03.js
index f59ce3f..c0ad41b 100644
--- a/browser/devtools/performance/test/browser_perf-overview-render-03.js
+++ b/browser/devtools/performance/test/browser_perf-overview-render-03.js
@@ -3,16 +3,19 @@
 
 /**
  * Tests that the overview graphs share the exact same width and scaling.
  */
 function spawnTest () {
   let { panel } = yield initPerformance(SIMPLE_URL);
   let { EVENTS, PerformanceController, OverviewView } = panel.panelWin;
 
+  Services.prefs.setBoolPref("devtools.performance.ui.enable-memory", true);
+  Services.prefs.setBoolPref("devtools.performance.ui.enable-framerate", true);
+
   yield startRecording(panel);
 
   let updated = 0;
   OverviewView.on(EVENTS.OVERVIEW_RENDERED, () => updated++);
 
   yield busyWait(100);
   yield waitUntil(() => PerformanceController.getCurrentRecording().getMarkers().length);
   yield waitUntil(() => PerformanceController.getCurrentRecording().getMemory().length);
diff --git a/browser/devtools/performance/test/browser_perf-overview-time-interval.js b/browser/devtools/performance/test/browser_perf-overview-time-interval.js
index 5349516..3db1ef9 100644
--- a/browser/devtools/performance/test/browser_perf-overview-time-interval.js
+++ b/browser/devtools/performance/test/browser_perf-overview-time-interval.js
@@ -32,19 +32,19 @@ function spawnTest () {
 
   // Get/set the time interval and wait for the event propagation.
 
   let notified = once(OverviewView, EVENTS.OVERVIEW_RANGE_SELECTED);
   OverviewView.setTimeInterval({ startTime: 10, endTime: 20 });
   yield notified;
 
   let firstInterval = OverviewView.getTimeInterval();
-  is(firstInterval.startTime, 10,
+  ok(firstInterval.startTime - 10 < Number.EPSILON,
     "The interval's start time was properly set.");
-  is(firstInterval.endTime, 20,
+  ok(firstInterval.endTime - 20 < Number.EPSILON,
     "The interval's end time was properly set.");
 
   // Get/set another time interval and make sure there's no event propagation.
 
   function fail() {
     ok(false, "The selection event should not have propagated.");
   }
 
diff --git a/browser/devtools/performance/test/head.js b/browser/devtools/performance/test/head.js
index dd4e646..eedb72d 100644
--- a/browser/devtools/performance/test/head.js
+++ b/browser/devtools/performance/test/head.js
@@ -25,16 +25,22 @@ const SIMPLE_URL = EXAMPLE_URL + "doc_simple-test.html";
 // All tests are asynchronous.
 waitForExplicitFinish();
 
 gDevTools.testing = true;
 
 let DEFAULT_PREFS = [
   "devtools.debugger.log",
   "devtools.performance.ui.invert-call-tree",
+  "devtools.performance.ui.flatten-tree-recursion",
+  "devtools.performance.ui.show-platform-data",
+  "devtools.performance.ui.show-idle-blocks",
+  "devtools.performance.ui.enable-memory",
+  "devtools.performance.ui.enable-framerate",
+
   // remove after bug 1075567 is resolved.
   "devtools.performance_dev.enabled"
 ].reduce((prefs, pref) => {
   prefs[pref] = Services.prefs.getBoolPref(pref);
   return prefs;
 }, {});
 
 // Enable the new performance panel for all tests. Remove this after
diff --git a/browser/devtools/performance/views/details-abstract-subview.js b/browser/devtools/performance/views/details-abstract-subview.js
index bf3dbe4..84bae6e 100644
--- a/browser/devtools/performance/views/details-abstract-subview.js
+++ b/browser/devtools/performance/views/details-abstract-subview.js
@@ -9,32 +9,35 @@
 let DetailsSubview = {
   /**
    * Sets up the view with event binding.
    */
   initialize: function () {
     this._onRecordingStoppedOrSelected = this._onRecordingStoppedOrSelected.bind(this);
     this._onOverviewRangeChange = this._onOverviewRangeChange.bind(this);
     this._onDetailsViewSelected = this._onDetailsViewSelected.bind(this);
+    this._onPrefChanged = this._onPrefChanged.bind(this);
 
     PerformanceController.on(EVENTS.RECORDING_STOPPED, this._onRecordingStoppedOrSelected);
     PerformanceController.on(EVENTS.RECORDING_SELECTED, this._onRecordingStoppedOrSelected);
+    PerformanceController.on(EVENTS.PREF_CHANGED, this._onPrefChanged);
     OverviewView.on(EVENTS.OVERVIEW_RANGE_SELECTED, this._onOverviewRangeChange);
     OverviewView.on(EVENTS.OVERVIEW_RANGE_CLEARED, this._onOverviewRangeChange);
     DetailsView.on(EVENTS.DETAILS_VIEW_SELECTED, this._onDetailsViewSelected);
   },
 
   /**
    * Unbinds events.
    */
   destroy: function () {
     clearNamedTimeout("range-change-debounce");
 
     PerformanceController.off(EVENTS.RECORDING_STOPPED, this._onRecordingStoppedOrSelected);
     PerformanceController.off(EVENTS.RECORDING_SELECTED, this._onRecordingStoppedOrSelected);
+    PerformanceController.off(EVENTS.PREF_CHANGED, this._onPrefChanged);
     OverviewView.off(EVENTS.OVERVIEW_RANGE_SELECTED, this._onOverviewRangeChange);
     OverviewView.off(EVENTS.OVERVIEW_RANGE_CLEARED, this._onOverviewRangeChange);
     DetailsView.off(EVENTS.DETAILS_VIEW_SELECTED, this._onDetailsViewSelected);
   },
 
   /**
    * Amount of time (in milliseconds) to wait until this view gets updated,
    * when the range is changed in the overview.
@@ -50,16 +53,22 @@ let DetailsSubview = {
 
   /**
    * Flag specifying if this view may get updated even when it's not selected.
    * Should only be used in tests.
    */
   canUpdateWhileHidden: false,
 
   /**
+   * An array of preferences under `devtools.performance.ui.` that the view should
+   * rerender upon change.
+   */
+  rerenderPrefs: [],
+
+  /**
    * Called when recording stops or is selected.
    */
   _onRecordingStoppedOrSelected: function(_, recording) {
     if (recording.isRecording()) {
       return;
     }
     if (DetailsView.isViewSelected(this) || this.canUpdateWhileHidden) {
       this.render();
@@ -83,15 +92,38 @@ let DetailsSubview = {
   /**
    * Fired when a view is selected in the DetailsView.
    */
   _onDetailsViewSelected: function() {
     if (DetailsView.isViewSelected(this) && this.shouldUpdateWhenShown) {
       this.render(OverviewView.getTimeInterval());
       this.shouldUpdateWhenShown = false;
     }
+  },
+
+  /**
+   * Fired when a preference in `devtools.performance.ui.` is changed.
+   */
+  _onPrefChanged: function (_, prefName, value) {
+    // All detail views require a recording to be complete, so do not
+    // attempt to render if recording is in progress or does not exist.
+    let recording = PerformanceController.getCurrentRecording();
+
+    if (!recording || recording.isRecording()) {
+      return;
+    }
+
+    if (!~this.rerenderPrefs.indexOf(prefName)) {
+      return;
+    }
+
+    if (DetailsView.isViewSelected(this) || this.canUpdateWhileHidden) {
+      this.render(OverviewView.getTimeInterval());
+    } else {
+      this.shouldUpdateWhenShown = true;
+    }
   }
 };
 
 /**
  * Convenient way of emitting events from the view.
  */
 EventEmitter.decorate(DetailsSubview);
diff --git a/browser/devtools/performance/views/details-js-call-tree.js b/browser/devtools/performance/views/details-js-call-tree.js
index a043247..edfa78b 100644
--- a/browser/devtools/performance/views/details-js-call-tree.js
+++ b/browser/devtools/performance/views/details-js-call-tree.js
@@ -2,37 +2,36 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 /**
  * CallTree view containing profiler call tree, controlled by DetailsView.
  */
 let JsCallTreeView = Heritage.extend(DetailsSubview, {
+
+  rerenderPrefs: ["invert-call-tree", "show-platform-data"],
+
   rangeChangeDebounceTime: 50, // ms
 
   /**
    * Sets up the view with event binding.
    */
   initialize: function () {
     DetailsSubview.initialize.call(this);
 
     this._onPrefChanged = this._onPrefChanged.bind(this);
     this._onLink = this._onLink.bind(this);
-
-    PerformanceController.on(EVENTS.PREF_CHANGED, this._onPrefChanged);
   },
 
   /**
    * Unbinds events.
    */
   destroy: function () {
     DetailsSubview.destroy.call(this);
-
-    PerformanceController.off(EVENTS.PREF_CHANGED, this._onPrefChanged);
   },
 
   /**
    * Method for handling all the set up for rendering a new call tree.
    *
    * @param object interval [optional]
    *        The { startTime, endTime }, in milliseconds.
    * @param object options [optional]
@@ -57,17 +56,17 @@ let JsCallTreeView = Heritage.extend(DetailsSubview, {
   },
 
   /**
    * Called when the recording is stopped and prepares data to
    * populate the call tree.
    */
   _prepareCallTree: function (profile, { startTime, endTime }, options) {
     let threadSamples = profile.threads[0].samples;
-    let contentOnly = !Prefs.showPlatformData;
+    let contentOnly = !PerformanceController.getPref("show-platform-data");
     let invertTree = PerformanceController.getPref("invert-call-tree");
 
     let threadNode = new ThreadNode(threadSamples,
       { startTime, endTime, contentOnly, invertTree });
 
     // If we have an empty profile (no samples), then don't invert the tree, as
     // it would hide the root node and a completely blank call tree space can be
     // mis-interpreted as an error.
@@ -98,28 +97,19 @@ let JsCallTreeView = Heritage.extend(DetailsSubview, {
     container.innerHTML = "";
     root.attachTo(container);
 
     // Profiler data does not contain memory allocations information.
     root.toggleAllocations(false);
 
     // When platform data isn't shown, hide the cateogry labels, since they're
     // only available for C++ frames.
-    let contentOnly = !Prefs.showPlatformData;
+    let contentOnly = !PerformanceController.getPref("show-platform-data");
     root.toggleCategories(!contentOnly);
   },
-
-  /**
-   * Called when a preference under "devtools.performance.ui." is changed.
-   */
-  _onPrefChanged: function (_, prefName, value) {
-    if (prefName === "invert-call-tree") {
-      this.render(OverviewView.getTimeInterval());
-    }
-  }
 });
 
 /**
  * Opens/selects the debugger in this toolbox and jumps to the specified
  * file name and line number.
  * @param string url
  * @param number line
  */
diff --git a/browser/devtools/performance/views/details-js-flamegraph.js b/browser/devtools/performance/views/details-js-flamegraph.js
index 323973e..bcf5210 100644
--- a/browser/devtools/performance/views/details-js-flamegraph.js
+++ b/browser/devtools/performance/views/details-js-flamegraph.js
@@ -3,16 +3,19 @@
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 /**
  * FlameGraph view containing a pyramid-like visualization of a profile,
  * controlled by DetailsView.
  */
 let JsFlameGraphView = Heritage.extend(DetailsSubview, {
+
+  rerenderPrefs: ["flatten-tree-recursion", "show-platform-data", "show-idle-blocks"],
+
   /**
    * Sets up the view with event binding.
    */
   initialize: Task.async(function* () {
     DetailsSubview.initialize.call(this);
 
     this.graph = new FlameGraph($("#js-flamegraph-view"));
     this.graph.timelineTickUnits = L10N.getStr("graphs.ms");
@@ -40,19 +43,19 @@ let JsFlameGraphView = Heritage.extend(DetailsSubview, {
    */
   render: function (interval={}) {
     let recording = PerformanceController.getCurrentRecording();
     let duration = recording.getDuration();
     let profile = recording.getProfile();
     let samples = profile.threads[0].samples;
 
     let data = FlameGraphUtils.createFlameGraphDataFromSamples(samples, {
-      flattenRecursion: Prefs.flattenTreeRecursion,
-      filterFrames: !Prefs.showPlatformData && FrameNode.isContent,
-      showIdleBlocks: Prefs.showIdleBlocks && L10N.getStr("table.idle")
+      flattenRecursion: PerformanceController.getPref("flatten-tree-recursion"),
+      filterFrames: !PerformanceController.getPref("show-platform-data") && FrameNode.isContent,
+      showIdleBlocks: PerformanceController.getPref("show-idle-blocks") && L10N.getStr("table.idle")
     });
 
     this.graph.setData({ data,
       bounds: {
         startTime: 0,
         endTime: duration
       },
       visible: {
diff --git a/browser/devtools/performance/views/details-memory-call-tree.js b/browser/devtools/performance/views/details-memory-call-tree.js
index feabb71..7b5a91b 100644
--- a/browser/devtools/performance/views/details-memory-call-tree.js
+++ b/browser/devtools/performance/views/details-memory-call-tree.js
@@ -2,37 +2,35 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 /**
  * CallTree view containing memory allocation sites, controlled by DetailsView.
  */
 let MemoryCallTreeView = Heritage.extend(DetailsSubview, {
+
+  rerenderPrefs: ["invert-call-tree", "show-platform-data"],
+
   rangeChangeDebounceTime: 100, // ms
 
   /**
    * Sets up the view with event binding.
    */
   initialize: function () {
     DetailsSubview.initialize.call(this);
 
-    this._onPrefChanged = this._onPrefChanged.bind(this);
     this._onLink = this._onLink.bind(this);
-
-    PerformanceController.on(EVENTS.PREF_CHANGED, this._onPrefChanged);
   },
 
   /**
    * Unbinds events.
    */
   destroy: function () {
     DetailsSubview.destroy.call(this);
-
-    PerformanceController.off(EVENTS.PREF_CHANGED, this._onPrefChanged);
   },
 
   /**
    * Method for handling all the set up for rendering a new call tree.
    *
    * @param object interval [optional]
    *        The { startTime, endTime }, in milliseconds.
    * @param object options [optional]
@@ -57,17 +55,17 @@ let MemoryCallTreeView = Heritage.extend(DetailsSubview, {
   },
 
   /**
    * Called when the recording is stopped and prepares data to
    * populate the call tree.
    */
   _prepareCallTree: function (allocations, { startTime, endTime }, options) {
     let samples = RecordingUtils.getSamplesFromAllocations(allocations);
-    let contentOnly = !Prefs.showPlatformData;
+    let contentOnly = !PerformanceController.getPref("show-platform-data");
     let invertTree = PerformanceController.getPref("invert-call-tree");
 
     let threadNode = new ThreadNode(samples,
       { startTime, endTime, contentOnly, invertTree });
 
     // If we have an empty profile (no samples), then don't invert the tree, as
     // it would hide the root node and a completely blank call tree space can be
     // mis-interpreted as an error.
@@ -97,19 +95,11 @@ let MemoryCallTreeView = Heritage.extend(DetailsSubview, {
 
     // Clear out other call trees.
     let container = $("#memory-calltree-view > .call-tree-cells-container");
     container.innerHTML = "";
     root.attachTo(container);
 
     // Memory allocation samples don't contain cateogry labels.
     root.toggleCategories(false);
-  },
-
-  /**
-   * Called when a preference under "devtools.performance.ui." is changed.
-   */
-  _onPrefChanged: function (_, prefName, value) {
-    if (prefName === "invert-call-tree") {
-      this.render(OverviewView.getTimeInterval());
-    }
   }
+
 });
diff --git a/browser/devtools/performance/views/details-memory-flamegraph.js b/browser/devtools/performance/views/details-memory-flamegraph.js
index ded7256..d8d07a1 100644
--- a/browser/devtools/performance/views/details-memory-flamegraph.js
+++ b/browser/devtools/performance/views/details-memory-flamegraph.js
@@ -3,16 +3,19 @@
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 /**
  * FlameGraph view containing a pyramid-like visualization of memory allocation
  * sites, controlled by DetailsView.
  */
 let MemoryFlameGraphView = Heritage.extend(DetailsSubview, {
+
+  rerenderPrefs: ["flatten-tree-recursion", "show-idle-blocks"],
+
   /**
    * Sets up the view with event binding.
    */
   initialize: Task.async(function* () {
     DetailsSubview.initialize.call(this);
 
     this.graph = new FlameGraph($("#memory-flamegraph-view"));
     this.graph.timelineTickUnits = L10N.getStr("graphs.ms");
@@ -40,18 +43,18 @@ let MemoryFlameGraphView = Heritage.extend(DetailsSubview, {
    */
   render: function (interval={}) {
     let recording = PerformanceController.getCurrentRecording();
     let duration = recording.getDuration();
     let allocations = recording.getAllocations();
 
     let samples = RecordingUtils.getSamplesFromAllocations(allocations);
     let data = FlameGraphUtils.createFlameGraphDataFromSamples(samples, {
-      flattenRecursion: Prefs.flattenTreeRecursion,
-      showIdleBlocks: Prefs.showIdleBlocks && L10N.getStr("table.idle")
+      flattenRecursion: PerformanceController.getPref("flatten-tree-recursion"),
+      showIdleBlocks: PerformanceController.getPref("show-idle-blocks") && L10N.getStr("table.idle")
     });
 
     this.graph.setData({ data,
       bounds: {
         startTime: 0,
         endTime: duration
       },
       visible: {
diff --git a/browser/devtools/performance/views/overview.js b/browser/devtools/performance/views/overview.js
index 1cfcfdc..ec1e534 100644
--- a/browser/devtools/performance/views/overview.js
+++ b/browser/devtools/performance/views/overview.js
@@ -28,24 +28,32 @@ let OverviewView = {
   initialize: Task.async(function *() {
     this._onRecordingWillStart = this._onRecordingWillStart.bind(this);
     this._onRecordingStarted = this._onRecordingStarted.bind(this);
     this._onRecordingWillStop = this._onRecordingWillStop.bind(this);
     this._onRecordingStopped = this._onRecordingStopped.bind(this);
     this._onRecordingSelected = this._onRecordingSelected.bind(this);
     this._onRecordingTick = this._onRecordingTick.bind(this);
     this._onGraphSelecting = this._onGraphSelecting.bind(this);
+    this._onPrefChanged = this._onPrefChanged.bind(this);
 
     yield this._showMarkersGraph();
     yield this._showMemoryGraph();
     yield this._showFramerateGraph();
 
     this.markersOverview.on("selecting", this._onGraphSelecting);
 
     PerformanceController.on(EVENTS.RECORDING_WILL_START, this._onRecordingWillStart);
+
+    // Toggle the initial state of memory and framerate graph based off of
+    // the prefs.
+    $("#memory-overview").hidden = !PerformanceController.getPref("enable-memory");
+    $("#time-framerate").hidden = !PerformanceController.getPref("enable-framerate");
+
+    PerformanceController.on(EVENTS.PREF_CHANGED, this._onPrefChanged);
     PerformanceController.on(EVENTS.RECORDING_STARTED, this._onRecordingStarted);
     PerformanceController.on(EVENTS.RECORDING_WILL_STOP, this._onRecordingWillStop);
     PerformanceController.on(EVENTS.RECORDING_STOPPED, this._onRecordingStopped);
     PerformanceController.on(EVENTS.RECORDING_SELECTED, this._onRecordingSelected);
 
     // Populate this overview with some dummy initial data.
     this.markersOverview.setData({ duration: 1000, markers: [] });
     this.memoryOverview.setData([]);
@@ -54,32 +62,33 @@ let OverviewView = {
 
   /**
    * Unbinds events.
    */
   destroy: function () {
     this.markersOverview.off("selecting", this._onGraphSelecting);
 
     PerformanceController.off(EVENTS.RECORDING_WILL_START, this._onRecordingWillStart);
+    PerformanceController.off(EVENTS.PREF_CHANGED, this._onPrefChanged);
     PerformanceController.off(EVENTS.RECORDING_STARTED, this._onRecordingStarted);
     PerformanceController.off(EVENTS.RECORDING_WILL_STOP, this._onRecordingWillStop);
     PerformanceController.off(EVENTS.RECORDING_STOPPED, this._onRecordingStopped);
     PerformanceController.off(EVENTS.RECORDING_SELECTED, this._onRecordingSelected);
   },
 
   /**
    * Sets the time interval selection for all graphs in this overview.
    *
    * @param object interval
    *        The { starTime, endTime }, in milliseconds.
    */
   setTimeInterval: function(interval, options = {}) {
     let recording = PerformanceController.getCurrentRecording();
     if (recording == null) {
-      throw "A recording should be available in order to set the selection."
+      throw new Error("A recording should be available in order to set the selection.");
     }
     let mapStart = () => 0;
     let mapEnd = () => recording.getDuration();
     let selection = { start: interval.startTime, end: interval.endTime };
     this._stopSelectionChangeEventPropagation = options.stopPropagation;
     this.markersOverview.setMappedSelection(selection, { mapStart, mapEnd });
     this._stopSelectionChangeEventPropagation = false;
   },
@@ -88,17 +97,17 @@ let OverviewView = {
    * Gets the time interval selection for all graphs in this overview.
    *
    * @return object
    *         The { starTime, endTime }, in milliseconds.
    */
   getTimeInterval: function() {
     let recording = PerformanceController.getCurrentRecording();
     if (recording == null) {
-      throw "A recording should be available in order to get the selection."
+      throw new Error("A recording should be available in order to get the selection.");
     }
     let mapStart = () => 0;
     let mapEnd = () => recording.getDuration();
     let selection = this.markersOverview.getMappedSelection({ mapStart, mapEnd });
     return { startTime: selection.min, endTime: selection.max };
   },
 
   /**
@@ -266,13 +275,26 @@ let OverviewView = {
     }
   },
 
   _checkSelection: function (recording) {
     let selectionEnabled = !recording.isRecording();
     this.markersOverview.selectionEnabled = selectionEnabled;
     this.memoryOverview.selectionEnabled = selectionEnabled;
     this.framerateGraph.selectionEnabled = selectionEnabled;
+  },
+
+  /**
+   * Called whenever a preference in `devtools.performance.ui.` changes. Used
+   * to toggle the visibility of memory and framerate graphs.
+   */
+  _onPrefChanged: function (_, prefName, value) {
+    if (prefName === "enable-memory") {
+      $("#memory-overview").hidden = !PerformanceController.getPref("enable-memory");
+    }
+    if (prefName === "enable-framerate") {
+      $("#time-framerate").hidden = !PerformanceController.getPref("enable-framerate");
+    }
   }
 };
 
 // Decorates the OverviewView as an EventEmitter
 EventEmitter.decorate(OverviewView);
diff --git a/browser/devtools/shared/options-view.js b/browser/devtools/shared/options-view.js
index 2f8b7b1..2ca4d91 100644
--- a/browser/devtools/shared/options-view.js
+++ b/browser/devtools/shared/options-view.js
@@ -88,16 +88,23 @@ OptionsView.prototype = {
    * Called when a preference is changed (either via clicking an option
    * button or by changing it in about:config). Updates the checked status
    * of the corresponding button.
    */
   _onPrefChange: function (_, prefName) {
     let $el = this.$(`menuitem[data-pref="${prefName}"]`, this.menupopup);
     let value = this.prefObserver.get(prefName);
 
+    // If options panel does not contain a menuitem for the
+    // pref, emit an event and do nothing.
+    if (!$el) {
+      this.emit(PREF_CHANGE_EVENT, prefName);
+      return;
+    }
+
     if (value) {
       $el.setAttribute("checked", value);
     } else {
       $el.removeAttribute("checked");
     }
 
     this.emit(PREF_CHANGE_EVENT, prefName);
   },
diff --git a/browser/locales/en-US/chrome/browser/devtools/profiler.dtd b/browser/locales/en-US/chrome/browser/devtools/profiler.dtd
index 8621b00..bf95f4f 100644
--- a/browser/locales/en-US/chrome/browser/devtools/profiler.dtd
+++ b/browser/locales/en-US/chrome/browser/devtools/profiler.dtd
@@ -67,12 +67,40 @@
 <!-- LOCALIZATION NOTE (profilerUI.options.tooltiptext): This is the tooltip
   -  for the options button. -->
 <!ENTITY profilerUI.options.tooltiptext "Configure performance preferences.">
 
 <!-- LOCALIZATION NOTE (profilerUI.invertTree): This is the label shown next to
   -  a checkbox that inverts and un-inverts the profiler's call tree. -->
 <!ENTITY profilerUI.invertTree "Invert Call Tree">
 
-<!-- LOCALIZATION NOTE (profilerUI.invertTree.tooltiptext): This is the tooltip
-  -  for the tree-inverting checkbox's label.  -->
+<!-- LOCALIZATION NOTE (profilerUI.flattenTree.tooltiptext): This is the tooltip
+  -  for the tree-flattening checkbox's label.  -->
+<!ENTITY profilerUI.flattenTree.tooltiptext "Inverting the call tree displays the profiled call paths starting from the youngest frames and expanding out to the older frames.">
+
+<!-- LOCALIZATION NOTE (profilerUI.invertTree): This is the label shown next to
+  -  a checkbox that inverts and un-inverts the profiler's call tree. -->
+<!ENTITY profilerUI.invertTree             "Invert Call Tree">
 <!ENTITY profilerUI.invertTree.tooltiptext "Inverting the call tree displays the profiled call paths starting from the youngest frames and expanding out to the older frames.">
 
+<!-- LOCALIZATION NOTE (profilerUI.showPlatformData): This is the
+  -  label for the checkbox that toggles whether or not Gecko platform data
+  -  is displayed in the profiler. -->
+<!ENTITY profilerUI.showPlatformData             "Show Gecko Platform Data">
+<!ENTITY profilerUI.showPlatformData.tooltiptext "Showing platform data enables the JavaScript Profiler reports to include Gecko platform symbols.">
+
+<!-- LOCALIZATION NOTE (profilerUI.flattenTreeRecursion): This is the
+  -  label for the checkbox that toggles the flattening of tree recursion in inspected
+  -  functions in the profiler. -->
+<!ENTITY profilerUI.flattenTreeRecursion             "Flatten Tree Recursion">
+<!ENTITY profilerUI.flattenTreeRecursion.tooltiptext "Flatten recursion when inspecting functions.">
+
+<!-- LOCALIZATION NOTE (profilerUI.enableMemory): This string
+  -  is displayed next to a checkbox determining whether or not memory
+  -  measurements are enabled. -->
+<!ENTITY profilerUI.enableMemory             "Record Memory">
+<!ENTITY profilerUI.enableMemory.tooltiptext "Record memory consumption while profiling.">
+
+<!-- LOCALIZATION NOTE (profilerUI.enableFramerate): This string
+  -  is displayed next to a checkbox determining whether or not framerate
+  -  is recorded. -->
+<!ENTITY profilerUI.enableFramerate             "Record Framerate">
+<!ENTITY profilerUI.enableFramerate.tooltiptext "Record framerate while profiling.">
-- 
2.2.1

