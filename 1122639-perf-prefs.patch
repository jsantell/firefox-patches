From 28529dedc8ec94424f132426f9add2269fbb37bc Mon Sep 17 00:00:00 2001
From: Jordan Santell <jsantell@gmail.com>
Date: Tue, 20 Jan 2015 11:49:51 -0800
Subject: Bug 1122639 - Expose performance preferences to the tool and
 start migrating over previous profiler preferences. r=vp

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
index 2f981a0..d038193 100644
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1425,22 +1425,27 @@ pref("devtools.timeline.hiddenMarkers", "[]");
   pref("devtools.performance_dev.enabled", true);
 #else
   pref("devtools.performance_dev.enabled", false);
 #endif
 
 pref("devtools.performance.ui.show-timeline-memory", false);
 
 // The default Profiler UI settings
+// TODO remove `devtools.profiler.ui.` branches when performance
+// tool lands (bug 1075567)
 pref("devtools.profiler.ui.flatten-tree-recursion", true);
 pref("devtools.profiler.ui.show-platform-data", false);
 pref("devtools.profiler.ui.show-idle-blocks", true);
 
 // The default Performance UI settings
 pref("devtools.performance.ui.invert-call-tree", true);
+pref("devtools.performance.ui.flatten-tree-recursion", true);
+pref("devtools.performance.ui.show-platform-data", false);
+pref("devtools.performance.ui.show-idle-blocks", true);
 
 // The default cache UI setting
 pref("devtools.cache.disabled", false);
 
 // Enable the Network Monitor
 pref("devtools.netmonitor.enabled", true);
 
 // The default Network Monitor UI settings
diff --git a/browser/devtools/performance/performance-controller.js b/browser/devtools/performance/performance-controller.js
index 22b35a9..7179aff 100644
--- a/browser/devtools/performance/performance-controller.js
+++ b/browser/devtools/performance/performance-controller.js
@@ -122,51 +122,32 @@ const EVENTS = {
  */
 let gToolbox, gTarget, gFront;
 
 /**
  * Initializes the profiler controller and views.
  */
 let startupPerformance = Task.async(function*() {
   yield promise.all([
-    PrefObserver.register(),
     PerformanceController.initialize(),
     PerformanceView.initialize()
   ]);
 });
 
 /**
  * Destroys the profiler controller and views.
  */
 let shutdownPerformance = Task.async(function*() {
   yield promise.all([
-    PrefObserver.unregister(),
     PerformanceController.destroy(),
     PerformanceView.destroy()
   ]);
 });
 
 /**
- * Observes pref changes on the devtools.profiler branch and triggers the
- * required frontend modifications.
- */
-let PrefObserver = {
-  register: function() {
-    this.branch = Services.prefs.getBranch("devtools.profiler.");
-    this.branch.addObserver("", this, false);
-  },
-  unregister: function() {
-    this.branch.removeObserver("", this);
-  },
-  observe: function(subject, topic, pref) {
-    Prefs.refresh();
-  }
-};
-
-/**
  * Functions handling target-related lifetime events and
  * UI interaction.
  */
 let PerformanceController = {
   _recordings: [],
   _currentRecording: null,
 
   /**
@@ -345,25 +326,16 @@ let PerformanceController = {
 };
 
 /**
  * Convenient way of emitting events from the controller.
  */
 EventEmitter.decorate(PerformanceController);
 
 /**
- * Shortcuts for accessing various profiler preferences.
- */
-const Prefs = new ViewHelpers.Prefs("devtools.profiler", {
-  flattenTreeRecursion: ["Bool", "ui.flatten-tree-recursion"],
-  showPlatformData: ["Bool", "ui.show-platform-data"],
-  showIdleBlocks: ["Bool", "ui.show-idle-blocks"],
-});
-
-/**
  * DOM query helpers.
  */
 function $(selector, target = document) {
   return target.querySelector(selector);
 }
 function $$(selector, target = document) {
   return target.querySelectorAll(selector);
 }
diff --git a/browser/devtools/performance/performance.xul b/browser/devtools/performance/performance.xul
index 65b9b5c..7532f6a 100644
--- a/browser/devtools/performance/performance.xul
+++ b/browser/devtools/performance/performance.xul
@@ -22,21 +22,31 @@
   <script type="application/javascript" src="performance/views/details.js"/>
   <script type="application/javascript" src="performance/views/details-call-tree.js"/>
   <script type="application/javascript" src="performance/views/details-waterfall.js"/>
   <script type="application/javascript" src="performance/views/details-flamegraph.js"/>
   <script type="application/javascript" src="performance/views/recordings.js"/>
 
   <popupset id="performance-options-popupset">
     <menupopup id="performance-options-menupopup">
+      <menuitem id="option-show-platform-data"
+                type="checkbox"
+                data-pref="show-platform-data"
+                label="&profilerUI.showPlatformData;"
+                tooltiptext="&profilerUI.showPlatformData.tooltiptext;"/>
       <menuitem id="option-invert-call-tree"
                 type="checkbox"
                 data-pref="invert-call-tree"
                 label="&profilerUI.invertTree;"
                 tooltiptext="&profilerUI.invertTree.tooltiptext;"/>
+      <menuitem id="option-flatten-tree-recursion"
+                type="checkbox"
+                data-pref="flatten-tree-recursion"
+                label="&profilerUI.flattenTreeRecursion;"
+                tooltiptext="&profilerUI.flattenTreeRecursion.tooltiptext;"/>
     </menupopup>
   </popupset>
   <hbox class="theme-body" flex="1">
     <vbox id="recordings-pane">
       <toolbar id="recordings-toolbar"
                class="devtools-toolbar">
         <hbox id="recordings-controls"
               class="devtools-toolbarbutton-group">
diff --git a/browser/devtools/performance/test/browser.ini b/browser/devtools/performance/test/browser.ini
index 211e130..1849184 100644
--- a/browser/devtools/performance/test/browser.ini
+++ b/browser/devtools/performance/test/browser.ini
@@ -23,16 +23,19 @@ support-files =
 [browser_perf-front-profiler-03.js]
 [browser_perf-front-profiler-04.js]
 #[browser_perf-front-profiler-05.js] bug 1077464
 #[browser_perf-front-profiler-06.js]
 [browser_perf-front.js]
 [browser_perf-jump-to-debugger-01.js]
 [browser_perf-jump-to-debugger-02.js]
 [browser_perf-options-invert-call-tree.js]
+[browser_perf-options-flatten-tree-recursion.js]
+[browser_perf-options-show-platform-data.js]
+[browser_perf-options-show-idle-blocks.js]
 [browser_perf-overview-render-01.js]
 [browser_perf-overview-render-02.js]
 [browser_perf-overview-selection-01.js]
 [browser_perf-overview-selection-02.js]
 [browser_perf-overview-selection-03.js]
 [browser_perf-shared-connection-02.js]
 [browser_perf-shared-connection-03.js]
 # [browser_perf-shared-connection-04.js] bug 1077464
diff --git a/browser/devtools/performance/test/browser_perf-options-flatten-tree-recursion.js b/browser/devtools/performance/test/browser_perf-options-flatten-tree-recursion.js
new file mode 100644
index 0000000..3e38521
--- /dev/null
+++ b/browser/devtools/performance/test/browser_perf-options-flatten-tree-recursion.js
@@ -0,0 +1,36 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+const FLATTEN_PREF = "devtools.performance.ui.flatten-tree-recursion";
+
+/**
+ * Tests that the Flamegraphs gets rerendered when toggling `flatten-tree-recursion`
+ */
+function spawnTest () {
+  let { panel } = yield initPerformance(SIMPLE_URL);
+  let { EVENTS, FlameGraphView } = panel.panelWin;
+
+  Services.prefs.setBoolPref(FLATTEN_PREF, true);
+
+  yield startRecording(panel);
+  yield busyWait(100);
+
+  let rendered = once(FlameGraphView, EVENTS.FLAMEGRAPH_RENDERED);
+  yield stopRecording(panel);
+  yield rendered;
+
+  rendered = once(FlameGraphView, EVENTS.FLAMEGRAPH_RENDERED);
+  Services.prefs.setBoolPref(FLATTEN_PREF, false);
+  yield rendered;
+
+  ok(true, "FlameGraphView rerendered when toggling flatten-tree-recursion.");
+
+  rendered = once(FlameGraphView, EVENTS.FLAMEGRAPH_RENDERED);
+  Services.prefs.setBoolPref(FLATTEN_PREF, true);
+  yield rendered;
+
+  ok(true, "FlameGraphView rerendered when toggling back flatten-tree-recursion.");
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/performance/test/browser_perf-options-invert-call-tree.js b/browser/devtools/performance/test/browser_perf-options-invert-call-tree.js
index 7eeb32b..7e0bee1 100644
--- a/browser/devtools/performance/test/browser_perf-options-invert-call-tree.js
+++ b/browser/devtools/performance/test/browser_perf-options-invert-call-tree.js
@@ -1,15 +1,15 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 const INVERT_PREF = "devtools.performance.ui.invert-call-tree";
 
 /**
- * Tests that the call tree view renders after recording.
+ * Tests that the CallTree gets rerendered when toggling `invert-call-tree`
  */
 function spawnTest () {
   let { panel } = yield initPerformance(SIMPLE_URL);
   let { EVENTS, CallTreeView } = panel.panelWin;
 
   Services.prefs.setBoolPref(INVERT_PREF, true);
 
   yield startRecording(panel);
diff --git a/browser/devtools/performance/test/browser_perf-options-show-idle-blocks.js b/browser/devtools/performance/test/browser_perf-options-show-idle-blocks.js
new file mode 100644
index 0000000..24771bb
--- /dev/null
+++ b/browser/devtools/performance/test/browser_perf-options-show-idle-blocks.js
@@ -0,0 +1,36 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+const IDLE_PREF = "devtools.performance.ui.show-idle-blocks";
+
+/**
+ * Tests that the Flamegraphs gets rerendered when toggling `show-idle-blocks`
+ */
+function spawnTest () {
+  let { panel } = yield initPerformance(SIMPLE_URL);
+  let { EVENTS, FlameGraphView } = panel.panelWin;
+
+  Services.prefs.setBoolPref(IDLE_PREF, true);
+
+  yield startRecording(panel);
+  yield busyWait(100);
+
+  let rendered = once(FlameGraphView, EVENTS.FLAMEGRAPH_RENDERED);
+  yield stopRecording(panel);
+  yield rendered;
+
+  rendered = once(FlameGraphView, EVENTS.FLAMEGRAPH_RENDERED);
+  Services.prefs.setBoolPref(IDLE_PREF, false);
+  yield rendered;
+
+  ok(true, "FlameGraphView rerendered when toggling show-idle-blocks.");
+
+  rendered = once(FlameGraphView, EVENTS.FLAMEGRAPH_RENDERED);
+  Services.prefs.setBoolPref(IDLE_PREF, true);
+  yield rendered;
+
+  ok(true, "FlameGraphView rerendered when toggling back show-idle-blocks.");
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/performance/test/browser_perf-options-show-platform-data.js b/browser/devtools/performance/test/browser_perf-options-show-platform-data.js
new file mode 100644
index 0000000..79a2cd5
--- /dev/null
+++ b/browser/devtools/performance/test/browser_perf-options-show-platform-data.js
@@ -0,0 +1,45 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+const PLATFORM_DATA_PREF = "devtools.performance.ui.show-platform-data";
+
+/**
+ * Tests that the CallTree and Flamegraphs get rerendered when toggling `show-platform-data`
+ */
+function spawnTest () {
+  let { panel } = yield initPerformance(SIMPLE_URL);
+  let { EVENTS, FlameGraphView, CallTreeView } = panel.panelWin;
+
+  Services.prefs.setBoolPref(PLATFORM_DATA_PREF, true);
+
+  yield startRecording(panel);
+  yield busyWait(100);
+
+  let rendered = Promise.all([
+    once(CallTreeView, EVENTS.CALL_TREE_RENDERED),
+    once(FlameGraphView, EVENTS.FLAMEGRAPH_RENDERED)
+  ]);
+  yield stopRecording(panel);
+  yield rendered;
+
+  rendered = Promise.all([
+    once(CallTreeView, EVENTS.CALL_TREE_RENDERED),
+    once(FlameGraphView, EVENTS.FLAMEGRAPH_RENDERED)
+  ]);
+  Services.prefs.setBoolPref(PLATFORM_DATA_PREF, false);
+  yield rendered;
+
+  ok(true, "CallTreeView and FlameGraphView rerendered when toggling show-platform-data.");
+
+  rendered = Promise.all([
+    once(CallTreeView, EVENTS.CALL_TREE_RENDERED),
+    once(FlameGraphView, EVENTS.FLAMEGRAPH_RENDERED)
+  ]);
+  Services.prefs.setBoolPref(PLATFORM_DATA_PREF, true);
+  yield rendered;
+
+  ok(true, "CallTreeView and FlameGraphView rerendered when toggling back show-platform-data.");
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/performance/views/details-call-tree.js b/browser/devtools/performance/views/details-call-tree.js
index 5a80c49..c56d80e 100644
--- a/browser/devtools/performance/views/details-call-tree.js
+++ b/browser/devtools/performance/views/details-call-tree.js
@@ -1,13 +1,18 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
+let CALL_TREE_RERENDER_PREFS = [
+  "invert-call-tree",
+  "show-platform-data"
+];
+
 /**
  * CallTree view containing profiler call tree, controlled by DetailsView.
  */
 let CallTreeView = {
   /**
    * Sets up the view with event binding.
    */
   initialize: function () {
@@ -82,17 +87,17 @@ let CallTreeView = {
   },
 
   /**
    * Called when the recording is stopped and prepares data to
    * populate the call tree.
    */
   _prepareCallTree: function (profilerData, beginAt, endAt, options) {
     let threadSamples = profilerData.profile.threads[0].samples;
-    let contentOnly = !Prefs.showPlatformData;
+    let contentOnly = !PerformanceController.getPref("show-platform-data");
     let invertTree = PerformanceController.getPref("invert-call-tree");
 
     let threadNode = new ThreadNode(threadSamples, contentOnly, beginAt, endAt, invertTree);
     options.inverted = invertTree && threadNode.samples > 0;
 
     return threadNode;
   },
 
@@ -109,25 +114,25 @@ let CallTreeView = {
 
     // Bind events
     root.on("link", this._onLink);
 
     // Clear out other call trees.
     this._callTree.innerHTML = "";
     root.attachTo(this._callTree);
 
-    let contentOnly = !Prefs.showPlatformData;
+    let contentOnly = !PerformanceController.getPref("show-platform-data");
     root.toggleCategories(!contentOnly);
   },
 
   /**
    * Called when a preference under "devtools.performance.ui." is changed.
    */
   _onPrefChanged: function (_, prefName, value) {
-    if (prefName === "invert-call-tree") {
+    if (~CALL_TREE_RERENDER_PREFS.indexOf(prefName)) {
       let { beginAt, endAt } = OverviewView.getRange();
       let profilerData = PerformanceController.getCurrentRecording().getProfilerData();
       this.render(profilerData, beginAt || void 0, endAt || void 0);
     }
   }
 };
 
 /**
diff --git a/browser/devtools/performance/views/details-flamegraph.js b/browser/devtools/performance/views/details-flamegraph.js
index 2d5cb85..2799c50 100644
--- a/browser/devtools/performance/views/details-flamegraph.js
+++ b/browser/devtools/performance/views/details-flamegraph.js
@@ -1,58 +1,67 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
+let FLAMEGRAPH_RERENDER_PREFS = [
+  "flatten-tree-recursion",
+  "show-platform-data",
+  "show-idle-blocks"
+];
+
 /**
  * FlameGraph view containing a pyramid-like visualization of a profile,
  * controlled by DetailsView.
  */
 let FlameGraphView = {
   /**
    * Sets up the view with event binding.
    */
   initialize: Task.async(function* () {
     this._onRecordingStoppedOrSelected = this._onRecordingStoppedOrSelected.bind(this);
     this._onRangeChange = this._onRangeChange.bind(this);
+    this._onPrefChanged = this._onPrefChanged.bind(this);
 
     this.graph = new FlameGraph($("#flamegraph-view"));
     this.graph.timelineTickUnits = L10N.getStr("graphs.ms");
     yield this.graph.ready();
 
+    PerformanceController.on(EVENTS.PREF_CHANGED, this._onPrefChanged);
     PerformanceController.on(EVENTS.RECORDING_STOPPED, this._onRecordingStoppedOrSelected);
     PerformanceController.on(EVENTS.RECORDING_SELECTED, this._onRecordingStoppedOrSelected);
     OverviewView.on(EVENTS.OVERVIEW_RANGE_SELECTED, this._onRangeChange);
     OverviewView.on(EVENTS.OVERVIEW_RANGE_CLEARED, this._onRangeChange);
   }),
 
   /**
    * Unbinds events.
    */
   destroy: function () {
+    PerformanceController.off(EVENTS.PREF_CHANGED, this._onPrefChanged);
     PerformanceController.off(EVENTS.RECORDING_STOPPED, this._onRecordingStoppedOrSelected);
     PerformanceController.off(EVENTS.RECORDING_SELECTED, this._onRecordingStoppedOrSelected);
     OverviewView.off(EVENTS.OVERVIEW_RANGE_SELECTED, this._onRangeChange);
     OverviewView.off(EVENTS.OVERVIEW_RANGE_CLEARED, this._onRangeChange);
   },
 
   /**
    * Method for handling all the set up for rendering a new flamegraph.
    */
   render: function (profilerData) {
     // Empty recordings might yield no profiler data.
     if (profilerData.profile == null) {
       return;
     }
     let samples = profilerData.profile.threads[0].samples;
     let dataSrc = FlameGraphUtils.createFlameGraphDataFromSamples(samples, {
-      flattenRecursion: Prefs.flattenTreeRecursion,
-      filterFrames: !Prefs.showPlatformData && FrameNode.isContent,
-      showIdleBlocks: Prefs.showIdleBlocks && L10N.getStr("table.idle")
+      flattenRecursion: PerformanceController.getPref("flatten-tree-recursion"),
+      filterFrames: !PerformanceController.getPref("show-platform-data") && FrameNode.isContent,
+      showIdleBlocks: PerformanceController.getPref("show-idle-blocks") && L10N.getStr("table.idle")
     });
     this.graph.setData(dataSrc);
     this.emit(EVENTS.FLAMEGRAPH_RENDERED);
   },
 
   /**
    * Called when recording is stopped or selected.
    */
@@ -64,15 +73,25 @@ let FlameGraphView = {
     }
   },
 
   /**
    * Fired when a range is selected or cleared in the OverviewView.
    */
   _onRangeChange: function (_, params) {
     // TODO bug 1105014
+  },
+
+  /**
+   * Called when a preference under "devtools.performance.ui." is changed.
+   */
+  _onPrefChanged: function (_, prefName, value) {
+    if (~FLAMEGRAPH_RERENDER_PREFS.indexOf(prefName)) {
+      let profilerData = PerformanceController.getCurrentRecording().getProfilerData();
+      this.render(profilerData);
+    }
   }
 };
 
 /**
  * Convenient way of emitting events from the view.
  */
 EventEmitter.decorate(FlameGraphView);
diff --git a/browser/devtools/shared/options-view.js b/browser/devtools/shared/options-view.js
index 2f8b7b1..2ca4d91 100644
--- a/browser/devtools/shared/options-view.js
+++ b/browser/devtools/shared/options-view.js
@@ -88,16 +88,23 @@ OptionsView.prototype = {
    * Called when a preference is changed (either via clicking an option
    * button or by changing it in about:config). Updates the checked status
    * of the corresponding button.
    */
   _onPrefChange: function (_, prefName) {
     let $el = this.$(`menuitem[data-pref="${prefName}"]`, this.menupopup);
     let value = this.prefObserver.get(prefName);
 
+    // If options panel does not contain a menuitem for the
+    // pref, emit an event and do nothing.
+    if (!$el) {
+      this.emit(PREF_CHANGE_EVENT, prefName);
+      return;
+    }
+
     if (value) {
       $el.setAttribute("checked", value);
     } else {
       $el.removeAttribute("checked");
     }
 
     this.emit(PREF_CHANGE_EVENT, prefName);
   },
diff --git a/browser/locales/en-US/chrome/browser/devtools/profiler.dtd b/browser/locales/en-US/chrome/browser/devtools/profiler.dtd
index 3fa9cd1..2c8874b 100644
--- a/browser/locales/en-US/chrome/browser/devtools/profiler.dtd
+++ b/browser/locales/en-US/chrome/browser/devtools/profiler.dtd
@@ -57,12 +57,28 @@
 <!-- LOCALIZATION NOTE (profilerUI.options.tooltiptext): This is the tooltip
   -  for the options button. -->
 <!ENTITY profilerUI.options.tooltiptext "Configure performance preferences.">
 
 <!-- LOCALIZATION NOTE (profilerUI.invertTree): This is the label shown next to
   -  a checkbox that inverts and un-inverts the profiler's call tree. -->
 <!ENTITY profilerUI.invertTree "Invert Call Tree">
 
-<!-- LOCALIZATION NOTE (profilerUI.invertTree.tooltiptext): This is the tooltip
-  -  for the tree-inverting checkbox's label.  -->
+<!-- LOCALIZATION NOTE (profilerUI.flattenTree.tooltiptext): This is the tooltip
+  -  for the tree-flattening checkbox's label.  -->
+<!ENTITY profilerUI.flattenTree.tooltiptext "Inverting the call tree displays the profiled call paths starting from the youngest frames and expanding out to the older frames.">
+
+<!-- LOCALIZATION NOTE (profilerUI.invertTree): This is the label shown next to
+  -  a checkbox that inverts and un-inverts the profiler's call tree. -->
+<!ENTITY profilerUI.invertTree             "Invert Call Tree">
 <!ENTITY profilerUI.invertTree.tooltiptext "Inverting the call tree displays the profiled call paths starting from the youngest frames and expanding out to the older frames.">
 
+<!-- LOCALIZATION NOTE (profilerUI.showPlatformData): This is the
+  -  label for the checkbox that toggles whether or not Gecko platform data
+  -  is displayed in the profiler. -->
+<!ENTITY profilerUI.showPlatformData             "Show Gecko Platform Data">
+<!ENTITY profilerUI.showPlatformData.tooltiptext "Showing platform data enables the JavaScript Profiler reports to include Gecko platform symbols">
+
+<!-- LOCALIZATION NOTE (profilerUI.flattenTreeRecursion): This is the
+  -  label for the checkbox that toggles the flattening of tree recursion in inspected
+  -  functions in the profiler. -->
+<!ENTITY profilerUI.flattenTreeRecursion             "Flatten Tree Recursion">
+<!ENTITY profilerUI.flattenTreeRecursion.tooltiptext "Flatten recursion when inspecting functions.">
-- 
2.2.1

