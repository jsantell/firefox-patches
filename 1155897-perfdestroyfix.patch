From: Jordan Santell <jsantell@gmail.com>
Date: Fri, 17 Apr 2015 16:22:28 -0700
Subject: Bug 1155897 - Lazily connect to performance connection during tests as well, and have the connection's destruction wait for initialization if it hasn't yet finished.

diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
index 8f3a387..50f3ff9 100644
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -375,24 +375,19 @@ Toolbox.prototype = {
       }
 
       yield promise.all([
         splitConsolePromise,
         buttonsPromise,
         framesPromise
       ]);
 
-      let profilerReady = this._connectProfiler();
-
-      // Only wait for the profiler initialization during tests. Otherwise,
-      // lazily load this. This is to intercept console.profile calls; the performance
-      // tools will explicitly wait for the connection opening when opened.
-      if (gDevTools.testing) {
-        yield profilerReady;
-      }
+      // Lazily connect to the profiler here and don't wait for it to complete,
+      // used to intercept console.profile calls before the performance tools are open.
+      this._connectProfiler();
 
       this.emit("ready");
     }.bind(this)).then(null, console.error.bind(console));
   },
 
   _pingTelemetry: function() {
     this._telemetry.toolOpened("toolbox");
 
@@ -1858,17 +1853,19 @@ Toolbox.prototype = {
     }
 
     yield this.getPerformanceActorsConnection().open();
     // Emit an event when connected, but don't wait on startup for this.
     this.emit("profiler-connected");
   }),
 
   /**
-   * Disconnects the underlying Performance Actor Connection.
+   * Disconnects the underlying Performance Actor Connection. If the connection
+   * has not finished initializing, as opening a toolbox does not wait,
+   * the performance connection destroy method will wait for it on its own.
    */
   _disconnectProfiler: Task.async(function*() {
     if (!this._performanceConnection) {
       return;
     }
     yield this._performanceConnection.destroy();
     this._performanceConnection = null;
   }),
diff --git a/browser/devtools/performance/modules/front.js b/browser/devtools/performance/modules/front.js
index 6cf302f..6f62fec 100644
--- a/browser/devtools/performance/modules/front.js
+++ b/browser/devtools/performance/modules/front.js
@@ -139,24 +139,25 @@ PerformanceActorsConnection.prototype = {
     Services.obs.notifyObservers(null, "performance-actors-connection-opened", null);
   }),
 
   /**
    * Destroys this connection.
    */
   destroy: Task.async(function*() {
     if (this._connecting && !this._connected) {
-      console.warn("Attempting to destroy SharedPerformanceActorsConnection before initialization completion. If testing, ensure `gDevTools.testing` is set.");
+      yield this._connecting.promise;
     }
 
     yield this._unregisterListeners();
     yield this._disconnectActors();
 
     this._memory = this._timeline = this._profiler = this._target = this._client = null;
     this._connected = false;
+    this._connecting = null;
   }),
 
   /**
    * Initializes a connection to the profiler actor.
    */
   _connectProfilerActor: Task.async(function*() {
     // Chrome and content process targets already have obtained a reference
     // to the profiler tab actor. Use it immediately.
-- 
2.2.1

