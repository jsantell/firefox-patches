From: Jordan Santell <jsantell@gmail.com>
Date: Thu, 2 Apr 2015 10:25:06 -0700
Subject: Bug 1149630 - performance graphs should inherit from a common
 graph and be similarly styled. r=vp

diff --git a/browser/devtools/performance/modules/performance-graphs.js b/browser/devtools/performance/modules/performance-graphs.js
new file mode 100644
index 0000000..0178bfe
--- /dev/null
+++ b/browser/devtools/performance/modules/performance-graphs.js
@@ -0,0 +1,113 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+/**
+ * This file contains the base line graph that all Performance line graphs use.
+ */
+
+const {Cc, Ci, Cu, Cr} = require("chrome");
+
+Cu.import("resource:///modules/devtools/Graphs.jsm");
+Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
+
+const { colorUtils: { setAlpha }} = require("devtools/css-color");
+const { getColor } = require("devtools/shared/theme");
+
+loader.lazyRequireGetter(this, "ProfilerGlobal",
+  "devtools/shared/profiler/global");
+loader.lazyRequireGetter(this, "TimelineGlobal",
+  "devtools/shared/timeline/global");
+
+const HEIGHT = 35; // px
+const STROKE_WIDTH = 1; // px
+const DAMPEN_VALUES = 0.95;
+const CLIPHEAD_LINE_COLOR = "#666";
+const SELECTION_LINE_COLOR = "#555";
+const SELECTION_BACKGROUND_COLOR_NAME = "highlight-blue";
+const FRAMERATE_GRAPH_COLOR_NAME = "highlight-green";
+const MEMORY_GRAPH_COLOR_NAME = "highlight-blue";
+
+/**
+ * A base class for performance graphs to inherit from.
+ *
+ * @param nsIDOMNode parent
+ *        The parent node holding the overview.
+ * @param string metric
+ *        The unit of measurement for this graph.
+ */
+function PerformanceGraph(parent, metric) {
+  LineGraphWidget.call(this, parent, { metric });
+  this.setTheme();
+}
+
+PerformanceGraph.prototype = Heritage.extend(LineGraphWidget.prototype, {
+  strokeWidth: STROKE_WIDTH,
+  dampenValuesFactor: DAMPEN_VALUES,
+  fixedHeight: HEIGHT,
+  clipheadLineColor: CLIPHEAD_LINE_COLOR,
+  selectionLineColor: SELECTION_LINE_COLOR,
+  withTooltipArrows: false,
+  withFixedTooltipPositions: true,
+
+  /**
+   * Disables selection and empties this graph.
+   */
+  clearView: function() {
+    this.selectionEnabled = false;
+    this.dropSelection();
+    this.setData([]);
+  },
+
+  /**
+   * Sets the theme via `theme` to either "light" or "dark",
+   * and updates the internal styling to match. Requires a redraw
+   * to see the effects.
+   */
+  setTheme: function (theme) {
+    theme = theme || "light";
+    let mainColor = getColor(this.mainColor || "highlight-blue", theme);
+    this.backgroundColor = getColor("body-background", theme);
+    this.strokeColor = mainColor;
+    this.backgroundGradientStart = setAlpha(mainColor, 0.2);
+    this.backgroundGradientEnd = setAlpha(mainColor, 0.2);
+    this.selectionBackgroundColor = setAlpha(getColor(SELECTION_BACKGROUND_COLOR_NAME, theme), 0.25);
+    this.selectionStripesColor = "rgba(255, 255, 255, 0.1)";
+    this.maximumLineColor = setAlpha(mainColor, 0.4);
+    this.averageLineColor = setAlpha(mainColor, 0.7);
+    this.minimumLineColor = setAlpha(mainColor, 0.9);
+  }
+});
+
+/**
+ * Constructor for the framerate graph. Inherits from PerformanceGraph.
+ *
+ * @param nsIDOMNode parent
+ *        The parent node holding the overview.
+ */
+function FramerateGraph(parent) {
+  PerformanceGraph.call(this, parent, ProfilerGlobal.L10N.getStr("graphs.fps"));
+}
+
+FramerateGraph.prototype = Heritage.extend(PerformanceGraph.prototype, {
+  mainColor: FRAMERATE_GRAPH_COLOR_NAME
+});
+
+exports.FramerateGraph = FramerateGraph;
+
+/**
+ * Constructor for the memory graph. Inherits from PerformanceGraph.
+ *
+ * @param nsIDOMNode parent
+ *        The parent node holding the overview.
+ */
+function MemoryGraph(parent) {
+  PerformanceGraph.call(this, parent, TimelineGlobal.L10N.getStr("graphs.memory"));
+}
+
+MemoryGraph.prototype = Heritage.extend(PerformanceGraph.prototype, {
+  mainColor: MEMORY_GRAPH_COLOR_NAME
+});
+
+exports.MemoryGraph = MemoryGraph;
diff --git a/browser/devtools/performance/moz.build b/browser/devtools/performance/moz.build
index 54091e1..301fa6d 100644
--- a/browser/devtools/performance/moz.build
+++ b/browser/devtools/performance/moz.build
@@ -2,14 +2,15 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 EXTRA_JS_MODULES.devtools.performance += [
     'modules/compatibility.js',
     'modules/front.js',
     'modules/io.js',
+    'modules/performance-graphs.js',
     'modules/recording-model.js',
     'modules/recording-utils.js',
     'panel.js'
 ]
 
 BROWSER_CHROME_MANIFESTS += ['test/browser.ini']
diff --git a/browser/devtools/performance/performance-controller.js b/browser/devtools/performance/performance-controller.js
index a3e52bd..70e4864 100644
--- a/browser/devtools/performance/performance-controller.js
+++ b/browser/devtools/performance/performance-controller.js
@@ -22,20 +22,22 @@ devtools.lazyRequireGetter(this, "TreeWidget",
 devtools.lazyRequireGetter(this, "TIMELINE_BLUEPRINT",
   "devtools/shared/timeline/global", true);
 devtools.lazyRequireGetter(this, "L10N",
   "devtools/shared/profiler/global", true);
 devtools.lazyRequireGetter(this, "RecordingUtils",
   "devtools/performance/recording-utils", true);
 devtools.lazyRequireGetter(this, "RecordingModel",
   "devtools/performance/recording-model", true);
+devtools.lazyRequireGetter(this, "FramerateGraph",
+  "devtools/performance/performance-graphs", true);
+devtools.lazyRequireGetter(this, "MemoryGraph",
+  "devtools/performance/performance-graphs", true);
 devtools.lazyRequireGetter(this, "MarkersOverview",
   "devtools/shared/timeline/markers-overview", true);
-devtools.lazyRequireGetter(this, "MemoryOverview",
-  "devtools/shared/timeline/memory-overview", true);
 devtools.lazyRequireGetter(this, "Waterfall",
   "devtools/shared/timeline/waterfall", true);
 devtools.lazyRequireGetter(this, "MarkerDetails",
   "devtools/shared/timeline/marker-details", true);
 devtools.lazyRequireGetter(this, "CallView",
   "devtools/shared/profiler/tree-view", true);
 devtools.lazyRequireGetter(this, "ThreadNode",
   "devtools/shared/profiler/tree-model", true);
@@ -43,18 +45,16 @@ devtools.lazyRequireGetter(this, "FrameNode",
   "devtools/shared/profiler/tree-model", true);
 devtools.lazyRequireGetter(this, "JITOptimizations",
   "devtools/shared/profiler/jit", true);
 devtools.lazyRequireGetter(this, "OptionsView",
   "devtools/shared/options-view", true);
 
 devtools.lazyImporter(this, "CanvasGraphUtils",
   "resource:///modules/devtools/Graphs.jsm");
-devtools.lazyImporter(this, "LineGraphWidget",
-  "resource:///modules/devtools/Graphs.jsm");
 devtools.lazyImporter(this, "FlameGraphUtils",
   "resource:///modules/devtools/FlameGraph.jsm");
 devtools.lazyImporter(this, "FlameGraph",
   "resource:///modules/devtools/FlameGraph.jsm");
 devtools.lazyImporter(this, "SideMenuWidget",
   "resource:///modules/devtools/SideMenuWidget.jsm");
 
 const BRANCH_NAME = "devtools.performance.ui.";
diff --git a/browser/devtools/performance/views/overview.js b/browser/devtools/performance/views/overview.js
index 9d320f9..cb70473 100644
--- a/browser/devtools/performance/views/overview.js
+++ b/browser/devtools/performance/views/overview.js
@@ -6,21 +6,19 @@
 // No sense updating the overview more often than receiving data from the
 // backend. Make sure this isn't lower than DEFAULT_TIMELINE_DATA_PULL_TIMEOUT
 // in toolkit/devtools/server/actors/timeline.js
 const OVERVIEW_UPDATE_INTERVAL = 200; // ms
 
 const FRAMERATE_GRAPH_LOW_RES_INTERVAL = 100; // ms
 const FRAMERATE_GRAPH_HIGH_RES_INTERVAL = 16; // ms
 
-const FRAMERATE_GRAPH_HEIGHT = 40; // px
 const MARKERS_GRAPH_HEADER_HEIGHT = 14; // px
 const MARKERS_GRAPH_ROW_HEIGHT = 10; // px
 const MARKERS_GROUP_VERTICAL_PADDING = 4; // px
-const MEMORY_GRAPH_HEIGHT = 30; // px
 
 /**
  * View handler for the overview panel's time view, displaying
  * framerate, markers and memory over time.
  */
 let OverviewView = {
   /**
    * Sets up the view with event binding.
@@ -96,16 +94,21 @@ let OverviewView = {
   },
 
   /**
    * Sets the theme for the markers overview and memory overview.
    */
   setTheme: function (options={}) {
     let theme = options.theme || PerformanceController.getTheme();
 
+    if (this.framerateGraph) {
+      this.framerateGraph.setTheme(theme);
+      this.framerateGraph.refresh({ force: options.redraw });
+    }
+
     if (this.markersOverview) {
       this.markersOverview.setTheme(theme);
       this.markersOverview.refresh({ force: options.redraw });
     }
 
     if (this.memoryOverview) {
       this.memoryOverview.setTheme(theme);
       this.memoryOverview.refresh({ force: options.redraw });
@@ -186,18 +189,17 @@ let OverviewView = {
   _memoryGraphAvailable: Task.async(function *() {
     if (!PerformanceController.getOption("enable-memory")) {
       return false;
     }
     if (this.memoryOverview) {
       yield this.memoryOverview.ready();
       return true;
     }
-    this.memoryOverview = new MemoryOverview($("#memory-overview"));
-    this.memoryOverview.fixedHeight = MEMORY_GRAPH_HEIGHT;
+    this.memoryOverview = new MemoryGraph($("#memory-overview"));
     yield this.memoryOverview.ready();
     this.setTheme();
 
     CanvasGraphUtils.linkAnimation(this.markersOverview, this.memoryOverview);
     CanvasGraphUtils.linkSelection(this.markersOverview, this.memoryOverview);
     return true;
   }),
 
@@ -211,20 +213,19 @@ let OverviewView = {
   _framerateGraphAvailable: Task.async(function *() {
     if (!PerformanceController.getOption("enable-framerate")) {
       return false;
     }
     if (this.framerateGraph) {
       yield this.framerateGraph.ready();
       return true;
     }
-    let metric = L10N.getStr("graphs.fps");
-    this.framerateGraph = new LineGraphWidget($("#time-framerate"), { metric });
-    this.framerateGraph.fixedHeight = FRAMERATE_GRAPH_HEIGHT;
+    this.framerateGraph = new FramerateGraph($("#time-framerate"));
     yield this.framerateGraph.ready();
+    this.setTheme();
 
     CanvasGraphUtils.linkAnimation(this.markersOverview, this.framerateGraph);
     CanvasGraphUtils.linkSelection(this.markersOverview, this.framerateGraph);
     return true;
   }),
 
   /**
    * Method for handling all the set up for rendering the overview graphs.
diff --git a/browser/devtools/shared/moz.build b/browser/devtools/shared/moz.build
index 2430e6c..552c634 100644
--- a/browser/devtools/shared/moz.build
+++ b/browser/devtools/shared/moz.build
@@ -37,17 +37,16 @@ EXTRA_JS_MODULES.devtools.shared.profiler += [
     'profiler/tree-model.js',
     'profiler/tree-view.js',
 ]
 
 EXTRA_JS_MODULES.devtools.shared.timeline += [
     'timeline/global.js',
     'timeline/marker-details.js',
     'timeline/markers-overview.js',
-    'timeline/memory-overview.js',
     'timeline/waterfall.js',
 ]
 
 EXTRA_JS_MODULES.devtools.shared += [
     'autocomplete-popup.js',
     'd3.js',
     'devices.js',
     'doorhanger.js',
diff --git a/browser/devtools/shared/timeline/memory-overview.js b/browser/devtools/shared/timeline/memory-overview.js
deleted file mode 100644
index 6b59ee5..0000000
--- a/browser/devtools/shared/timeline/memory-overview.js
+++ /dev/null
@@ -1,80 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this file,
- * You can obtain one at http://mozilla.org/MPL/2.0/. */
-"use strict";
-
-/**
- * This file contains the "memory overview" graph, a simple representation of
- * of all the memory measurements taken while streaming the timeline data.
- */
-
-const {Cc, Ci, Cu, Cr} = require("chrome");
-
-Cu.import("resource:///modules/devtools/Graphs.jsm");
-Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
-
-const { colorUtils: { setAlpha }} = require("devtools/css-color");
-const { getColor } = require("devtools/shared/theme");
-
-loader.lazyRequireGetter(this, "L10N",
-  "devtools/shared/timeline/global", true);
-
-const OVERVIEW_DAMPEN_VALUES = 0.95;
-
-const OVERVIEW_HEIGHT = 30; // px
-const OVERVIEW_STROKE_WIDTH = 1; // px
-const OVERVIEW_MAXIMUM_LINE_COLOR = "rgba(0,136,204,0.4)";
-const OVERVIEW_AVERAGE_LINE_COLOR = "rgba(0,136,204,0.7)";
-const OVERVIEW_MINIMUM_LINE_COLOR = "rgba(0,136,204,0.9)";
-const OVERVIEW_CLIPHEAD_LINE_COLOR = "#666";
-const OVERVIEW_SELECTION_LINE_COLOR = "#555";
-
-/**
- * An overview for the memory data.
- *
- * @param nsIDOMNode parent
- *        The parent node holding the overview.
- */
-function MemoryOverview(parent) {
-  LineGraphWidget.call(this, parent, { metric: L10N.getStr("graphs.memory") });
-  this.setTheme();
-}
-
-MemoryOverview.prototype = Heritage.extend(LineGraphWidget.prototype, {
-  dampenValuesFactor: OVERVIEW_DAMPEN_VALUES,
-  fixedHeight: OVERVIEW_HEIGHT,
-  strokeWidth: OVERVIEW_STROKE_WIDTH,
-  maximumLineColor: OVERVIEW_MAXIMUM_LINE_COLOR,
-  averageLineColor: OVERVIEW_AVERAGE_LINE_COLOR,
-  minimumLineColor: OVERVIEW_MINIMUM_LINE_COLOR,
-  clipheadLineColor: OVERVIEW_CLIPHEAD_LINE_COLOR,
-  selectionLineColor: OVERVIEW_SELECTION_LINE_COLOR,
-  withTooltipArrows: false,
-  withFixedTooltipPositions: true,
-
-  /**
-   * Disables selection and empties this graph.
-   */
-  clearView: function() {
-    this.selectionEnabled = false;
-    this.dropSelection();
-    this.setData([]);
-  },
-
-  /**
-   * Sets the theme via `theme` to either "light" or "dark",
-   * and updates the internal styling to match. Requires a redraw
-   * to see the effects.
-   */
-  setTheme: function (theme) {
-    theme = theme || "light";
-    this.backgroundColor = getColor("body-background", theme);
-    this.backgroundGradientStart = setAlpha(getColor("highlight-blue", theme), 0.2);
-    this.backgroundGradientEnd = setAlpha(getColor("highlight-blue", theme), 0.05);
-    this.strokeColor = getColor("highlight-blue", theme);
-    this.selectionBackgroundColor = setAlpha(getColor("selection-background", theme), 0.25);
-    this.selectionStripesColor = "rgba(255, 255, 255, 0.1)";
-  }
-});
-
-exports.MemoryOverview = MemoryOverview;
-- 
2.2.1

