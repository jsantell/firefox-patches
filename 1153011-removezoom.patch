From: Jordan Santell <jsantell@gmail.com>
Date: Thu, 9 Apr 2015 17:37:11 -0700
Subject: Bug 1153011 - Remove zoom button from call tree. r=vp

diff --git a/browser/devtools/performance/test/browser_profiler_tree-view-04.js b/browser/devtools/performance/test/browser_profiler_tree-view-04.js
index 3feadcd..0f1a916 100644
--- a/browser/devtools/performance/test/browser_profiler_tree-view-04.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-view-04.js
@@ -19,33 +19,29 @@ function test() {
   treeRoot.attachTo(container);
 
   is(treeRoot.target.getAttribute("origin"), "chrome",
     "The root node's 'origin' attribute is correct.");
   is(treeRoot.target.getAttribute("category"), "",
     "The root node's 'category' attribute is correct.");
   is(treeRoot.target.getAttribute("tooltiptext"), "",
     "The root node's 'tooltiptext' attribute is correct.");
-  ok(treeRoot.target.querySelector(".call-tree-zoom").hidden,
-    "The root node's zoom button cell should be hidden.");
   ok(treeRoot.target.querySelector(".call-tree-category").hidden,
     "The root node's category label cell should be hidden.");
 
   let A = treeRoot.getChild();
   let B = A.getChild();
   let D = B.getChild();
 
   is(D.target.getAttribute("origin"), "chrome",
     "The .A.B.D node's 'origin' attribute is correct.");
   is(D.target.getAttribute("category"), "gc",
     "The .A.B.D node's 'category' attribute is correct.");
   is(D.target.getAttribute("tooltiptext"), "D (http://foo/bar/baz:78)",
     "The .A.B.D node's 'tooltiptext' attribute is correct.");
-  ok(!A.target.querySelector(".call-tree-zoom").hidden,
-    "The .A.B.D node's zoom button cell should not be hidden.");
   ok(!A.target.querySelector(".call-tree-category").hidden,
     "The .A.B.D node's category label cell should not be hidden.");
 
   is(D.target.childNodes.length, 6,
     "The number of columns displayed for tree items is correct.");
   is(D.target.childNodes[0].getAttribute("type"), "duration",
     "The first column displayed for tree items is correct.");
   is(D.target.childNodes[1].getAttribute("type"), "percentage",
@@ -56,35 +52,33 @@ function test() {
     "The fourth column displayed for tree items is correct.");
   is(D.target.childNodes[4].getAttribute("type"), "samples",
     "The fifth column displayed for tree items is correct.");
   is(D.target.childNodes[5].getAttribute("type"), "function",
     "The sixth column displayed for tree items is correct.");
 
   let functionCell = D.target.childNodes[5];
 
-  is(functionCell.childNodes.length, 9,
+  is(functionCell.childNodes.length, 8,
     "The number of columns displayed for function cells is correct.");
   is(functionCell.childNodes[0].className, "arrow theme-twisty",
     "The first node displayed for function cells is correct.");
   is(functionCell.childNodes[1].className, "plain call-tree-name",
     "The second node displayed for function cells is correct.");
   is(functionCell.childNodes[2].className, "plain call-tree-url",
     "The third node displayed for function cells is correct.");
   is(functionCell.childNodes[3].className, "plain call-tree-line",
     "The fourth node displayed for function cells is correct.");
   is(functionCell.childNodes[4].className, "plain call-tree-column",
     "The fifth node displayed for function cells is correct.");
   is(functionCell.childNodes[5].className, "plain call-tree-host",
     "The fifth node displayed for function cells is correct.");
-  is(functionCell.childNodes[6].className, "plain call-tree-zoom",
-    "The sixth node displayed for function cells is correct.");
-  is(functionCell.childNodes[7].tagName, "spacer",
+  is(functionCell.childNodes[6].tagName, "spacer",
     "The seventh node displayed for function cells is correct.");
-  is(functionCell.childNodes[8].className, "plain call-tree-category",
+  is(functionCell.childNodes[7].className, "plain call-tree-category",
     "The eight node displayed for function cells is correct.");
 
   finish();
 }
 
 let gSamples = [{
   time: 5,
   frames: [
diff --git a/browser/devtools/performance/test/browser_profiler_tree-view-06.js b/browser/devtools/performance/test/browser_profiler_tree-view-06.js
index d787600..1b747b5 100644
--- a/browser/devtools/performance/test/browser_profiler_tree-view-06.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-view-06.js
@@ -21,21 +21,16 @@ function spawnTest () {
   let D = B.getChild();
 
   let receivedLinkEvent = treeRoot.once("link");
   EventUtils.sendMouseEvent({ type: "mousedown" }, D.target.querySelector(".call-tree-url"));
 
   let eventItem = yield receivedLinkEvent;
   is(eventItem, D, "The 'link' event target is correct.");
 
-  let receivedZoomEvent = treeRoot.once("zoom");
-  EventUtils.sendMouseEvent({ type: "mousedown" }, D.target.querySelector(".call-tree-zoom"));
-
-  eventItem = yield receivedZoomEvent;
-  is(eventItem, D, "The 'zoom' event target is correct.");
   finish();
 }
 
 let gSamples = [{
   time: 5,
   frames: [
     { category: 8,  location: "(root)" },
     { category: 8,  location: "A (http://foo/bar/baz:12)" },
diff --git a/browser/devtools/shared/profiler/tree-view.js b/browser/devtools/shared/profiler/tree-view.js
index eb67806..df52a29 100644
--- a/browser/devtools/shared/profiler/tree-view.js
+++ b/browser/devtools/shared/profiler/tree-view.js
@@ -11,17 +11,16 @@ loader.lazyRequireGetter(this, "L10N",
 loader.lazyImporter(this, "Heritage",
   "resource:///modules/devtools/ViewHelpers.jsm");
 loader.lazyImporter(this, "AbstractTreeItem",
   "resource:///modules/devtools/AbstractTreeItem.jsm");
 
 const MILLISECOND_UNITS = L10N.getStr("table.ms");
 const PERCENTAGE_UNITS = L10N.getStr("table.percentage");
 const URL_LABEL_TOOLTIP = L10N.getStr("table.url.tooltiptext");
-const ZOOM_BUTTON_TOOLTIP = L10N.getStr("table.zoom.tooltiptext");
 const CALL_TREE_INDENTATION = 16; // px
 
 const DEFAULT_SORTING_PREDICATE = (a, b) => a.frame.samples < b.frame.samples ? 1 : -1;
 const DEFAULT_AUTO_EXPAND_DEPTH = 3; // depth
 const DEFAULT_VISIBLE_CELLS = {
   duration: true,
   percentage: true,
   allocations: false,
@@ -102,17 +101,16 @@ function CallView({
              : Object.create(DEFAULT_VISIBLE_CELLS);
 
   this.caller = caller;
   this.frame = frame;
   this.hidden = hidden;
   this.inverted = inverted;
 
   this._onUrlClick = this._onUrlClick.bind(this);
-  this._onZoomClick = this._onZoomClick.bind(this);
 };
 
 CallView.prototype = Heritage.extend(AbstractTreeItem.prototype, {
   /**
    * Creates the view for this tree node.
    * @param nsIDOMNode document
    * @param nsIDOMNode arrowNode
    * @return nsIDOMNode
@@ -190,17 +188,16 @@ CallView.prototype = Heritage.extend(AbstractTreeItem.prototype, {
     targetNode.setAttribute("tooltiptext", frameInfo.isMetaCategory ? frameInfo.categoryData.label :
                                            this.frame.location || "");
     if (this.hidden) {
       targetNode.style.display = "none";
     }
 
     let isRoot = frameInfo.nodeType == "Thread";
     if (isRoot) {
-      functionCell.querySelector(".call-tree-zoom").hidden = true;
       functionCell.querySelector(".call-tree-category").hidden = true;
     }
 
     if (this.visibleCells.duration) {
       targetNode.appendChild(durationCell);
     }
     if (this.visibleCells.percentage) {
       targetNode.appendChild(percentageCell);
@@ -336,22 +333,16 @@ CallView.prototype = Heritage.extend(AbstractTreeItem.prototype, {
       columnNode.setAttribute("value", frameInfo.column ? ":" + frameInfo.column : "");
       cell.appendChild(columnNode);
 
       let hostNode = this.document.createElement("label");
       hostNode.className = "plain call-tree-host";
       hostNode.setAttribute("value", frameInfo.hostName || "");
       cell.appendChild(hostNode);
 
-      let zoomNode = this.document.createElement("button");
-      zoomNode.className = "plain call-tree-zoom";
-      zoomNode.setAttribute("tooltiptext", ZOOM_BUTTON_TOOLTIP);
-      zoomNode.addEventListener("mousedown", this._onZoomClick);
-      cell.appendChild(zoomNode);
-
       let spacerNode = this.document.createElement("spacer");
       spacerNode.setAttribute("flex", "10000");
       cell.appendChild(spacerNode);
 
       let categoryNode = this.document.createElement("label");
       categoryNode.className = "plain call-tree-category";
       categoryNode.style.color = frameInfo.categoryData.color;
       categoryNode.setAttribute("value", frameInfo.categoryData.label || "");
@@ -380,19 +371,10 @@ CallView.prototype = Heritage.extend(AbstractTreeItem.prototype, {
 
   /**
    * Handler for the "click" event on the url node of this call view.
    */
   _onUrlClick: function(e) {
     e.preventDefault();
     e.stopPropagation();
     this.root.emit("link", this);
-  },
-
-  /**
-   * Handler for the "click" event on the zoom node of this call view.
-   */
-  _onZoomClick: function(e) {
-    e.preventDefault();
-    e.stopPropagation();
-    this.root.emit("zoom", this);
   }
 });
-- 
2.2.1

