From 2b0d8712c363893515e181de147ac3c8e0c51890 Mon Sep 17 00:00:00 2001
From: Jordan Santell <jsantell@gmail.com>
Date: Wed, 4 Feb 2015 13:35:31 -0800
Subject: Bug 1120800 - Clear button now clears out all recordings and
 stops current recording. r=vp

diff --git a/browser/devtools/performance/performance-controller.js b/browser/devtools/performance/performance-controller.js
index 5919453..3958432 100644
--- a/browser/devtools/performance/performance-controller.js
+++ b/browser/devtools/performance/performance-controller.js
@@ -59,31 +59,37 @@ const BRANCH_NAME = "devtools.performance.ui.";
 const EVENTS = {
   // Fired by the OptionsView when a preference changes.
   PREF_CHANGED: "Preformance:PrefChanged",
 
   // Emitted by the PerformanceController or RecordingView
   // when a recording model is selected
   RECORDING_SELECTED: "Performance:RecordingSelected",
 
+  // Emitted by the PerformanceView on clear button click
+  UI_CLEAR_RECORDINGS: "Performance:UI:ClearRecordings",
+
   // Emitted by the PerformanceView on record button click
   UI_START_RECORDING: "Performance:UI:StartRecording",
   UI_STOP_RECORDING: "Performance:UI:StopRecording",
 
   // Emitted by the PerformanceView on import button click
   UI_IMPORT_RECORDING: "Performance:UI:ImportRecording",
   // Emitted by the RecordingsView on export button click
   UI_EXPORT_RECORDING: "Performance:UI:ExportRecording",
 
   // When a recording is started or stopped via the PerformanceController
   RECORDING_STARTED: "Performance:RecordingStarted",
   RECORDING_STOPPED: "Performance:RecordingStopped",
   RECORDING_WILL_START: "Performance:RecordingWillStart",
   RECORDING_WILL_STOP: "Performance:RecordingWillStop",
 
+  // When recordings have been cleared out
+  RECORDINGS_CLEARED: "Performance:RecordingsCleared",
+
   // When a recording is imported or exported via the PerformanceController
   RECORDING_IMPORTED: "Performance:RecordingImported",
   RECORDING_EXPORTED: "Performance:RecordingExported",
 
   // When the PerformanceController has new recording data
   TIMELINE_DATA: "Performance:TimelineData",
 
   // Emitted by the OverviewView when more data has been rendered
@@ -157,24 +163,26 @@ let PerformanceController = {
    * Listen for events emitted by the current tab target and
    * main UI events.
    */
   initialize: Task.async(function* () {
     this.startRecording = this.startRecording.bind(this);
     this.stopRecording = this.stopRecording.bind(this);
     this.importRecording = this.importRecording.bind(this);
     this.exportRecording = this.exportRecording.bind(this);
+    this.clearRecordings = this.clearRecordings.bind(this);
     this._onTimelineData = this._onTimelineData.bind(this);
     this._onRecordingSelectFromView = this._onRecordingSelectFromView.bind(this);
     this._onPrefChanged = this._onPrefChanged.bind(this);
 
     ToolbarView.on(EVENTS.PREF_CHANGED, this._onPrefChanged);
     PerformanceView.on(EVENTS.UI_START_RECORDING, this.startRecording);
     PerformanceView.on(EVENTS.UI_STOP_RECORDING, this.stopRecording);
     PerformanceView.on(EVENTS.UI_IMPORT_RECORDING, this.importRecording);
+    PerformanceView.on(EVENTS.UI_CLEAR_RECORDINGS, this.clearRecordings);
     RecordingsView.on(EVENTS.UI_EXPORT_RECORDING, this.exportRecording);
     RecordingsView.on(EVENTS.RECORDING_SELECTED, this._onRecordingSelectFromView);
 
     gFront.on("markers", this._onTimelineData); // timeline markers
     gFront.on("frames", this._onTimelineData); // stack frames
     gFront.on("memory", this._onTimelineData); // memory measurements
     gFront.on("ticks", this._onTimelineData); // framerate
     gFront.on("allocations", this._onTimelineData); // memory allocations
@@ -183,16 +191,17 @@ let PerformanceController = {
   /**
    * Remove events handled by the PerformanceController
    */
   destroy: function() {
     ToolbarView.off(EVENTS.PREF_CHANGED, this._onPrefChanged);
     PerformanceView.off(EVENTS.UI_START_RECORDING, this.startRecording);
     PerformanceView.off(EVENTS.UI_STOP_RECORDING, this.stopRecording);
     PerformanceView.off(EVENTS.UI_IMPORT_RECORDING, this.importRecording);
+    PerformanceView.off(EVENTS.UI_CLEAR_RECORDINGS, this.clearRecordings);
     RecordingsView.off(EVENTS.UI_EXPORT_RECORDING, this.exportRecording);
     RecordingsView.off(EVENTS.RECORDING_SELECTED, this._onRecordingSelectFromView);
 
     gFront.off("markers", this._onTimelineData);
     gFront.off("frames", this._onTimelineData);
     gFront.off("memory", this._onTimelineData);
     gFront.off("ticks", this._onTimelineData);
     gFront.off("allocations", this._onTimelineData);
@@ -248,16 +257,32 @@ let PerformanceController = {
    *        The file to stream the data into.
    */
   exportRecording: Task.async(function*(_, recording, file) {
     yield recording.exportRecording(file);
     this.emit(EVENTS.RECORDING_EXPORTED, recording);
   }),
 
   /**
+   * Clears all recordings from the list as well as the current recording.
+   * Emits `EVENTS.RECORDINGS_CLEARED` when complete so other components can clean up.
+   */
+  clearRecordings: Task.async(function* () {
+    let latest = this._getLatestRecording();
+
+    if (latest && latest.isRecording()) {
+      yield this.stopRecording();
+    }
+
+    this._recordings.length = 0;
+    this.setCurrentRecording(null);
+    this.emit(EVENTS.RECORDINGS_CLEARED);
+  }),
+
+  /**
    * Loads a recording from a file, adding it to the recordings list. Emits
    * `EVENTS.RECORDING_IMPORTED` when the file was loaded.
    *
    * @param nsILocalFile file
    *        The file to import the data from.
    */
   importRecording: Task.async(function*(_, file) {
     let recording = this._createRecording();
diff --git a/browser/devtools/performance/performance-view.js b/browser/devtools/performance/performance-view.js
index 618040c..3b6f80c 100644
--- a/browser/devtools/performance/performance-view.js
+++ b/browser/devtools/performance/performance-view.js
@@ -27,30 +27,37 @@ let PerformanceView = {
   },
 
   /**
    * Sets up the view with event binding and main subviews.
    */
   initialize: function () {
     this._recordButton = $("#record-button");
     this._importButton = $("#import-button");
+    this._clearButton = $("#clear-button");
 
     this._onRecordButtonClick = this._onRecordButtonClick.bind(this);
     this._onImportButtonClick = this._onImportButtonClick.bind(this);
+    this._onClearButtonClick = this._onClearButtonClick.bind(this);
     this._lockRecordButton = this._lockRecordButton.bind(this);
     this._unlockRecordButton = this._unlockRecordButton.bind(this);
     this._onRecordingSelected = this._onRecordingSelected.bind(this);
     this._onRecordingStopped = this._onRecordingStopped.bind(this);
+    this._onRecordingWillStop = this._onRecordingWillStop.bind(this);
+    this._onRecordingWillStart = this._onRecordingWillStart.bind(this);
 
     for (let button of $$(".record-button")) {
       button.addEventListener("click", this._onRecordButtonClick);
     }
     this._importButton.addEventListener("click", this._onImportButtonClick);
+    this._clearButton.addEventListener("click", this._onClearButtonClick);
 
     // Bind to controller events to unlock the record button
+    PerformanceController.on(EVENTS.RECORDING_WILL_START, this._onRecordingWillStart);
+    PerformanceController.on(EVENTS.RECORDING_WILL_STOP, this._onRecordingWillStop);
     PerformanceController.on(EVENTS.RECORDING_STARTED, this._unlockRecordButton);
     PerformanceController.on(EVENTS.RECORDING_STOPPED, this._onRecordingStopped);
     PerformanceController.on(EVENTS.RECORDING_SELECTED, this._onRecordingSelected);
 
     this.setState("empty");
 
     return promise.all([
       RecordingsView.initialize(),
@@ -64,16 +71,18 @@ let PerformanceView = {
    * Unbinds events and destroys subviews.
    */
   destroy: function () {
     for (let button of $$(".record-button")) {
       button.removeEventListener("click", this._onRecordButtonClick);
     }
     this._importButton.removeEventListener("click", this._onImportButtonClick);
 
+    PerformanceController.off(EVENTS.RECORDING_WILL_START, this._onRecordingWillStart);
+    PerformanceController.off(EVENTS.RECORDING_WILL_STOP, this._onRecordingWillStop);
     PerformanceController.off(EVENTS.RECORDING_STARTED, this._unlockRecordButton);
     PerformanceController.off(EVENTS.RECORDING_STOPPED, this._onRecordingStopped);
     PerformanceController.off(EVENTS.RECORDING_SELECTED, this._onRecordingSelected);
 
     return promise.all([
       RecordingsView.destroy(),
       OverviewView.destroy(),
       ToolbarView.destroy(),
@@ -115,40 +124,59 @@ let PerformanceView = {
   /**
    * Removes the `locked` attribute on the record button.
    */
   _unlockRecordButton: function () {
     this._recordButton.removeAttribute("locked");
   },
 
   /**
+   * Fired when a recording is starting, but not yet completed.
+   */
+  _onRecordingWillStart: function () {
+    this._lockRecordButton();
+    this._recordButton.setAttribute("checked", "true");
+  },
+
+  /**
+   * Fired when a recording is stopping, but not yet completed.
+   */
+  _onRecordingWillStop: function () {
+    this._lockRecordButton();
+    this._recordButton.removeAttribute("checked");
+  },
+
+  /**
    * When a recording is complete.
    */
   _onRecordingStopped: function (_, recording) {
     this._unlockRecordButton();
 
     // If this recording stopped is the current recording, set the
     // state to "recorded". A stopped recording doesn't necessarily
     // have to be the current recording (console.profileEnd, for example)
     if (recording === PerformanceController.getCurrentRecording()) {
       this.setState("recorded");
     }
   },
 
   /**
+   * Handler for clicking the clear button.
+   */
+  _onClearButtonClick: function (e) {
+    this.emit(EVENTS.UI_CLEAR_RECORDINGS);
+  },
+
+  /**
    * Handler for clicking the record button.
    */
   _onRecordButtonClick: function (e) {
     if (this._recordButton.hasAttribute("checked")) {
-      this._recordButton.removeAttribute("checked");
-      this._lockRecordButton();
       this.emit(EVENTS.UI_STOP_RECORDING);
     } else {
-      this._recordButton.setAttribute("checked", "true");
-      this._lockRecordButton();
       this.emit(EVENTS.UI_START_RECORDING);
     }
   },
 
   /**
    * Handler for clicking the import button.
    */
   _onImportButtonClick: function(e) {
@@ -161,17 +189,19 @@ let PerformanceView = {
       this.emit(EVENTS.UI_IMPORT_RECORDING, fp.file);
     }
   },
 
   /**
    * Fired when a recording is selected. Used to toggle the profiler view state.
    */
   _onRecordingSelected: function (_, recording) {
-    if (recording.isRecording()) {
+    if (!recording) {
+      this.setState("empty");
+    } else if (recording.isRecording()) {
       this.setState("recording");
     } else {
       this.setState("recorded");
     }
   }
 };
 
 /**
diff --git a/browser/devtools/performance/test/browser.ini b/browser/devtools/performance/test/browser.ini
index 8f3c87e6..85dc34c 100644
--- a/browser/devtools/performance/test/browser.ini
+++ b/browser/devtools/performance/test/browser.ini
@@ -5,16 +5,18 @@ support-files =
   doc_simple-test.html
   head.js
 
 # Commented out tests are profiler tests
 # that need to be moved over to performance tool
 
 [browser_perf-aaa-run-first-leaktest.js]
 [browser_perf-allocations-to-samples.js]
+[browser_perf-clear-01.js]
+[browser_perf-clear-02.js]
 [browser_perf-data-massaging-01.js]
 [browser_perf-data-samples.js]
 [browser_perf-details-calltree-render.js]
 [browser_perf-details-flamegraph-render.js]
 [browser_perf-details-memory-calltree-render.js]
 [browser_perf-details-memory-flamegraph-render.js]
 [browser_perf-details-waterfall-render.js]
 [browser_perf-details-01.js]
diff --git a/browser/devtools/performance/test/browser_perf-clear-01.js b/browser/devtools/performance/test/browser_perf-clear-01.js
new file mode 100644
index 0000000..b19b076
--- /dev/null
+++ b/browser/devtools/performance/test/browser_perf-clear-01.js
@@ -0,0 +1,30 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that clearing recordings empties out the recordings list and toggles
+ * the empty notice state.
+ */
+
+let test = Task.async(function*() {
+  let { target, panel, toolbox } = yield initPerformance(SIMPLE_URL);
+  let { EVENTS, PerformanceController, PerformanceView, RecordingsView } = panel.panelWin;
+
+  yield startRecording(panel);
+  yield stopRecording(panel);
+
+  yield startRecording(panel);
+  yield stopRecording(panel);
+
+  yield PerformanceController.clearRecordings();
+
+  is(RecordingsView.itemCount, 0,
+    "RecordingsView should be empty.");
+  is(PerformanceView.getState(), "empty",
+    "PerformanceView should be in an empty state.");
+  is(PerformanceController.getCurrentRecording(), null,
+    "There should be no current recording.");
+
+  yield teardown(panel);
+  finish();
+});
diff --git a/browser/devtools/performance/test/browser_perf-clear-02.js b/browser/devtools/performance/test/browser_perf-clear-02.js
new file mode 100644
index 0000000..f633af0
--- /dev/null
+++ b/browser/devtools/performance/test/browser_perf-clear-02.js
@@ -0,0 +1,34 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that clearing recordings empties out the recordings list and stops
+ * a current recording if recording.
+ */
+
+let test = Task.async(function*() {
+  let { target, panel, toolbox } = yield initPerformance(SIMPLE_URL);
+  let { EVENTS, PerformanceController, PerformanceView, RecordingsView } = panel.panelWin;
+
+  yield startRecording(panel);
+  yield stopRecording(panel);
+
+  yield startRecording(panel);
+
+  let stopped = Promise.all([
+    once(PerformanceController, EVENTS.RECORDING_STOPPED),
+    once(PerformanceController, EVENTS.RECORDINGS_CLEARED)
+  ]);
+  PerformanceController.clearRecordings();
+  yield stopped;
+
+  is(RecordingsView.itemCount, 0,
+    "RecordingsView should be empty.");
+  is(PerformanceView.getState(), "empty",
+    "PerformanceView should be in an empty state.");
+  is(PerformanceController.getCurrentRecording(), null,
+    "There should be no current recording.");
+
+  yield teardown(panel);
+  finish();
+});
diff --git a/browser/devtools/performance/views/details-abstract-subview.js b/browser/devtools/performance/views/details-abstract-subview.js
index 84bae6e..c14a4a8 100644
--- a/browser/devtools/performance/views/details-abstract-subview.js
+++ b/browser/devtools/performance/views/details-abstract-subview.js
@@ -62,17 +62,17 @@ let DetailsSubview = {
    * rerender upon change.
    */
   rerenderPrefs: [],
 
   /**
    * Called when recording stops or is selected.
    */
   _onRecordingStoppedOrSelected: function(_, recording) {
-    if (recording.isRecording()) {
+    if (!recording || recording.isRecording()) {
       return;
     }
     if (DetailsView.isViewSelected(this) || this.canUpdateWhileHidden) {
       this.render();
     } else {
       this.shouldUpdateWhenShown = true;
     }
   },
diff --git a/browser/devtools/performance/views/overview.js b/browser/devtools/performance/views/overview.js
index ec1e534..3a77c83 100644
--- a/browser/devtools/performance/views/overview.js
+++ b/browser/devtools/performance/views/overview.js
@@ -260,16 +260,19 @@ let OverviewView = {
     this._checkSelection(recording);
     this.render(FRAMERATE_GRAPH_HIGH_RES_INTERVAL);
   },
 
   /**
    * Called when a new recording is selected.
    */
   _onRecordingSelected: function (_, recording) {
+    if (!recording) {
+      return;
+    }
     this.markersOverview.dropSelection();
     this._checkSelection(recording);
 
     // If timeout exists, we have something recording, so
     // this will still tick away at rendering. Otherwise, force a render.
     if (!this._timeoutId) {
       this.render(FRAMERATE_GRAPH_HIGH_RES_INTERVAL);
     }
diff --git a/browser/devtools/performance/views/recordings.js b/browser/devtools/performance/views/recordings.js
index 72077aa..53c82e0 100644
--- a/browser/devtools/performance/views/recordings.js
+++ b/browser/devtools/performance/views/recordings.js
@@ -13,32 +13,35 @@ let RecordingsView = Heritage.extend(WidgetMethods, {
   initialize: function() {
     this.widget = new SideMenuWidget($("#recordings-list"));
 
     this._onSelect = this._onSelect.bind(this);
     this._onRecordingStarted = this._onRecordingStarted.bind(this);
     this._onRecordingStopped = this._onRecordingStopped.bind(this);
     this._onRecordingImported = this._onRecordingImported.bind(this);
     this._onSaveButtonClick = this._onSaveButtonClick.bind(this);
+    this._onRecordingsCleared = this._onRecordingsCleared.bind(this);
 
     this.emptyText = L10N.getStr("noRecordingsText");
 
     PerformanceController.on(EVENTS.RECORDING_STARTED, this._onRecordingStarted);
     PerformanceController.on(EVENTS.RECORDING_STOPPED, this._onRecordingStopped);
     PerformanceController.on(EVENTS.RECORDING_IMPORTED, this._onRecordingImported);
+    PerformanceController.on(EVENTS.RECORDINGS_CLEARED, this._onRecordingsCleared);
     this.widget.addEventListener("select", this._onSelect, false);
   },
 
   /**
    * Destruction function, called when the tool is closed.
    */
   destroy: function() {
     PerformanceController.off(EVENTS.RECORDING_STARTED, this._onRecordingStarted);
     PerformanceController.off(EVENTS.RECORDING_STOPPED, this._onRecordingStopped);
     PerformanceController.off(EVENTS.RECORDING_IMPORTED, this._onRecordingImported);
+    PerformanceController.off(EVENTS.RECORDINGS_CLEARED, this._onRecordingsCleared);
     this.widget.removeEventListener("select", this._onSelect, false);
   },
 
   /**
    * Adds an empty recording to this container.
    *
    * @param RecordingModel recording
    *        A model for the new recording item created.
@@ -158,16 +161,23 @@ let RecordingsView = Heritage.extend(WidgetMethods, {
     // Immediately select the imported recording
     this.selectedItem = recordingItem;
 
     // Render the recording item with finalized information (timing, etc)
     this.finalizeRecording(recordingItem);
   },
 
   /**
+   * Clears out all recordings.
+   */
+  _onRecordingsCleared: function () {
+    this.empty();
+  },
+
+  /**
    * Adds recording data to a recording item in this container.
    *
    * @param Item recordingItem
    *        An item inserted via `RecordingsView.addEmptyRecording`.
    */
   finalizeRecording: function (recordingItem) {
     let model = recordingItem.attachment;
 
-- 
2.2.1

