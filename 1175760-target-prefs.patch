From: Jordan Santell <jsantell@mozilla.com>
Date: Mon, 13 Jul 2015 17:24:24 -0700
Subject: Bug 1175760 - Set recording configurations based on UI prefs, but also target support overrides UI prefs. r=vp

diff --git a/browser/devtools/performance/modules/logic/front.js b/browser/devtools/performance/modules/logic/front.js
index 3b9d30e..eb737d7 100644
--- a/browser/devtools/performance/modules/logic/front.js
+++ b/browser/devtools/performance/modules/logic/front.js
@@ -12,16 +12,18 @@ loader.lazyRequireGetter(this, "EventEmitter",
   "devtools/toolkit/event-emitter");
 loader.lazyRequireGetter(this, "extend",
   "sdk/util/object", true);
 
 loader.lazyRequireGetter(this, "Actors",
   "devtools/performance/actors");
 loader.lazyRequireGetter(this, "RecordingModel",
   "devtools/performance/recording-model", true);
+loader.lazyRequireGetter(this, "normalizePerformanceFeatures",
+  "devtools/performance/recording-utils", true);
 loader.lazyRequireGetter(this, "DevToolsUtils",
   "devtools/toolkit/DevToolsUtils");
 
 loader.lazyImporter(this, "gDevTools",
   "resource:///modules/devtools/gDevTools.jsm");
 
 /**
  * A cache of all PerformanceFront instances.
@@ -311,26 +313,31 @@ PerformanceFront.prototype = {
    *
    * @param object options
    *        An options object to pass to the actors. Supported properties are
    *        `withTicks`, `withMemory` and `withAllocations`, `probability`, and `maxLogLength`.
    * @return object
    *         A promise that is resolved once recording has started.
    */
   startRecording: Task.async(function*(options = {}) {
-    let model = new RecordingModel(options);
+    let model = new RecordingModel(normalizePerformanceFeatures(options, this.getActorSupport()));
+
     this.emit("recording-starting", model);
 
     // All actors are started asynchronously over the remote debugging protocol.
     // Get the corresponding start times from each one of them.
     // The timeline and memory actors are target-dependent, so start those as well,
     // even though these are mocked in older Geckos (FF < 35)
-    let { startTime, position, generation, totalSize } = yield this._profiler.start(options);
-    let timelineStartTime = yield this._timeline.start(options);
-    let memoryStartTime = yield this._memory.start(options);
+    let profilerStart = this._profiler.start(options);
+    let timelineStart = this._timeline.start(options);
+    let memoryStart = this._memory.start(options);
+
+    let { startTime, position, generation, totalSize } = yield profilerStart;
+    let timelineStartTime = yield timelineStart;
+    let memoryStartTime = yield memoryStart;
 
     let data = {
       profilerStartTime: startTime, timelineStartTime, memoryStartTime,
       generation, position, totalSize
     };
 
     // Signify to the model that the recording has started,
     // populate with data and store the recording model here.
diff --git a/browser/devtools/performance/modules/logic/recording-utils.js b/browser/devtools/performance/modules/logic/recording-utils.js
index 095999d..f74007c 100644
--- a/browser/devtools/performance/modules/logic/recording-utils.js
+++ b/browser/devtools/performance/modules/logic/recording-utils.js
@@ -1,21 +1,54 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { Cc, Ci, Cu, Cr } = require("chrome");
+loader.lazyRequireGetter(this, "extend",
+  "sdk/util/object", true);
 
 /**
  * Utility functions for managing recording models and their internal data,
  * such as filtering profile samples or offsetting timestamps.
  */
 
 /**
+ * Takes an options object for `startRecording`, and normalizes
+ * it based off of server support. For example, if the user
+ * requests to record memory `withMemory = true`, but the server does
+ * not support that feature, then the `false` will overwrite user preference
+ * in order to define the recording with what is actually available, not
+ * what the user initially requested.
+ *
+ * @param {object} options
+ * @param {boolean} support.timeline
+ * @param {boolean} support.memory
+ * @param {boolean}
+ */
+function normalizePerformanceFeatures (options, support) {
+  let supportOptions = Object.create(null);
+
+  // TODO bug 1172180 disable `withAllocations` and `withJITOptimizations` when using the
+  // pseudo front, as we only want to support it directly from the real actor
+  // in Fx42+
+  if (!support.memory) {
+    supportOptions.withMemory = false;
+    supportOptions.withAllocations = false;
+  }
+  if (!support.timeline) {
+    supportOptions.withMarkers = false;
+    supportOptions.withTicks = false;
+  }
+
+  return extend(options, supportOptions);
+}
+
+/**
  * Filters all the samples in the provided profiler data to be more recent
  * than the specified start time.
  *
  * @param object profile
  *        The profiler data received from the backend.
  * @param number profilerStartTime
  *        The earliest acceptable sample time (in milliseconds).
  */
@@ -526,16 +559,17 @@ UniqueStacks.prototype.getOrAddStackIndex = function(prefixIndex, frameIndex) {
   stackTable.push([prefixIndex, frameIndex]);
   return index;
 };
 
 UniqueStacks.prototype.getOrAddStringIndex = function(s) {
   return this._uniqueStrings.getOrAddStringIndex(s);
 };
 
+exports.normalizePerformanceFeatures = normalizePerformanceFeatures;
 exports.filterSamples = filterSamples;
 exports.offsetSampleTimes = offsetSampleTimes;
 exports.offsetMarkerTimes = offsetMarkerTimes;
 exports.offsetAndScaleTimestamps = offsetAndScaleTimestamps;
 exports.getProfileThreadFromAllocations = getProfileThreadFromAllocations;
 exports.deflateProfile = deflateProfile;
 exports.deflateThread = deflateThread;
 exports.UniqueStrings = UniqueStrings;
diff --git a/browser/devtools/performance/performance-controller.js b/browser/devtools/performance/performance-controller.js
index cb7ea13..1d984c4 100644
--- a/browser/devtools/performance/performance-controller.js
+++ b/browser/devtools/performance/performance-controller.js
@@ -480,49 +480,38 @@ let PerformanceController = {
   /**
    * Returns the internal store of recording models.
    */
   getRecordings: function () {
     return this._recordings;
   },
 
   /**
-   * Utility method taking the currently selected recording item's features, or optionally passed
-   * in recording item, as well as the actor support on the server, returning a boolean
-   * indicating if the requirements pass or not. Used to toggle features' visibility mostly.
+   * Utility method taking a string or an array of strings of feature names (like
+   * "withAllocations" or "withMarkers"), and returns whether or not the current
+   * recording supports that feature, based off of UI preferences and server support.
    *
-   * @option {Array<string>} features
-   *         An array of strings indicating what configuration is needed on the recording
+   * @option {Array<string>|string} features
+   *         A string or array of strings indicating what configuration is needed on the recording
    *         model, like `withTicks`, or `withMemory`.
-   * @option {Array<string>} actors
-   *         An array of strings indicating what actors must exist.
-   * @option {boolean} mustBeCompleted
-   *         A boolean indicating whether the recording must be either completed or not.
-   *         Setting to undefined will allow either state.
-   * @param {RecordingModel} recording
-   *        An optional recording model to use instead of the currently selected.
    *
    * @return boolean
    */
-  isFeatureSupported: function ({ features, actors, mustBeCompleted }, recording) {
-    recording = recording || this.getCurrentRecording();
-    let recordingConfig = recording ? recording.getConfiguration() : {};
-    let currentCompletedState = recording ? recording.isCompleted() : void 0;
-    let actorsSupported = gFront.getActorSupport();
-
-    if (mustBeCompleted != null && mustBeCompleted !== currentCompletedState) {
-      return false;
-    }
-    if (actors && !actors.every(a => actorsSupported[a])) {
-      return false;
+  isFeatureSupported: function (features) {
+    if (!features) {
+      return true;
     }
-    if (features && !features.every(f => recordingConfig[f])) {
+
+    let recording = this.getCurrentRecording();
+    if (!recording) {
       return false;
     }
-    return true;
+
+    let config = recording.getConfiguration();
+    return [].concat(features).every(f => config[f]);
   },
 
   /**
    * Returns an object with `supported` and `enabled` properties indicating
    * whether or not the platform is capable of turning on e10s and whether or not
    * it's already enabled, respectively.
    *
    * @return {object}
diff --git a/browser/devtools/performance/test/browser.ini b/browser/devtools/performance/test/browser.ini
index bea921e..7db4d6f 100644
--- a/browser/devtools/performance/test/browser.ini
+++ b/browser/devtools/performance/test/browser.ini
@@ -22,16 +22,17 @@ support-files =
 [browser_perf-categories-js-calltree.js]
 [browser_perf-compatibility-01.js]
 [browser_perf-compatibility-02.js]
 [browser_perf-compatibility-03.js]
 [browser_perf-compatibility-04.js]
 [browser_perf-compatibility-05.js]
 [browser_perf-compatibility-06.js]
 [browser_perf-compatibility-07.js]
+[browser_perf-compatibility-08.js]
 [browser_perf-clear-01.js]
 [browser_perf-clear-02.js]
 [browser_perf-columns-js-calltree.js]
 [browser_perf-columns-memory-calltree.js]
 [browser_perf-console-record-01.js]
 [browser_perf-console-record-02.js]
 [browser_perf-console-record-03.js]
 [browser_perf-console-record-04.js]
diff --git a/browser/devtools/performance/test/browser_perf-compatibility-02.js b/browser/devtools/performance/test/browser_perf-compatibility-02.js
index 5d3574b..c19ac04 100644
--- a/browser/devtools/performance/test/browser_perf-compatibility-02.js
+++ b/browser/devtools/performance/test/browser_perf-compatibility-02.js
@@ -61,18 +61,18 @@ let test = Task.async(function*() {
 
   is($("#overview-pane").hidden, true,
     "overview pane hidden when timeline mocked.");
 
   is($("#select-waterfall-view").hidden, true,
     "waterfall view button hidden when timeline mocked");
   is($("#select-js-calltree-view").hidden, false,
     "jscalltree view button not hidden when timeline/memory mocked");
-  is($("#select-js-flamegraph-view").hidden, true,
-    "jsflamegraph view button hidden when timeline mocked");
+  is($("#select-js-flamegraph-view").hidden, false,
+    "jsflamegraph view button not hidden when timeline mocked");
   is($("#select-memory-calltree-view").hidden, true,
     "memorycalltree view button hidden when memory mocked");
   is($("#select-memory-flamegraph-view").hidden, true,
     "memoryflamegraph view button hidden when memory mocked");
 
   ok(DetailsView.isViewSelected(JsCallTreeView),
     "JS Call Tree view selected by default when timeline/memory mocked.");
 
diff --git a/browser/devtools/performance/test/browser_perf-compatibility-04.js b/browser/devtools/performance/test/browser_perf-compatibility-04.js
index 0d9a4f2..bad4dfe 100644
--- a/browser/devtools/performance/test/browser_perf-compatibility-04.js
+++ b/browser/devtools/performance/test/browser_perf-compatibility-04.js
@@ -18,17 +18,16 @@ let test = Task.async(function*() {
 
   let { memory: memorySupport, timeline: timelineSupport } = gFront.getActorSupport();
   ok(!memorySupport, "memory should be mocked.");
   ok(timelineSupport, "timeline should not be mocked.");
 
   yield startRecording(panel);
   yield busyWait(100);
   yield waitUntil(() => PerformanceController.getCurrentRecording().getTicks().length);
-  yield waitUntil(() => PerformanceController.getCurrentRecording().getMemory().length);
   yield waitUntil(() => PerformanceController.getCurrentRecording().getMarkers().length);
   yield stopRecording(panel);
 
   let {
     label, duration, allocations, profile
   } = PerformanceController.getCurrentRecording().getAllData();
 
   is(label, "", "Empty label for mock.");
diff --git a/browser/devtools/performance/test/browser_perf-compatibility-08.js b/browser/devtools/performance/test/browser_perf-compatibility-08.js
new file mode 100644
index 0000000..2d7d0f9
--- /dev/null
+++ b/browser/devtools/performance/test/browser_perf-compatibility-08.js
@@ -0,0 +1,136 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that when setting recording features in the UI (like enabling framerate or memory),
+ * if the target does not support these features, then the target's support overrides
+ * the UI preferences when fetching configuration from a recording.
+ */
+
+const WAIT_TIME = 100;
+
+let test = Task.async(function*() {
+  yield testMockMemory();
+  yield testMockMemoryAndTimeline();
+  finish();
+});
+
+// Test mock memory
+function *testMockMemory () {
+  let { target, panel, toolbox } = yield initPerformance(SIMPLE_URL, "performance", {
+    TEST_MOCK_MEMORY_ACTOR: true,
+  });
+  Services.prefs.setBoolPref(MEMORY_PREF, true);
+  Services.prefs.setBoolPref(FRAMERATE_PREF, true);
+  Services.prefs.setBoolPref(ALLOCATIONS_PREF, true);
+  let { EVENTS, $, gFront, PerformanceController, PerformanceView, DetailsView, WaterfallView } = panel.panelWin;
+
+  let { memory: memorySupport, timeline: timelineSupport } = gFront.getActorSupport();
+  yield startRecording(panel, { waitForOverview: false });
+  yield waitUntil(() => PerformanceController.getCurrentRecording().getTicks().length);
+  yield waitUntil(() => PerformanceController.getCurrentRecording().getMarkers().length);
+  yield stopRecording(panel, { waitForOverview: false });
+
+  let config = PerformanceController.getCurrentRecording().getConfiguration();
+  let {
+    markers, allocations, memory, ticks
+  } = PerformanceController.getCurrentRecording().getAllData();
+
+  ok(typeof config.bufferSize === "number", "sanity check, config options contains `bufferSize`.");
+
+  is(config.withMemory, false,
+    "Recording configuration set by target's support, not by UI prefs [No Memory Actor: withMemory]");
+  is(config.withAllocations, false,
+    "Recording configuration set by target's support, not by UI prefs [No Memory Actor: withAllocations]");
+
+  is(config.withMarkers, true,
+    "Recording configuration set by target's support, not by UI prefs [No Memory Actor: withMarkers]");
+  is(config.withTicks, true,
+    "Recording configuration set by target's support, not by UI prefs [No Memory Actor: withTicks]");
+
+  ok(markers.length > 0, "markers exist.");
+  ok(ticks.length > 0, "ticks exist.");
+  isEmptyArray(memory, "memory");
+  isEmptyArray(allocations.sites, "allocations.sites");
+  isEmptyArray(allocations.timestamps, "allocations.timestamps");
+  isEmptyArray(allocations.frames, "allocations.frames");
+  isEmptyArray(allocations.counts, "allocations.counts");
+
+  is($("#overview-pane").hidden, false,
+    "overview pane not hidden when server not supporting memory actors, yet UI prefs request them.");
+  is($("#select-waterfall-view").hidden, false,
+    "waterfall view button not hidden when memory mocked, and UI prefs enable them");
+  is($("#select-js-calltree-view").hidden, false,
+    "jscalltree view button not hidden when memory mocked, and UI prefs enable them");
+  is($("#select-js-flamegraph-view").hidden, false,
+    "jsflamegraph view button not hidden when memory mocked, and UI prefs enable them");
+  is($("#select-memory-calltree-view").hidden, true,
+    "memorycalltree view button hidden when memory mocked, and UI prefs enable them");
+  is($("#select-memory-flamegraph-view").hidden, true,
+    "memoryflamegraph view button hidden when memory mocked, and UI prefs enable them");
+
+  yield gFront.destroy();
+  yield teardown(panel);
+}
+
+// Test mock memory and timeline actor
+function *testMockMemoryAndTimeline() {
+  let { target, panel, toolbox } = yield initPerformance(SIMPLE_URL, "performance", {
+    TEST_MOCK_MEMORY_ACTOR: true,
+    TEST_MOCK_TIMELINE_ACTOR: true,
+  });
+  Services.prefs.setBoolPref(MEMORY_PREF, true);
+  Services.prefs.setBoolPref(FRAMERATE_PREF, true);
+  Services.prefs.setBoolPref(ALLOCATIONS_PREF, true);
+  let { EVENTS, $, gFront, PerformanceController, PerformanceView, DetailsView, WaterfallView } = panel.panelWin;
+
+  let { memory: memorySupport, timeline: timelineSupport } = gFront.getActorSupport();
+  yield startRecording(panel, { waitForOverview: false });
+  yield busyWait(WAIT_TIME);
+  yield stopRecording(panel, { waitForOverview: false });
+
+  let config = PerformanceController.getCurrentRecording().getConfiguration();
+  let {
+    markers, allocations, memory, ticks
+  } = PerformanceController.getCurrentRecording().getAllData();
+
+  ok(typeof config.bufferSize === "number", "sanity check, config options contains `bufferSize`.");
+
+  is(config.withMemory, false,
+    "Recording configuration set by target's support, not by UI prefs [No Memory/Timeline Actor: withMemory]");
+  is(config.withAllocations, false,
+    "Recording configuration set by target's support, not by UI prefs [No Memory/Timeline Actor: withAllocations]");
+
+  is(config.withMarkers, false,
+    "Recording configuration set by target's support, not by UI prefs [No Memory/Timeline Actor: withMarkers]");
+  is(config.withTicks, false,
+    "Recording configuration set by target's support, not by UI prefs [No Memory/Timeline Actor: withTicks]");
+  isEmptyArray(markers, "markers");
+  isEmptyArray(ticks, "ticks");
+  isEmptyArray(memory, "memory");
+  isEmptyArray(allocations.sites, "allocations.sites");
+  isEmptyArray(allocations.timestamps, "allocations.timestamps");
+  isEmptyArray(allocations.frames, "allocations.frames");
+  isEmptyArray(allocations.counts, "allocations.counts");
+
+  is($("#overview-pane").hidden, true,
+    "overview pane hidden when server not supporting memory/timeline actors, yet UI prefs request them.");
+  is($("#select-waterfall-view").hidden, true,
+    "waterfall view button hidden when memory/timeline mocked, and UI prefs enable them");
+  is($("#select-js-calltree-view").hidden, false,
+    "jscalltree view button not hidden when memory/timeline mocked, and UI prefs enable them");
+  is($("#select-js-flamegraph-view").hidden, false,
+    "jsflamegraph view button not hidden when memory/timeline mocked, and UI prefs enable them");
+  is($("#select-memory-calltree-view").hidden, true,
+    "memorycalltree view button hidden when memory/timeline mocked, and UI prefs enable them");
+  is($("#select-memory-flamegraph-view").hidden, true,
+    "memoryflamegraph view button hidden when memory/timeline mocked, and UI prefs enable them");
+
+  yield gFront.destroy();
+  yield teardown(panel);
+}
+
+function isEmptyArray (array, name) {
+  ok(Array.isArray(array), `${name} is an array`);
+  is(array.length, 0, `${name} is empty`);
+}
diff --git a/browser/devtools/performance/views/details.js b/browser/devtools/performance/views/details.js
index f14754f..9f52664 100644
--- a/browser/devtools/performance/views/details.js
+++ b/browser/devtools/performance/views/details.js
@@ -11,38 +11,34 @@ let DetailsView = {
   /**
    * Name to (node id, view object, actor requirements, pref killswitch)
    * mapping of subviews.
    */
   components: {
     "waterfall": {
       id: "waterfall-view",
       view: WaterfallView,
-      actors: ["timeline"],
       features: ["withMarkers"]
     },
     "js-calltree": {
       id: "js-profile-view",
       view: JsCallTreeView
     },
     "js-flamegraph": {
       id: "js-flamegraph-view",
       view: JsFlameGraphView,
-      actors: ["timeline"]
     },
     "memory-calltree": {
       id: "memory-calltree-view",
       view: MemoryCallTreeView,
-      actors: ["memory"],
       features: ["withAllocations"]
     },
     "memory-flamegraph": {
       id: "memory-flamegraph-view",
       view: MemoryFlameGraphView,
-      actors: ["memory", "timeline"],
       features: ["withAllocations"]
     },
     "optimizations": {
       id: "optimizations-view",
       view: OptimizationsView,
       features: ["withJITOptimizations"],
     }
   },
@@ -92,17 +88,17 @@ let DetailsView = {
    * if currently selected. Called when a preference changes in `devtools.performance.ui.`.
    */
   setAvailableViews: Task.async(function* () {
     let recording = PerformanceController.getCurrentRecording();
     let isCompleted = recording && recording.isCompleted();
     let invalidCurrentView = false;
 
     for (let [name, { view }] of Iterator(this.components)) {
-      let isSupported = this._isViewSupported(name, true);
+      let isSupported = this._isViewSupported(name);
 
       $(`toolbarbutton[data-view=${name}]`).hidden = !isSupported;
 
       // If the view is currently selected and not supported, go back to the
       // default view.
       if (!isSupported && this.isViewSelected(view)) {
         invalidCurrentView = true;
       }
@@ -118,25 +114,31 @@ let DetailsView = {
     // use a default now that we have the recording configurations
     if ((this._initialized  && isCompleted && invalidCurrentView) ||
         (!this._initialized && isCompleted && recording)) {
       yield this.selectDefaultView();
     }
   }),
 
   /**
-   * Takes a view name and optionally if there must be a currently recording in progress.
+   * Takes a view name and determines if the current recording 
+   * can support the view.
    *
    * @param {string} viewName
-   * @param {boolean?} mustBeCompleted
    * @return {boolean}
    */
-  _isViewSupported: function (viewName, mustBeCompleted) {
-    let { features, actors } = this.components[viewName];
-    return PerformanceController.isFeatureSupported({ features, actors, mustBeCompleted });
+  _isViewSupported: function (viewName) {
+    let { features } = this.components[viewName];
+    let recording = PerformanceController.getCurrentRecording();
+
+    if (!recording || !recording.isCompleted()) {
+      return false;
+    }
+
+    return PerformanceController.isFeatureSupported(features);
   },
 
   /**
    * Select one of the DetailView's subviews to be rendered,
    * hiding the others.
    *
    * @param String viewName
    *        Name of the view to be shown.
diff --git a/browser/devtools/performance/views/overview.js b/browser/devtools/performance/views/overview.js
index f8b3b23..49de285 100644
--- a/browser/devtools/performance/views/overview.js
+++ b/browser/devtools/performance/views/overview.js
@@ -6,25 +6,22 @@
 // No sense updating the overview more often than receiving data from the
 // backend. Make sure this isn't lower than DEFAULT_TIMELINE_DATA_PULL_TIMEOUT
 // in toolkit/devtools/server/actors/timeline.js
 const OVERVIEW_UPDATE_INTERVAL = 200; // ms
 const FRAMERATE_GRAPH_LOW_RES_INTERVAL = 100; // ms
 const FRAMERATE_GRAPH_HIGH_RES_INTERVAL = 16; // ms
 const GRAPH_REQUIREMENTS = {
   timeline: {
-    actors: ["timeline"],
     features: ["withMarkers"]
   },
   framerate: {
-    actors: ["timeline"],
     features: ["withTicks"]
   },
   memory: {
-    actors: ["memory"],
     features: ["withMemory"]
   },
 }
 
 /**
  * View handler for the overview panel's time view, displaying
  * framerate, timeline and memory over time.
  */
@@ -337,17 +334,17 @@ let OverviewView = {
         }
         break;
       }
     }
   }),
 
   _setGraphVisibilityFromRecordingFeatures: function (recording) {
     for (let [graphName, requirements] of Iterator(GRAPH_REQUIREMENTS)) {
-      this.graphs.enable(graphName, PerformanceController.isFeatureSupported(requirements));
+      this.graphs.enable(graphName, PerformanceController.isFeatureSupported(requirements.features));
     }
   },
 
   /**
    * Fetch the multiprocess status and if e10s is not currently on, disable
    * realtime rendering.
    *
    * @return {boolean}
-- 
2.2.1

