From: Jordan Santell <jsantell@mozilla.com>
Date: Fri, 5 Jun 2015 14:08:28 -0700
Subject: Bug 1172120 - Fix intermittent in marker details test.

diff --git a/browser/devtools/performance/test/browser_perf-marker-details-01.js b/browser/devtools/performance/test/browser_perf-marker-details-01.js
index 990933f..12cbc9d 100644
--- a/browser/devtools/performance/test/browser_perf-marker-details-01.js
+++ b/browser/devtools/performance/test/browser_perf-marker-details-01.js
@@ -4,17 +4,16 @@
 /**
  * Tests if the Marker Details view renders all properties expected
  * for each marker.
  */
 
 function* spawnTest() {
   let { target, panel } = yield initPerformance(MARKERS_URL);
   let { $, $$, EVENTS, PerformanceController, OverviewView, WaterfallView } = panel.panelWin;
-  let { L10N } = devtools.require("devtools/performance/global");
 
   // Hijack the markers massaging part of creating the waterfall view,
   // to prevent collapsing markers and allowing this test to verify
   // everything individually. A better solution would be to just expand
   // all markers first and then skip the meta nodes, but I'm lazy.
   WaterfallView._prepareWaterfallTree = markers => {
     return { submarkers: markers };
   };
@@ -40,19 +39,19 @@ function* spawnTest() {
   let bars = $$(".waterfall-marker-bar");
   let markers = PerformanceController.getCurrentRecording().getMarkers();
 
   ok(bars.length >= MARKER_TYPES.length, `Got at least ${MARKER_TYPES.length} markers (1)`);
   ok(markers.length >= MARKER_TYPES.length, `Got at least ${MARKER_TYPES.length} markers (2)`);
 
   const tests = {
     ConsoleTime: function (marker) {
-      shouldHaveLabel($, L10N.getStr("timeline.markerDetail.consoleTimerName"), "!!!", marker);
       shouldHaveStack($, "startStack", marker);
       shouldHaveStack($, "endStack", marker);
+      shouldHaveLabel($, "Timer Name:", "!!!", marker);
       return true;
     },
     TimeStamp: function (marker) {
       shouldHaveLabel($, "Label:", "go", marker);
       shouldHaveStack($, "stack", marker);
       return true;
     },
     Styles: function (marker) {
@@ -78,20 +77,22 @@ function* spawnTest() {
   let testsDone = [];
   let TOTAL_TESTS = 4;
 
   for (let i = 0; i < bars.length; i++) {
     let bar = bars[i];
     let m = markers[i];
     EventUtils.sendMouseEvent({ type: "mousedown" }, bar);
 
-    if (testsDone.indexOf(m.name) === -1 && tests[m.name]) {
-      let fullTestComplete = tests[m.name](m);
-      if (fullTestComplete) {
-        testsDone.push(m.name);
+    if (tests[m.name]) {
+      if (testsDone.indexOf(m.name) === -1) {
+        let fullTestComplete = tests[m.name](m);
+        if (fullTestComplete) {
+          testsDone.push(m.name);
+        }
       }
     } else {
       info(`TODO: Need to add marker details tests for ${m.name}`);
     }
 
     if (testsDone.length === TOTAL_TESTS) {
       break;
     }
-- 
2.2.1

