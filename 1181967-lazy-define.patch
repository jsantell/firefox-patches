From: Jordan Santell <jsantell@mozilla.com>
Date: Thu, 9 Jul 2015 13:00:55 -0700
Subject: Bug 1181967 - Deprecate redundant lazy loaders in DevTools loader, reduce down just to lazyDefine. r=jryans

diff --git a/browser/devtools/animationinspector/animation-controller.js b/browser/devtools/animationinspector/animation-controller.js
index 5fb8911..36b0caa 100644
--- a/browser/devtools/animationinspector/animation-controller.js
+++ b/browser/devtools/animationinspector/animation-controller.js
@@ -8,21 +8,21 @@
 
 const { classes: Cc, interfaces: Ci, utils: Cu, results: Cr } = Components;
 
 Cu.import("resource://gre/modules/Task.jsm");
 Cu.import("resource://gre/modules/devtools/Loader.jsm");
 Cu.import("resource://gre/modules/devtools/Console.jsm");
 Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
 
-devtools.lazyRequireGetter(this, "promise");
-devtools.lazyRequireGetter(this, "EventEmitter",
-                                 "devtools/toolkit/event-emitter");
-devtools.lazyRequireGetter(this, "AnimationsFront",
-                                 "devtools/server/actors/animation", true);
+devtools.lazyDefine(this, "promise");
+devtools.lazyDefine(this, "EventEmitter",
+  "devtools/toolkit/event-emitter");
+devtools.lazyDefine(this, "AnimationsFront",
+  "devtools/server/actors/animation", true);
 
 const require = devtools.require;
 
 const STRINGS_URI = "chrome://browser/locale/devtools/animationinspector.properties";
 const L10N = new ViewHelpers.L10N(STRINGS_URI);
 
 // Global toolbox/inspector, set when startup is called.
 let gToolbox, gInspector;
diff --git a/browser/devtools/canvasdebugger/canvasdebugger.js b/browser/devtools/canvasdebugger/canvasdebugger.js
index acf3085..36fa18d 100644
--- a/browser/devtools/canvasdebugger/canvasdebugger.js
+++ b/browser/devtools/canvasdebugger/canvasdebugger.js
@@ -13,37 +13,27 @@ Cu.import("resource://gre/modules/devtools/Console.jsm");
 
 const devtools = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools;
 const { require } = devtools;
 const promise = Cu.import("resource://gre/modules/Promise.jsm", {}).Promise;
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const { CallWatcherFront } = require("devtools/server/actors/call-watcher");
 const { CanvasFront } = require("devtools/server/actors/canvas");
 const DevToolsUtils = require("devtools/toolkit/DevToolsUtils");
+const { Task } = require("resource://gre/modules/Task.jsm");
 
 const Telemetry = require("devtools/shared/telemetry");
 const telemetry = new Telemetry();
 
 const CANVAS_ACTOR_RECORDING_ATTEMPT = DevToolsUtils.testing ? 500 : 5000;
 
-XPCOMUtils.defineLazyModuleGetter(this, "Task",
-  "resource://gre/modules/Task.jsm");
-
-XPCOMUtils.defineLazyModuleGetter(this, "PluralForm",
-  "resource://gre/modules/PluralForm.jsm");
-
-XPCOMUtils.defineLazyModuleGetter(this, "FileUtils",
-  "resource://gre/modules/FileUtils.jsm");
-
-XPCOMUtils.defineLazyModuleGetter(this, "NetUtil",
-  "resource://gre/modules/NetUtil.jsm");
-
-XPCOMUtils.defineLazyGetter(this, "NetworkHelper", function() {
-  return require("devtools/toolkit/webconsole/network-helper");
-});
+devtools.lazyDefine(this, "PluralForm", "resource://gre/modules/PluralForm.jsm", true);
+devtools.lazyDefine(this, "FileUtils", "resource://gre/modules/FileUtils.jsm", true);
+devtools.lazyDefine(this, "NetUtil", "resource://gre/modules/NetUtil.jsm", true);
+devtools.lazyDefine(this, "NetworkHelper", "devtools/toolkit/webconsole/network-helper");
 
 // The panel's window global is an EventEmitter firing the following events:
 const EVENTS = {
   // When the UI is reset from tab navigation.
   UI_RESET: "CanvasDebugger:UIReset",
 
   // When all the animation frame snapshots are removed by the user.
   SNAPSHOTS_LIST_CLEARED: "CanvasDebugger:SnapshotsListCleared",
diff --git a/browser/devtools/debugger/debugger-commands.js b/browser/devtools/debugger/debugger-commands.js
index af4b848..041e603 100644
--- a/browser/devtools/debugger/debugger-commands.js
+++ b/browser/devtools/debugger/debugger-commands.js
@@ -2,17 +2,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
 const l10n = require("gcli/l10n");
 
-loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
+loader.lazyDefine(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm", true);
 
 /**
  * The commands and converters that are exported to GCLI
  */
 exports.items = [];
 
 /**
  * Utility to get access to the current breakpoint list.
diff --git a/browser/devtools/definitions.js b/browser/devtools/definitions.js
index f2747c2..9cd9947 100644
--- a/browser/devtools/definitions.js
+++ b/browser/devtools/definitions.js
@@ -3,58 +3,58 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
 
 const { Services } = require("resource://gre/modules/Services.jsm");
 
-loader.lazyGetter(this, "osString", () => Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime).OS);
+loader.lazyDefine(this, "osString", () => Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime).OS);
 
 // Panels
-loader.lazyGetter(this, "OptionsPanel", () => require("devtools/framework/toolbox-options").OptionsPanel);
-loader.lazyGetter(this, "InspectorPanel", () => require("devtools/inspector/inspector-panel").InspectorPanel);
-loader.lazyGetter(this, "WebConsolePanel", () => require("devtools/webconsole/panel").WebConsolePanel);
-loader.lazyGetter(this, "DebuggerPanel", () => require("devtools/debugger/panel").DebuggerPanel);
-loader.lazyGetter(this, "StyleEditorPanel", () => require("devtools/styleeditor/styleeditor-panel").StyleEditorPanel);
-loader.lazyGetter(this, "ShaderEditorPanel", () => require("devtools/shadereditor/panel").ShaderEditorPanel);
-loader.lazyGetter(this, "CanvasDebuggerPanel", () => require("devtools/canvasdebugger/panel").CanvasDebuggerPanel);
-loader.lazyGetter(this, "WebAudioEditorPanel", () => require("devtools/webaudioeditor/panel").WebAudioEditorPanel);
-loader.lazyGetter(this, "PerformancePanel", () => require("devtools/performance/panel").PerformancePanel);
-loader.lazyGetter(this, "NetMonitorPanel", () => require("devtools/netmonitor/panel").NetMonitorPanel);
-loader.lazyGetter(this, "StoragePanel", () => require("devtools/storage/panel").StoragePanel);
-loader.lazyGetter(this, "ScratchpadPanel", () => require("devtools/scratchpad/scratchpad-panel").ScratchpadPanel);
+loader.lazyDefine(this, "OptionsPanel", "devtools/framework/toolbox-options", true);
+loader.lazyDefine(this, "InspectorPanel", "devtools/inspector/inspector-panel", true);
+loader.lazyDefine(this, "WebConsolePanel", "devtools/webconsole/panel", true);
+loader.lazyDefine(this, "DebuggerPanel", "devtools/debugger/panel", true);
+loader.lazyDefine(this, "StyleEditorPanel", "devtools/styleeditor/styleeditor-panel", true);
+loader.lazyDefine(this, "ShaderEditorPanel", "devtools/shadereditor/panel", true);
+loader.lazyDefine(this, "CanvasDebuggerPanel", "devtools/canvasdebugger/panel", true);
+loader.lazyDefine(this, "WebAudioEditorPanel", "devtools/webaudioeditor/panel", true);
+loader.lazyDefine(this, "PerformancePanel", "devtools/performance/panel", true);
+loader.lazyDefine(this, "NetMonitorPanel", "devtools/netmonitor/panel", true);
+loader.lazyDefine(this, "StoragePanel", "devtools/storage/panel", true);
+loader.lazyDefine(this, "ScratchpadPanel", "devtools/scratchpad/scratchpad-panel", true);
 
 // Strings
 const toolboxProps = "chrome://browser/locale/devtools/toolbox.properties";
 const inspectorProps = "chrome://browser/locale/devtools/inspector.properties";
 const webConsoleProps = "chrome://browser/locale/devtools/webconsole.properties";
 const debuggerProps = "chrome://browser/locale/devtools/debugger.properties";
 const styleEditorProps = "chrome://browser/locale/devtools/styleeditor.properties";
 const shaderEditorProps = "chrome://browser/locale/devtools/shadereditor.properties";
 const canvasDebuggerProps = "chrome://browser/locale/devtools/canvasdebugger.properties";
 const webAudioEditorProps = "chrome://browser/locale/devtools/webaudioeditor.properties";
 const profilerProps = "chrome://browser/locale/devtools/profiler.properties";
 const netMonitorProps = "chrome://browser/locale/devtools/netmonitor.properties";
 const storageProps = "chrome://browser/locale/devtools/storage.properties";
 const scratchpadProps = "chrome://browser/locale/devtools/scratchpad.properties";
 
-loader.lazyGetter(this, "toolboxStrings", () => Services.strings.createBundle(toolboxProps));
-loader.lazyGetter(this, "profilerStrings",() => Services.strings.createBundle(profilerProps));
-loader.lazyGetter(this, "webConsoleStrings", () => Services.strings.createBundle(webConsoleProps));
-loader.lazyGetter(this, "debuggerStrings", () => Services.strings.createBundle(debuggerProps));
-loader.lazyGetter(this, "styleEditorStrings", () => Services.strings.createBundle(styleEditorProps));
-loader.lazyGetter(this, "shaderEditorStrings", () => Services.strings.createBundle(shaderEditorProps));
-loader.lazyGetter(this, "canvasDebuggerStrings", () => Services.strings.createBundle(canvasDebuggerProps));
-loader.lazyGetter(this, "webAudioEditorStrings", () => Services.strings.createBundle(webAudioEditorProps));
-loader.lazyGetter(this, "inspectorStrings", () => Services.strings.createBundle(inspectorProps));
-loader.lazyGetter(this, "netMonitorStrings", () => Services.strings.createBundle(netMonitorProps));
-loader.lazyGetter(this, "storageStrings", () => Services.strings.createBundle(storageProps));
-loader.lazyGetter(this, "scratchpadStrings", () => Services.strings.createBundle(scratchpadProps));
+loader.lazyDefine(this, "toolboxStrings", () => Services.strings.createBundle(toolboxProps));
+loader.lazyDefine(this, "profilerStrings",() => Services.strings.createBundle(profilerProps));
+loader.lazyDefine(this, "webConsoleStrings", () => Services.strings.createBundle(webConsoleProps));
+loader.lazyDefine(this, "debuggerStrings", () => Services.strings.createBundle(debuggerProps));
+loader.lazyDefine(this, "styleEditorStrings", () => Services.strings.createBundle(styleEditorProps));
+loader.lazyDefine(this, "shaderEditorStrings", () => Services.strings.createBundle(shaderEditorProps));
+loader.lazyDefine(this, "canvasDebuggerStrings", () => Services.strings.createBundle(canvasDebuggerProps));
+loader.lazyDefine(this, "webAudioEditorStrings", () => Services.strings.createBundle(webAudioEditorProps));
+loader.lazyDefine(this, "inspectorStrings", () => Services.strings.createBundle(inspectorProps));
+loader.lazyDefine(this, "netMonitorStrings", () => Services.strings.createBundle(netMonitorProps));
+loader.lazyDefine(this, "storageStrings", () => Services.strings.createBundle(storageProps));
+loader.lazyDefine(this, "scratchpadStrings", () => Services.strings.createBundle(scratchpadProps));
 
 let Tools = {};
 exports.Tools = Tools;
 
 // Definitions
 Tools.options = {
   id: "options",
   ordinal: 0,
diff --git a/browser/devtools/eyedropper/eyedropper.js b/browser/devtools/eyedropper/eyedropper.js
index 14f1e76..46cb501 100644
--- a/browser/devtools/eyedropper/eyedropper.js
+++ b/browser/devtools/eyedropper/eyedropper.js
@@ -6,40 +6,28 @@ const {Cc, Ci, Cu} = require("chrome");
 const {rgbToHsl} = require("devtools/css-color").colorUtils;
 const Telemetry = require("devtools/shared/telemetry");
 const {EventEmitter} = Cu.import("resource://gre/modules/devtools/event-emitter.js");
 const promise = Cu.import("resource://gre/modules/Promise.jsm", {}).Promise;
 const {setTimeout, clearTimeout} = Cu.import("resource://gre/modules/Timer.jsm", {});
 
 Cu.import("resource://gre/modules/Services.jsm");
 
-loader.lazyGetter(this, "clipboardHelper", function() {
-  return Cc["@mozilla.org/widget/clipboardhelper;1"]
-    .getService(Ci.nsIClipboardHelper);
-});
-
-loader.lazyGetter(this, "ssService", function() {
-  return Cc["@mozilla.org/content/style-sheet-service;1"]
-    .getService(Ci.nsIStyleSheetService);
-});
-
-loader.lazyGetter(this, "ioService", function() {
-  return Cc["@mozilla.org/network/io-service;1"]
-    .getService(Ci.nsIIOService);
-});
-
-loader.lazyGetter(this, "DOMUtils", function () {
-  return Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
-});
-
-loader.lazyGetter(this, "XULRuntime", function() {
-  return Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime);
-});
-
-loader.lazyGetter(this, "l10n", () => Services.strings
+loader.lazyDefine(this, "clipboardHelper",
+  () => Cc["@mozilla.org/widget/clipboardhelper;1"].getService(Ci.nsIClipboardHelper));
+loader.lazyDefine(this, "ssService",
+  () => Cc["@mozilla.org/content/style-sheet-service;1"].getService(Ci.nsIStyleSheetService));
+loader.lazyDefine(this, "ioService",
+  () => Cc["@mozilla.org/network/io-service;1"].getService(Ci.nsIIOService));
+loader.lazyDefine(this, "DOMUtils",
+  () => Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils));
+loader.lazyDefine(this, "XULRuntime",
+  () => Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime));
+
+loader.lazyDefine(this, "l10n", () => Services.strings
   .createBundle("chrome://browser/locale/devtools/eyedropper.properties"));
 
 const EYEDROPPER_URL = "chrome://browser/content/devtools/eyedropper.xul";
 const CROSSHAIRS_URL = "chrome://browser/content/devtools/eyedropper/crosshairs.css";
 const NOCURSOR_URL = "chrome://browser/content/devtools/eyedropper/nocursor.css";
 
 const ZOOM_PREF = "devtools.eyedropper.zoom";
 const FORMAT_PREF = "devtools.defaultColorUnit";
diff --git a/browser/devtools/framework/connect/connect.js b/browser/devtools/framework/connect/connect.js
index 1e2578c..8f7f963 100644
--- a/browser/devtools/framework/connect/connect.js
+++ b/browser/devtools/framework/connect/connect.js
@@ -13,19 +13,18 @@ Cu.import("resource://gre/modules/Task.jsm");
 Cu.import("resource://gre/modules/devtools/dbg-client.jsm");
 let {gDevTools} = Cu.import("resource:///modules/devtools/gDevTools.jsm", {});
 let {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 let {Promise: promise} = Cu.import("resource://gre/modules/Promise.jsm", {});
 
 let gClient;
 let gConnectionTimeout;
 
-XPCOMUtils.defineLazyGetter(window, 'l10n', function () {
-  return Services.strings.createBundle('chrome://browser/locale/devtools/connection-screen.properties');
-});
+devtools.lazyDefine(window, 'l10n',
+  () => Services.strings.createBundle('chrome://browser/locale/devtools/connection-screen.properties'));
 
 /**
  * Once DOM is ready, we prefil the host/port inputs with
  * pref-stored values.
  */
 window.addEventListener("DOMContentLoaded", function onDOMReady() {
   window.removeEventListener("DOMContentLoaded", onDOMReady, true);
   let host = Services.prefs.getCharPref("devtools.debugger.remote-host");
diff --git a/browser/devtools/framework/toolbox-options.js b/browser/devtools/framework/toolbox-options.js
index 2e8defe..bc441ca 100644
--- a/browser/devtools/framework/toolbox-options.js
+++ b/browser/devtools/framework/toolbox-options.js
@@ -2,22 +2,21 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const {Cu, Cc, Ci} = require("chrome");
 const Services = require("Services");
 const promise = require("promise");
-Cu.import("resource://gre/modules/XPCOMUtils.jsm");
-XPCOMUtils.defineLazyModuleGetter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
+loader.lazyDefine(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm", true);
 
 exports.OptionsPanel = OptionsPanel;
 
-XPCOMUtils.defineLazyGetter(this, "l10n", function() {
+loader.lazyDefine(this, "l10n", function() {
   let bundle = Services.strings.createBundle("chrome://browser/locale/devtools/toolbox.properties");
   let l10n = function(aName, ...aArgs) {
     try {
       if (aArgs.length == 0) {
         return bundle.GetStringFromName(aName);
       } else {
         return bundle.formatStringFromName(aName, aArgs, aArgs.length);
       }
diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
index cc2c2aa..07421bb 100644
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -25,53 +25,54 @@ let HUDService = require("devtools/webconsole/hudservice");
 let sourceUtils = require("devtools/shared/source-utils");
 
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource:///modules/devtools/gDevTools.jsm");
 Cu.import("resource:///modules/devtools/scratchpad-manager.jsm");
 Cu.import("resource:///modules/devtools/DOMHelpers.jsm");
 Cu.import("resource://gre/modules/Task.jsm");
 
-loader.lazyImporter(this, "CommandUtils",
-  "resource:///modules/devtools/DeveloperToolbar.jsm");
-loader.lazyGetter(this, "toolboxStrings", () => {
+loader.lazyDefine(this, "CommandUtils",
+  "resource:///modules/devtools/DeveloperToolbar.jsm", true);
+
+loader.lazyDefine(this, "toolboxStrings", () => {
   const properties = "chrome://browser/locale/devtools/toolbox.properties";
   const bundle = Services.strings.createBundle(properties);
   return (name, ...args) => {
     try {
       if (!args.length) {
         return bundle.GetStringFromName(name);
       }
       return bundle.formatStringFromName(name, args, args.length);
     } catch (ex) {
       Services.console.logStringMessage("Error reading '" + name + "'");
       return null;
     }
   };
 });
-loader.lazyRequireGetter(this, "getHighlighterUtils",
+loader.lazyDefine(this, "getHighlighterUtils",
   "devtools/framework/toolbox-highlighter-utils", true);
-loader.lazyRequireGetter(this, "Hosts",
+loader.lazyDefine(this, "Hosts",
   "devtools/framework/toolbox-hosts", true);
-loader.lazyRequireGetter(this, "Selection",
+loader.lazyDefine(this, "Selection",
   "devtools/framework/selection", true);
-loader.lazyRequireGetter(this, "InspectorFront",
+loader.lazyDefine(this, "InspectorFront",
   "devtools/server/actors/inspector", true);
-loader.lazyRequireGetter(this, "DevToolsUtils",
+loader.lazyDefine(this, "DevToolsUtils",
   "devtools/toolkit/DevToolsUtils");
-loader.lazyRequireGetter(this, "showDoorhanger",
+loader.lazyDefine(this, "showDoorhanger",
   "devtools/shared/doorhanger", true);
-loader.lazyRequireGetter(this, "getPerformanceFront",
+loader.lazyDefine(this, "getPerformanceFront",
   "devtools/performance/front", true);
-loader.lazyRequireGetter(this, "system",
+loader.lazyDefine(this, "system",
   "devtools/toolkit/shared/system");
-loader.lazyGetter(this, "osString", () => {
+loader.lazyDefine(this, "osString", () => {
   return Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime).OS;
 });
-loader.lazyGetter(this, "registerHarOverlay", () => {
+loader.lazyDefine(this, "registerHarOverlay", () => {
   return require("devtools/netmonitor/har/toolbox-overlay.js").register;
 });
 
 // White-list buttons that can be toggled to prevent adding prefs for
 // addons that have manually inserted toolbarbuttons into DOM.
 // (By default, supported target is only local tab)
 const ToolboxButtons = exports.ToolboxButtons = [
   { id: "command-button-pick",
diff --git a/browser/devtools/inspector/inspector-panel.js b/browser/devtools/inspector/inspector-panel.js
index b8ca398..ac3c12f 100644
--- a/browser/devtools/inspector/inspector-panel.js
+++ b/browser/devtools/inspector/inspector-panel.js
@@ -8,32 +8,32 @@ const {Cc, Ci, Cu, Cr} = require("chrome");
 
 Cu.import("resource://gre/modules/Services.jsm");
 
 let promise = require("resource://gre/modules/Promise.jsm").Promise;
 let EventEmitter = require("devtools/toolkit/event-emitter");
 let clipboard = require("sdk/clipboard");
 let {HostType} = require("devtools/framework/toolbox").Toolbox;
 
-loader.lazyGetter(this, "MarkupView", () => require("devtools/markupview/markup-view").MarkupView);
-loader.lazyGetter(this, "HTMLBreadcrumbs", () => require("devtools/inspector/breadcrumbs").HTMLBreadcrumbs);
-loader.lazyGetter(this, "ToolSidebar", () => require("devtools/framework/sidebar").ToolSidebar);
-loader.lazyGetter(this, "SelectorSearch", () => require("devtools/inspector/selector-search").SelectorSearch);
+loader.lazyDefine(this, "MarkupView", "devtools/markupview/markup-view", true);
+loader.lazyDefine(this, "HTMLBreadcrumbs", "devtools/inspector/breadcrumbs", true);
+loader.lazyDefine(this, "ToolSidebar", "devtools/framework/sidebar", true);
+loader.lazyDefine(this, "SelectorSearch", "devtools/inspector/selector-search", true);
 
-loader.lazyGetter(this, "strings", () => {
+loader.lazyDefine(this, "strings", () => {
   return Services.strings.createBundle("chrome://browser/locale/devtools/inspector.properties");
 });
-loader.lazyGetter(this, "toolboxStrings", () => {
+loader.lazyDefine(this, "toolboxStrings", () => {
   return Services.strings.createBundle("chrome://browser/locale/devtools/toolbox.properties");
 });
-loader.lazyGetter(this, "clipboardHelper", () => {
+loader.lazyDefine(this, "clipboardHelper", () => {
   return Cc["@mozilla.org/widget/clipboardhelper;1"].getService(Ci.nsIClipboardHelper);
 });
 
-loader.lazyImporter(this, "CommandUtils", "resource:///modules/devtools/DeveloperToolbar.jsm");
+loader.lazyDefine(this, "CommandUtils", "resource:///modules/devtools/DeveloperToolbar.jsm");
 
 const LAYOUT_CHANGE_TIMER = 250;
 
 /**
  * Represents an open instance of the Inspector for a tab.
  * The inspector controls the breadcrumbs, the markup view, and the sidebar
  * (computed view, rule view, font view and layout view).
  *
diff --git a/browser/devtools/inspector/selector-search.js b/browser/devtools/inspector/selector-search.js
index bf2bfe7..53ba885 100644
--- a/browser/devtools/inspector/selector-search.js
+++ b/browser/devtools/inspector/selector-search.js
@@ -2,18 +2,18 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const { Cu } = require("chrome");
 
 const promise = require("resource://gre/modules/Promise.jsm").Promise;
-loader.lazyGetter(this, "EventEmitter", () => require("devtools/toolkit/event-emitter"));
-loader.lazyGetter(this, "AutocompletePopup", () => require("devtools/shared/autocomplete-popup").AutocompletePopup);
+loader.lazyDefine(this, "EventEmitter", "devtools/toolkit/event-emitter");
+loader.lazyDefine(this, "AutocompletePopup", "devtools/shared/autocomplete-popup", true);
 
 // Maximum number of selector suggestions shown in the panel.
 const MAX_SUGGESTIONS = 15;
 
 /**
  * Converts any input box on a page to a CSS selector search and suggestion box.
  *
  * Emits 'processing-done' event when it is done processing the current
diff --git a/browser/devtools/markupview/markup-view.js b/browser/devtools/markupview/markup-view.js
index 536410f..da1cbd5 100644
--- a/browser/devtools/markupview/markup-view.js
+++ b/browser/devtools/markupview/markup-view.js
@@ -31,22 +31,21 @@ const {setTimeout, clearTimeout, setInterval, clearInterval} = require("sdk/time
 const {parseAttribute} = require("devtools/shared/node-attribute-parser");
 const ELLIPSIS = Services.prefs.getComplexValue("intl.ellipsis", Ci.nsIPrefLocalizedString).data;
 
 Cu.import("resource://gre/modules/devtools/LayoutHelpers.jsm");
 Cu.import("resource://gre/modules/devtools/Templater.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 
-loader.lazyGetter(this, "DOMParser", function() {
- return Cc["@mozilla.org/xmlextras/domparser;1"].createInstance(Ci.nsIDOMParser);
-});
-loader.lazyGetter(this, "AutocompletePopup", () => {
-  return require("devtools/shared/autocomplete-popup").AutocompletePopup;
-});
+loader.lazyDefine(this, "AutocompletePopup", "devtools/shared/autocomplete-popup", true);
+loader.lazyDefine(this, "DOMParser",
+  () => Cc["@mozilla.org/xmlextras/domparser;1"].createInstance(Ci.nsIDOMParser));
+loader.lazyDefine(this, "clipboardHelper",
+  () => Cc["@mozilla.org/widget/clipboardhelper;1"].getService(Ci.nsIClipboardHelper));
 
 /**
  * Vocabulary for the purposes of this file:
  *
  * MarkupContainer - the structure that holds an editor and its
  *  immediate children in the markup panel.
  *  - MarkupElementContainer: markup container for element nodes
  *  - MarkupTextContainer: markup container for text / comment nodes
@@ -3016,16 +3015,10 @@ function flashElementOff(backgroundElt, foregroundElt=backgroundElt) {
 function map(value, oldMin, oldMax, newMin, newMax) {
   let ratio = oldMax - oldMin;
   if (ratio == 0) {
     return value;
   }
   return newMin + (newMax - newMin) * ((value - oldMin) / ratio);
 }
 
-loader.lazyGetter(MarkupView.prototype, "strings", () => Services.strings.createBundle(
-  "chrome://browser/locale/devtools/inspector.properties"
-));
-
-XPCOMUtils.defineLazyGetter(this, "clipboardHelper", function() {
-  return Cc["@mozilla.org/widget/clipboardhelper;1"].
-    getService(Ci.nsIClipboardHelper);
-});
+loader.lazyDefine(MarkupView.prototype, "strings", () => Services.strings.createBundle(
+  "chrome://browser/locale/devtools/inspector.properties"));
diff --git a/browser/devtools/netmonitor/har/har-automation.js b/browser/devtools/netmonitor/har/har-automation.js
index e260524..e77d565 100644
--- a/browser/devtools/netmonitor/har/har-automation.js
+++ b/browser/devtools/netmonitor/har/har-automation.js
@@ -6,19 +6,19 @@
 const { Cu, Ci, Cc } = require("chrome");
 const { Class } = require("sdk/core/heritage");
 const { devtools } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 const { defer, resolve } = require("sdk/core/promise");
 const { Services } = Cu.import("resource://gre/modules/Services.jsm", {});
 
 Cu.import("resource://gre/modules/Task.jsm");
 
-loader.lazyRequireGetter(this, "HarCollector", "devtools/netmonitor/har/har-collector", true);
-loader.lazyRequireGetter(this, "HarExporter", "devtools/netmonitor/har/har-exporter", true);
-loader.lazyRequireGetter(this, "HarUtils", "devtools/netmonitor/har/har-utils", true);
+loader.lazyDefine(this, "HarCollector", "devtools/netmonitor/har/har-collector", true);
+loader.lazyDefine(this, "HarExporter", "devtools/netmonitor/har/har-exporter", true);
+loader.lazyDefine(this, "HarUtils", "devtools/netmonitor/har/har-utils", true);
 
 const prefDomain = "devtools.netmonitor.har.";
 
 // Helper tracer. Should be generic sharable by other modules (bug 1171927)
 const trace = {
   log: function(...args) {
   }
 }
diff --git a/browser/devtools/netmonitor/har/har-builder.js b/browser/devtools/netmonitor/har/har-builder.js
index 20dc770..eef65f9 100644
--- a/browser/devtools/netmonitor/har/har-builder.js
+++ b/browser/devtools/netmonitor/har/har-builder.js
@@ -3,24 +3,24 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { Cu, Ci, Cc } = require("chrome");
 const { defer, all, resolve } = require("sdk/core/promise");
 const { Services } = Cu.import("resource://gre/modules/Services.jsm", {});
 const { devtools } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 
-loader.lazyImporter(this, "ViewHelpers", "resource:///modules/devtools/ViewHelpers.jsm");
-loader.lazyRequireGetter(this, "NetworkHelper", "devtools/toolkit/webconsole/network-helper");
+loader.lazyDefine(this, "ViewHelpers", "resource:///modules/devtools/ViewHelpers.jsm");
+loader.lazyDefine(this, "NetworkHelper", "devtools/toolkit/webconsole/network-helper");
 
-loader.lazyGetter(this, "appInfo", () => {
+loader.lazyDefine(this, "appInfo", () => {
   return Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULAppInfo);
 });
 
-loader.lazyGetter(this, "L10N", () => {
+loader.lazyDefine(this, "L10N", () => {
   return new ViewHelpers.L10N("chrome://browser/locale/devtools/har.properties");
 });
 
 const HAR_VERSION = "1.1";
 
 /**
  * This object is responsible for building HAR file. See HAR spec:
  * https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/HAR/Overview.html
diff --git a/browser/devtools/netmonitor/har/har-utils.js b/browser/devtools/netmonitor/har/har-utils.js
index 421c74d..edd6f22 100644
--- a/browser/devtools/netmonitor/har/har-utils.js
+++ b/browser/devtools/netmonitor/har/har-utils.js
@@ -1,31 +1,26 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { Cu, Ci, Cc, CC } = require("chrome");
 const { Services } = Cu.import("resource://gre/modules/Services.jsm", {});
 
-XPCOMUtils.defineLazyGetter(this, "dirService", function() {
-  return Cc["@mozilla.org/file/directory_service;1"].getService(Ci.nsIProperties);
-});
+loader.lazyDefine(this, "dirService",
+  () => Cc["@mozilla.org/file/directory_service;1"].getService(Ci.nsIProperties));
 
-XPCOMUtils.defineLazyGetter(this, "ZipWriter", function() {
-  return CC("@mozilla.org/zipwriter;1", "nsIZipWriter");
-});
+loader.lazyDefine(this, "ZipWriter",
+  () => CC("@mozilla.org/zipwriter;1", "nsIZipWriter"));
 
-XPCOMUtils.defineLazyGetter(this, "LocalFile", function() {
-  return new CC("@mozilla.org/file/local;1", "nsILocalFile", "initWithPath");
-});
+loader.lazyDefine(this, "LocalFile",
+  () => new CC("@mozilla.org/file/local;1", "nsILocalFile", "initWithPath"));
 
-XPCOMUtils.defineLazyGetter(this, "getMostRecentBrowserWindow", function() {
-  return require("sdk/window/utils").getMostRecentBrowserWindow;
-});
+loader.lazyDefine(this, "getMostRecentBrowserWindow", "sdk/window/utils", true);
 
 const nsIFilePicker = Ci.nsIFilePicker;
 
 const OPEN_FLAGS = {
   RDONLY: parseInt("0x01"),
   WRONLY: parseInt("0x02"),
   CREATE_FILE: parseInt("0x08"),
   APPEND: parseInt("0x10"),
diff --git a/browser/devtools/netmonitor/har/toolbox-overlay.js b/browser/devtools/netmonitor/har/toolbox-overlay.js
index 0667a10..69c14ad 100644
--- a/browser/devtools/netmonitor/har/toolbox-overlay.js
+++ b/browser/devtools/netmonitor/har/toolbox-overlay.js
@@ -1,17 +1,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { Cu, Ci } = require("chrome");
 const { devtools } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 
-loader.lazyRequireGetter(this, "HarAutomation", "devtools/netmonitor/har/har-automation", true);
+loader.lazyDefine(this, "HarAutomation", "devtools/netmonitor/har/har-automation", true);
 
 // Map of all created overlays. There is always one instance of
 // an overlay per Toolbox instance (i.e. one per browser tab).
 const overlays = new WeakMap();
 
 /**
  * This object is responsible for initialization and cleanup for HAR
  * export feature. It represents an overlay for the Toolbox
diff --git a/browser/devtools/netmonitor/netmonitor-controller.js b/browser/devtools/netmonitor/netmonitor-controller.js
index 27d73ff..e4d1723 100644
--- a/browser/devtools/netmonitor/netmonitor-controller.js
+++ b/browser/devtools/netmonitor/netmonitor-controller.js
@@ -112,44 +112,34 @@ const ACTIVITY_TYPE = {
 
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource:///modules/devtools/SideMenuWidget.jsm");
 Cu.import("resource:///modules/devtools/VariablesView.jsm");
 Cu.import("resource:///modules/devtools/VariablesViewController.jsm");
 Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
 
-const require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
+const { devtools } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
+const require = devtools.require;
 const promise = Cu.import("resource://gre/modules/Promise.jsm", {}).Promise;
+const Task = Cu.import("resource://gre/modules/Task.jsm", {}).Task;
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const Editor = require("devtools/sourceeditor/editor");
 const {Tooltip} = require("devtools/shared/widgets/Tooltip");
 const {ToolSidebar} = require("devtools/framework/sidebar");
 const DevToolsUtils = require("devtools/toolkit/DevToolsUtils");
 
-XPCOMUtils.defineLazyModuleGetter(this, "Chart",
-  "resource:///modules/devtools/Chart.jsm");
-
-XPCOMUtils.defineLazyModuleGetter(this, "Curl",
-  "resource:///modules/devtools/Curl.jsm");
-
-XPCOMUtils.defineLazyModuleGetter(this, "CurlUtils",
-  "resource:///modules/devtools/Curl.jsm");
-
-XPCOMUtils.defineLazyModuleGetter(this, "Task",
-  "resource://gre/modules/Task.jsm");
-
-XPCOMUtils.defineLazyModuleGetter(this, "PluralForm",
-  "resource://gre/modules/PluralForm.jsm");
-
-XPCOMUtils.defineLazyServiceGetter(this, "clipboardHelper",
-  "@mozilla.org/widget/clipboardhelper;1", "nsIClipboardHelper");
-
-XPCOMUtils.defineLazyServiceGetter(this, "DOMParser",
-  "@mozilla.org/xmlextras/domparser;1", "nsIDOMParser");
+devtools.lazyDefine(this, "Chart", "resource:///modules/devtools/Chart.jsm", true);
+devtools.lazyDefine(this, "Curl", "resource:///modules/devtools/Curl.jsm", true);
+devtools.lazyDefine(this, "CurlUtils", "resource:///modules/devtools/Curl.jsm", true);
+devtools.lazyDefine(this, "PluralForm", "resource://gre/modules/PluralForm.jsm", true);
+devtools.lazyDefine(this, "clipboardHelper",
+  () => Cc["@mozilla.org/widget/clipboardhelper;1"].getService(Ci.nsIClipboardHelper));
+devtools.lazyDefine(this, "DOMParser",
+  () => Cc["@mozilla.org/xmlextras/domparser;1"].getService(Ci.nsIDOMParser));
 
 Object.defineProperty(this, "NetworkHelper", {
   get: function() {
     return require("devtools/toolkit/webconsole/network-helper");
   },
   configurable: true,
   enumerable: true
 });
diff --git a/browser/devtools/netmonitor/netmonitor-view.js b/browser/devtools/netmonitor/netmonitor-view.js
index 117a2b8..6ec8c49 100644
--- a/browser/devtools/netmonitor/netmonitor-view.js
+++ b/browser/devtools/netmonitor/netmonitor-view.js
@@ -1,24 +1,17 @@
 /* -*- indent-tabs-mode: nil; js-indent-level: 2 -*- */
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
-const { devtools } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
-
-XPCOMUtils.defineLazyGetter(this, "HarExporter", function() {
-  return devtools.require("devtools/netmonitor/har/har-exporter.js").HarExporter;
-});
-
-XPCOMUtils.defineLazyGetter(this, "NetworkHelper", function() {
-  return devtools.require("devtools/toolkit/webconsole/network-helper");
-});
+devtools.lazyDefine(this, "HarExporter", "devtools/netmonitor/har/har-exporter", true);
+devtools.lazyDefine(this, "NetworkHelper", "devtools/toolkit/webconsole/network-helper");
 
 const HTML_NS = "http://www.w3.org/1999/xhtml";
 const EPSILON = 0.001;
 const SOURCE_SYNTAX_HIGHLIGHT_MAX_FILE_SIZE = 102400; // 100 KB in bytes
 const RESIZE_REFRESH_RATE = 50; // ms
 const REQUESTS_REFRESH_RATE = 50; // ms
 const REQUESTS_HEADERS_SAFE_BOUNDS = 30; // px
 const REQUESTS_TOOLTIP_POSITION = "topcenter bottomleft";
diff --git a/browser/devtools/performance/modules/logic/actors.js b/browser/devtools/performance/modules/logic/actors.js
index 7a8b21e..9783670 100644
--- a/browser/devtools/performance/modules/logic/actors.js
+++ b/browser/devtools/performance/modules/logic/actors.js
@@ -1,28 +1,28 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { Task } = require("resource://gre/modules/Task.jsm");
 
-loader.lazyRequireGetter(this, "promise");
-loader.lazyRequireGetter(this, "EventEmitter",
+loader.lazyDefine(this, "promise");
+loader.lazyDefine(this, "EventEmitter",
   "devtools/toolkit/event-emitter");
-loader.lazyRequireGetter(this, "Poller",
+loader.lazyDefine(this, "Poller",
   "devtools/shared/poller", true);
 
-loader.lazyRequireGetter(this, "CompatUtils",
+loader.lazyDefine(this, "CompatUtils",
   "devtools/performance/compatibility");
-loader.lazyRequireGetter(this, "RecordingUtils",
+loader.lazyDefine(this, "RecordingUtils",
   "devtools/performance/recording-utils");
-loader.lazyRequireGetter(this, "TimelineFront",
+loader.lazyDefine(this, "TimelineFront",
   "devtools/server/actors/timeline", true);
-loader.lazyRequireGetter(this, "MemoryFront",
+loader.lazyDefine(this, "MemoryFront",
   "devtools/server/actors/memory", true);
 
 // how often do we pull allocation sites from the memory actor
 const ALLOCATION_SITE_POLL_TIMER = 200; // ms
 
 // how often do we check the status of the profiler's circular buffer
 const PROFILER_CHECK_TIMER = 5000; // ms
 
diff --git a/browser/devtools/performance/modules/logic/compatibility.js b/browser/devtools/performance/modules/logic/compatibility.js
index d9a2d10..66c5f43 100644
--- a/browser/devtools/performance/modules/logic/compatibility.js
+++ b/browser/devtools/performance/modules/logic/compatibility.js
@@ -1,15 +1,15 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
-loader.lazyRequireGetter(this, "promise");
-loader.lazyRequireGetter(this, "EventEmitter",
+loader.lazyDefine(this, "promise");
+loader.lazyDefine(this, "EventEmitter",
   "devtools/toolkit/event-emitter");
 
 /**
  * A dummy front decorated with the provided methods.
  *
  * @param array blueprint
  *        A list of [funcName, retVal] describing the class.
  */
diff --git a/browser/devtools/performance/modules/logic/frame-utils.js b/browser/devtools/performance/modules/logic/frame-utils.js
index ee4df8a..0172e18 100644
--- a/browser/devtools/performance/modules/logic/frame-utils.js
+++ b/browser/devtools/performance/modules/logic/frame-utils.js
@@ -1,17 +1,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { Cc, Ci, Cu, Cr } = require("chrome");
 
-loader.lazyRequireGetter(this, "Services");
-loader.lazyRequireGetter(this, "global",
+loader.lazyDefine(this, "Services");
+loader.lazyDefine(this, "global",
   "devtools/performance/global");
 
 // Character codes used in various parsing helper functions.
 const CHAR_CODE_A = "a".charCodeAt(0);
 const CHAR_CODE_C = "c".charCodeAt(0);
 const CHAR_CODE_E = "e".charCodeAt(0);
 const CHAR_CODE_F = "f".charCodeAt(0);
 const CHAR_CODE_H = "h".charCodeAt(0);
diff --git a/browser/devtools/performance/modules/logic/front.js b/browser/devtools/performance/modules/logic/front.js
index 3b9d30e..91f7ea5 100644
--- a/browser/devtools/performance/modules/logic/front.js
+++ b/browser/devtools/performance/modules/logic/front.js
@@ -1,32 +1,32 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { Cc, Ci, Cu, Cr } = require("chrome");
 const { Task } = require("resource://gre/modules/Task.jsm");
 
-loader.lazyRequireGetter(this, "Services");
-loader.lazyRequireGetter(this, "promise");
-loader.lazyRequireGetter(this, "EventEmitter",
+loader.lazyDefine(this, "Services");
+loader.lazyDefine(this, "promise");
+loader.lazyDefine(this, "EventEmitter",
   "devtools/toolkit/event-emitter");
-loader.lazyRequireGetter(this, "extend",
+loader.lazyDefine(this, "extend",
   "sdk/util/object", true);
 
-loader.lazyRequireGetter(this, "Actors",
+loader.lazyDefine(this, "Actors",
   "devtools/performance/actors");
-loader.lazyRequireGetter(this, "RecordingModel",
+loader.lazyDefine(this, "RecordingModel",
   "devtools/performance/recording-model", true);
-loader.lazyRequireGetter(this, "DevToolsUtils",
+loader.lazyDefine(this, "DevToolsUtils",
   "devtools/toolkit/DevToolsUtils");
 
-loader.lazyImporter(this, "gDevTools",
-  "resource:///modules/devtools/gDevTools.jsm");
+loader.lazyDefine(this, "gDevTools",
+  "resource:///modules/devtools/gDevTools.jsm", true);
 
 /**
  * A cache of all PerformanceFront instances.
  * The keys are Target objects.
  */
 let PerformanceFronts = new WeakMap();
 
 /**
diff --git a/browser/devtools/performance/modules/logic/io.js b/browser/devtools/performance/modules/logic/io.js
index d4587c0..4ae4266 100644
--- a/browser/devtools/performance/modules/logic/io.js
+++ b/browser/devtools/performance/modules/logic/io.js
@@ -1,24 +1,24 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { Cc, Ci, Cu, Cr } = require("chrome");
 
-loader.lazyRequireGetter(this, "Services");
-loader.lazyRequireGetter(this, "promise");
-loader.lazyRequireGetter(this, "RecordingUtils",
+loader.lazyDefine(this, "Services");
+loader.lazyDefine(this, "promise");
+loader.lazyDefine(this, "RecordingUtils",
   "devtools/performance/recording-utils");
 
-loader.lazyImporter(this, "FileUtils",
-  "resource://gre/modules/FileUtils.jsm");
-loader.lazyImporter(this, "NetUtil",
-  "resource://gre/modules/NetUtil.jsm");
+loader.lazyDefine(this, "FileUtils",
+  "resource://gre/modules/FileUtils.jsm" true);
+loader.lazyDefine(this, "NetUtil",
+  "resource://gre/modules/NetUtil.jsm", true);
 
 // This identifier string is used to tentatively ascertain whether or not
 // a JSON loaded from disk is actually something generated by this tool.
 // It isn't, of course, a definitive verification, but a Good Enough™
 // approximation before continuing the import. Don't localize this.
 const PERF_TOOL_SERIALIZER_IDENTIFIER = "Recorded Performance Data";
 const PERF_TOOL_SERIALIZER_LEGACY_VERSION = 1;
 const PERF_TOOL_SERIALIZER_CURRENT_VERSION = 2;
diff --git a/browser/devtools/performance/modules/logic/marker-utils.js b/browser/devtools/performance/modules/logic/marker-utils.js
index 55a4edb..031adf4 100644
--- a/browser/devtools/performance/modules/logic/marker-utils.js
+++ b/browser/devtools/performance/modules/logic/marker-utils.js
@@ -5,23 +5,23 @@
 
 /**
  * This file contains utilities for creating elements for markers to be displayed,
  * and parsing out the blueprint to generate correct values for markers.
  */
 
 const { Cu, Ci } = require("chrome");
 
-loader.lazyRequireGetter(this, "L10N",
+loader.lazyDefine(this, "L10N",
   "devtools/performance/global", true);
-loader.lazyRequireGetter(this, "PREFS",
+loader.lazyDefine(this, "PREFS",
   "devtools/performance/global", true);
-loader.lazyRequireGetter(this, "TIMELINE_BLUEPRINT",
+loader.lazyDefine(this, "TIMELINE_BLUEPRINT",
   "devtools/performance/markers", true);
-loader.lazyRequireGetter(this, "WebConsoleUtils",
+loader.lazyDefine(this, "WebConsoleUtils",
   "devtools/toolkit/webconsole/utils");
 
 // String used to fill in platform data when it should be hidden.
 const GECKO_SYMBOL = "(Gecko)";
 
 /**
  * Takes a marker, blueprint, and filter list and
  * determines if this marker should be filtered or not.
diff --git a/browser/devtools/performance/modules/logic/recording-model.js b/browser/devtools/performance/modules/logic/recording-model.js
index 5fd125b..48e7376 100644
--- a/browser/devtools/performance/modules/logic/recording-model.js
+++ b/browser/devtools/performance/modules/logic/recording-model.js
@@ -1,19 +1,19 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { Cc, Ci, Cu, Cr } = require("chrome");
 const { Task } = require("resource://gre/modules/Task.jsm");
 
-loader.lazyRequireGetter(this, "PerformanceIO",
+loader.lazyDefine(this, "PerformanceIO",
   "devtools/performance/io", true);
-loader.lazyRequireGetter(this, "RecordingUtils",
+loader.lazyDefine(this, "RecordingUtils",
   "devtools/performance/recording-utils");
 
 /**
  * Model for a wholistic profile, containing the duration, profiling data,
  * frames data, timeline (marker, tick, memory) data, and methods to mark
  * a recording as 'in progress' or 'finished'.
  */
 const RecordingModel = function (options={}) {
diff --git a/browser/devtools/performance/modules/logic/tree-model.js b/browser/devtools/performance/modules/logic/tree-model.js
index e3f6f99..6411fb4 100644
--- a/browser/devtools/performance/modules/logic/tree-model.js
+++ b/browser/devtools/performance/modules/logic/tree-model.js
@@ -1,22 +1,22 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { Cc, Ci, Cu, Cr } = require("chrome");
 
-loader.lazyRequireGetter(this, "L10N",
+loader.lazyDefine(this, "L10N",
   "devtools/performance/global", true);
-loader.lazyRequireGetter(this, "CATEGORY_MAPPINGS",
+loader.lazyDefine(this, "CATEGORY_MAPPINGS",
   "devtools/performance/global", true);
-loader.lazyRequireGetter(this, "JITOptimizations",
+loader.lazyDefine(this, "JITOptimizations",
   "devtools/performance/jit", true);
-loader.lazyRequireGetter(this, "FrameUtils",
+loader.lazyDefine(this, "FrameUtils",
   "devtools/performance/frame-utils");
 
 /**
  * A call tree for a thread. This is essentially a linkage between all frames
  * of all samples into a single tree structure, with additional information
  * on each node, like the time spent (in milliseconds) and samples count.
  *
  * @param object thread
diff --git a/browser/devtools/performance/modules/logic/waterfall-utils.js b/browser/devtools/performance/modules/logic/waterfall-utils.js
index 0e13233..c4c24b7 100644
--- a/browser/devtools/performance/modules/logic/waterfall-utils.js
+++ b/browser/devtools/performance/modules/logic/waterfall-utils.js
@@ -2,17 +2,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 /**
  * Utility functions for collapsing markers into a waterfall.
  */
 
-loader.lazyRequireGetter(this, "MarkerUtils",
+loader.lazyDefine(this, "MarkerUtils",
   "devtools/performance/marker-utils");
 
 /**
  * Collapses markers into a tree-like structure.
  * @param object markerNode
  * @param array markersList
  * @param array filter
  */
diff --git a/browser/devtools/performance/modules/widgets/graphs.js b/browser/devtools/performance/modules/widgets/graphs.js
index 9d0fe93..a07182b 100644
--- a/browser/devtools/performance/modules/widgets/graphs.js
+++ b/browser/devtools/performance/modules/widgets/graphs.js
@@ -9,29 +9,29 @@
 
 const { Cc, Ci, Cu, Cr } = require("chrome");
 const { Task } = require("resource://gre/modules/Task.jsm");
 const { Heritage } = require("resource:///modules/devtools/ViewHelpers.jsm");
 const LineGraphWidget = require("devtools/shared/widgets/LineGraphWidget");
 const BarGraphWidget = require("devtools/shared/widgets/BarGraphWidget");
 const { CanvasGraphUtils } = require("devtools/shared/widgets/Graphs");
 
-loader.lazyRequireGetter(this, "promise");
-loader.lazyRequireGetter(this, "EventEmitter",
+loader.lazyDefine(this, "promise");
+loader.lazyDefine(this, "EventEmitter",
   "devtools/toolkit/event-emitter");
 
-loader.lazyRequireGetter(this, "colorUtils",
+loader.lazyDefine(this, "colorUtils",
   "devtools/css-color", true);
-loader.lazyRequireGetter(this, "getColor",
+loader.lazyDefine(this, "getColor",
   "devtools/shared/theme", true);
-loader.lazyRequireGetter(this, "ProfilerGlobal",
+loader.lazyDefine(this, "ProfilerGlobal",
   "devtools/performance/global");
-loader.lazyRequireGetter(this, "TimelineGlobal",
+loader.lazyDefine(this, "TimelineGlobal",
   "devtools/performance/global");
-loader.lazyRequireGetter(this, "MarkersOverview",
+loader.lazyDefine(this, "MarkersOverview",
   "devtools/performance/markers-overview", true);
 
 /**
  * For line graphs
  */
 const HEIGHT = 35; // px
 const STROKE_WIDTH = 1; // px
 const DAMPEN_VALUES = 0.95;
diff --git a/browser/devtools/performance/modules/widgets/marker-details.js b/browser/devtools/performance/modules/widgets/marker-details.js
index 12780ea..2941674 100644
--- a/browser/devtools/performance/modules/widgets/marker-details.js
+++ b/browser/devtools/performance/modules/widgets/marker-details.js
@@ -4,21 +4,21 @@
 "use strict";
 
 /**
  * This file contains the rendering code for the marker sidebar.
  */
 
 const { Cc, Ci, Cu, Cr } = require("chrome");
 
-loader.lazyRequireGetter(this, "EventEmitter",
+loader.lazyDefine(this, "EventEmitter",
   "devtools/toolkit/event-emitter");
-loader.lazyRequireGetter(this, "L10N",
+loader.lazyDefine(this, "L10N",
   "devtools/performance/global", true);
-loader.lazyRequireGetter(this, "MarkerUtils",
+loader.lazyDefine(this, "MarkerUtils",
   "devtools/performance/marker-utils");
 
 /**
  * A detailed view for one single marker.
  *
  * @param nsIDOMNode parent
  *        The parent node holding the view.
  * @param nsIDOMNode splitter
diff --git a/browser/devtools/performance/modules/widgets/marker-view.js b/browser/devtools/performance/modules/widgets/marker-view.js
index 4f8d105..be547fe 100644
--- a/browser/devtools/performance/modules/widgets/marker-view.js
+++ b/browser/devtools/performance/modules/widgets/marker-view.js
@@ -6,17 +6,17 @@
 /**
  * This file contains the "marker" view, essentially a detailed list
  * of all the markers in the timeline data.
  */
 
 const { Cc, Ci, Cu, Cr } = require("chrome");
 const { Heritage } = require("resource:///modules/devtools/ViewHelpers.jsm");
 const { AbstractTreeItem } = require("resource:///modules/devtools/AbstractTreeItem.jsm");
-loader.lazyRequireGetter(this, "MarkerUtils",
+loader.lazyDefine(this, "MarkerUtils",
   "devtools/performance/marker-utils");
 
 
 const HTML_NS = "http://www.w3.org/1999/xhtml";
 
 const LEVEL_INDENT = 10; // px
 const ARROW_NODE_OFFSET = -15; // px
 const WATERFALL_MARKER_SIDEBAR_WIDTH = 175; // px
diff --git a/browser/devtools/performance/modules/widgets/markers-overview.js b/browser/devtools/performance/modules/widgets/markers-overview.js
index 1659ffc..054c1b6 100644
--- a/browser/devtools/performance/modules/widgets/markers-overview.js
+++ b/browser/devtools/performance/modules/widgets/markers-overview.js
@@ -8,27 +8,27 @@
  * the timeline data. Regions inside it may be selected, determining which
  * markers are visible in the "waterfall".
  */
 
 const { Cc, Ci, Cu, Cr } = require("chrome");
 const { Heritage } = require("resource:///modules/devtools/ViewHelpers.jsm");
 const { AbstractCanvasGraph } = require("devtools/shared/widgets/Graphs");
 
-loader.lazyRequireGetter(this, "colorUtils",
+loader.lazyDefine(this, "colorUtils",
   "devtools/css-color", true);
-loader.lazyRequireGetter(this, "getColor",
+loader.lazyDefine(this, "getColor",
   "devtools/shared/theme", true);
-loader.lazyRequireGetter(this, "L10N",
+loader.lazyDefine(this, "L10N",
   "devtools/performance/global", true);
-loader.lazyRequireGetter(this, "TickUtils",
+loader.lazyDefine(this, "TickUtils",
   "devtools/performance/waterfall-ticks", true);
-loader.lazyRequireGetter(this, "MarkerUtils",
+loader.lazyDefine(this, "MarkerUtils",
   "devtools/performance/marker-utils");
-loader.lazyRequireGetter(this, "TIMELINE_BLUEPRINT",
+loader.lazyDefine(this, "TIMELINE_BLUEPRINT",
   "devtools/performance/markers", true);
 
 const OVERVIEW_HEADER_HEIGHT = 14; // px
 const OVERVIEW_ROW_HEIGHT = 11; // px
 
 const OVERVIEW_SELECTION_LINE_COLOR = "#666";
 const OVERVIEW_CLIPHEAD_LINE_COLOR = "#555";
 
diff --git a/browser/devtools/performance/modules/widgets/waterfall-ticks.js b/browser/devtools/performance/modules/widgets/waterfall-ticks.js
index 1143683..d06c7b1 100644
--- a/browser/devtools/performance/modules/widgets/waterfall-ticks.js
+++ b/browser/devtools/performance/modules/widgets/waterfall-ticks.js
@@ -3,19 +3,19 @@
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 /**
  * This file contains the "waterfall ticks" view, a header for the
  * markers displayed in the waterfall.
  */
 
-loader.lazyRequireGetter(this, "L10N",
+loader.lazyDefine(this, "L10N",
   "devtools/performance/global", true);
-loader.lazyRequireGetter(this, "WATERFALL_MARKER_SIDEBAR_WIDTH",
+loader.lazyDefine(this, "WATERFALL_MARKER_SIDEBAR_WIDTH",
   "devtools/performance/marker-view", true);
 
 const HTML_NS = "http://www.w3.org/1999/xhtml";
 
 const FIND_OPTIMAL_TICK_INTERVAL_MAX_ITERS = 100;
 
 const WATERFALL_HEADER_TICKS_MULTIPLE = 5; // ms
 const WATERFALL_HEADER_TICKS_SPACING_MIN = 50; // px
diff --git a/browser/devtools/performance/panel.js b/browser/devtools/performance/panel.js
index 98ad08f..5fb83fe 100644
--- a/browser/devtools/performance/panel.js
+++ b/browser/devtools/performance/panel.js
@@ -3,20 +3,20 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { Cc, Ci, Cu, Cr } = require("chrome");
 const { Task } = require("resource://gre/modules/Task.jsm");
 
-loader.lazyRequireGetter(this, "promise");
-loader.lazyRequireGetter(this, "EventEmitter",
+loader.lazyDefine(this, "promise");
+loader.lazyDefine(this, "EventEmitter",
   "devtools/toolkit/event-emitter");
-loader.lazyRequireGetter(this, "PerformanceFront",
+loader.lazyDefine(this, "PerformanceFront",
   "devtools/performance/front", true);
 
 function PerformancePanel(iframeWindow, toolbox) {
   this.panelWin = iframeWindow;
   this._toolbox = toolbox;
 
   EventEmitter.decorate(this);
 }
diff --git a/browser/devtools/performance/performance-controller.js b/browser/devtools/performance/performance-controller.js
index cb7ea13..10a754e 100644
--- a/browser/devtools/performance/performance-controller.js
+++ b/browser/devtools/performance/performance-controller.js
@@ -3,77 +3,75 @@
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { classes: Cc, interfaces: Ci, utils: Cu, results: Cr } = Components;
 const { devtools: loader } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 const require = loader.require;
 
 const { Task } = require("resource://gre/modules/Task.jsm");
-const { Heritage, ViewHelpers, WidgetMethods } = require("resource:///modules/devtools/ViewHelpers.jsm");
+const {
+  Heritage, ViewHelpers, WidgetMethods, setNamedTimeout, clearNamedTimeout
+} = require("resource:///modules/devtools/ViewHelpers.jsm");
 
-loader.lazyRequireGetter(this, "Services");
-loader.lazyRequireGetter(this, "promise");
-loader.lazyRequireGetter(this, "EventEmitter",
+loader.lazyDefine(this, "Services");
+loader.lazyDefine(this, "promise");
+loader.lazyDefine(this, "EventEmitter",
   "devtools/toolkit/event-emitter");
-loader.lazyRequireGetter(this, "DevToolsUtils",
+loader.lazyDefine(this, "DevToolsUtils",
   "devtools/toolkit/DevToolsUtils");
-loader.lazyRequireGetter(this, "system",
+loader.lazyDefine(this, "system",
   "devtools/toolkit/shared/system");
 
 // Logic modules
 
-loader.lazyRequireGetter(this, "L10N",
+loader.lazyDefine(this, "L10N",
   "devtools/performance/global", true);
-loader.lazyRequireGetter(this, "TIMELINE_BLUEPRINT",
+loader.lazyDefine(this, "TIMELINE_BLUEPRINT",
   "devtools/performance/markers", true);
-loader.lazyRequireGetter(this, "RecordingUtils",
+loader.lazyDefine(this, "RecordingUtils",
   "devtools/performance/recording-utils");
-loader.lazyRequireGetter(this, "RecordingModel",
+loader.lazyDefine(this, "RecordingModel",
   "devtools/performance/recording-model", true);
-loader.lazyRequireGetter(this, "GraphsController",
+loader.lazyDefine(this, "GraphsController",
   "devtools/performance/graphs", true);
-loader.lazyRequireGetter(this, "WaterfallHeader",
+loader.lazyDefine(this, "WaterfallHeader",
   "devtools/performance/waterfall-ticks", true);
-loader.lazyRequireGetter(this, "MarkerView",
+loader.lazyDefine(this, "MarkerView",
   "devtools/performance/marker-view", true);
-loader.lazyRequireGetter(this, "MarkerDetails",
+loader.lazyDefine(this, "MarkerDetails",
   "devtools/performance/marker-details", true);
-loader.lazyRequireGetter(this, "MarkerUtils",
+loader.lazyDefine(this, "MarkerUtils",
   "devtools/performance/marker-utils");
-loader.lazyRequireGetter(this, "WaterfallUtils",
+loader.lazyDefine(this, "WaterfallUtils",
   "devtools/performance/waterfall-utils");
-loader.lazyRequireGetter(this, "CallView",
+loader.lazyDefine(this, "CallView",
   "devtools/performance/tree-view", true);
-loader.lazyRequireGetter(this, "ThreadNode",
+loader.lazyDefine(this, "ThreadNode",
   "devtools/performance/tree-model", true);
-loader.lazyRequireGetter(this, "FrameNode",
+loader.lazyDefine(this, "FrameNode",
   "devtools/performance/tree-model", true);
-loader.lazyRequireGetter(this, "JITOptimizations",
+loader.lazyDefine(this, "JITOptimizations",
   "devtools/performance/jit", true);
 
 // Widgets modules
 
-loader.lazyRequireGetter(this, "OptionsView",
+loader.lazyDefine(this, "OptionsView",
   "devtools/shared/options-view", true);
-loader.lazyRequireGetter(this, "FlameGraphUtils",
+loader.lazyDefine(this, "FlameGraphUtils",
   "devtools/shared/widgets/FlameGraph", true);
-loader.lazyRequireGetter(this, "FlameGraph",
+loader.lazyDefine(this, "FlameGraph",
   "devtools/shared/widgets/FlameGraph", true);
-loader.lazyRequireGetter(this, "TreeWidget",
+loader.lazyDefine(this, "TreeWidget",
   "devtools/shared/widgets/TreeWidget", true);
 
-loader.lazyImporter(this, "SideMenuWidget",
-  "resource:///modules/devtools/SideMenuWidget.jsm");
-loader.lazyImporter(this, "setNamedTimeout",
-  "resource:///modules/devtools/ViewHelpers.jsm");
-loader.lazyImporter(this, "clearNamedTimeout",
-  "resource:///modules/devtools/ViewHelpers.jsm");
-loader.lazyImporter(this, "PluralForm",
-  "resource://gre/modules/PluralForm.jsm");
+loader.lazyDefine(this, "SideMenuWidget",
+  "resource:///modules/devtools/SideMenuWidget.jsm", true);
+loader.lazyDefine(this, "PluralForm",
+  "resource://gre/modules/PluralForm.jsm", true);
 
 const BRANCH_NAME = "devtools.performance.ui.";
 
 // Events emitted by various objects in the panel.
 const EVENTS = {
   // Fired by the PerformanceController and OptionsView when a pref changes.
   PREF_CHANGED: "Performance:PrefChanged",
 
diff --git a/browser/devtools/scratchpad/scratchpad.js b/browser/devtools/scratchpad/scratchpad.js
index 33d9d63..fce2ae1 100644
--- a/browser/devtools/scratchpad/scratchpad.js
+++ b/browser/devtools/scratchpad/scratchpad.js
@@ -38,62 +38,65 @@ const WRAP_TEXT = "devtools.scratchpad.wrapText";
 const SHOW_TRAILING_SPACE = "devtools.scratchpad.showTrailingSpace";
 const EDITOR_FONT_SIZE = "devtools.scratchpad.editorFontSize";
 const ENABLE_AUTOCOMPLETION = "devtools.scratchpad.enableAutocompletion";
 const TAB_SIZE = "devtools.editor.tabsize";
 const FALLBACK_CHARSET_LIST = "intl.fallbackCharsetList.ISO-8859-1";
 
 const VARIABLES_VIEW_URL = "chrome://browser/content/devtools/widgets/VariablesView.xul";
 
-const require   = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
+const devtools  = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools;
+const require   = devtools.require;
 
 const Telemetry = require("devtools/shared/telemetry");
 const Editor    = require("devtools/sourceeditor/editor");
 const TargetFactory = require("devtools/framework/target").TargetFactory;
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const {DevToolsWorker} = require("devtools/toolkit/shared/worker");
 
 const { Promise: promise } = Cu.import("resource://gre/modules/Promise.jsm", {});
-Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/NetUtil.jsm");
 Cu.import("resource:///modules/devtools/scratchpad-manager.jsm");
 Cu.import("resource://gre/modules/jsdebugger.jsm");
 Cu.import("resource:///modules/devtools/gDevTools.jsm");
 Cu.import("resource://gre/modules/osfile.jsm");
 Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
 Cu.import("resource://gre/modules/reflect.jsm");
 Cu.import("resource://gre/modules/devtools/DevToolsUtils.jsm");
 
-XPCOMUtils.defineLazyModuleGetter(this, "VariablesView",
-  "resource:///modules/devtools/VariablesView.jsm");
+devtools.lazyDefine(this, "VariablesView",
+  "resource:///modules/devtools/VariablesView.jsm", true);
 
-XPCOMUtils.defineLazyModuleGetter(this, "VariablesViewController",
-  "resource:///modules/devtools/VariablesViewController.jsm");
+devtools.lazyDefine(this, "VariablesViewController",
+  "resource:///modules/devtools/VariablesViewController.jsm", true);
 
-XPCOMUtils.defineLazyModuleGetter(this, "EnvironmentClient",
-  "resource://gre/modules/devtools/dbg-client.jsm");
+devtools.lazyDefine(this, "EnvironmentClient",
+  "resource://gre/modules/devtools/dbg-client.jsm", true);
 
-XPCOMUtils.defineLazyModuleGetter(this, "ObjectClient",
-  "resource://gre/modules/devtools/dbg-client.jsm");
+devtools.lazyDefine(this, "ObjectClient",
+  "resource://gre/modules/devtools/dbg-client.jsm", true);
 
-XPCOMUtils.defineLazyModuleGetter(this, "DebuggerServer",
-  "resource://gre/modules/devtools/dbg-server.jsm");
+devtools.lazyDefine(this, "DebuggerServer",
+  "resource://gre/modules/devtools/dbg-server.jsm", true);
 
-XPCOMUtils.defineLazyModuleGetter(this, "DebuggerClient",
-  "resource://gre/modules/devtools/dbg-client.jsm");
+devtools.lazyDefine(this, "DebuggerClient",
+  "resource://gre/modules/devtools/dbg-client.jsm", true);
 
-XPCOMUtils.defineLazyGetter(this, "REMOTE_TIMEOUT", () =>
+devtools.lazyDefine(this, "REMOTE_TIMEOUT", () =>
   Services.prefs.getIntPref("devtools.debugger.remote-timeout"));
 
-XPCOMUtils.defineLazyModuleGetter(this, "ShortcutUtils",
-  "resource://gre/modules/ShortcutUtils.jsm");
+devtools.lazyDefine(this, "ShortcutUtils",
+  "resource://gre/modules/ShortcutUtils.jsm", true);
+
+devtools.lazyDefine(this, "Reflect",
+  "resource://gre/modules/reflect.jsm", true);
+
+devtools.lazyDefine(Scratchpad, "strings", () => Services.strings.createBundle(SCRATCHPAD_L10N));
 
-XPCOMUtils.defineLazyModuleGetter(this, "Reflect",
-  "resource://gre/modules/reflect.jsm");
 
 // Because we have no constructor / destructor where we can log metrics we need
 // to do so here.
 let telemetry = new Telemetry();
 telemetry.toolOpened("scratchpad");
 
 let WebConsoleUtils = require("devtools/toolkit/webconsole/utils").Utils;
 
@@ -2478,15 +2481,11 @@ var CloseObserver = {
     }
 
     this._uninited = true;
     Services.obs.removeObserver(this, "browser-lastwindow-close-requested",
                                 false);
   },
 };
 
-XPCOMUtils.defineLazyGetter(Scratchpad, "strings", function () {
-  return Services.strings.createBundle(SCRATCHPAD_L10N);
-});
-
 addEventListener("load", Scratchpad.onLoad.bind(Scratchpad), false);
 addEventListener("unload", Scratchpad.onUnload.bind(Scratchpad), false);
 addEventListener("close", Scratchpad.onClose.bind(Scratchpad), false);
diff --git a/browser/devtools/shared/autocomplete-popup.js b/browser/devtools/shared/autocomplete-popup.js
index a3ae97c..558f409 100644
--- a/browser/devtools/shared/autocomplete-popup.js
+++ b/browser/devtools/shared/autocomplete-popup.js
@@ -3,18 +3,18 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
 const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 
-loader.lazyImporter(this, "Services", "resource://gre/modules/Services.jsm");
-loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
+loader.lazyDefine(this, "Services", "resource://gre/modules/Services.jsm", true);
+loader.lazyDefine(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm", true);
 const events  = require("devtools/toolkit/event-emitter");
 
 /**
  * Autocomplete popup UI implementation.
  *
  * @constructor
  * @param nsIDOMDocument aDocument
  *        The document you want the popup attached to.
diff --git a/browser/devtools/shared/frame-script-utils.js b/browser/devtools/shared/frame-script-utils.js
index 65dbd9b..a8e59a9 100644
--- a/browser/devtools/shared/frame-script-utils.js
+++ b/browser/devtools/shared/frame-script-utils.js
@@ -1,22 +1,22 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 const {classes: Cc, interfaces: Ci, utils: Cu, results: Cr} = Components;
 const { devtools } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
-devtools.lazyImporter(this, "promise", "resource://gre/modules/Promise.jsm", "Promise");
-devtools.lazyImporter(this, "Task", "resource://gre/modules/Task.jsm", "Task");
+devtools.lazyDefine(this, "Promise", "resource://gre/modules/Promise.jsm", true);
+devtools.lazyDefine(this, "Task", "resource://gre/modules/Task.jsm", true);
 const loader = Cc["@mozilla.org/moz/jssubscript-loader;1"]
             .getService(Ci.mozIJSSubScriptLoader);
 let EventUtils = {};
 loader.loadSubScript("chrome://marionette/content/EventUtils.js", EventUtils);
-devtools.lazyGetter(this, "nsIProfilerModule", () => {
+devtools.lazyDefine(this, "nsIProfilerModule", () => {
   return Cc["@mozilla.org/tools/profiler;1"].getService(Ci.nsIProfiler);
 });
 
 addMessageListener("devtools:test:history", function ({ data }) {
   content.history[data.direction]();
 });
 
 addMessageListener("devtools:test:navigate", function ({ data }) {
@@ -55,17 +55,17 @@ function promiseXHR(data) {
   let method = data.method || "GET";
   let url = data.url || content.location.href;
   let body = data.body || "";
 
   if (data.nocache) {
     url += "?devtools-cachebust=" + Math.random();
   }
 
-  let deferred = promise.defer();
+  let deferred = Promise.defer();
   xhr.addEventListener("loadend", function loadend(event) {
     xhr.removeEventListener("loadend", loadend);
     deferred.resolve({ status: xhr.status, response: xhr.response });
   });
 
   xhr.open(method, url);
   xhr.send(body);
   return deferred.promise;
diff --git a/browser/devtools/shared/poller.js b/browser/devtools/shared/poller.js
index 6a773f5..f34a4ee 100644
--- a/browser/devtools/shared/poller.js
+++ b/browser/devtools/shared/poller.js
@@ -1,16 +1,16 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
-loader.lazyRequireGetter(this, "timers",
+loader.lazyDefine(this, "timers",
   "resource://gre/modules/Timer.jsm");
-loader.lazyRequireGetter(this, "defer",
+loader.lazyDefine(this, "defer",
   "sdk/core/promise", true);
 
 /**
  * @constructor Poller
  * Takes a function that is to be called on an interval,
  * and can be turned on and off via methods to execute `fn` on the interval
  * specified during `on`. If `fn` returns a promise, the polling waits for
  * that promise to resolve before waiting the interval to call again.
diff --git a/browser/devtools/shared/source-utils.js b/browser/devtools/shared/source-utils.js
index 9ff2d30..1e9fca6 100644
--- a/browser/devtools/shared/source-utils.js
+++ b/browser/devtools/shared/source-utils.js
@@ -1,17 +1,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-loader.lazyRequireGetter(this, "Services");
-loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
-loader.lazyImporter(this, "Task", "resource://gre/modules/Task.jsm");
+loader.lazyDefine(this, "Services");
+loader.lazyDefine(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm", true);
+loader.lazyDefine(this, "Task", "resource://gre/modules/Task.jsm", true);
 
 /**
  * Tries to open a Stylesheet file in the Style Editor. If the file is not found,
  * it is opened in source view instead.
  * Returns a promise resolving to a boolean indicating whether or not
  * the source was able to be displayed in the StyleEditor, as the built-in Firefox
  * View Source is the fallback.
  *
diff --git a/browser/devtools/shared/theme.js b/browser/devtools/shared/theme.js
index f24a598..7c12c0c 100644
--- a/browser/devtools/shared/theme.js
+++ b/browser/devtools/shared/theme.js
@@ -5,19 +5,19 @@
 "use strict";
 
 /**
  * Colors for themes taken from:
  * https://developer.mozilla.org/en-US/docs/Tools/DevToolsColors
  */
 
 const { Ci, Cu } = require("chrome");
-const { NetUtil } = Cu.import("resource://gre/modules/NetUtil.jsm", {});
-loader.lazyRequireGetter(this, "Services");
-loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
+loader.lazyDefine(this, "Services");
+loader.lazyDefine(this, "NetUtil", "resource://gre/modules/NetUtil.jsm", true);
+loader.lazyDefine(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm", true);
 
 const themeURIs = {
   light: "chrome://browser/skin/devtools/light-theme.css",
   dark: "chrome://browser/skin/devtools/dark-theme.css"
 }
 
 const cachedThemes = {};
 
diff --git a/browser/devtools/shared/widgets/CubicBezierWidget.js b/browser/devtools/shared/widgets/CubicBezierWidget.js
index 7c1e1c4..7314412 100644
--- a/browser/devtools/shared/widgets/CubicBezierWidget.js
+++ b/browser/devtools/shared/widgets/CubicBezierWidget.js
@@ -24,19 +24,18 @@
 // See https://github.com/LeaVerou/cubic-bezier
 
 "use strict";
 
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const {setTimeout, clearTimeout} = require("sdk/timers");
 const {PREDEFINED, PRESETS, DEFAULT_PRESET_CATEGORY} = require("devtools/shared/widgets/CubicBezierPresets");
 const {Cc, Ci} = require('chrome');
-loader.lazyGetter(this, "DOMUtils", () => {
-  return Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
-});
+loader.lazyDefine(this, "DOMUtils",
+  () => Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils));
 
 /**
  * CubicBezier data structure helper
  * Accepts an array of coordinates and exposes a few useful getters
  * @param {Array} coordinates i.e. [.42, 0, .58, 1]
  */
 function CubicBezier(coordinates) {
   if (!coordinates) {
diff --git a/browser/devtools/shared/widgets/FlameGraph.js b/browser/devtools/shared/widgets/FlameGraph.js
index a912fe2..1e7606b 100644
--- a/browser/devtools/shared/widgets/FlameGraph.js
+++ b/browser/devtools/shared/widgets/FlameGraph.js
@@ -2,33 +2,33 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { Task } = require("resource://gre/modules/Task.jsm");
 const { ViewHelpers } = require("resource:///modules/devtools/ViewHelpers.jsm");
 const { setNamedTimeout, clearNamedTimeout } = require("resource:///modules/devtools/ViewHelpers.jsm");
 
-loader.lazyRequireGetter(this, "promise");
-loader.lazyRequireGetter(this, "EventEmitter",
+loader.lazyDefine(this, "promise");
+loader.lazyDefine(this, "EventEmitter",
   "devtools/toolkit/event-emitter");
 
-loader.lazyRequireGetter(this, "getColor",
+loader.lazyDefine(this, "getColor",
   "devtools/shared/theme", true);
 
-loader.lazyRequireGetter(this, "CATEGORY_MAPPINGS",
+loader.lazyDefine(this, "CATEGORY_MAPPINGS",
   "devtools/performance/global", true);
-loader.lazyRequireGetter(this, "FrameUtils",
+loader.lazyDefine(this, "FrameUtils",
   "devtools/performance/frame-utils");
 
-loader.lazyRequireGetter(this, "AbstractCanvasGraph",
+loader.lazyDefine(this, "AbstractCanvasGraph",
   "devtools/shared/widgets/Graphs", true);
-loader.lazyRequireGetter(this, "GraphArea",
+loader.lazyDefine(this, "GraphArea",
   "devtools/shared/widgets/Graphs", true);
-loader.lazyRequireGetter(this, "GraphAreaDragger",
+loader.lazyDefine(this, "GraphAreaDragger",
   "devtools/shared/widgets/Graphs", true);
 
 const HTML_NS = "http://www.w3.org/1999/xhtml";
 const GRAPH_SRC = "chrome://browser/content/devtools/graphs-frame.xhtml";
 
 const L10N = new ViewHelpers.L10N();
 
 const GRAPH_RESIZE_EVENTS_DRAIN = 100; // ms
diff --git a/browser/devtools/shared/widgets/Graphs.js b/browser/devtools/shared/widgets/Graphs.js
index 0316979..2b95ddc 100644
--- a/browser/devtools/shared/widgets/Graphs.js
+++ b/browser/devtools/shared/widgets/Graphs.js
@@ -3,24 +3,24 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { Cc, Ci, Cu, Cr } = require("chrome");
 
 const { Task } = Cu.import("resource://gre/modules/Task.jsm", {});
 const { Heritage, setNamedTimeout, clearNamedTimeout } = require("resource:///modules/devtools/ViewHelpers.jsm");
 
-loader.lazyRequireGetter(this, "promise");
-loader.lazyRequireGetter(this, "EventEmitter",
+loader.lazyDefine(this, "promise");
+loader.lazyDefine(this, "EventEmitter",
   "devtools/toolkit/event-emitter");
 
-loader.lazyImporter(this, "DevToolsWorker",
-  "resource://gre/modules/devtools/shared/worker.js");
-loader.lazyImporter(this, "LayoutHelpers",
-  "resource://gre/modules/devtools/LayoutHelpers.jsm");
+loader.lazyDefine(this, "DevToolsWorker",
+  "resource://gre/modules/devtools/shared/worker.js", true);
+loader.lazyDefine(this, "LayoutHelpers",
+  "resource://gre/modules/devtools/LayoutHelpers.jsm", true);
 
 const HTML_NS = "http://www.w3.org/1999/xhtml";
 const GRAPH_SRC = "chrome://browser/content/devtools/graphs-frame.xhtml";
 const WORKER_URL = "resource:///modules/devtools/GraphsWorker.js";
 
 // Generic constants.
 
 const GRAPH_RESIZE_EVENTS_DRAIN = 100; // ms
diff --git a/browser/devtools/shared/widgets/MdnDocsWidget.js b/browser/devtools/shared/widgets/MdnDocsWidget.js
index 8113baf..3439827 100644
--- a/browser/devtools/shared/widgets/MdnDocsWidget.js
+++ b/browser/devtools/shared/widgets/MdnDocsWidget.js
@@ -263,20 +263,18 @@ MdnDocsWidget.prototype = {
 /**
  * L10N utility class
  */
 function L10N() {}
 L10N.prototype = {};
 
 let l10n = new L10N();
 
-loader.lazyGetter(L10N.prototype, "strings", () => {
-  return Services.strings.createBundle(
-    "chrome://browser/locale/devtools/inspector.properties");
-});
+loader.lazyDefine(L10N.prototype, "strings",
+  () => Services.strings.createBundle("chrome://browser/locale/devtools/inspector.properties"));
 
 /**
  * Test whether a node is all whitespace.
  *
  * @return {boolean}
  * True if the node all whitespace, otherwise false.
  */
 function isAllWhitespace(node) {
diff --git a/browser/devtools/shared/widgets/Tooltip.js b/browser/devtools/shared/widgets/Tooltip.js
index b96e26b..1ecf4f5 100644
--- a/browser/devtools/shared/widgets/Tooltip.js
+++ b/browser/devtools/shared/widgets/Tooltip.js
@@ -15,32 +15,29 @@ const {CubicBezierWidget} =
 const {MdnDocsWidget} = require("devtools/shared/widgets/MdnDocsWidget");
 const {CSSFilterEditorWidget} = require("devtools/shared/widgets/FilterWidget");
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const {colorUtils} = require("devtools/css-color");
 const Heritage = require("sdk/core/heritage");
 const {Eyedropper} = require("devtools/eyedropper/eyedropper");
 const Editor = require("devtools/sourceeditor/editor");
 const {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
-
-devtools.lazyRequireGetter(this, "beautify", "devtools/jsbeautify");
-
 Cu.import("resource://gre/modules/Services.jsm");
-Cu.import("resource://gre/modules/XPCOMUtils.jsm");
-
-XPCOMUtils.defineLazyModuleGetter(this, "setNamedTimeout",
-  "resource:///modules/devtools/ViewHelpers.jsm");
-XPCOMUtils.defineLazyModuleGetter(this, "clearNamedTimeout",
-  "resource:///modules/devtools/ViewHelpers.jsm");
-XPCOMUtils.defineLazyModuleGetter(this, "VariablesView",
-  "resource:///modules/devtools/VariablesView.jsm");
-XPCOMUtils.defineLazyModuleGetter(this, "VariablesViewController",
-  "resource:///modules/devtools/VariablesViewController.jsm");
-XPCOMUtils.defineLazyModuleGetter(this, "Task",
-  "resource://gre/modules/Task.jsm");
+
+devtools.lazyDefine(this, "beautify", "devtools/jsbeautify");
+devtools.lazyDefine(this, "setNamedTimeout",
+  "resource:///modules/devtools/ViewHelpers.jsm", true);
+devtools.lazyDefine(this, "clearNamedTimeout",
+  "resource:///modules/devtools/ViewHelpers.jsm", true);
+devtools.lazyDefine(this, "VariablesView",
+  "resource:///modules/devtools/VariablesView.jsm", true);
+devtools.lazyDefine(this, "VariablesViewController",
+  "resource:///modules/devtools/VariablesViewController.jsm", true);
+devtools.lazyDefine(this, "Task",
+  "resource://gre/modules/Task.jsm", true);
 
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
 const SPECTRUM_FRAME = "chrome://browser/content/devtools/spectrum-frame.xhtml";
 const CUBIC_BEZIER_FRAME =
       "chrome://browser/content/devtools/cubic-bezier-frame.xhtml";
 const MDN_DOCS_FRAME = "chrome://browser/content/devtools/mdn-docs-frame.xhtml";
 const FILTER_FRAME = "chrome://browser/content/devtools/filter-frame.xhtml";
 const ESCAPE_KEYCODE = Ci.nsIDOMKeyEvent.DOM_VK_ESCAPE;
@@ -1712,12 +1709,12 @@ SwatchFilterTooltip.prototype = Heritage.extend(SwatchBasedEditorTooltip.prototy
 /**
  * L10N utility class
  */
 function L10N() {}
 L10N.prototype = {};
 
 let l10n = new L10N();
 
-loader.lazyGetter(L10N.prototype, "strings", () => {
+loader.lazyDefine(L10N.prototype, "strings", () => {
   return Services.strings.createBundle(
     "chrome://browser/locale/devtools/inspector.properties");
 });
diff --git a/browser/devtools/sourceeditor/css-tokenizer.js b/browser/devtools/sourceeditor/css-tokenizer.js
index 7bbfdcc..c0a079f 100644
--- a/browser/devtools/sourceeditor/css-tokenizer.js
+++ b/browser/devtools/sourceeditor/css-tokenizer.js
@@ -2,19 +2,18 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const {Cc, Ci} = require("chrome");
-loader.lazyGetter(this, "DOMUtils", () => {
-  return Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
-});
+loader.lazyDefine(this, "DOMUtils",
+  () => Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils));
 
 /**
  * A generator function that lexes a CSS source string, yielding the
  * CSS tokens.  Comment tokens are dropped.
  *
  * @param {String} CSS source string
  * @yield {CSSToken} The next CSSToken that is lexed
  * @see CSSToken for details about the returned tokens
diff --git a/browser/devtools/storage/panel.js b/browser/devtools/storage/panel.js
index f2becfa..039cf78 100644
--- a/browser/devtools/storage/panel.js
+++ b/browser/devtools/storage/panel.js
@@ -7,21 +7,18 @@
 const {Cc, Ci, Cu, Cr} = require("chrome");
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/Promise.jsm");
 
 let EventEmitter = require("devtools/toolkit/event-emitter");
 
-loader.lazyGetter(this, "StorageFront",
-  () => require("devtools/server/actors/storage").StorageFront);
-
-loader.lazyGetter(this, "StorageUI",
-  () => require("devtools/storage/ui").StorageUI);
+loader.lazyDefine(this, "StorageFront", "devtools/server/actors/storage", true);
+loader.lazyDefine(this, "StorageUI", "devtools/storage/ui", true);
 
 this.StoragePanel = function StoragePanel(panelWin, toolbox) {
   EventEmitter.decorate(this);
 
   this._toolbox = toolbox;
   this._target = toolbox.target;
   this._panelWin = panelWin;
 
diff --git a/browser/devtools/styleeditor/styleeditor-panel.js b/browser/devtools/styleeditor/styleeditor-panel.js
index 1402148..647ac1d 100644
--- a/browser/devtools/styleeditor/styleeditor-panel.js
+++ b/browser/devtools/styleeditor/styleeditor-panel.js
@@ -10,21 +10,18 @@ Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 
 let {Promise: promise} = Cu.import("resource://gre/modules/Promise.jsm", {});
 let EventEmitter = require("devtools/toolkit/event-emitter");
 
 Cu.import("resource:///modules/devtools/StyleEditorUI.jsm");
 Cu.import("resource:///modules/devtools/StyleEditorUtil.jsm");
 
-loader.lazyGetter(this, "StyleSheetsFront",
-  () => require("devtools/server/actors/stylesheets").StyleSheetsFront);
-
-loader.lazyGetter(this, "StyleEditorFront",
-  () => require("devtools/server/actors/styleeditor").StyleEditorFront);
+loader.lazyDefine(this, "StyleSheetsFront", "devtools/server/actors/stylesheets", true);
+loader.lazyDefine(this, "StyleEditorFront", "devtools/server/actors/styleeditor", true);
 
 this.StyleEditorPanel = function StyleEditorPanel(panelWin, toolbox) {
   EventEmitter.decorate(this);
 
   this._toolbox = toolbox;
   this._target = toolbox.target;
   this._panelWin = panelWin;
   this._panelDoc = panelWin.document;
diff --git a/browser/devtools/styleinspector/rule-view.js b/browser/devtools/styleinspector/rule-view.js
index aecaddc7..90afa01 100644
--- a/browser/devtools/styleinspector/rule-view.js
+++ b/browser/devtools/styleinspector/rule-view.js
@@ -4041,11 +4041,9 @@ XPCOMUtils.defineLazyGetter(this, "_strings", function() {
   return Services.strings.createBundle(
     "chrome://global/locale/devtools/styleinspector.properties");
 });
 
 XPCOMUtils.defineLazyGetter(this, "domUtils", function() {
   return Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
 });
 
-loader.lazyGetter(this, "AutocompletePopup", function() {
-  return require("devtools/shared/autocomplete-popup").AutocompletePopup;
-});
+loader.lazyDefine(this, "AutocompletePopup", "devtools/shared/autocomplete-popup", true);
diff --git a/browser/devtools/styleinspector/style-inspector.js b/browser/devtools/styleinspector/style-inspector.js
index 2228121..da7d1ad 100644
--- a/browser/devtools/styleinspector/style-inspector.js
+++ b/browser/devtools/styleinspector/style-inspector.js
@@ -5,20 +5,20 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const {Cc, Cu, Ci} = require("chrome");
 const {Promise: promise} = Cu.import("resource://gre/modules/Promise.jsm", {});
 const {Tools} = require("main");
 Cu.import("resource://gre/modules/Services.jsm");
 const {PREF_ORIG_SOURCES} = require("devtools/styleeditor/utils");
 
-loader.lazyGetter(this, "gDevTools", () => Cu.import("resource:///modules/devtools/gDevTools.jsm", {}).gDevTools);
-loader.lazyGetter(this, "RuleView", () => require("devtools/styleinspector/rule-view"));
-loader.lazyGetter(this, "ComputedView", () => require("devtools/styleinspector/computed-view"));
-loader.lazyGetter(this, "_strings", () => Services.strings
+loader.lazyDefine(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm", true);
+loader.lazyDefine(this, "RuleView", "devtools/styleinspector/rule-view");
+loader.lazyDefine(this, "ComputedView", "devtools/styleinspector/computed-view");
+loader.lazyDefine(this, "_strings", () => Services.strings
   .createBundle("chrome://global/locale/devtools/styleinspector.properties"));
 
 // This module doesn't currently export any symbols directly, it only
 // registers inspector tools.
 
 function RuleViewTool(inspector, window, iframe) {
   this.inspector = inspector;
   this.doc = window.document;
diff --git a/browser/devtools/webaudioeditor/includes.js b/browser/devtools/webaudioeditor/includes.js
index 9dee17b..39421fc 100644
--- a/browser/devtools/webaudioeditor/includes.js
+++ b/browser/devtools/webaudioeditor/includes.js
@@ -20,17 +20,17 @@ const { Task } = Cu.import("resource://gre/modules/Task.jsm", {});
 const { Class } = require("sdk/core/heritage");
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const STRINGS_URI = "chrome://browser/locale/devtools/webaudioeditor.properties"
 const L10N = new ViewHelpers.L10N(STRINGS_URI);
 const Telemetry = require("devtools/shared/telemetry");
 const telemetry = new Telemetry();
 const DevToolsUtils = require("devtools/toolkit/DevToolsUtils");
 
-devtools.lazyRequireGetter(this, "LineGraphWidget",
+devtools.lazyDefine(this, "LineGraphWidget",
   "devtools/shared/widgets/LineGraphWidget");
 
 // `AUDIO_NODE_DEFINITION` defined in the controller's initialization,
 // which describes all the properties of an AudioNode
 let AUDIO_NODE_DEFINITION;
 
 // Override DOM promises with Promise.jsm helpers
 const { defer, all } = Cu.import("resource://gre/modules/Promise.jsm", {}).Promise;
diff --git a/browser/devtools/webconsole/console-commands.js b/browser/devtools/webconsole/console-commands.js
index a10c4ba..d79cbe9 100644
--- a/browser/devtools/webconsole/console-commands.js
+++ b/browser/devtools/webconsole/console-commands.js
@@ -1,16 +1,16 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const l10n = require("gcli/l10n");
-loader.lazyGetter(this, "gDevTools", () => require("resource:///modules/devtools/gDevTools.jsm").gDevTools);
+loader.lazyDefine(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm", true);
 
 exports.items = [
   {
     item: "command",
     runAt: "client",
     name: 'splitconsole',
     hidden: true,
     buttonId: "command-button-splitconsole",
diff --git a/browser/devtools/webconsole/console-output.js b/browser/devtools/webconsole/console-output.js
index a3cbeb2..f31390e 100644
--- a/browser/devtools/webconsole/console-output.js
+++ b/browser/devtools/webconsole/console-output.js
@@ -4,25 +4,25 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
 
 const { Services } = require("resource://gre/modules/Services.jsm");
 
-loader.lazyImporter(this, "VariablesView", "resource:///modules/devtools/VariablesView.jsm");
-loader.lazyImporter(this, "escapeHTML", "resource:///modules/devtools/VariablesView.jsm");
-loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
-loader.lazyImporter(this, "Task", "resource://gre/modules/Task.jsm");
-loader.lazyImporter(this, "PluralForm", "resource://gre/modules/PluralForm.jsm");
-loader.lazyImporter(this, "ObjectClient", "resource://gre/modules/devtools/dbg-client.jsm");
-
-loader.lazyRequireGetter(this, "promise");
-loader.lazyRequireGetter(this, "TableWidget", "devtools/shared/widgets/TableWidget", true);
+loader.lazyDefine(this, "VariablesView", "resource:///modules/devtools/VariablesView.jsm", true);
+loader.lazyDefine(this, "escapeHTML", "resource:///modules/devtools/VariablesView.jsm", true);
+loader.lazyDefine(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm", true);
+loader.lazyDefine(this, "Task", "resource://gre/modules/Task.jsm", true);
+loader.lazyDefine(this, "PluralForm", "resource://gre/modules/PluralForm.jsm", true);
+loader.lazyDefine(this, "ObjectClient", "resource://gre/modules/devtools/dbg-client.jsm", true);
+
+loader.lazyDefine(this, "promise");
+loader.lazyDefine(this, "TableWidget", "devtools/shared/widgets/TableWidget", true);
 
 const Heritage = require("sdk/core/heritage");
 const URI = Cc["@mozilla.org/network/io-service;1"].getService(Ci.nsIIOService);
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
 const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 const STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
 
 const WebConsoleUtils = require("devtools/toolkit/webconsole/utils").Utils;
diff --git a/browser/devtools/webconsole/hudservice.js b/browser/devtools/webconsole/hudservice.js
index 7838290..3853595 100644
--- a/browser/devtools/webconsole/hudservice.js
+++ b/browser/devtools/webconsole/hudservice.js
@@ -6,26 +6,26 @@
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
 
 let WebConsoleUtils = require("devtools/toolkit/webconsole/utils").Utils;
 let Heritage = require("sdk/core/heritage");
 
-loader.lazyGetter(this, "Telemetry", () => require("devtools/shared/telemetry"));
-loader.lazyGetter(this, "WebConsoleFrame", () => require("devtools/webconsole/webconsole").WebConsoleFrame);
-loader.lazyImporter(this, "promise", "resource://gre/modules/Promise.jsm", "Promise");
-loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
-loader.lazyImporter(this, "devtools", "resource://gre/modules/devtools/Loader.jsm");
-loader.lazyImporter(this, "Services", "resource://gre/modules/Services.jsm");
-loader.lazyImporter(this, "DebuggerServer", "resource://gre/modules/devtools/dbg-server.jsm");
-loader.lazyImporter(this, "DebuggerClient", "resource://gre/modules/devtools/dbg-client.jsm");
-loader.lazyGetter(this, "showDoorhanger", () => require("devtools/shared/doorhanger").showDoorhanger);
-loader.lazyRequireGetter(this, "sourceUtils", "devtools/shared/source-utils");
+loader.lazyDefine(this, "Telemetry", "devtools/shared/telemetry");
+loader.lazyDefine(this, "WebConsoleFrame", "devtools/webconsole/webconsole", true);
+loader.lazyDefine(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm", true);
+loader.lazyDefine(this, "devtools", "resource://gre/modules/devtools/Loader.jsm", true);
+loader.lazyDefine(this, "Services", "resource://gre/modules/Services.jsm", true);
+loader.lazyDefine(this, "DebuggerServer", "resource://gre/modules/devtools/dbg-server.jsm", true);
+loader.lazyDefine(this, "DebuggerClient", "resource://gre/modules/devtools/dbg-client.jsm", true);
+loader.lazyDefine(this, "showDoorhanger", "devtools/shared/doorhanger", true);
+loader.lazyDefine(this, "sourceUtils", "devtools/shared/source-utils");
+loader.lazyDefine(this, "promise", () => require("resource://gre/modules/Promise.jsm").Promise);
 
 const STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
 let l10n = new WebConsoleUtils.l10n(STRINGS_URI);
 
 const BROWSER_CONSOLE_WINDOW_FEATURES = "chrome,titlebar,toolbar,centerscreen,resizable,dialog=no";
 
 // The preference prefix for all of the Browser Console filters.
 const BROWSER_CONSOLE_FILTER_PREFS_PREFIX = "devtools.browserconsole.filter.";
diff --git a/browser/devtools/webconsole/network-panel.js b/browser/devtools/webconsole/network-panel.js
index 626241b..4a886d7 100644
--- a/browser/devtools/webconsole/network-panel.js
+++ b/browser/devtools/webconsole/network-panel.js
@@ -3,19 +3,19 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
 
-loader.lazyGetter(this, "NetworkHelper", () => require("devtools/toolkit/webconsole/network-helper"));
-loader.lazyImporter(this, "NetUtil", "resource://gre/modules/NetUtil.jsm");
-loader.lazyServiceGetter(this, "mimeService", "@mozilla.org/mime;1", "nsIMIMEService");
+loader.lazyDefine(this, "NetworkHelper", "devtools/toolkit/webconsole/network-helper");
+loader.lazyDefine(this, "NetUtil", "resource://gre/modules/NetUtil.jsm", true);
+loader.lazyDefine(this, "mimeService", () => Cc["@mozilla.org/mime;1"].getService(Ci.nsIMIMEService));
 
 let WebConsoleUtils = require("devtools/toolkit/webconsole/utils").Utils;
 
 const STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
 let l10n = new WebConsoleUtils.l10n(STRINGS_URI);
 
 
 /**
diff --git a/browser/devtools/webconsole/panel.js b/browser/devtools/webconsole/panel.js
index 1b57889..ddad112f 100644
--- a/browser/devtools/webconsole/panel.js
+++ b/browser/devtools/webconsole/panel.js
@@ -1,21 +1,21 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
 
-loader.lazyImporter(this, "devtools", "resource://gre/modules/devtools/Loader.jsm");
-loader.lazyImporter(this, "promise", "resource://gre/modules/Promise.jsm", "Promise");
-loader.lazyGetter(this, "HUDService", () => require("devtools/webconsole/hudservice"));
-loader.lazyGetter(this, "EventEmitter", () => require("devtools/toolkit/event-emitter"));
-loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
+loader.lazyDefine(this, "devtools", "resource://gre/modules/devtools/Loader.jsm", true);
+loader.lazyDefine(this, "promise", () => require("resource://gre/modules/Promise.jsm").Promise);
+loader.lazyDefine(this, "HUDService", "devtools/webconsole/hudservice");
+loader.lazyDefine(this, "EventEmitter", "devtools/toolkit/event-emitter");
+loader.lazyDefine(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm", true);
 
 /**
  * A DevToolPanel that controls the Web Console.
  */
 function WebConsolePanel(iframeWindow, toolbox)
 {
   this._frameWindow = iframeWindow;
   this._toolbox = toolbox;
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
index e8f8ef38..0b4e24c 100644
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -4,41 +4,34 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
 
 const {Utils: WebConsoleUtils, CONSOLE_WORKER_IDS} = require("devtools/toolkit/webconsole/utils");
-
-loader.lazyServiceGetter(this, "clipboardHelper",
-                         "@mozilla.org/widget/clipboardhelper;1",
-                         "nsIClipboardHelper");
-loader.lazyImporter(this, "Services", "resource://gre/modules/Services.jsm");
-loader.lazyImporter(this, "promise", "resource://gre/modules/Promise.jsm", "Promise");
-loader.lazyGetter(this, "EventEmitter", () => require("devtools/toolkit/event-emitter"));
-loader.lazyGetter(this, "AutocompletePopup",
-                  () => require("devtools/shared/autocomplete-popup").AutocompletePopup);
-loader.lazyGetter(this, "ToolSidebar",
-                  () => require("devtools/framework/sidebar").ToolSidebar);
-loader.lazyGetter(this, "NetworkPanel",
-                  () => require("devtools/webconsole/network-panel").NetworkPanel);
-loader.lazyGetter(this, "ConsoleOutput",
-                  () => require("devtools/webconsole/console-output").ConsoleOutput);
-loader.lazyGetter(this, "Messages",
-                  () => require("devtools/webconsole/console-output").Messages);
-loader.lazyGetter(this, "asyncStorage",
-                  () => require("devtools/toolkit/shared/async-storage"));
-loader.lazyImporter(this, "EnvironmentClient", "resource://gre/modules/devtools/dbg-client.jsm");
-loader.lazyImporter(this, "ObjectClient", "resource://gre/modules/devtools/dbg-client.jsm");
-loader.lazyImporter(this, "VariablesView", "resource:///modules/devtools/VariablesView.jsm");
-loader.lazyImporter(this, "VariablesViewController", "resource:///modules/devtools/VariablesViewController.jsm");
-loader.lazyImporter(this, "PluralForm", "resource://gre/modules/PluralForm.jsm");
-loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
+const { Promise: promise } = require("resource://gre/modules/Promise.jsm");
+
+loader.lazyDefine(this, "clipboardHelper",
+  () => Cc["@mozilla.org/widget/clipboardhelper;1"].getService(Ci.nsIClipboardHelper));
+loader.lazyDefine(this, "Services", "resource://gre/modules/Services.jsm", true);
+loader.lazyDefine(this, "EventEmitter", "devtools/toolkit/event-emitter");
+loader.lazyDefine(this, "AutocompletePopup", "devtools/shared/autocomplete-popup", true);
+loader.lazyDefine(this, "ToolSidebar", "devtools/framework/sidebar", true);
+loader.lazyDefine(this, "NetworkPanel", "devtools/webconsole/network-panel", true);
+loader.lazyDefine(this, "ConsoleOutput", "devtools/webconsole/console-output", true);
+loader.lazyDefine(this, "Messages", "devtools/webconsole/console-output", true);
+loader.lazyDefine(this, "asyncStorage", "devtools/toolkit/shared/async-storage");
+loader.lazyDefine(this, "EnvironmentClient", "resource://gre/modules/devtools/dbg-client.jsm", true);
+loader.lazyDefine(this, "ObjectClient", "resource://gre/modules/devtools/dbg-client.jsm", true);
+loader.lazyDefine(this, "VariablesView", "resource:///modules/devtools/VariablesView.jsm", true);
+loader.lazyDefine(this, "VariablesViewController", "resource:///modules/devtools/VariablesViewController.jsm", true);
+loader.lazyDefine(this, "PluralForm", "resource://gre/modules/PluralForm.jsm", true);
+loader.lazyDefine(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm", true);
 
 const STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
 let l10n = new WebConsoleUtils.l10n(STRINGS_URI);
 
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
 
 const MIXED_CONTENT_LEARN_MORE = "https://developer.mozilla.org/docs/Security/MixedContent";
 
diff --git a/browser/devtools/webide/modules/runtimes.js b/browser/devtools/webide/modules/runtimes.js
index 064d51d..1d426cb 100644
--- a/browser/devtools/webide/modules/runtimes.js
+++ b/browser/devtools/webide/modules/runtimes.js
@@ -6,19 +6,19 @@ const {Cu, Ci} = require("chrome");
 const {Devices} = Cu.import("resource://gre/modules/devtools/Devices.jsm");
 const {Services} = Cu.import("resource://gre/modules/Services.jsm");
 const {Connection} = require("devtools/client/connection-manager");
 const {DebuggerServer} = require("resource://gre/modules/devtools/dbg-server.jsm");
 const {Simulators} = require("devtools/webide/simulators");
 const discovery = require("devtools/toolkit/discovery/discovery");
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const promise = require("promise");
-loader.lazyRequireGetter(this, "AuthenticationResult",
+loader.lazyDefine(this, "AuthenticationResult",
   "devtools/toolkit/security/auth", true);
-loader.lazyRequireGetter(this, "DevToolsUtils",
+loader.lazyDefine(this, "DevToolsUtils",
   "devtools/toolkit/DevToolsUtils");
 
 const Strings = Services.strings.createBundle("chrome://browser/locale/devtools/webide.properties");
 
 /**
  * Runtime and Scanner API
  *
  * |RuntimeScanners| maintains a set of |Scanner| objects that produce one or
diff --git a/browser/devtools/webide/modules/simulator-process.js b/browser/devtools/webide/modules/simulator-process.js
index 350ec59..db87a08 100644
--- a/browser/devtools/webide/modules/simulator-process.js
+++ b/browser/devtools/webide/modules/simulator-process.js
@@ -8,17 +8,17 @@
 const { Cc, Ci, Cu } = require("chrome");
 
 const Environment = require("sdk/system/environment").env;
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const promise = require("promise");
 const Subprocess = require("sdk/system/child_process/subprocess");
 const { Services } = Cu.import("resource://gre/modules/Services.jsm", {});
 
-loader.lazyGetter(this, "OS", () => {
+loader.lazyDefine(this, "OS", () => {
   const Runtime = require("sdk/system/runtime");
   switch (Runtime.OS) {
     case "Darwin":
       return "mac64";
     case "Linux":
       if (Runtime.XPCOMABI.indexOf("x86_64") === 0) {
         return "linux64";
       } else {
diff --git a/browser/devtools/webide/modules/simulators.js b/browser/devtools/webide/modules/simulators.js
index 3bccf93..fb23e44 100644
--- a/browser/devtools/webide/modules/simulators.js
+++ b/browser/devtools/webide/modules/simulators.js
@@ -1,19 +1,19 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const { Cu } = require("chrome");
 const { AddonManager } = Cu.import("resource://gre/modules/AddonManager.jsm");
 const { Task } = Cu.import("resource://gre/modules/Task.jsm", {});
-loader.lazyRequireGetter(this, "ConnectionManager", "devtools/client/connection-manager", true);
-loader.lazyRequireGetter(this, "AddonSimulatorProcess", "devtools/webide/simulator-process", true);
-loader.lazyRequireGetter(this, "OldAddonSimulatorProcess", "devtools/webide/simulator-process", true);
-loader.lazyRequireGetter(this, "CustomSimulatorProcess", "devtools/webide/simulator-process", true);
+loader.lazyDefine(this, "ConnectionManager", "devtools/client/connection-manager", true);
+loader.lazyDefine(this, "AddonSimulatorProcess", "devtools/webide/simulator-process", true);
+loader.lazyDefine(this, "OldAddonSimulatorProcess", "devtools/webide/simulator-process", true);
+loader.lazyDefine(this, "CustomSimulatorProcess", "devtools/webide/simulator-process", true);
 const asyncStorage = require("devtools/toolkit/shared/async-storage");
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const promise = require("promise");
 
 const SimulatorRegExp = new RegExp(Services.prefs.getCharPref("devtools.webide.simulatorAddonRegExp"));
 const LocaleCompare = (a, b) => {
   return a.name.toLowerCase().localeCompare(b.name.toLowerCase());
 };
diff --git a/toolkit/devtools/Loader.jsm b/toolkit/devtools/Loader.jsm
index 8d08cb5..1ef5409 100644
--- a/toolkit/devtools/Loader.jsm
+++ b/toolkit/devtools/Loader.jsm
@@ -260,21 +260,35 @@ var gNextLoaderID = 0;
 /**
  * The main devtools API.
  * In addition to a few loader-related details, this object will also include all
  * exports from the main module.  The standard instance of this loader is
  * exported as |devtools| below, but if a fresh copy of the loader is needed,
  * then a new one can also be created.
  */
 this.DevToolsLoader = function DevToolsLoader() {
+  // Deprecated. Just use `lazyDefine`.
+  let deprecated = function (fn, name) {
+    let shown = false;
+    return function (...args) {
+      // Only display one deprecation message per type
+      if (!shown) {
+        Cu.reportError(`DEPRECATED: "loader.${name}" is deprecated; please use "lazyDefine" instead.\n`);
+        shown = true;
+      }
+      return fn(...args);
+    }
+  }
+  this.lazyGetter = deprecated(XPCOMUtils.defineLazyGetter.bind(XPCOMUtils), "lazyGetter");
+  this.lazyImporter = deprecated(XPCOMUtils.defineLazyModuleGetter.bind(XPCOMUtils), "lazyImporter");
+  this.lazyServiceGetter = deprecated(XPCOMUtils.defineLazyServiceGetter.bind(XPCOMUtils), "lazyServiceGetter");
+  this.lazyRequireGetter = deprecated(this.lazyDefine.bind(this), "lazyRequireGetter");
+
   this.require = this.require.bind(this);
-  this.lazyGetter = XPCOMUtils.defineLazyGetter.bind(XPCOMUtils);
-  this.lazyImporter = XPCOMUtils.defineLazyModuleGetter.bind(XPCOMUtils);
-  this.lazyServiceGetter = XPCOMUtils.defineLazyServiceGetter.bind(XPCOMUtils);
-  this.lazyRequireGetter = this.lazyRequireGetter.bind(this);
+  this.lazyDefine = this.lazyDefine.bind(this);
 };
 
 DevToolsLoader.prototype = {
   get provider() {
     if (!this._provider) {
       this._chooseProvider();
     }
     return this._provider;
@@ -298,40 +312,52 @@ DevToolsLoader.prototype = {
   require: function() {
     if (!this._provider) {
       this._chooseProvider();
     }
     return this.require.apply(this, arguments);
   },
 
   /**
-   * Define a getter property on the given object that requires the given
-   * module. This enables delaying importing modules until the module is
-   * actually used.
+   * Define a property on the given object that is defined on the first access,
+   * either by a module or resource path, or a lambda. This enables delaying importing
+   * modules until the module is actually use.
+   *
+   * The `module` argument can be:
+   * - Loader module path: "sdk/event/core", "promise", "devtools/server/actors/profiler"
+   * - Resource URI to a JSM: "resource://gre/modules/Task.jsm"
+   * - Function: `() => Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime)`
+   *
+   * When loading a loader or JSM module, you can specify a fourth argument that determines
+   * whether or not the property name specified should be a destructured property from the
+   * module. Generally with JSMs, there's only one EXPORTED_SYMBOLS value, which would need
+   * destructured, similar to the common JS style `exports`.
    *
    * @param Object obj
    *    The object to define the property on.
    * @param String property
    *    The property name.
-   * @param String module
-   *    The module path.
+   * @param String|Function module
+   *    The module path, or a function that becomes the getter for the object.
    * @param Boolean destructure
    *    Pass true if the property name is a member of the module's exports.
+   *    Does nothing if `module` is a function.
    */
-  lazyRequireGetter: function (obj, property, module, destructure) {
+  lazyDefine: function (obj, property, module, destructure) {
     Object.defineProperty(obj, property, {
       get: () => {
         // Redefine this accessor property as a data property.
         // Delete it first, to rule out "too much recursion" in case obj is
         // a proxy whose defineProperty handler might unwittingly trigger this
         // getter again.
         delete obj[property];
-        let value = destructure
-          ? this.require(module)[property]
-          : this.require(module || property);
+        let value = typeof module === "function" ? module() :
+                    destructure ? this.require(module)[property] :
+                    this.require(module || property);
+
         Object.defineProperty(obj, property, {
           value,
           writable: true,
           configurable: true,
           enumerable: true
         });
         return value;
       },
@@ -396,20 +422,21 @@ DevToolsLoader.prototype = {
     // Pass through internal loader settings specific to this loader instance
     this._provider.invisibleToDebugger = this.invisibleToDebugger;
     this._provider.globals = {
       isWorker: false,
       reportError: Cu.reportError,
       btoa: btoa,
       _Iterator: Iterator,
       loader: {
-        lazyGetter: this.lazyGetter,
         lazyImporter: this.lazyImporter,
+        lazyGetter: this.lazyGetter,
         lazyServiceGetter: this.lazyServiceGetter,
-        lazyRequireGetter: this.lazyRequireGetter,
+        lazyRequireGetter: this.lazyDefine,
+        lazyDefine: this.lazyDefine,
         id: this.id
       },
     };
     // Lazy define console in order to load Console.jsm only when it is used
     XPCOMUtils.defineLazyGetter(this._provider.globals, "console", () => {
       return Cu.import("resource://gre/modules/devtools/Console.jsm", {}).console;
     });
 
diff --git a/toolkit/devtools/css-color.js b/toolkit/devtools/css-color.js
index c7612c6..d84fe8e 100644
--- a/toolkit/devtools/css-color.js
+++ b/toolkit/devtools/css-color.js
@@ -410,11 +410,10 @@ function setAlpha(colorValue, alpha) {
   if (!(alpha >= 0 && alpha <= 1)) {
     alpha = 1;
   }
 
   let { r, g, b } = color._getRGBATuple();
   return "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
 }
 
-loader.lazyGetter(this, "DOMUtils", function () {
-  return Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
-});
+loader.lazyDefine(this, "DOMUtils",
+  () => Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils));
diff --git a/toolkit/devtools/event-parsers.js b/toolkit/devtools/event-parsers.js
index c887248..e27e05c 100644
--- a/toolkit/devtools/event-parsers.js
+++ b/toolkit/devtools/event-parsers.js
@@ -4,20 +4,18 @@
 
 // This file contains event parsers that are then used by developer tools in
 // order to find information about events affecting an HTML element.
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
 
-loader.lazyGetter(this, "eventListenerService", () => {
-  return Cc["@mozilla.org/eventlistenerservice;1"]
-           .getService(Ci.nsIEventListenerService);
-});
+loader.lazyDefine(this, "eventListenerService",
+  () => Cc["@mozilla.org/eventlistenerservice;1"].getService(Ci.nsIEventListenerService));
 
 let parsers = [
   {
     id: "jQuery events",
     getListeners: function(node) {
       let global = node.ownerGlobal.wrappedJSObject;
       let hasJQuery = global.jQuery && global.jQuery.fn && global.jQuery.fn.jquery;
 
diff --git a/toolkit/devtools/gcli/commands/appcache.js b/toolkit/devtools/gcli/commands/appcache.js
index 743bfb3..3a70276 100644
--- a/toolkit/devtools/gcli/commands/appcache.js
+++ b/toolkit/devtools/gcli/commands/appcache.js
@@ -1,17 +1,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const l10n = require("gcli/l10n");
 
-loader.lazyImporter(this, "AppCacheUtils", "resource:///modules/devtools/AppCacheUtils.jsm");
+loader.lazyDefine(this, "AppCacheUtils", "resource:///modules/devtools/AppCacheUtils.jsm", true);
 
 exports.items = [
   {
     item: "command",
     name: "appcache",
     description: l10n.lookup("appCacheDesc")
   },
   {
diff --git a/toolkit/devtools/gcli/commands/calllog.js b/toolkit/devtools/gcli/commands/calllog.js
index 13bd056..d794d43 100644
--- a/toolkit/devtools/gcli/commands/calllog.js
+++ b/toolkit/devtools/gcli/commands/calllog.js
@@ -4,19 +4,18 @@
 
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
 const TargetFactory = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.TargetFactory;
 const l10n = require("gcli/l10n");
 const gcli = require("gcli/index");
 
-loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
-
-loader.lazyGetter(this, "Debugger", () => {
+loader.lazyDefine(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm", true);
+loader.lazyDefine(this, "Debugger", () => {
   let global = Cu.getGlobalForObject({});
   let JsDebugger = Cu.import("resource://gre/modules/jsdebugger.jsm", {});
   JsDebugger.addDebuggerToGlobal(global);
   return global.Debugger;
 });
 
 let debuggers = [];
 let chromeDebuggers = [];
diff --git a/toolkit/devtools/gcli/commands/cmd.js b/toolkit/devtools/gcli/commands/cmd.js
index 697a596..73454c0 100644
--- a/toolkit/devtools/gcli/commands/cmd.js
+++ b/toolkit/devtools/gcli/commands/cmd.js
@@ -8,26 +8,26 @@ const { Cc, Ci, Cu } = require("chrome");
 
 const { Promise: promise } = require("resource://gre/modules/Promise.jsm");
 
 const { OS } = Cu.import("resource://gre/modules/osfile.jsm", {});
 const { TextEncoder, TextDecoder } = Cu.import('resource://gre/modules/commonjs/toolkit/loader.js', {});
 const gcli = require("gcli/index");
 const l10n = require("gcli/l10n");
 
-loader.lazyGetter(this, "prefBranch", function() {
+loader.lazyDefine(this, "prefBranch", function() {
   let prefService = Cc["@mozilla.org/preferences-service;1"].getService(Ci.nsIPrefService);
   return prefService.getBranch(null).QueryInterface(Ci.nsIPrefBranch2);
 });
 
-loader.lazyGetter(this, "supportsString", function() {
+loader.lazyDefine(this, "supportsString", function() {
   return Cc["@mozilla.org/supports-string;1"].createInstance(Ci.nsISupportsString);
 });
 
-loader.lazyImporter(this, "NetUtil", "resource://gre/modules/NetUtil.jsm");
+loader.lazyDefine(this, "NetUtil", "resource://gre/modules/NetUtil.jsm", true);
 
 const PREF_DIR = "devtools.commands.dir";
 
 /**
  * Load all the .mozcmd files in the directory pointed to by PREF_DIR
  * @return A promise of an array of items suitable for gcli.addItems or
  * using in gcli.addItemsByModule
  */
diff --git a/toolkit/devtools/gcli/commands/jsb.js b/toolkit/devtools/gcli/commands/jsb.js
index 2fbb6b6..088c795 100644
--- a/toolkit/devtools/gcli/commands/jsb.js
+++ b/toolkit/devtools/gcli/commands/jsb.js
@@ -4,19 +4,19 @@
 
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
 const l10n = require("gcli/l10n");
 const XMLHttpRequest = Cc["@mozilla.org/xmlextras/xmlhttprequest;1"];
 const { devtools } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 
-loader.lazyImporter(this, "Preferences", "resource://gre/modules/Preferences.jsm");
+loader.lazyDefine(this, "Preferences", "resource://gre/modules/Preferences.jsm", true);
 
-devtools.lazyRequireGetter(this, "beautify", "devtools/jsbeautify");
+devtools.lazyDefine(this, "beautify", "devtools/jsbeautify");
 
 exports.items = [
   {
     item: "command",
     runAt: "client",
     name: "jsb",
     description: l10n.lookup("jsbDesc"),
     returnValue:"string",
diff --git a/toolkit/devtools/gcli/commands/screenshot.js b/toolkit/devtools/gcli/commands/screenshot.js
index 6446fec..6cc452d 100644
--- a/toolkit/devtools/gcli/commands/screenshot.js
+++ b/toolkit/devtools/gcli/commands/screenshot.js
@@ -3,20 +3,20 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
 const l10n = require("gcli/l10n");
 const { Services } = require("resource://gre/modules/Services.jsm");
 
-loader.lazyImporter(this, "Downloads", "resource://gre/modules/Downloads.jsm");
-loader.lazyImporter(this, "LayoutHelpers", "resource://gre/modules/devtools/LayoutHelpers.jsm");
-loader.lazyImporter(this, "Task", "resource://gre/modules/Task.jsm");
-loader.lazyImporter(this, "OS", "resource://gre/modules/osfile.jsm");
+loader.lazyDefine(this, "Downloads", "resource://gre/modules/Downloads.jsm", true);
+loader.lazyDefine(this, "LayoutHelpers", "resource://gre/modules/devtools/LayoutHelpers.jsm", true);
+loader.lazyDefine(this, "Task", "resource://gre/modules/Task.jsm", true);
+loader.lazyDefine(this, "OS", "resource://gre/modules/osfile.jsm", true);
 
 const BRAND_SHORT_NAME = Cc["@mozilla.org/intl/stringbundle;1"]
                            .getService(Ci.nsIStringBundleService)
                            .createBundle("chrome://branding/locale/brand.properties")
                            .GetStringFromName("brandShortName");
 
 // String used as an indication to generate default file name in the following
 // format: "Screen Shot yyyy-mm-dd at HH.MM.SS.png"
diff --git a/toolkit/devtools/output-parser.js b/toolkit/devtools/output-parser.js
index daac9b73..630d23e 100644
--- a/toolkit/devtools/output-parser.js
+++ b/toolkit/devtools/output-parser.js
@@ -23,19 +23,18 @@ const COLOR_TAKING_FUNCTIONS = ["linear-gradient",
                                 "repeating-linear-gradient",
                                 "-moz-repeating-linear-gradient",
                                 "radial-gradient",
                                 "-moz-radial-gradient",
                                 "repeating-radial-gradient",
                                 "-moz-repeating-radial-gradient",
                                 "drop-shadow"];
 
-loader.lazyGetter(this, "DOMUtils", function() {
-  return Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
-});
+loader.lazyDefine(this, "DOMUtils",
+  () => Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils));
 
 /**
  * This module is used to process text for output by developer tools. This means
  * linking JS files with the debugger, CSS files with the style editor, JS
  * functions with the debugger, placing color swatches next to colors and
  * adding doorhanger previews where possible (images, angles, lengths,
  * border radius, cubic-bezier etc.).
  *
diff --git a/toolkit/devtools/security/auth.js b/toolkit/devtools/security/auth.js
index 6bb98b4..326bc26 100644
--- a/toolkit/devtools/security/auth.js
+++ b/toolkit/devtools/security/auth.js
@@ -6,24 +6,24 @@
 
 "use strict";
 
 let { Ci, Cc } = require("chrome");
 let Services = require("Services");
 let promise = require("promise");
 let DevToolsUtils = require("devtools/toolkit/DevToolsUtils");
 let { dumpn, dumpv } = DevToolsUtils;
-loader.lazyRequireGetter(this, "prompt",
+loader.lazyDefine(this, "prompt",
   "devtools/toolkit/security/prompt");
-loader.lazyRequireGetter(this, "cert",
+loader.lazyDefine(this, "cert",
   "devtools/toolkit/security/cert");
-loader.lazyRequireGetter(this, "asyncStorage",
+loader.lazyDefine(this, "asyncStorage",
   "devtools/toolkit/shared/async-storage");
-DevToolsUtils.defineLazyModuleGetter(this, "Task",
-  "resource://gre/modules/Task.jsm");
+loader.lazyDefine(this, "Task",
+  "resource://gre/modules/Task.jsm", true);
 
 /**
  * A simple enum-like object with keys mirrored to values.
  * This makes comparison to a specfic value simpler without having to repeat and
  * mis-type the value.
  */
 function createEnum(obj) {
   for (let key in obj) {
diff --git a/toolkit/devtools/security/prompt.js b/toolkit/devtools/security/prompt.js
index 0001666..54fea74 100644
--- a/toolkit/devtools/security/prompt.js
+++ b/toolkit/devtools/security/prompt.js
@@ -4,19 +4,19 @@
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 let { Ci } = require("chrome");
 let Services = require("Services");
 let DevToolsUtils = require("devtools/toolkit/DevToolsUtils");
-loader.lazyRequireGetter(this, "DebuggerSocket",
+loader.lazyDefine(this, "DebuggerSocket",
   "devtools/toolkit/security/socket", true);
-loader.lazyRequireGetter(this, "AuthenticationResult",
+loader.lazyDefine(this, "AuthenticationResult",
   "devtools/toolkit/security/auth", true);
 
 DevToolsUtils.defineLazyGetter(this, "bundle", () => {
   const DBG_STRINGS_URI = "chrome://global/locale/devtools/debugger.properties";
   return Services.strings.createBundle(DBG_STRINGS_URI);
 });
 
 let Client = exports.Client = {};
diff --git a/toolkit/devtools/security/socket.js b/toolkit/devtools/security/socket.js
index 07ed262..63ee1d2 100644
--- a/toolkit/devtools/security/socket.js
+++ b/toolkit/devtools/security/socket.js
@@ -10,52 +10,44 @@ let { Ci, Cc, CC, Cr, Cu } = require("chrome");
 
 // Ensure PSM is initialized to support TLS sockets
 Cc["@mozilla.org/psm;1"].getService(Ci.nsISupports);
 
 let Services = require("Services");
 let promise = require("promise");
 let DevToolsUtils = require("devtools/toolkit/DevToolsUtils");
 let { dumpn, dumpv } = DevToolsUtils;
-loader.lazyRequireGetter(this, "DebuggerTransport",
+loader.lazyDefine(this, "DebuggerTransport",
   "devtools/toolkit/transport/transport", true);
-loader.lazyRequireGetter(this, "DebuggerServer",
+loader.lazyDefine(this, "DebuggerServer",
   "devtools/server/main", true);
-loader.lazyRequireGetter(this, "discovery",
+loader.lazyDefine(this, "discovery",
   "devtools/toolkit/discovery/discovery");
-loader.lazyRequireGetter(this, "cert",
+loader.lazyDefine(this, "cert",
   "devtools/toolkit/security/cert");
-loader.lazyRequireGetter(this, "Authenticators",
+loader.lazyDefine(this, "Authenticators",
   "devtools/toolkit/security/auth", true);
-loader.lazyRequireGetter(this, "AuthenticationResult",
+loader.lazyDefine(this, "AuthenticationResult",
   "devtools/toolkit/security/auth", true);
-loader.lazyRequireGetter(this, "setTimeout", "Timer", true);
-loader.lazyRequireGetter(this, "clearTimeout", "Timer", true);
+loader.lazyDefine(this, "setTimeout", "Timer", true);
+loader.lazyDefine(this, "clearTimeout", "Timer", true);
 
-DevToolsUtils.defineLazyGetter(this, "nsFile", () => {
-  return CC("@mozilla.org/file/local;1", "nsIFile", "initWithPath");
-});
+loader.lazyDefine(this, "nsFile",
+  () => CC("@mozilla.org/file/local;1", "nsIFile", "initWithPath"));
 
-DevToolsUtils.defineLazyGetter(this, "socketTransportService", () => {
-  return Cc["@mozilla.org/network/socket-transport-service;1"]
-         .getService(Ci.nsISocketTransportService);
-});
+loader.lazyDefine(this, "socketTransportService",
+  () => Cc["@mozilla.org/network/socket-transport-service;1"].getService(Ci.nsISocketTransportService));
 
-DevToolsUtils.defineLazyGetter(this, "certOverrideService", () => {
-  return Cc["@mozilla.org/security/certoverride;1"]
-         .getService(Ci.nsICertOverrideService);
-});
+loader.lazyDefine(this, "certOverrideService",
+  () => Cc["@mozilla.org/security/certoverride;1"].getService(Ci.nsICertOverrideService));
 
-DevToolsUtils.defineLazyGetter(this, "nssErrorsService", () => {
-  return Cc["@mozilla.org/nss_errors_service;1"]
-         .getService(Ci.nsINSSErrorsService);
-});
+loader.lazyDefine(this, "nssErrorsService",
+  () => Cc["@mozilla.org/nss_errors_service;1"].getService(Ci.nsINSSErrorsService));
 
-DevToolsUtils.defineLazyModuleGetter(this, "Task",
-  "resource://gre/modules/Task.jsm");
+loader.lazyDefine(this, "Task", "resource://gre/modules/Task.jsm", true);
 
 let DebuggerSocket = {};
 
 /**
  * Connects to a debugger server socket.
  *
  * @param host string
  *        The host name or IP address of the debugger server.
@@ -518,19 +510,18 @@ SocketListener.prototype = {
 
   onStopListening: function(socket, status) {
     dumpn("onStopListening, status: " + status);
   }
 
 };
 
 // Client must complete TLS handshake within this window (ms)
-loader.lazyGetter(this, "HANDSHAKE_TIMEOUT", () => {
-  return Services.prefs.getIntPref("devtools.remote.tls-handshake-timeout");
-});
+loader.lazyDefine(this, "HANDSHAKE_TIMEOUT",
+  () => Services.prefs.getIntPref("devtools.remote.tls-handshake-timeout"));
 
 /**
  * A |ServerSocketConnection| is created by a |SocketListener| for each accepted
  * incoming socket.  This is a short-lived object used to implement
  * authentication and verify encryption prior to handing off the connection to
  * the |DebuggerServer|.
  */
 function ServerSocketConnection(listener, socketTransport) {
diff --git a/toolkit/devtools/security/tests/unit/test_oob_cert_auth.js b/toolkit/devtools/security/tests/unit/test_oob_cert_auth.js
index 8ea125f..fa74b28 100644
--- a/toolkit/devtools/security/tests/unit/test_oob_cert_auth.js
+++ b/toolkit/devtools/security/tests/unit/test_oob_cert_auth.js
@@ -1,14 +1,14 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
-devtools.lazyRequireGetter(this, "cert",
+devtools.lazyDefine(this, "cert",
   "devtools/toolkit/security/cert");
 
 // Test basic functionality of DevTools client and server OOB_CERT auth (used
 // with WiFi debugging)
 function run_test() {
   // Need profile dir to store the key / cert
   do_get_profile();
   // Ensure PSM is initialized
diff --git a/toolkit/devtools/server/actors/actor-registry.js b/toolkit/devtools/server/actors/actor-registry.js
index 94b3ecf..615b33b 100644
--- a/toolkit/devtools/server/actors/actor-registry.js
+++ b/toolkit/devtools/server/actors/actor-registry.js
@@ -8,17 +8,17 @@ const protocol = require("devtools/server/protocol");
 const { method, custom, Arg, Option, RetVal } = protocol;
 
 const { Cu, CC, components } = require("chrome");
 const { Promise: promise } = Cu.import("resource://gre/modules/Promise.jsm", {});
 const Services = require("Services");
 const { DebuggerServer } = require("devtools/server/main");
 const { registerActor, unregisterActor } = require("devtools/server/actors/utils/actor-registry-utils");
 
-loader.lazyImporter(this, "NetUtil", "resource://gre/modules/NetUtil.jsm");
+loader.lazyDefine(this, "NetUtil", "resource://gre/modules/NetUtil.jsm", true);
 
 /**
  * The ActorActor gives you a handle to an actor you've dynamically
  * registered and allows you to unregister it.
  */
 const ActorActor = protocol.ActorClass({
   typeName: "actorActor",
 
diff --git a/toolkit/devtools/server/actors/addon.js b/toolkit/devtools/server/actors/addon.js
index b7a96ed..45457de 100644
--- a/toolkit/devtools/server/actors/addon.js
+++ b/toolkit/devtools/server/actors/addon.js
@@ -8,22 +8,21 @@ let { Ci, Cu } = require("chrome");
 let Services = require("Services");
 let { ActorPool } = require("devtools/server/actors/common");
 let { TabSources } = require("./utils/TabSources");
 let makeDebugger = require("./utils/make-debugger");
 let { ConsoleAPIListener } = require("devtools/toolkit/webconsole/utils");
 let DevToolsUtils = require("devtools/toolkit/DevToolsUtils");
 let { dbg_assert, update } = DevToolsUtils;
 
-loader.lazyRequireGetter(this, "AddonThreadActor", "devtools/server/actors/script", true);
-loader.lazyRequireGetter(this, "unwrapDebuggerObjectGlobal", "devtools/server/actors/script", true);
-loader.lazyRequireGetter(this, "mapURIToAddonID", "devtools/server/actors/utils/map-uri-to-addon-id");
-loader.lazyRequireGetter(this, "WebConsoleActor", "devtools/server/actors/webconsole", true);
-
-loader.lazyImporter(this, "AddonManager", "resource://gre/modules/AddonManager.jsm");
+loader.lazyDefine(this, "AddonThreadActor", "devtools/server/actors/script", true);
+loader.lazyDefine(this, "unwrapDebuggerObjectGlobal", "devtools/server/actors/script", true);
+loader.lazyDefine(this, "mapURIToAddonID", "devtools/server/actors/utils/map-uri-to-addon-id");
+loader.lazyDefine(this, "WebConsoleActor", "devtools/server/actors/webconsole", true);
+loader.lazyDefine(this, "AddonManager", "resource://gre/modules/AddonManager.jsm", true);
 
 function BrowserAddonActor(aConnection, aAddon) {
   this.conn = aConnection;
   this._addon = aAddon;
   this._contextPool = new ActorPool(this.conn);
   this.conn.addActorPool(this._contextPool);
   this.threadActor = null;
   this._global = null;
diff --git a/toolkit/devtools/server/actors/csscoverage.js b/toolkit/devtools/server/actors/csscoverage.js
index 18b0456..a490fef 100644
--- a/toolkit/devtools/server/actors/csscoverage.js
+++ b/toolkit/devtools/server/actors/csscoverage.js
@@ -8,28 +8,21 @@ const { Cc, Ci, Cu } = require("chrome");
 
 const Services = require("Services");
 const { XPCOMUtils } = require("resource://gre/modules/XPCOMUtils.jsm");
 
 const events = require("sdk/event/core");
 const protocol = require("devtools/server/protocol");
 const { method, custom, RetVal, Arg } = protocol;
 
-loader.lazyGetter(this, "gDevTools", () => {
-  return require("resource:///modules/devtools/gDevTools.jsm").gDevTools;
-});
-loader.lazyGetter(this, "DOMUtils", () => {
-  return Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils)
-});
-loader.lazyGetter(this, "stylesheets", () => {
-  return require("devtools/server/actors/stylesheets");
-});
-loader.lazyGetter(this, "CssLogic", () => {
-  return require("devtools/styleinspector/css-logic").CssLogic;
-});
+loader.lazyDefine(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm", true);
+loader.lazyDefine(this, "DOMUtils",
+  () => Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils))
+loader.lazyDefine(this, "stylesheets", "devtools/server/actors/stylesheets");
+loader.lazyDefine(this, "CssLogic", "devtools/styleinspector/css-logic", true);
 
 const CSSRule = Ci.nsIDOMCSSRule;
 
 const MAX_UNUSED_RULES = 10000;
 
 /**
  * Allow: let foo = l10n.lookup("csscoverageFoo");
  */
diff --git a/toolkit/devtools/server/actors/highlighter.js b/toolkit/devtools/server/actors/highlighter.js
index 1a0f7c5..2bb7e23 100644
--- a/toolkit/devtools/server/actors/highlighter.js
+++ b/toolkit/devtools/server/actors/highlighter.js
@@ -8,25 +8,21 @@
 const {Cu, Cc, Ci} = require("chrome");
 const protocol = require("devtools/server/protocol");
 const {Arg, Option, method, RetVal} = protocol;
 const events = require("sdk/event/core");
 const Heritage = require("sdk/core/heritage");
 const EventEmitter = require("devtools/toolkit/event-emitter");
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
-loader.lazyRequireGetter(this, "CssLogic",
-  "devtools/styleinspector/css-logic", true);
-loader.lazyRequireGetter(this, "setIgnoreLayoutChanges",
-  "devtools/server/actors/layout", true);
-loader.lazyGetter(this, "DOMUtils", function() {
-  return Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
-});
-loader.lazyImporter(this, "LayoutHelpers",
-  "resource://gre/modules/devtools/LayoutHelpers.jsm");
+loader.lazyDefine(this, "CssLogic", "devtools/styleinspector/css-logic", true);
+loader.lazyDefine(this, "setIgnoreLayoutChanges", "devtools/server/actors/layout", true);
+loader.lazyDefine(this, "LayoutHelpers", "resource://gre/modules/devtools/LayoutHelpers.jsm", true);
+loader.lazyDefine(this, "DOMUtils",
+  () => Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils));
 
 // FIXME: add ":visited" and ":link" after bug 713106 is fixed
 const PSEUDO_CLASSES = [":hover", ":active", ":focus"];
 // Note that the order of items in this array is important because it is used
 // for drawing the BoxModelHighlighter's path elements correctly.
 const BOX_MODEL_REGIONS = ["margin", "border", "padding", "content"];
 const BOX_MODEL_SIDES = ["top", "right", "bottom", "left"];
 const SVG_NS = "http://www.w3.org/2000/svg";
diff --git a/toolkit/devtools/server/actors/inspector.js b/toolkit/devtools/server/actors/inspector.js
index 1ef0736..9da1406 100644
--- a/toolkit/devtools/server/actors/inspector.js
+++ b/toolkit/devtools/server/actors/inspector.js
@@ -113,17 +113,17 @@ const PSEUDO_SELECTORS = [
 ];
 
 
 let HELPER_SHEET = ".__fx-devtools-hide-shortcut__ { visibility: hidden !important } ";
 HELPER_SHEET += ":-moz-devtools-highlighted { outline: 2px dashed #F06!important; outline-offset: -2px!important } ";
 
 Cu.import("resource://gre/modules/devtools/LayoutHelpers.jsm");
 
-loader.lazyRequireGetter(this, "DevToolsUtils",
+loader.lazyDefine(this, "DevToolsUtils",
                          "devtools/toolkit/DevToolsUtils");
 
 loader.lazyGetter(this, "DOMParser", function() {
   return Cc["@mozilla.org/xmlextras/domparser;1"].createInstance(Ci.nsIDOMParser);
 });
 
 loader.lazyGetter(this, "eventListenerService", function() {
   return Cc["@mozilla.org/eventlistenerservice;1"]
diff --git a/toolkit/devtools/server/actors/memory.js b/toolkit/devtools/server/actors/memory.js
index 78d6b41..6a5a3bc 100644
--- a/toolkit/devtools/server/actors/memory.js
+++ b/toolkit/devtools/server/actors/memory.js
@@ -3,18 +3,18 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const protocol = require("devtools/server/protocol");
 const { method, RetVal, Arg, types } = protocol;
 const { Memory } = require("devtools/toolkit/shared/memory");
 const { actorBridge } = require("devtools/server/actors/common");
-loader.lazyRequireGetter(this, "events", "sdk/event/core");
-loader.lazyRequireGetter(this, "StackFrameCache",
+loader.lazyDefine(this, "events", "sdk/event/core");
+loader.lazyDefine(this, "StackFrameCache",
                          "devtools/server/actors/utils/stack", true);
 
 types.addDictType("AllocationsRecordingOptions", {
   // The probability we sample any given allocation when recording
   // allocations. Must be between 0.0 and 1.0. Defaults to 1.0, or sampling
   // every allocation.
   probability: "number",
 
diff --git a/toolkit/devtools/server/actors/profiler.js b/toolkit/devtools/server/actors/profiler.js
index 80a2293..5ac8020 100644
--- a/toolkit/devtools/server/actors/profiler.js
+++ b/toolkit/devtools/server/actors/profiler.js
@@ -20,17 +20,17 @@ let DEFAULT_PROFILER_OPTIONS = {
 
 /**
  * The nsIProfiler is target agnostic and interacts with the whole platform.
  * Therefore, special care needs to be given to make sure different actor
  * consumers (i.e. "toolboxes") don't interfere with each other.
  */
 let gProfilerConsumers = 0;
 
-loader.lazyGetter(this, "nsIProfilerModule", () => {
+loader.lazyDefine(this, "nsIProfilerModule", () => {
   return Cc["@mozilla.org/tools/profiler;1"].getService(Ci.nsIProfiler);
 });
 
 /**
  * The profiler actor provides remote access to the built-in nsIProfiler module.
  */
 function ProfilerActor() {
   gProfilerConsumers++;
diff --git a/toolkit/devtools/server/actors/promises.js b/toolkit/devtools/server/actors/promises.js
index 02352d3..5a4bde2 100644
--- a/toolkit/devtools/server/actors/promises.js
+++ b/toolkit/devtools/server/actors/promises.js
@@ -5,17 +5,17 @@
 "use strict";
 
 const protocol = require("devtools/server/protocol");
 const { method, RetVal, Arg, types } = protocol;
 const { expectState, ActorPool } = require("devtools/server/actors/common");
 const { ObjectActor,
         createValueGrip } = require("devtools/server/actors/object");
 const DevToolsUtils = require("devtools/toolkit/DevToolsUtils");
-loader.lazyRequireGetter(this, "events", "sdk/event/core");
+loader.lazyDefine(this, "events", "sdk/event/core");
 
 /* global events */
 
 // Teach protocol.js how to deal with legacy actor types
 types.addType("ObjectActor", {
   write: actor => actor.grip(),
   read: grip => grip
 });
diff --git a/toolkit/devtools/server/actors/root.js b/toolkit/devtools/server/actors/root.js
index e84822b..2ed4466 100644
--- a/toolkit/devtools/server/actors/root.js
+++ b/toolkit/devtools/server/actors/root.js
@@ -6,19 +6,18 @@
 
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
 const Services = require("Services");
 const { ActorPool, appendExtraActors, createExtraActors } = require("devtools/server/actors/common");
 const { DebuggerServer } = require("devtools/server/main");
 
-loader.lazyGetter(this, "ppmm", () => {
-  return Cc["@mozilla.org/parentprocessmessagemanager;1"].getService(Ci.nsIMessageBroadcaster);
-});
+loader.lazyDefine(this, "ppmm",
+  () => Cc["@mozilla.org/parentprocessmessagemanager;1"].getService(Ci.nsIMessageBroadcaster));
 
 /* Root actor for the remote debugging protocol. */
 
 /**
  * Create a remote debugging protocol root actor.
  *
  * @param aConnection
  *     The DebuggerServerConnection whose root actor we are constructing.
diff --git a/toolkit/devtools/server/actors/script.js b/toolkit/devtools/server/actors/script.js
index a3c6d3f..be030ab 100644
--- a/toolkit/devtools/server/actors/script.js
+++ b/toolkit/devtools/server/actors/script.js
@@ -17,26 +17,26 @@ const { dirname, joinURI } = require("devtools/toolkit/path");
 const promise = require("promise");
 const PromiseDebugging = require("PromiseDebugging");
 const xpcInspector = require("xpcInspector");
 const ScriptStore = require("./utils/ScriptStore");
 const {DevToolsWorker} = require("devtools/toolkit/shared/worker.js");
 
 const { defer, resolve, reject, all } = require("devtools/toolkit/deprecated-sync-thenables");
 
-loader.lazyGetter(this, "Debugger", () => {
+loader.lazyDefine(this, "Debugger", () => {
   let Debugger = require("Debugger");
   hackDebugger(Debugger);
   return Debugger;
 });
-loader.lazyRequireGetter(this, "SourceMapConsumer", "source-map", true);
-loader.lazyRequireGetter(this, "SourceMapGenerator", "source-map", true);
-loader.lazyRequireGetter(this, "CssLogic", "devtools/styleinspector/css-logic", true);
-loader.lazyRequireGetter(this, "events", "sdk/event/core");
-loader.lazyRequireGetter(this, "mapURIToAddonID", "devtools/server/actors/utils/map-uri-to-addon-id");
+loader.lazyDefine(this, "SourceMapConsumer", "source-map", true);
+loader.lazyDefine(this, "SourceMapGenerator", "source-map", true);
+loader.lazyDefine(this, "CssLogic", "devtools/styleinspector/css-logic", true);
+loader.lazyDefine(this, "events", "sdk/event/core");
+loader.lazyDefine(this, "mapURIToAddonID", "devtools/server/actors/utils/map-uri-to-addon-id");
 
 /**
  * A BreakpointActorMap is a map from locations to instances of BreakpointActor.
  */
 function BreakpointActorMap() {
   this._size = 0;
   this._actors = {};
 }
diff --git a/toolkit/devtools/server/actors/storage.js b/toolkit/devtools/server/actors/storage.js
index b216138..9bf0b95 100644
--- a/toolkit/devtools/server/actors/storage.js
+++ b/toolkit/devtools/server/actors/storage.js
@@ -15,20 +15,20 @@ try {
 }
 const {async} = require("devtools/async-utils");
 const {Arg, Option, method, RetVal, types} = protocol;
 const {LongStringActor} = require("devtools/server/actors/string");
 const {DebuggerServer} = require("devtools/server/main");
 const Services = require("Services");
 const promise = require("promise");
 
-loader.lazyImporter(this, "OS", "resource://gre/modules/osfile.jsm");
-loader.lazyImporter(this, "Sqlite", "resource://gre/modules/Sqlite.jsm");
-loader.lazyImporter(this, "LayoutHelpers",
-                    "resource://gre/modules/devtools/LayoutHelpers.jsm");
+loader.lazyDefine(this, "OS", "resource://gre/modules/osfile.jsm", true);
+loader.lazyDefine(this, "Sqlite", "resource://gre/modules/Sqlite.jsm", true);
+loader.lazyDefine(this, "LayoutHelpers",
+                    "resource://gre/modules/devtools/LayoutHelpers.jsm", true);
 
 let gTrackedMessageManager = new Map();
 
 // Maximum number of cookies/local storage key-value-pairs that can be sent
 // over the wire to the client in one request.
 const MAX_STORE_OBJECT_COUNT = 50;
 // Interval for the batch job that sends the accumilated update packets to the
 // client (ms).
diff --git a/toolkit/devtools/server/actors/styleeditor.js b/toolkit/devtools/server/actors/styleeditor.js
index 15e548e..34aa0e2 100644
--- a/toolkit/devtools/server/actors/styleeditor.js
+++ b/toolkit/devtools/server/actors/styleeditor.js
@@ -14,17 +14,17 @@ Cu.import("resource://gre/modules/devtools/SourceMap.jsm");
 
 const {Promise: promise} = Cu.import("resource://gre/modules/Promise.jsm", {});
 const events = require("sdk/event/core");
 const protocol = require("devtools/server/protocol");
 const {Arg, Option, method, RetVal, types} = protocol;
 const {LongStringActor, ShortLongString} = require("devtools/server/actors/string");
 const {fetch} = require("devtools/toolkit/DevToolsUtils");
 
-loader.lazyGetter(this, "CssLogic", () => require("devtools/styleinspector/css-logic").CssLogic);
+loader.lazyDefine(this, "CssLogic", "devtools/styleinspector/css-logic", true);
 
 let TRANSITION_CLASS = "moz-styleeditor-transitioning";
 let TRANSITION_DURATION_MS = 500;
 let TRANSITION_RULE = "\
 :root.moz-styleeditor-transitioning, :root.moz-styleeditor-transitioning * {\
 transition-duration: " + TRANSITION_DURATION_MS + "ms !important; \
 transition-delay: 0ms !important;\
 transition-timing-function: ease-out !important;\
diff --git a/toolkit/devtools/server/actors/styles.js b/toolkit/devtools/server/actors/styles.js
index e947dcf..c7540d8 100644
--- a/toolkit/devtools/server/actors/styles.js
+++ b/toolkit/devtools/server/actors/styles.js
@@ -12,20 +12,18 @@ const {Arg, Option, method, RetVal, types} = protocol;
 const events = require("sdk/event/core");
 const {Class} = require("sdk/core/heritage");
 const {LongStringActor} = require("devtools/server/actors/string");
 const {PSEUDO_ELEMENT_SET} = require("devtools/styleinspector/css-logic");
 
 // This will add the "stylesheet" actor type for protocol.js to recognize
 require("devtools/server/actors/stylesheets");
 
-loader.lazyGetter(this, "CssLogic", () => {
-  return require("devtools/styleinspector/css-logic").CssLogic;
-});
-loader.lazyGetter(this, "DOMUtils", () => {
+loader.lazyDefine(this, "CssLogic", "devtools/styleinspector/css-logic", true);
+loader.lazyDefine(this, "DOMUtils", () => {
   return Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
 });
 
 // The PageStyle actor flattens the DOM CSS objects a little bit, merging
 // Rules and their Styles into one actor.  For elements (which have a style
 // but no associated rule) we fake a rule with the following style id.
 const ELEMENT_STYLE = 100;
 exports.ELEMENT_STYLE = ELEMENT_STYLE;
diff --git a/toolkit/devtools/server/actors/stylesheets.js b/toolkit/devtools/server/actors/stylesheets.js
index a6adc53..7d54575 100644
--- a/toolkit/devtools/server/actors/stylesheets.js
+++ b/toolkit/devtools/server/actors/stylesheets.js
@@ -16,17 +16,17 @@ Cu.import("resource://gre/modules/Task.jsm");
 const {Promise: promise} = Cu.import("resource://gre/modules/Promise.jsm", {});
 const events = require("sdk/event/core");
 const protocol = require("devtools/server/protocol");
 const {Arg, Option, method, RetVal, types} = protocol;
 const {LongStringActor, ShortLongString} = require("devtools/server/actors/string");
 const {fetch} = require("devtools/toolkit/DevToolsUtils");
 const {listenOnce} = require("devtools/async-utils");
 
-loader.lazyGetter(this, "CssLogic", () => require("devtools/styleinspector/css-logic").CssLogic);
+loader.lazyDefine(this, "CssLogic", "devtools/styleinspector/css-logic", true);
 
 let TRANSITION_CLASS = "moz-styleeditor-transitioning";
 let TRANSITION_DURATION_MS = 500;
 let TRANSITION_BUFFER_MS = 1000;
 let TRANSITION_RULE_SELECTOR =
 ".moz-styleeditor-transitioning:root, .moz-styleeditor-transitioning:root *";
 let TRANSITION_RULE = TRANSITION_RULE_SELECTOR + " {\
 transition-duration: " + TRANSITION_DURATION_MS + "ms !important; \
diff --git a/toolkit/devtools/server/actors/utils/TabSources.js b/toolkit/devtools/server/actors/utils/TabSources.js
index d03022a..d54da32 100644
--- a/toolkit/devtools/server/actors/utils/TabSources.js
+++ b/toolkit/devtools/server/actors/utils/TabSources.js
@@ -7,20 +7,20 @@
 const { Ci, Cu } = require("chrome");
 const Services = require("Services");
 const DevToolsUtils = require("devtools/toolkit/DevToolsUtils");
 const { dbg_assert, fetch } = DevToolsUtils;
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const { OriginalLocation, GeneratedLocation, getOffsetColumn } = require("devtools/server/actors/common");
 const { resolve } = require("promise");
 
-loader.lazyRequireGetter(this, "SourceActor", "devtools/server/actors/script", true);
-loader.lazyRequireGetter(this, "isEvalSource", "devtools/server/actors/script", true);
-loader.lazyRequireGetter(this, "SourceMapConsumer", "source-map", true);
-loader.lazyRequireGetter(this, "SourceMapGenerator", "source-map", true);
+loader.lazyDefine(this, "SourceActor", "devtools/server/actors/script", true);
+loader.lazyDefine(this, "isEvalSource", "devtools/server/actors/script", true);
+loader.lazyDefine(this, "SourceMapConsumer", "source-map", true);
+loader.lazyDefine(this, "SourceMapGenerator", "source-map", true);
 
 /**
  * Manages the sources for a thread. Handles source maps, locations in the
  * sources, etc for ThreadActors.
  */
 function TabSources(threadActor, allowSourceFn=() => true) {
   EventEmitter.decorate(this);
 
diff --git a/toolkit/devtools/server/actors/webbrowser.js b/toolkit/devtools/server/actors/webbrowser.js
index 7223bc9..6bbe418 100644
--- a/toolkit/devtools/server/actors/webbrowser.js
+++ b/toolkit/devtools/server/actors/webbrowser.js
@@ -14,28 +14,28 @@ let { DebuggerServer } = require("devtools/server/main");
 let DevToolsUtils = require("devtools/toolkit/DevToolsUtils");
 let { dbg_assert } = DevToolsUtils;
 let { TabSources } = require("./utils/TabSources");
 let makeDebugger = require("./utils/make-debugger");
 let { WorkerActorList } = require("devtools/server/actors/worker");
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 
-loader.lazyRequireGetter(this, "RootActor", "devtools/server/actors/root", true);
-loader.lazyRequireGetter(this, "ThreadActor", "devtools/server/actors/script", true);
-loader.lazyRequireGetter(this, "unwrapDebuggerObjectGlobal", "devtools/server/actors/script", true);
-loader.lazyRequireGetter(this, "BrowserAddonActor", "devtools/server/actors/addon", true);
-loader.lazyImporter(this, "AddonManager", "resource://gre/modules/AddonManager.jsm");
+loader.lazyDefine(this, "RootActor", "devtools/server/actors/root", true);
+loader.lazyDefine(this, "ThreadActor", "devtools/server/actors/script", true);
+loader.lazyDefine(this, "unwrapDebuggerObjectGlobal", "devtools/server/actors/script", true);
+loader.lazyDefine(this, "BrowserAddonActor", "devtools/server/actors/addon", true);
+loader.lazyDefine(this, "AddonManager", "resource://gre/modules/AddonManager.jsm", true);
 
 // Assumptions on events module:
 // events needs to be dispatched synchronously,
 // by calling the listeners in the order or registration.
-loader.lazyRequireGetter(this, "events", "sdk/event/core");
+loader.lazyDefine(this, "events", "sdk/event/core");
 
-loader.lazyRequireGetter(this, "StyleSheetActor", "devtools/server/actors/stylesheets", true);
+loader.lazyDefine(this, "StyleSheetActor", "devtools/server/actors/stylesheets", true);
 
 function getWindowID(window) {
   return window.QueryInterface(Ci.nsIInterfaceRequestor)
                .getInterface(Ci.nsIDOMWindowUtils)
                .currentInnerWindowID;
 }
 
 function getDocShellChromeEventHandler(docShell) {
diff --git a/toolkit/devtools/server/main.js b/toolkit/devtools/server/main.js
index f18087f..def4711 100644
--- a/toolkit/devtools/server/main.js
+++ b/toolkit/devtools/server/main.js
@@ -77,17 +77,17 @@ function loadSubScript(aURL)
                    (e.fileName ? "at " + e.fileName + " : " + e.lineNumber + "\n" : "") +
                    e + " - " + e.stack + "\n";
     dump(errorStr);
     reportError(errorStr);
     throw e;
   }
 }
 
-loader.lazyRequireGetter(this, "events", "sdk/event/core");
+loader.lazyDefine(this, "events", "sdk/event/core");
 
 let {defer, resolve, reject, all} = require("devtools/toolkit/deprecated-sync-thenables");
 this.defer = defer;
 this.resolve = resolve;
 this.reject = reject;
 this.all = all;
 
 var gRegisteredModules = Object.create(null);
diff --git a/toolkit/devtools/shared/memory.js b/toolkit/devtools/shared/memory.js
index 4409617..3920b99 100644
--- a/toolkit/devtools/shared/memory.js
+++ b/toolkit/devtools/shared/memory.js
@@ -3,19 +3,19 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
 const { reportException } = require("devtools/toolkit/DevToolsUtils");
 const { Class } = require("sdk/core/heritage");
 const { expectState } = require("devtools/server/actors/common");
-loader.lazyRequireGetter(this, "events", "sdk/event/core");
-loader.lazyRequireGetter(this, "EventTarget", "sdk/event/target", true);
-loader.lazyRequireGetter(this, "StackFrameCache",
+loader.lazyDefine(this, "events", "sdk/event/core");
+loader.lazyDefine(this, "EventTarget", "sdk/event/target", true);
+loader.lazyDefine(this, "StackFrameCache",
                          "devtools/server/actors/utils/stack", true);
 /**
  * A class that returns memory data for a parent actor's window.
  * Using a tab-scoped actor with this instance will measure the memory footprint of its
  * parent tab. Using a global-scoped actor instance however, will measure the memory
  * footprint of the chrome window referenced by its root actor.
  *
  * To be consumed by actor's, like MemoryActor using this module to
diff --git a/toolkit/devtools/shared/system.js b/toolkit/devtools/shared/system.js
index 9b56086..c848567 100644
--- a/toolkit/devtools/shared/system.js
+++ b/toolkit/devtools/shared/system.js
@@ -1,29 +1,26 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { Cc, Ci, Cu } = require("chrome");
 const { Task } = require("resource://gre/modules/Task.jsm");
 
-loader.lazyRequireGetter(this, "Services");
-loader.lazyRequireGetter(this, "promise");
-loader.lazyRequireGetter(this, "OS", "resource://gre/modules/commonjs/node/os");
-loader.lazyRequireGetter(this, "DebuggerServer", "devtools/server/main", true);
-loader.lazyRequireGetter(this, "AppConstants",
+loader.lazyDefine(this, "Services");
+loader.lazyDefine(this, "promise");
+loader.lazyDefine(this, "OS", "resource://gre/modules/commonjs/node/os");
+loader.lazyDefine(this, "DebuggerServer", "devtools/server/main", true);
+loader.lazyDefine(this, "AppConstants",
   "resource://gre/modules/AppConstants.jsm", true);
-loader.lazyGetter(this, "screenManager", () => {
-  return Cc["@mozilla.org/gfx/screenmanager;1"].getService(Ci.nsIScreenManager);
-});
-loader.lazyGetter(this, "oscpu", () => {
-  return Cc["@mozilla.org/network/protocol;1?name=http"]
-           .getService(Ci.nsIHttpProtocolHandler).oscpu;
-});
+loader.lazyDefine(this, "screenManager",
+  () => Cc["@mozilla.org/gfx/screenmanager;1"].getService(Ci.nsIScreenManager));
+loader.lazyDefine(this, "oscpu",
+  () => Cc["@mozilla.org/network/protocol;1?name=http"].getService(Ci.nsIHttpProtocolHandler).oscpu);
 
 const APP_MAP = {
   "{ec8030f7-c20a-464f-9b0e-13a3a9e97384}": "firefox",
   "{3550f703-e582-4d05-9a08-453d09bdfdc6}": "thunderbird",
   "{92650c4d-4b8e-4d2a-b7eb-24ecf4f6b63a}": "seamonkey",
   "{718e30fb-e89b-41dd-9da7-e25a45638b28}": "sunbird",
   "{3c2e2abc-06d4-11e1-ac3b-374f68613e61}": "b2g",
   "{aa3c5121-dab2-40e2-81ca-7ea25febc110}": "mobile/android",
diff --git a/toolkit/devtools/shared/timeline.js b/toolkit/devtools/shared/timeline.js
index 93b8e25..8464620 100644
--- a/toolkit/devtools/shared/timeline.js
+++ b/toolkit/devtools/shared/timeline.js
@@ -19,23 +19,23 @@
  * When markers are available, an event is emitted:
  *   timeline.on("markers", function(markers) {...})
  */
 
 const { Ci, Cu } = require("chrome");
 const { Class } = require("sdk/core/heritage");
 // Be aggressive about lazy loading, as this will run on every
 // toolbox startup
-loader.lazyRequireGetter(this, "events", "sdk/event/core");
-loader.lazyRequireGetter(this, "Timers", "sdk/timers");
-loader.lazyRequireGetter(this, "Task", "resource://gre/modules/Task.jsm", true);
-loader.lazyRequireGetter(this, "Memory", "devtools/toolkit/shared/memory", true);
-loader.lazyRequireGetter(this, "Framerate", "devtools/toolkit/shared/framerate", true);
-loader.lazyRequireGetter(this, "StackFrameCache", "devtools/server/actors/utils/stack", true);
-loader.lazyRequireGetter(this, "EventTarget", "sdk/event/target", true);
+loader.lazyDefine(this, "events", "sdk/event/core");
+loader.lazyDefine(this, "Timers", "sdk/timers");
+loader.lazyDefine(this, "Task", "resource://gre/modules/Task.jsm", true);
+loader.lazyDefine(this, "Memory", "devtools/toolkit/shared/memory", true);
+loader.lazyDefine(this, "Framerate", "devtools/toolkit/shared/framerate", true);
+loader.lazyDefine(this, "StackFrameCache", "devtools/server/actors/utils/stack", true);
+loader.lazyDefine(this, "EventTarget", "sdk/event/target", true);
 
 // How often do we pull markers from the docShells, and therefore, how often do
 // we send events to the front (knowing that when there are no markers in the
 // docShell, no event is sent).
 const DEFAULT_TIMELINE_DATA_PULL_TIMEOUT = 200; // ms
 
 /**
  * The timeline actor pops and forwards timeline markers registered in docshells.
diff --git a/toolkit/devtools/tests/unit/exposeLoader.js b/toolkit/devtools/tests/unit/exposeLoader.js
index 949640a0..49a0681 100644
--- a/toolkit/devtools/tests/unit/exposeLoader.js
+++ b/toolkit/devtools/tests/unit/exposeLoader.js
@@ -1,8 +1,8 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 exports.exerciseLazyRequire = (name, path) => {
   const o = {};
-  loader.lazyRequireGetter(o, name, path);
+  loader.lazyDefine(o, name, path);
   return o;
 };
diff --git a/toolkit/devtools/tests/unit/test_require_lazy.js b/toolkit/devtools/tests/unit/test_require_lazy.js
index f283e47..b1b12b5 100644
--- a/toolkit/devtools/tests/unit/test_require_lazy.js
+++ b/toolkit/devtools/tests/unit/test_require_lazy.js
@@ -1,29 +1,29 @@
 /* -*- js-indent-level: 2; indent-tabs-mode: nil -*- */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
-// Test devtools.lazyRequireGetter
+// Test devtools.lazyDefine
 
 function run_test() {
   const name = "asyncUtils";
   const path = "devtools/async-utils";
   const o = {};
-  devtools.lazyRequireGetter(o, name, path);
+  devtools.lazyDefine(o, name, path);
   const asyncUtils = devtools.require(path);
   // XXX: do_check_eq only works on primitive types, so we have this
   // do_check_true of an equality expression.
   do_check_true(o.asyncUtils === asyncUtils);
 
-  // A non-main loader should get a new object via |lazyRequireGetter|, just
+  // A non-main loader should get a new object via |lazyDefine|, just
   // as it would via a direct |require|.
   const o2 = {};
   let loader = new DevToolsLoader();
-  loader.lazyRequireGetter(o2, name, path);
+  loader.lazyDefine(o2, name, path);
   do_check_true(o2.asyncUtils !== asyncUtils);
 
-  // A module required via a non-main loader that then uses |lazyRequireGetter|
+  // A module required via a non-main loader that then uses |lazyDefine|
   // should also get the same object from that non-main loader.
   let exposeLoader = loader.require("xpcshell-test/exposeLoader");
   const o3 = exposeLoader.exerciseLazyRequire(name, path);
   do_check_true(o3.asyncUtils === o2.asyncUtils);
 }
diff --git a/toolkit/devtools/webconsole/client.js b/toolkit/devtools/webconsole/client.js
index 03222a2..3dc60df 100644
--- a/toolkit/devtools/webconsole/client.js
+++ b/toolkit/devtools/webconsole/client.js
@@ -6,17 +6,17 @@
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
 const DevToolsUtils = require("devtools/toolkit/DevToolsUtils");
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const promise = require("promise");
 
-loader.lazyImporter(this, "LongStringClient", "resource://gre/modules/devtools/dbg-client.jsm");
+loader.lazyDefine(this, "LongStringClient", "resource://gre/modules/devtools/dbg-client.jsm", true);
 
 /**
  * A WebConsoleClient is used as a front end for the WebConsoleActor that is
  * created on the server, hiding implementation details.
  *
  * @param object aDebuggerClient
  *        The DebuggerClient instance we live for.
  * @param object aResponse
diff --git a/toolkit/devtools/webconsole/network-helper.js b/toolkit/devtools/webconsole/network-helper.js
index f0c46ae..fa1301d 100644
--- a/toolkit/devtools/webconsole/network-helper.js
+++ b/toolkit/devtools/webconsole/network-helper.js
@@ -50,18 +50,18 @@
  *  Christoph Dorn
  *  Steven Roussey (AppCenter Inc, Network54)
  *  Mihai Sucan (Mozilla Corp.)
  */
 
 "use strict";
 
 const {components, Cc, Ci, Cu} = require("chrome");
-loader.lazyImporter(this, "NetUtil", "resource://gre/modules/NetUtil.jsm");
-loader.lazyImporter(this, "DevToolsUtils", "resource://gre/modules/devtools/DevToolsUtils.jsm");
+loader.lazyDefine(this, "NetUtil", "resource://gre/modules/NetUtil.jsm", true);
+loader.lazyDefine(this, "DevToolsUtils", "resource://gre/modules/devtools/DevToolsUtils.jsm", true);
 
 // The cache used in the `nsIURL` function.
 const gNSURLStore = new Map();
 
 /**
  * Helper object for networking stuff.
  *
  * Most of the following functions have been taken from the Firebug source. They
diff --git a/toolkit/devtools/webconsole/network-monitor.js b/toolkit/devtools/webconsole/network-monitor.js
index 027bc7b..5fd417e 100644
--- a/toolkit/devtools/webconsole/network-monitor.js
+++ b/toolkit/devtools/webconsole/network-monitor.js
@@ -5,25 +5,24 @@
    gActivityDistributor */
 
 "use strict";
 
 const {Cc, Ci, Cu, Cr} = require("chrome");
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 
-loader.lazyRequireGetter(this, "NetworkHelper",
-                         "devtools/toolkit/webconsole/network-helper");
-loader.lazyImporter(this, "Services", "resource://gre/modules/Services.jsm");
-loader.lazyRequireGetter(this, "DevToolsUtils",
-                         "devtools/toolkit/DevToolsUtils");
-loader.lazyImporter(this, "NetUtil", "resource://gre/modules/NetUtil.jsm");
-loader.lazyServiceGetter(this, "gActivityDistributor",
-                         "@mozilla.org/network/http-activity-distributor;1",
-                         "nsIHttpActivityDistributor");
+loader.lazyDefine(this, "NetworkHelper",
+                        "devtools/toolkit/webconsole/network-helper");
+loader.lazyDefine(this, "Services", "resource://gre/modules/Services.jsm", true);
+loader.lazyDefine(this, "DevToolsUtils",
+                        "devtools/toolkit/DevToolsUtils");
+loader.lazyDefine(this, "NetUtil", "resource://gre/modules/NetUtil.jsm", true);
+loader.lazyDefine(this, "gActivityDistributor",
+  () => Cc["@mozilla.org/network/http-activity-distributor;1"].getService(Ci.nsIHttpActivityDistributor));
 
 ///////////////////////////////////////////////////////////////////////////////
 // Network logging
 ///////////////////////////////////////////////////////////////////////////////
 
 // The maximum uint32 value.
 const PR_UINT32_MAX = 4294967295;
 
diff --git a/toolkit/devtools/webconsole/utils.js b/toolkit/devtools/webconsole/utils.js
index 289dbc7..4473f4a 100644
--- a/toolkit/devtools/webconsole/utils.js
+++ b/toolkit/devtools/webconsole/utils.js
@@ -5,25 +5,25 @@
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const {Cc, Ci, Cu, components} = require("chrome");
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 
-loader.lazyImporter(this, "Services", "resource://gre/modules/Services.jsm");
-loader.lazyImporter(this, "LayoutHelpers", "resource://gre/modules/devtools/LayoutHelpers.jsm");
+loader.lazyDefine(this, "Services", "resource://gre/modules/Services.jsm", true);
+loader.lazyDefine(this, "LayoutHelpers", "resource://gre/modules/devtools/LayoutHelpers.jsm", true);
 
 // TODO: Bug 842672 - toolkit/ imports modules from browser/.
 // Note that these are only used in WebConsoleCommands, see $0 and pprint().
-loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
-loader.lazyImporter(this, "devtools", "resource://gre/modules/devtools/Loader.jsm");
-loader.lazyImporter(this, "VariablesView", "resource:///modules/devtools/VariablesView.jsm");
-loader.lazyImporter(this, "DevToolsUtils", "resource://gre/modules/devtools/DevToolsUtils.jsm");
+loader.lazyDefine(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm", true);
+loader.lazyDefine(this, "devtools", "resource://gre/modules/devtools/Loader.jsm", true);
+loader.lazyDefine(this, "VariablesView", "resource:///modules/devtools/VariablesView.jsm", true);
+loader.lazyDefine(this, "DevToolsUtils", "resource://gre/modules/devtools/DevToolsUtils.jsm", true);
 
 // Match the function name from the result of toString() or toSource().
 //
 // Examples:
 // (function foobar(a, b) { ...
 // function foobar2(a) { ...
 // function() { ...
 const REGEX_MATCH_FUNCTION_NAME = /^\(?function\s+([^(\s]+)\s*\(/;
diff --git a/toolkit/devtools/worker-loader.js b/toolkit/devtools/worker-loader.js
index 13699c0..a2773db 100644
--- a/toolkit/devtools/worker-loader.js
+++ b/toolkit/devtools/worker-loader.js
@@ -346,20 +346,22 @@ let loader = {
     });
   },
   lazyImporter: function () {
     throw new Error("Can't import JSM from worker thread!");
   },
   lazyServiceGetter: function () {
     throw new Error("Can't import XPCOM service from worker thread!");
   },
-  lazyRequireGetter: function (obj, property, module, destructure) {
+  lazyRequireGetter: (...args) => loader.lazyDefine(...args),
+  lazyDefine: function (obj, property, module, destructure) {
     Object.defineProperty(obj, property, {
-      get: () => destructure ? worker.require(module)[property]
-                             : worker.require(module || property)
+      get: () => typeof module === "function" ? module() :
+                 destructure ? worker.require(module)[property] :
+                 worker.require(module || property);
     });
   }
 };
 
 // The following APIs are defined differently depending on whether we are on the
 // main thread or a worker thread. On the main thread, we use the Components
 // object to implement them. On worker threads, we use the APIs provided by
 // the worker debugger.
-- 
2.2.1

