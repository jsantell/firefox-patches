From: Jordan Santell <jsantell@mozilla.com>
Date: Wed, 21 Oct 2015 17:53:43 -0700
Subject: Bug 1216657 - Conditionally use react-dev in all loaders based on DEBUG_JS_MODULES flag. r=jryans

diff --git a/devtools/client/shared/browser-loader.js b/devtools/client/shared/browser-loader.js
index ef0f2fd..8380cbe 100644
--- a/devtools/client/shared/browser-loader.js
+++ b/devtools/client/shared/browser-loader.js
@@ -1,33 +1,13 @@
 var { classes: Cc, interfaces: Ci, utils: Cu } = Components;
 
 const loaders = Cu.import("resource://gre/modules/commonjs/toolkit/loader.js", {});
 const devtools = Cu.import("resource://gre/modules/devtools/shared/Loader.jsm", {}).devtools;
 const { joinURI } = devtools.require("devtools/shared/path");
-var appConstants;
-
-// Some of the services that the system module requires is not
-// available in xpcshell tests. This is ok, we can easily polyfill the
-// values that we need.
-try {
-  const system = devtools.require("devtools/shared/system");
-  appConstants = system.constants;
-}
-catch(e) {
-  // We are in a testing environment most likely. There isn't much
-  // risk to this defaulting to true because the dev version of React
-  // will be loaded if this is true, and that file doesn't get built
-  // into the release version of Firefox, so this will only work with
-  // dev environments.
-  appConstants = {
-    DEBUG_JS_MODULES: true
-  };
-}
-
 const VENDOR_CONTENT_URL = "resource:///modules/devtools/client/shared/vendor";
 
 /*
  * Create a loader to be used in a browser environment. This evaluates
  * modules in their own environment, but sets window (the normal
  * global object) as the sandbox prototype, so when a variable is not
  * defined it checks `window` before throwing an error. This makes all
  * browser APIs available to modules by default, like a normal browser
@@ -46,30 +26,23 @@ const VENDOR_CONTENT_URL = "resource:///modules/devtools/client/shared/vendor";
  * @param Object window
  *        The window instance to evaluate modules within
  * @return Object
  *         An object with two properties:
  *         - loader: the Loader instance
  *         - require: a function to require modules with
  */
 function BrowserLoader(baseURI, window) {
-  const loaderOptions = devtools.require('@loader/options');
-
-  let dynamicPaths = {};
-  if (appConstants.DEBUG_JS_MODULES) {
-    // Load in the dev version of React
-    dynamicPaths["devtools/shared/vendor/react"] =
-      "resource:///modules/devtools/vendor/react-dev.js";
-  }
+  const loaderOptions = devtools.require("@loader/options");
 
   const opts = {
     id: "browser-loader",
     sharedGlobal: true,
     sandboxPrototype: window,
-    paths: Object.assign({}, loaderOptions.paths, dynamicPaths),
+    paths: loaderOptions.paths,
     invisibleToDebugger: loaderOptions.invisibleToDebugger,
     require: (id, require) => {
       const uri = require.resolve(id);
 
       if (!uri.startsWith(baseURI) &&
           !uri.startsWith(VENDOR_CONTENT_URL)) {
         return devtools.require(uri);
       }
diff --git a/devtools/shared/Loader.jsm b/devtools/shared/Loader.jsm
index ebc4ef5..9e42729 100644
--- a/devtools/shared/Loader.jsm
+++ b/devtools/shared/Loader.jsm
@@ -12,16 +12,17 @@
 var { Constructor: CC, classes: Cc, interfaces: Ci, utils: Cu } = Components;
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "NetUtil", "resource://gre/modules/NetUtil.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "FileUtils", "resource://gre/modules/FileUtils.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "OS", "resource://gre/modules/osfile.jsm");
+XPCOMUtils.defineLazyModuleGetter(this, "AppConstants", "resource://gre/modules/AppConstants.jsm");
 
 var { Loader } = Cu.import("resource://gre/modules/commonjs/toolkit/loader.js", {});
 var promise = Cu.import("resource://gre/modules/Promise.jsm", {}).Promise;
 
 this.EXPORTED_SYMBOLS = ["DevToolsLoader", "devtools", "BuiltinProvider",
                          "SrcdirProvider", "require", "loader"];
 
 /**
@@ -95,17 +96,21 @@ BuiltinProvider.prototype = {
         // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
         "acorn": "resource://gre/modules/devtools/acorn",
         // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
         "acorn/util/walk": "resource://gre/modules/devtools/acorn/walk.js",
         // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
         "source-map": "resource://gre/modules/devtools/sourcemap/source-map.js",
         // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
         // Allow access to xpcshell test items from the loader.
-        "xpcshell-test": "resource://test"
+        "xpcshell-test": "resource://test",
+        // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
+        "devtools/client/shared/vendor/react": AppConstants.DEBUG_JS_MODULES ?
+                 "resource:///modules/devtools/client/shared/vendor/react-dev.js" :
+                 "resource:///modules/devtools/client/shared/vendor/react.js",
         // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
       },
       globals: this.globals,
       invisibleToDebugger: this.invisibleToDebugger,
       sharedGlobal: true,
       sharedGlobalBlacklist: sharedGlobalBlacklist
     });
 
@@ -141,16 +146,18 @@ SrcdirProvider.prototype = {
     let gcliURI = this.fileURI(OS.Path.join(sharedDir,
                                             "gcli", "source", "lib", "gcli"));
     let promiseURI = this.fileURI(OS.Path.join(modulesDir,
                                                "Promise-backend.js"));
     let acornURI = this.fileURI(OS.Path.join(sharedDir, "acorn"));
     let acornWalkURI = OS.Path.join(acornURI, "walk.js");
     let sourceMapURI = this.fileURI(OS.Path.join(sharedDir,
                                                  "sourcemap", "source-map.js"));
+    let reactURI = this.fileURI(OS.path.join(devtoolsDir, "client", "shared", "vendor",
+                   AppConstants.DEBUG_JS_MODULES ? "react-dev.js" : "react.js"));
     this.loader = new Loader.Loader({
       id: "fx-devtools",
       modules: loaderModules,
       paths: {
         // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
         "": "resource://gre/modules/commonjs/",
         // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
         "devtools": devtoolsURI,
@@ -160,16 +167,18 @@ SrcdirProvider.prototype = {
         "promise": promiseURI,
         // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
         "acorn": acornURI,
         // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
         "acorn/util/walk": acornWalkURI,
         // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
         "source-map": sourceMapURI,
         // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
+        "devtools/client/shared/vendor/react": reactURI,
+        // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
       },
       globals: this.globals,
       invisibleToDebugger: this.invisibleToDebugger,
       sharedGlobal: true,
       sharedGlobalBlacklist: sharedGlobalBlacklist
     });
 
     return this._writeManifest(srcDir).then(null, Cu.reportError);
-- 
2.3.1

