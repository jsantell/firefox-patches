From: Jordan Santell <jsantell@mozilla.com>
Date: Thu, 11 Jun 2015 16:13:14 -0700
Subject: Bug 1174013 - Move JIT model tests to xpcshell tests. r=shu

diff --git a/browser/devtools/performance/test/browser.ini b/browser/devtools/performance/test/browser.ini
index 7c21b50..85aa7d4 100644
--- a/browser/devtools/performance/test/browser.ini
+++ b/browser/devtools/performance/test/browser.ini
@@ -62,18 +62,16 @@ support-files =
 [browser_perf-front-profiler-04.js]
 #[browser_perf-front-profiler-05.js] bug 1077464
 #[browser_perf-front-profiler-06.js]
 [browser_perf-front-01.js]
 [browser_perf-front-02.js]
 [browser_perf-highlighted.js]
 [browser_perf-jit-view-01.js]
 [browser_perf-jit-view-02.js]
-[browser_perf-jit-model-01.js]
-[browser_perf-jit-model-02.js]
 [browser_perf-loading-01.js]
 [browser_perf-loading-02.js]
 [browser_perf-marker-details-01.js]
 [browser_perf-options-01.js]
 [browser_perf-options-02.js]
 [browser_perf-options-03.js]
 [browser_perf-options-invert-call-tree-01.js]
 [browser_perf-options-invert-call-tree-02.js]
diff --git a/browser/devtools/performance/test/browser_perf-jit-model-01.js b/browser/devtools/performance/test/unit/test_jit-model-01.js
similarity index 76%
rename from browser/devtools/performance/test/browser_perf-jit-model-01.js
rename to browser/devtools/performance/test/unit/test_jit-model-01.js
index b2d3032..617b4f1 100644
--- a/browser/devtools/performance/test/browser_perf-jit-model-01.js
+++ b/browser/devtools/performance/test/unit/test_jit-model-01.js
@@ -2,46 +2,46 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests that JITOptimizations track optimization sites and create
  * an OptimizationSiteProfile when adding optimization sites, like from the
  * FrameNode, and the returning of that data is as expected.
  */
 
-const RecordingUtils = devtools.require("devtools/performance/recording-utils");
+function run_test() {
+  run_next_test();
+}
 
-function test() {
+add_task(function test() {
   let { JITOptimizations } = devtools.require("devtools/performance/jit");
 
   let rawSites = [];
   rawSites.push(gRawSite2);
   rawSites.push(gRawSite2);
   rawSites.push(gRawSite1);
   rawSites.push(gRawSite1);
   rawSites.push(gRawSite2);
   rawSites.push(gRawSite3);
 
   let jit = new JITOptimizations(rawSites, gStringTable.stringTable);
   let sites = jit.optimizationSites;
 
   let [first, second, third] = sites;
 
-  is(first.id, 0, "site id is array index");
-  is(first.samples, 3, "first OptimizationSiteProfile has correct sample count");
-  is(first.data.line, 34, "includes OptimizationSite as reference under `data`");
-  is(second.id, 1, "site id is array index");
-  is(second.samples, 2, "second OptimizationSiteProfile has correct sample count");
-  is(second.data.line, 12, "includes OptimizationSite as reference under `data`");
-  is(third.id, 2, "site id is array index");
-  is(third.samples, 1, "third OptimizationSiteProfile has correct sample count");
-  is(third.data.line, 78, "includes OptimizationSite as reference under `data`");
-
-  finish();
-}
+  equal(first.id, 0, "site id is array index");
+  equal(first.samples, 3, "first OptimizationSiteProfile has correct sample count");
+  equal(first.data.line, 34, "includes OptimizationSite as reference under `data`");
+  equal(second.id, 1, "site id is array index");
+  equal(second.samples, 2, "second OptimizationSiteProfile has correct sample count");
+  equal(second.data.line, 12, "includes OptimizationSite as reference under `data`");
+  equal(third.id, 2, "site id is array index");
+  equal(third.samples, 1, "third OptimizationSiteProfile has correct sample count");
+  equal(third.data.line, 78, "includes OptimizationSite as reference under `data`");
+});
 
 let gStringTable = new RecordingUtils.UniqueStrings();
 
 function uniqStr(s) {
   return gStringTable.getOrAddStringIndex(s);
 }
 
 let gRawSite1 = {
diff --git a/browser/devtools/performance/test/browser_perf-jit-model-02.js b/browser/devtools/performance/test/unit/test_jit-model-02.js
similarity index 72%
rename from browser/devtools/performance/test/browser_perf-jit-model-02.js
rename to browser/devtools/performance/test/unit/test_jit-model-02.js
index 1ac6d20..b392300 100644
--- a/browser/devtools/performance/test/browser_perf-jit-model-02.js
+++ b/browser/devtools/performance/test/unit/test_jit-model-02.js
@@ -1,51 +1,51 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests that JITOptimizations create OptimizationSites, and the underlying
  * OptimizationSites methods work as expected.
  */
 
-const RecordingUtils = devtools.require("devtools/performance/recording-utils");
+function run_test() {
+  run_next_test();
+}
 
-function test() {
+add_task(function test() {
   let { JITOptimizations, OptimizationSite } = devtools.require("devtools/performance/jit");
 
   let rawSites = [];
   rawSites.push(gRawSite2);
   rawSites.push(gRawSite2);
   rawSites.push(gRawSite1);
   rawSites.push(gRawSite1);
   rawSites.push(gRawSite2);
   rawSites.push(gRawSite3);
 
   let jit = new JITOptimizations(rawSites, gStringTable.stringTable);
   let sites = jit.optimizationSites;
 
   let [first, second, third] = sites;
 
   /* hasSuccessfulOutcome */
-  is(first.hasSuccessfulOutcome(), false, "optSite.hasSuccessfulOutcome() returns expected (1)");
-  is(second.hasSuccessfulOutcome(), true, "optSite.hasSuccessfulOutcome() returns expected (2)");
-  is(third.hasSuccessfulOutcome(), true, "optSite.hasSuccessfulOutcome() returns expected (3)");
+  equal(first.hasSuccessfulOutcome(), false, "optSite.hasSuccessfulOutcome() returns expected (1)");
+  equal(second.hasSuccessfulOutcome(), true, "optSite.hasSuccessfulOutcome() returns expected (2)");
+  equal(third.hasSuccessfulOutcome(), true, "optSite.hasSuccessfulOutcome() returns expected (3)");
 
   /* getAttempts */
-  is(first.getAttempts().length, 2, "optSite.getAttempts() has the correct amount of attempts (1)");
-  is(second.getAttempts().length, 5, "optSite.getAttempts() has the correct amount of attempts (2)");
-  is(third.getAttempts().length, 3, "optSite.getAttempts() has the correct amount of attempts (3)");
+  equal(first.getAttempts().length, 2, "optSite.getAttempts() has the correct amount of attempts (1)");
+  equal(second.getAttempts().length, 5, "optSite.getAttempts() has the correct amount of attempts (2)");
+  equal(third.getAttempts().length, 3, "optSite.getAttempts() has the correct amount of attempts (3)");
 
   /* getIonTypes */
-  is(first.getIonTypes().length, 1, "optSite.getIonTypes() has the correct amount of IonTypes (1)");
-  is(second.getIonTypes().length, 2, "optSite.getIonTypes() has the correct amount of IonTypes (2)");
-  is(third.getIonTypes().length, 1, "optSite.getIonTypes() has the correct amount of IonTypes (3)");
-
-  finish();
-}
+  equal(first.getIonTypes().length, 1, "optSite.getIonTypes() has the correct amount of IonTypes (1)");
+  equal(second.getIonTypes().length, 2, "optSite.getIonTypes() has the correct amount of IonTypes (2)");
+  equal(third.getIonTypes().length, 1, "optSite.getIonTypes() has the correct amount of IonTypes (3)");
+});
 
 
 let gStringTable = new RecordingUtils.UniqueStrings();
 
 function uniqStr(s) {
   return gStringTable.getOrAddStringIndex(s);
 }
 
diff --git a/browser/devtools/performance/test/unit/xpcshell.ini b/browser/devtools/performance/test/unit/xpcshell.ini
index b84740d..40756d9 100644
--- a/browser/devtools/performance/test/unit/xpcshell.ini
+++ b/browser/devtools/performance/test/unit/xpcshell.ini
@@ -3,16 +3,18 @@ tags = devtools
 head = head.js
 tail =
 firefox-appdir = browser
 skip-if = toolkit == 'android' || toolkit == 'gonk'
 
 [test_profiler-categories.js]
 [test_frame-utils-01.js]
 [test_frame-utils-02.js]
+[test_jit-model-01.js]
+[test_jit-model-02.js]
 [test_tree-model-01.js]
 [test_tree-model-02.js]
 [test_tree-model-03.js]
 [test_tree-model-04.js]
 [test_tree-model-05.js]
 [test_tree-model-06.js]
 [test_tree-model-07.js]
 [test_tree-model-08.js]
-- 
2.2.1

