From: Jordan Santell <jsantell@mozilla.com>
Date: Sat, 22 Aug 2015 12:55:44 -0700
Subject: Bug 1171517 - Use styling to hide performance graphs rather than the Element.hidden property. r=vp

diff --git a/browser/devtools/performance/modules/widgets/graphs.js b/browser/devtools/performance/modules/widgets/graphs.js
index cf28fba..a7f5d47 100644
--- a/browser/devtools/performance/modules/widgets/graphs.js
+++ b/browser/devtools/performance/modules/widgets/graphs.js
@@ -283,17 +283,17 @@ GraphsController.prototype = {
   }),
 
   /**
    * Enable or disable a subgraph controlled by GraphsController.
    * This determines what graphs are visible and get rendered.
    */
   enable: function (graphName, isEnabled) {
     let el = this.$(this._definition[graphName].selector);
-    el.hidden = !isEnabled;
+    el.classList[isEnabled ? "remove" : "add"]("hidden");
 
     // If no status change, just return
     if (this._enabled.has(graphName) === isEnabled) {
       return;
     }
     if (isEnabled) {
       this._enabled.add(graphName);
     } else {
@@ -305,17 +305,17 @@ GraphsController.prototype = {
   },
 
   /**
    * Disables all graphs controller by the GraphsController, and
    * also hides the root element. This is a one way switch, and used
    * when older platforms do not have any timeline data.
    */
   disableAll: function () {
-    this._root.hidden = true;
+    this._root.classList.add("hidden");
     // Hide all the subelements
     Object.keys(this._definition).forEach(graphName => this.enable(graphName, false));
   },
 
   /**
    * Sets a mapped selection on the graph that is the main controller
    * for keeping the graphs' selections in sync.
    */
@@ -377,16 +377,19 @@ GraphsController.prototype = {
     // Sync the graphs' animations and selections together
     if (def.primaryLink) {
       graph.on("selecting", this._onSelecting);
     } else {
       CanvasGraphUtils.linkAnimation(this._getPrimaryLink(), graph);
       CanvasGraphUtils.linkSelection(this._getPrimaryLink(), graph);
     }
 
+    // Sets the container element's visibility based off of enabled status
+    el.classList[this._enabled.has(graphName) ? "remove" : "add"]("hidden");
+
     this.setTheme();
     return graph;
   }),
 
   /**
    * Returns the main graph for this collection, that all graphs
    * are bound to for syncing and selection.
    */
diff --git a/browser/devtools/performance/test/browser_perf-legacy-front-01.js b/browser/devtools/performance/test/browser_perf-legacy-front-01.js
index 64095ac..050a024 100644
--- a/browser/devtools/performance/test/browser_perf-legacy-front-01.js
+++ b/browser/devtools/performance/test/browser_perf-legacy-front-01.js
@@ -51,17 +51,17 @@ function *testMockMemory () {
 
   ok(markers.length > 0, "markers exist.");
   ok(ticks.length > 0, "ticks exist.");
   isEmptyArray(memory, "memory");
   isEmptyArray(allocations.sites, "allocations.sites");
   isEmptyArray(allocations.timestamps, "allocations.timestamps");
   isEmptyArray(allocations.frames, "allocations.frames");
 
-  is($("#overview-pane").hidden, false,
+  is(isVisible($("#overview-pane")), true,
     "overview pane not hidden when server not supporting memory actors, yet UI prefs request them.");
   is($("#select-waterfall-view").hidden, false,
     "waterfall view button not hidden when memory mocked, and UI prefs enable them");
   is($("#select-js-calltree-view").hidden, false,
     "jscalltree view button not hidden when memory mocked, and UI prefs enable them");
   is($("#select-js-flamegraph-view").hidden, false,
     "jsflamegraph view button not hidden when memory mocked, and UI prefs enable them");
   is($("#select-memory-calltree-view").hidden, true,
@@ -106,17 +106,17 @@ function *testMockMemoryAndTimeline() {
     "Recording configuration set by target's support, not by UI prefs [No Memory/Timeline Actor: withTicks]");
   isEmptyArray(markers, "markers");
   isEmptyArray(ticks, "ticks");
   isEmptyArray(memory, "memory");
   isEmptyArray(allocations.sites, "allocations.sites");
   isEmptyArray(allocations.timestamps, "allocations.timestamps");
   isEmptyArray(allocations.frames, "allocations.frames");
 
-  is($("#overview-pane").hidden, true,
+  is(isVisible($("#overview-pane")), false,
     "overview pane hidden when server not supporting memory/timeline actors, yet UI prefs request them.");
   is($("#select-waterfall-view").hidden, true,
     "waterfall view button hidden when memory/timeline mocked, and UI prefs enable them");
   is($("#select-js-calltree-view").hidden, false,
     "jscalltree view button not hidden when memory/timeline mocked, and UI prefs enable them");
   is($("#select-js-flamegraph-view").hidden, false,
     "jsflamegraph view button not hidden when memory/timeline mocked, and UI prefs enable them");
   is($("#select-memory-calltree-view").hidden, true,
diff --git a/browser/devtools/performance/test/browser_perf-legacy-front-02.js b/browser/devtools/performance/test/browser_perf-legacy-front-02.js
index 946d484..9a5a0b4 100644
--- a/browser/devtools/performance/test/browser_perf-legacy-front-02.js
+++ b/browser/devtools/performance/test/browser_perf-legacy-front-02.js
@@ -55,17 +55,17 @@ let test = Task.async(function*() {
         ok(false, "The sample " + stack.toSource() + " doesn't have a root node.");
       }
     }
   }
 
   ok(sampleCount > 0,
     "At least some samples have been iterated over, checking for root nodes.");
 
-  is($("#overview-pane").hidden, true,
+  is(isVisible($("#overview-pane")), false,
     "overview pane hidden when timeline mocked.");
 
   is($("#select-waterfall-view").hidden, true,
     "waterfall view button hidden when timeline mocked");
   is($("#select-js-calltree-view").hidden, false,
     "jscalltree view button not hidden when timeline/memory mocked");
   is($("#select-js-flamegraph-view").hidden, false,
     "jsflamegraph view button not hidden when timeline mocked");
diff --git a/browser/devtools/performance/test/browser_perf-options-enable-framerate.js b/browser/devtools/performance/test/browser_perf-options-enable-framerate.js
index aef78fc..cc0cd27 100644
--- a/browser/devtools/performance/test/browser_perf-options-enable-framerate.js
+++ b/browser/devtools/performance/test/browser_perf-options-enable-framerate.js
@@ -10,23 +10,23 @@ function* spawnTest() {
   let { EVENTS, PerformanceController, $ } = panel.panelWin;
   Services.prefs.setBoolPref(FRAMERATE_PREF, false);
 
   yield startRecording(panel);
   yield stopRecording(panel);
 
   is(PerformanceController.getCurrentRecording().getConfiguration().withTicks, false,
     "PerformanceFront started without ticks recording.");
-  ok($("#time-framerate").hidden, "fps graph is hidden when ticks disabled");
+  ok(!isVisible($("#time-framerate")), "fps graph is hidden when ticks disabled");
 
   Services.prefs.setBoolPref(FRAMERATE_PREF, true);
-  ok($("#time-framerate").hidden, "fps graph is still hidden if recording does not contain ticks.");
+  ok(!isVisible($("#time-framerate")), "fps graph is still hidden if recording does not contain ticks.");
 
   yield startRecording(panel);
   yield stopRecording(panel);
 
-  ok(!$("#time-framerate").hidden, "fps graph is not hidden when ticks enabled before recording");
+  ok(isVisible($("#time-framerate")), "fps graph is not hidden when ticks enabled before recording");
   is(PerformanceController.getCurrentRecording().getConfiguration().withTicks, true,
     "PerformanceFront started with ticks recording.");
 
   yield teardown(panel);
   finish();
 }
diff --git a/browser/devtools/performance/test/browser_perf-options-enable-memory-01.js b/browser/devtools/performance/test/browser_perf-options-enable-memory-01.js
index 42373e7..c524410 100644
--- a/browser/devtools/performance/test/browser_perf-options-enable-memory-01.js
+++ b/browser/devtools/performance/test/browser_perf-options-enable-memory-01.js
@@ -13,26 +13,26 @@ function* spawnTest() {
 
   yield startRecording(panel);
   yield stopRecording(panel);
 
   is(PerformanceController.getCurrentRecording().getConfiguration().withMemory, false,
     "PerformanceFront started without memory recording.");
   is(PerformanceController.getCurrentRecording().getConfiguration().withAllocations, false,
     "PerformanceFront started without allocations recording.");
-  ok($("#memory-overview").hidden, "memory graph is hidden when memory disabled");
+  ok(!isVisible($("#memory-overview")), "memory graph is hidden when memory disabled");
 
   Services.prefs.setBoolPref(MEMORY_PREF, true);
-  ok($("#memory-overview").hidden,
+  ok(!isVisible($("#memory-overview")),
     "memory graph is still hidden after enabling if recording did not start recording memory");
 
   yield startRecording(panel);
   yield stopRecording(panel);
 
-  ok(!$("#memory-overview").hidden, "memory graph is not hidden when memory enabled before recording");
+  ok(isVisible($("#memory-overview")), "memory graph is not hidden when memory enabled before recording");
   is(PerformanceController.getCurrentRecording().getConfiguration().withMemory, true,
     "PerformanceFront started with memory recording.");
   is(PerformanceController.getCurrentRecording().getConfiguration().withAllocations, false,
     "PerformanceFront did not record with allocations.");
 
   yield teardown(panel);
   finish();
 }
diff --git a/browser/devtools/performance/test/browser_perf-overview-render-04.js b/browser/devtools/performance/test/browser_perf-overview-render-04.js
index 8afcd44..8a6be21 100644
--- a/browser/devtools/performance/test/browser_perf-overview-render-04.js
+++ b/browser/devtools/performance/test/browser_perf-overview-render-04.js
@@ -12,41 +12,41 @@ function* spawnTest() {
   let updated = 0;
   OverviewView.on(EVENTS.OVERVIEW_RENDERED, () => updated++);
   OverviewView.OVERVIEW_UPDATE_INTERVAL = 1;
 
   // Set realtime rendering off.
   OverviewView.isRealtimeRenderingEnabled = () => false;
 
   yield startRecording(panel, { waitForOverview: false, waitForStateChange: true });
-  is($("#overview-pane").hidden, true, "overview graphs hidden");
+  is(isVisible($("#overview-pane")), false, "overview graphs hidden");
   is(updated, 0, "Overview graphs have still not been updated");
   yield waitUntil(() => PerformanceController.getCurrentRecording().getMarkers().length);
   yield waitUntil(() => PerformanceController.getCurrentRecording().getTicks().length);
   is(updated, 0, "Overview graphs have still not been updated");
 
   yield stopRecording(panel);
 
   let markers = OverviewView.graphs.get("timeline");
   let framerate = OverviewView.graphs.get("framerate");
 
   ok(markers.width > 0,
     "The overview's markers graph has a width.");
   ok(framerate.width > 0,
     "The overview's framerate graph has a width.");
 
   is(updated, 1, "Overview graphs rendered upon completion.");
-  is($("#overview-pane").hidden, false, "overview graphs no longer hidden");
+  is(isVisible($("#overview-pane")), true, "overview graphs no longer hidden");
 
   yield startRecording(panel, { waitForOverview: false, waitForStateChange: true });
-  is($("#overview-pane").hidden, true, "overview graphs hidden again when starting new recording");
+  is(isVisible($("#overview-pane")), false, "overview graphs hidden again when starting new recording");
 
   RecordingsView.selectedIndex = 0;
-  is($("#overview-pane").hidden, false, "overview graphs no longer hidden when switching back to complete recording.");
+  is(isVisible($("#overview-pane")), true, "overview graphs no longer hidden when switching back to complete recording.");
   RecordingsView.selectedIndex = 1;
-  is($("#overview-pane").hidden, true, "overview graphs hidden again when going back to inprogress recording.");
+  is(isVisible($("#overview-pane")), false, "overview graphs hidden again when going back to inprogress recording.");
 
   yield stopRecording(panel);
-  is($("#overview-pane").hidden, false, "overview graphs no longer hidden when recording finishes");
+  is(isVisible($("#overview-pane")), true, "overview graphs no longer hidden when recording finishes");
 
   yield teardown(panel);
   finish();
 }
diff --git a/browser/devtools/performance/test/browser_perf_recordings-io-04.js b/browser/devtools/performance/test/browser_perf_recordings-io-04.js
index 9854f02..5e0ee6e 100644
--- a/browser/devtools/performance/test/browser_perf_recordings-io-04.js
+++ b/browser/devtools/performance/test/browser_perf_recordings-io-04.js
@@ -101,20 +101,20 @@ let test = Task.async(function*() {
   yield imported;
   ok(true, "The original profiler data appears to have been successfully imported.");
 
   yield calltreeRendered;
   yield fpsRendered;
   ok(true, "The imported data was re-rendered.");
 
   // Ensure that only framerate and js calltree/flamegraph view are available
-  is($("#overview-pane").hidden, false, "overview graph container still shown");
-  is($("#memory-overview").hidden, true, "memory graph hidden");
-  is($("#markers-overview").hidden, true, "markers overview graph hidden");
-  is($("#time-framerate").hidden, false, "fps graph shown");
+  is(isVisible($("#overview-pane")), true, "overview graph container still shown");
+  is(isVisible($("#memory-overview")), false, "memory graph hidden");
+  is(isVisible($("#markers-overview")), false, "markers overview graph hidden");
+  is(isVisible($("#time-framerate")), true, "fps graph shown");
   is($("#select-waterfall-view").hidden, true, "waterfall button hidden");
   is($("#select-js-calltree-view").hidden, false, "jscalltree button shown");
   is($("#select-js-flamegraph-view").hidden, false, "jsflamegraph button shown");
   is($("#select-memory-calltree-view").hidden, true, "memorycalltree button hidden");
   is($("#select-memory-flamegraph-view").hidden, true, "memoryflamegraph button hidden");
   ok(DetailsView.isViewSelected(JsCallTreeView), "jscalltree view selected as its the only option");
 
   // Verify imported recording.
diff --git a/browser/devtools/performance/test/head.js b/browser/devtools/performance/test/head.js
index 353e226..6119e0a 100644
--- a/browser/devtools/performance/test/head.js
+++ b/browser/devtools/performance/test/head.js
@@ -536,8 +536,12 @@ function synthesizeProfileForTest(samples) {
   });
 
   let uniqueStacks = new RecordingUtils.UniqueStacks();
   return RecordingUtils.deflateThread({
     samples: samples,
     markers: []
   }, uniqueStacks);
 }
+
+function isVisible (element) {
+  return !element.classList.contains("hidden") && !element.hidden;
+}
diff --git a/browser/devtools/performance/views/overview.js b/browser/devtools/performance/views/overview.js
index bc9be1e..9b4ad82 100644
--- a/browser/devtools/performance/views/overview.js
+++ b/browser/devtools/performance/views/overview.js
@@ -331,24 +331,24 @@ let OverviewView = {
    * Show the graphs overview panel when a recording is finished
    * when non-realtime graphs are enabled. Also set the graph visibility
    * so the performance graphs know which graphs to render.
    *
    * @param {RecordingModel} recording
    */
   _showGraphsPanel: function (recording) {
     this._setGraphVisibilityFromRecordingFeatures(recording);
-    $("#overview-pane").hidden = false;
+    $("#overview-pane").classList.remove("hidden");
   },
 
   /**
    * Hide the graphs container completely.
    */
   _hideGraphsPanel: function () {
-    $("#overview-pane").hidden = true;
+    $("#overview-pane").classList.add("hidden");
   },
 
   /**
    * Called when `devtools.theme` changes.
    */
   _onThemeChanged: function (_, theme) {
     this.graphs.setTheme({ theme, redraw: true });
   },
diff --git a/browser/themes/shared/devtools/performance.css b/browser/themes/shared/devtools/performance.css
index 8eafa36..b08414e 100644
--- a/browser/themes/shared/devtools/performance.css
+++ b/browser/themes/shared/devtools/performance.css
@@ -15,16 +15,26 @@
 .theme-light {
   --cell-border-color: rgba(0,0,0,0.15);
   --cell-border-color-light: rgba(0,0,0,0.1);
   --focus-cell-border-color: rgba(0,0,0,0.3);
   --row-alt-background-color: rgba(76,158,217,0.1);
   --row-hover-background-color: rgba(76,158,217,0.2);
 }
 
+/**
+ * A generic class to hide elements, replacing the `element.hidden` attribute
+ * that we use to hide elements that can later be active
+ */
+.hidden {
+  display: none;
+  width: 0px;
+  height: 0px;
+}
+
 /* Toolbar */
 
 #performance-toolbar-control-other {
   -moz-padding-end: 5px;
 }
 
 #performance-toolbar-controls-detail-views .toolbarbutton-text {
   -moz-padding-start: 4px;
-- 
2.2.1

