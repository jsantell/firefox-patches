From b47ed290bf054bdf030e426a0972e75ec8d2feab Mon Sep 17 00:00:00 2001
From: Jordan Santell <jsantell@gmail.com>
Date: Tue, 9 Jun 2015 19:50:56 -0700
Subject: bug 1152992

---
 .../performance/modules/logic/marker-utils.js      | 54 +----------------
 .../performance/modules/logic/waterfall-utils.js   |  1 -
 browser/devtools/performance/modules/markers.js    |  2 +-
 .../devtools/performance/modules/widgets/graphs.js |  7 ++-
 .../performance/modules/widgets/marker-view.js     | 17 ++++--
 .../modules/widgets/markers-overview.js            | 59 +++++++++++++-----
 .../devtools/performance/performance-controller.js | 11 +++-
 .../performance/test/browser_marker-utils.js       | 70 ++++++++++++++++++++++
 .../performance/test/browser_timeline-blueprint.js | 34 +++++++++++
 browser/devtools/performance/test/head.js          |  1 +
 .../performance/views/details-waterfall.js         |  5 +-
 browser/devtools/performance/views/overview.js     |  5 +-
 .../chrome/browser/devtools/timeline.properties    |  2 +-
 13 files changed, 184 insertions(+), 84 deletions(-)
 create mode 100644 browser/devtools/performance/test/browser_marker-utils.js
 create mode 100644 browser/devtools/performance/test/browser_timeline-blueprint.js

diff --git a/browser/devtools/performance/modules/logic/marker-utils.js b/browser/devtools/performance/modules/logic/marker-utils.js
index 4e2cb2b..a2d3248 100644
--- a/browser/devtools/performance/modules/logic/marker-utils.js
+++ b/browser/devtools/performance/modules/logic/marker-utils.js
@@ -376,18 +376,18 @@ const JS_MARKER_MAP = {
 /**
  * A series of formatters used by the blueprint.
  */
 const Formatters = {
   /**
    * Uses the marker name as the label for markers that do not have
    * a blueprint entry. Uses "Other" in the marker filter menu.
    */
-  DefaultLabel: function (marker={}) {
-    return marker.name || L10N.getStr("timeline.label.other");
+  UnknownLabel: function (marker={}) {
+    return marker.name || L10N.getStr("timeline.label.unknown");
   },
 
   GCLabel: function (marker={}) {
     let label = L10N.getStr("timeline.label.garbageCollection");
     // Only if a `nonincrementalReason` exists, do we want to label
     // this as a non incremental GC event.
     if ("nonincrementalReason" in marker) {
       label = `${label} (Non-incremental)`;
@@ -440,64 +440,14 @@ const Formatters = {
 
   StylesFields: function (marker) {
     if ("restyleHint" in marker) {
       return { "Restyle Hint": marker.restyleHint.replace(/eRestyle_/g, "") };
     }
   },
 };
 
-/**
- * Gets the current timeline blueprint without the hidden markers.
- *
- * @param blueprint
- *        The default timeline blueprint.
- * @param array hiddenMarkers
- *        A list of hidden markers' names.
- * @return object
- *         The filtered timeline blueprint.
- */
-function getFilteredBlueprint({ blueprint, hiddenMarkers }) {
-  // Clone functions here just to prevent an error, as the blueprint
-  // contains functions (even though we do not use them).
-  let filteredBlueprint = Cu.cloneInto(blueprint, {}, { cloneFunctions: true });
-  let maybeRemovedGroups = new Set();
-  let removedGroups = new Set();
-
-  // 1. Remove hidden markers from the blueprint.
-
-  for (let hiddenMarkerName of hiddenMarkers) {
-    maybeRemovedGroups.add(filteredBlueprint[hiddenMarkerName].group);
-    filteredBlueprint[hiddenMarkerName].hidden = true;
-  }
-
-  // 2. Get a list of all the groups that will be removed.
-
-  let markerNames = Object.keys(filteredBlueprint).filter(name => !filteredBlueprint[name].hidden);
-  for (let maybeRemovedGroup of maybeRemovedGroups) {
-    let isGroupRemoved = markerNames.every(e => filteredBlueprint[e].group != maybeRemovedGroup);
-    if (isGroupRemoved) {
-      removedGroups.add(maybeRemovedGroup);
-    }
-  }
-
-  // 3. Offset groups so that their indices are consecutive.
-
-  for (let removedGroup of removedGroups) {
-    for (let markerName of markerNames) {
-      let markerDetails = filteredBlueprint[markerName];
-      if (markerDetails.group > removedGroup) {
-        markerDetails.group--;
-      }
-    }
-  }
-
-  return filteredBlueprint;
-}
-
-
 exports.getMarkerLabel = getMarkerLabel;
 exports.getMarkerClassName = getMarkerClassName;
 exports.getMarkerFields = getMarkerFields;
-exports.getFilteredBlueprint = getFilteredBlueprint;
 exports.DOM = DOM;
 exports.CollapseFunctions = CollapseFunctions;
 exports.Formatters = Formatters;
diff --git a/browser/devtools/performance/modules/logic/waterfall-utils.js b/browser/devtools/performance/modules/logic/waterfall-utils.js
index e177012..e03dc06 100644
--- a/browser/devtools/performance/modules/logic/waterfall-utils.js
+++ b/browser/devtools/performance/modules/logic/waterfall-utils.js
@@ -22,17 +22,16 @@ function collapseMarkersIntoNode({ markerNode, markersList, blueprint }) {
   for (let i = 0, len = markersList.length; i < len; i++) {
     let curr = markersList[i];
 
     let parentNode = getCurrentParentNode();
     let definition = getBlueprintFor(curr, blueprint);
 
     let collapse = definition.collapseFunc || (() => null);
     let peek = distance => markersList[i + distance];
-    let foundParent = false;
 
     let collapseInfo = collapse(parentNode, curr, peek);
     if (collapseInfo) {
       let { collapse, toParent, finalize } = collapseInfo;
 
       // If `toParent` is an object, use it as the next parent marker
       if (typeof toParent === "object") {
         addParentNode(toParent);
diff --git a/browser/devtools/performance/modules/markers.js b/browser/devtools/performance/modules/markers.js
index aa0f3fd..14c6569 100644
--- a/browser/devtools/performance/modules/markers.js
+++ b/browser/devtools/performance/modules/markers.js
@@ -57,17 +57,17 @@ const { Formatters, CollapseFunctions: collapse } = require("devtools/performanc
 const TIMELINE_BLUEPRINT = {
   /* Default definition used for markers that occur but
    * are not defined here. Should ultimately be defined, but this gives
    * us room to work on the front end separately from the platform. */
   "UNKNOWN": {
     group: 2,
     colorName: "graphs-grey",
     collapseFunc: collapse.child,
-    label: Formatters.DefaultLabel
+    label: Formatters.UnknownLabel
   },
 
   /* Group 0 - Reflow and Rendering pipeline */
   "Styles": {
     group: 0,
     colorName: "graphs-purple",
     collapseFunc: collapse.child,
     label: L10N.getStr("timeline.label.styles2"),
diff --git a/browser/devtools/performance/modules/widgets/graphs.js b/browser/devtools/performance/modules/widgets/graphs.js
index 468ab8d..d26986e 100644
--- a/browser/devtools/performance/modules/widgets/graphs.js
+++ b/browser/devtools/performance/modules/widgets/graphs.js
@@ -170,24 +170,26 @@ const GRAPH_DEFINITIONS = {
 
 /**
  * A controller for orchestrating the performance's tool overview graphs. Constructs,
  * syncs, toggles displays and defines the memory, framerate and timeline view.
  *
  * @param {object} definition
  * @param {DOMElement} root
  * @param {function} getBlueprint
+ * @param {function} getFilter
  * @param {function} getTheme
  */
-function GraphsController ({ definition, root, getBlueprint, getTheme }) {
+function GraphsController ({ definition, root, getFilter, getBlueprint, getTheme }) {
   this._graphs = {};
   this._enabled = new Set();
   this._definition = definition || GRAPH_DEFINITIONS;
   this._root = root;
   this._getBlueprint = getBlueprint;
+  this._getFilter = getFilter;
   this._getTheme = getTheme;
   this._primaryLink = Object.keys(this._definition).filter(name => this._definition[name].primaryLink)[0];
   this.$ = root.ownerDocument.querySelector.bind(root.ownerDocument);
 
   EventEmitter.decorate(this);
   this._onSelecting = this._onSelecting.bind(this);
 }
 
@@ -365,17 +367,18 @@ GraphsController.prototype = {
 
   /**
    * Creates the graph `graphName` and initializes it.
    */
   _construct: Task.async(function *(graphName) {
     let def = this._definition[graphName];
     let el = this.$(def.selector);
     let blueprint = def.needsBlueprints ? this._getBlueprint() : void 0;
-    let graph = this._graphs[graphName] = new def.constructor(el, blueprint);
+    let filter = def.needsBlueprints ? this._getFilter() : void 0;
+    let graph = this._graphs[graphName] = new def.constructor(el, blueprint, filter);
     graph.graphName = graphName;
 
     yield graph.ready();
 
     // Sync the graphs' animations and selections together
     if (def.primaryLink) {
       graph.on("selecting", this._onSelecting);
     } else {
diff --git a/browser/devtools/performance/modules/widgets/marker-view.js b/browser/devtools/performance/modules/widgets/marker-view.js
index f45c7ec..040edf8 100644
--- a/browser/devtools/performance/modules/widgets/marker-view.js
+++ b/browser/devtools/performance/modules/widgets/marker-view.js
@@ -65,16 +65,27 @@ MarkerView.prototype = Heritage.extend(AbstractTreeItem.prototype, {
    * @param object blueprint
    */
   set blueprint(blueprint) {
     this.root._blueprint = blueprint;
   },
   get blueprint() {
     return this.root._blueprint;
   },
+  
+  /**
+   * Sets a list of marker types to be filtered out of this view.
+   * @param Array<String> filter
+   */
+  set filter(filter) {
+    this.root._filter = filter;
+  },
+  get filter() {
+    return this.root._filter;
+  },
 
   /**
    * Sets the { startTime, endTime }, in milliseconds.
    * @param object interval
    */
   set interval(interval) {
     this.root._interval = interval;
   },
@@ -165,21 +176,17 @@ MarkerView.prototype = Heritage.extend(AbstractTreeItem.prototype, {
    * @param nsIDOMNode arrowNode
    */
   _buildMarkerCells: function(doc, targetNode, arrowNode) {
     let marker = this.marker;
     let blueprint = getBlueprintFor(marker, this.root._blueprint);
     let startTime = this.root._interval.startTime;
     let endTime = this.root._interval.endTime;
 
-    // If this marker type has been marked hidden via marker filtering,
-    // then don't display it. This is so we can also handle "Unknown" markers
-    // that do not have a blueprint, but we want to show those anyway unless "Unknown"
-    // markers are filtered.
-    if (blueprint.hidden) {
+    if (this.root._filter.indexOf(marker.name) !== -1) {
       return;
     }
 
     let sidebarCell = this._buildMarkerSidebar(doc, blueprint, marker);
     let timebarCell = this._buildMarkerTimebar(doc, blueprint, marker, startTime, endTime, arrowNode);
 
     targetNode.appendChild(sidebarCell);
     targetNode.appendChild(timebarCell);
diff --git a/browser/devtools/performance/modules/widgets/markers-overview.js b/browser/devtools/performance/modules/widgets/markers-overview.js
index 89dc23e..e564328 100644
--- a/browser/devtools/performance/modules/widgets/markers-overview.js
+++ b/browser/devtools/performance/modules/widgets/markers-overview.js
@@ -23,39 +23,40 @@ loader.lazyRequireGetter(this, "TickUtils",
   "devtools/performance/waterfall-ticks", true);
 
 const OVERVIEW_HEADER_HEIGHT = 14; // px
 const OVERVIEW_ROW_HEIGHT = 11; // px
 
 const OVERVIEW_SELECTION_LINE_COLOR = "#666";
 const OVERVIEW_CLIPHEAD_LINE_COLOR = "#555";
 
-const FIND_OPTIMAL_TICK_INTERVAL_MAX_ITERS = 100;
 const OVERVIEW_HEADER_TICKS_MULTIPLE = 100; // ms
 const OVERVIEW_HEADER_TICKS_SPACING_MIN = 75; // px
 const OVERVIEW_HEADER_TEXT_FONT_SIZE = 9; // px
 const OVERVIEW_HEADER_TEXT_FONT_FAMILY = "sans-serif";
 const OVERVIEW_HEADER_TEXT_PADDING_LEFT = 6; // px
 const OVERVIEW_HEADER_TEXT_PADDING_TOP = 1; // px
-const OVERVIEW_MARKERS_COLOR_STOPS = [0, 0.1, 0.75, 1];
 const OVERVIEW_MARKER_WIDTH_MIN = 4; // px
 const OVERVIEW_GROUP_VERTICAL_PADDING = 5; // px
 
 /**
  * An overview for the markers data.
  *
  * @param nsIDOMNode parent
  *        The parent node holding the overview.
  * @param Object blueprint
  *        List of names and colors defining markers.
+ * @param Array<String> filter
+ *        List of names of marker types that should not be shown.
  */
-function MarkersOverview(parent, blueprint, ...args) {
+function MarkersOverview(parent, blueprint, filter=[], ...args) {
   AbstractCanvasGraph.apply(this, [parent, "markers-overview", ...args]);
   this.setTheme();
-  this.setBlueprint(blueprint);
+  this._blueprint = blueprint;
+  this.setFilter(filter);
 }
 
 MarkersOverview.prototype = Heritage.extend(AbstractCanvasGraph.prototype, {
   clipheadLineColor: OVERVIEW_CLIPHEAD_LINE_COLOR,
   selectionLineColor: OVERVIEW_SELECTION_LINE_COLOR,
   headerHeight: OVERVIEW_HEADER_HEIGHT,
   rowHeight: OVERVIEW_ROW_HEIGHT,
   groupPadding: OVERVIEW_GROUP_VERTICAL_PADDING,
@@ -63,27 +64,44 @@ MarkersOverview.prototype = Heritage.extend(AbstractCanvasGraph.prototype, {
   /**
    * Compute the height of the overview.
    */
   get fixedHeight() {
     return this.headerHeight + this.rowHeight * (this._lastGroup + 1);
   },
 
   /**
-   * List of names and colors used to paint this overview.
-   * @see TIMELINE_BLUEPRINT in timeline/widgets/global.js
+   * List of marker types that should not be shown in the graph.
    */
-  setBlueprint: function(blueprint) {
+  setFilter: function (filter) {
     this._paintBatches = new Map();
     this._lastGroup = 0;
+    this._filter = filter;
+    this._groupMap = Object.create(null);
 
-    for (let type of Object.keys(blueprint).filter(e => !blueprint[e].hidden)) {
-      this._paintBatches.set(type, { style: blueprint[type], batch: [] });
-      this._lastGroup = Math.max(this._lastGroup, blueprint[type].group || 0);
+    let observedGroups = new Set();
+
+    for (let type of Object.keys(this._blueprint)) {
+      if (filter.indexOf(type) !== -1) {
+        continue;
+      }
+      this._paintBatches.set(type, { definition: this._blueprint[type], batch: [] });
+      console.log("Adding", this._blueprint[type].group);
+      observedGroups.add(this._blueprint[type].group);
+    }
+
+    // Take our set of observed groups and order them and map
+    // the group numbers to fill in the holes via `_groupMap`.
+    // This normalizes our rows by removing rows that aren't used
+    // if filters are enabled.
+    let actualPosition = 0;
+    for (let groupNumber of Array.from(observedGroups).sort()) {
+      this._groupMap[groupNumber] = actualPosition++;
     }
+    console.log("GROUP MAP", this._groupMap);
   },
 
   /**
    * Disables selection and empties this graph.
    */
   clearView: function() {
     this.selectionEnabled = false;
     this.dropSelection();
@@ -99,31 +117,41 @@ MarkersOverview.prototype = Heritage.extend(AbstractCanvasGraph.prototype, {
 
     let { canvas, ctx } = this._getNamedCanvas("markers-overview-data");
     let canvasWidth = this._width;
     let canvasHeight = this._height;
 
     // Group markers into separate paint batches. This is necessary to
     // draw all markers sharing the same style at once.
     for (let marker of markers) {
+
+      // Again skip over markers that we're filtering -- we don't want them
+      // to be labeled as "Unknown"
+      if (this._filter.indexOf(marker.name) !== -1) {
+        continue;
+      }
+
       let markerType = this._paintBatches.get(marker.name) || this._paintBatches.get("UNKNOWN");
-      // We don't have batches for filtered markers
+      // Still check if we have a marker type, as for unknown markers, we won't
+      // have a paint batch for UNKNOWN as well.
       if (markerType) {
         markerType.batch.push(marker);
       }
     }
 
     // Calculate each row's height, and the time-based scaling.
 
-    let totalGroups = this._lastGroup + 1;
+    let totalGroups = Object.keys(this._groupMap).length;
     let groupHeight = this.rowHeight * this._pixelRatio;
     let groupPadding = this.groupPadding * this._pixelRatio;
     let headerHeight = this.headerHeight * this._pixelRatio;
     let dataScale = this.dataScaleX = canvasWidth / duration;
 
+    console.log("total groups", totalGroups);
+
     // Draw the header and overview background.
 
     ctx.fillStyle = this.headerBackgroundColor;
     ctx.fillRect(0, 0, canvasWidth, headerHeight);
 
     ctx.fillStyle = this.backgroundColor;
     ctx.fillRect(0, headerHeight, canvasWidth, canvasHeight);
 
@@ -167,21 +195,22 @@ MarkersOverview.prototype = Heritage.extend(AbstractCanvasGraph.prototype, {
       ctx.moveTo(lineLeft, 0);
       ctx.lineTo(lineLeft, canvasHeight);
     }
 
     ctx.stroke();
 
     // Draw the timeline markers.
 
-    for (let [, { style, batch }] of this._paintBatches) {
-      let top = headerHeight + style.group * groupHeight + groupPadding / 2;
+    for (let [, { definition, batch }] of this._paintBatches) {
+      let group = this._groupMap[definition.group];
+      let top = headerHeight + group * groupHeight + groupPadding / 2;
       let height = groupHeight - groupPadding;
 
-      let color = getColor(style.colorName, this.theme);
+      let color = getColor(definition.colorName, this.theme);
       ctx.fillStyle = color;
       ctx.beginPath();
 
       for (let { start, end } of batch) {
         let left = start * dataScale;
         let width = Math.max((end - start) * dataScale, OVERVIEW_MARKER_WIDTH_MIN);
         ctx.rect(left, top, width, height);
       }
diff --git a/browser/devtools/performance/performance-controller.js b/browser/devtools/performance/performance-controller.js
index 5d7eddb..9fe7a0b 100644
--- a/browser/devtools/performance/performance-controller.js
+++ b/browser/devtools/performance/performance-controller.js
@@ -400,19 +400,24 @@ let PerformanceController = {
     return null;
   },
 
   /**
    * Gets the current timeline blueprint without the hidden markers.
    * @return object
    */
   getTimelineBlueprint: function() {
-    let blueprint = TIMELINE_BLUEPRINT;
-    let hiddenMarkers = this.getPref("hidden-markers");
-    return MarkerUtils.getFilteredBlueprint({ blueprint, hiddenMarkers });
+    return TIMELINE_BLUEPRINT;
+  },
+
+  /**
+   * Returns the currently hidden marker types as an array.
+   */
+  getHiddenMarkerTypes: function () {
+    return this.getPref("hidden-markers");
   },
 
   /**
    * Fired from RecordingsView, we listen on the PerformanceController so we can
    * set it here and re-emit on the controller, where all views can listen.
    */
   _onRecordingSelectFromView: function (_, recording) {
     this.setCurrentRecording(recording);
diff --git a/browser/devtools/performance/test/browser_marker-utils.js b/browser/devtools/performance/test/browser_marker-utils.js
new file mode 100644
index 0000000..86f7e5d
--- /dev/null
+++ b/browser/devtools/performance/test/browser_marker-utils.js
@@ -0,0 +1,70 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests the marker utils methods.
+ */
+
+function* spawnTest() {
+  let { TIMELINE_BLUEPRINT } = devtools.require("devtools/performance/markers");
+  let Utils = devtools.require("devtools/performance/marker-utils");
+
+  Services.prefs.setBoolPref(PLATFORM_DATA_PREF, false);
+
+  is(Utils.getMarkerLabel({ name: "DOMEvent" }), "DOM Event",
+    "getMarkerLabel() returns a simple label");
+  is(Utils.getMarkerLabel({ name: "Javascript", causeName: "setTimeout handler" }), "setTimeout",
+    "getMarkerLabel() returns a label defined via function");
+
+  ok(Utils.getMarkerFields({ name: "Paint" }).length === 0,
+    "getMarkerFields() returns an empty array when no fields defined");
+
+  let fields = Utils.getMarkerFields({ name: "ConsoleTime", causeName: "snowstorm" });
+  is(fields[0].label, "Timer Name:", "getMarkerFields() returns an array with proper label");
+  is(fields[0].value, "snowstorm", "getMarkerFields() returns an array with proper value");
+
+  fields = Utils.getMarkerFields({ name: "DOMEvent", type: "mouseclick" });
+  is(fields.length, 1, "getMarkerFields() ignores fields that are not found on marker");
+  is(fields[0].label, "Event Type:", "getMarkerFields() returns an array with proper label");
+  is(fields[0].value, "mouseclick", "getMarkerFields() returns an array with proper value");
+
+  fields = Utils.getMarkerFields({ name: "DOMEvent", eventPhase: Ci.nsIDOMEvent.AT_TARGET, type: "mouseclick" });
+  is(fields.length, 2, "getMarkerFields() returns multiple fields when using a fields function");
+  is(fields[0].label, "Event Type:", "getMarkerFields() correctly returns fields via function (1)");
+  is(fields[0].value, "mouseclick", "getMarkerFields() correctly returns fields via function (2)");
+  is(fields[1].label, "Phase:", "getMarkerFields() correctly returns fields via function (3)");
+  is(fields[1].value, "Target", "getMarkerFields() correctly returns fields via function (4)");
+
+  is(Utils.getMarkerFields({ name: "Javascript", causeName: "Some Platform Field" })[0].value, "(Gecko)",
+    "Correctly obfuscates JS markers when platform data is off.");
+  Services.prefs.setBoolPref(PLATFORM_DATA_PREF, true);
+  is(Utils.getMarkerFields({ name: "Javascript", causeName: "Some Platform Field" })[0].value, "Some Platform Field",
+    "Correctly deobfuscates JS markers when platform data is on.");
+
+  is(Utils.getMarkerClassName("Javascript"), "Function Call",
+    "getMarkerClassName() returns correct string when defined via function");
+  is(Utils.getMarkerClassName("GarbageCollection"), "GC Event",
+    "getMarkerClassName() returns correct string when defined via function");
+  is(Utils.getMarkerClassName("Reflow"), "Layout",
+    "getMarkerClassName() returns correct string when defined via string");
+
+  TIMELINE_BLUEPRINT["fakemarker"] = { group: 0 };
+  try {
+    Utils.getMarkerClassName("fakemarker");
+    ok(false, "getMarkerClassName() should throw when no label on blueprint.");
+  } catch (e) {
+    ok(true, "getMarkerClassName() should throw when no label on blueprint.");
+  }
+
+  TIMELINE_BLUEPRINT["fakemarker"] = { group: 0, label: () => void 0};
+  try {
+    Utils.getMarkerClassName("fakemarker");
+    ok(false, "getMarkerClassName() should throw when label function returnd undefined.");
+  } catch (e) {
+    ok(true, "getMarkerClassName() should throw when label function returnd undefined.");
+  }
+
+  delete TIMELINE_BLUEPRINT["fakemarker"];
+
+  finish();
+}
diff --git a/browser/devtools/performance/test/browser_timeline-blueprint.js b/browser/devtools/performance/test/browser_timeline-blueprint.js
new file mode 100644
index 0000000..5336e6b
--- /dev/null
+++ b/browser/devtools/performance/test/browser_timeline-blueprint.js
@@ -0,0 +1,34 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests if the timeline blueprint has a correct structure.
+ */
+
+function* spawnTest() {
+  let { TIMELINE_BLUEPRINT } = devtools.require("devtools/performance/markers");
+
+  ok(TIMELINE_BLUEPRINT,
+    "A timeline blueprint should be available.");
+
+  ok(Object.keys(TIMELINE_BLUEPRINT).length,
+    "The timeline blueprint has at least one entry.");
+
+  for (let [key, value] of Iterator(TIMELINE_BLUEPRINT)) {
+    if (key.startsWith("meta::")) {
+      ok(!("group" in value),
+        "No meta entry in the timeline blueprint can contain a `group` key.");
+      ok("colorName" in value,
+        "Each meta entry in the timeline blueprint contains a `colorName` key.");
+      ok("label" in value,
+        "Each meta entry in the timeline blueprint contains a `label` key.");
+    } else {
+      ok("group" in value,
+        "Each entry in the timeline blueprint contains a `group` key.");
+      ok("colorName" in value,
+        "Each entry in the timeline blueprint contains a `colorName` key.");
+      ok("label" in value,
+        "Each entry in the timeline blueprint contains a `label` key.");
+    }
+  }
+}
diff --git a/browser/devtools/performance/test/head.js b/browser/devtools/performance/test/head.js
index 1b2993f..533679b 100644
--- a/browser/devtools/performance/test/head.js
+++ b/browser/devtools/performance/test/head.js
@@ -56,16 +56,17 @@ let DEFAULT_PREFS = [
   "devtools.performance.ui.enable-allocations",
   "devtools.performance.ui.enable-framerate",
   "devtools.performance.ui.show-jit-optimizations",
   "devtools.performance.memory.sample-probability",
   "devtools.performance.memory.max-log-length",
   "devtools.performance.profiler.buffer-size",
   "devtools.performance.profiler.sample-frequency-khz",
   "devtools.performance.ui.experimental",
+  "devtools.performance.timeline.hidden-markers",
 ].reduce((prefs, pref) => {
   prefs[pref] = Preferences.get(pref);
   return prefs;
 }, {});
 
 // Enable the new performance panel for all tests.
 Services.prefs.setBoolPref("devtools.performance.enabled", true);
 // Enable logging for all the tests. Both the debugger server and frontend will
diff --git a/browser/devtools/performance/views/details-waterfall.js b/browser/devtools/performance/views/details-waterfall.js
index d88ba0a..f274d43 100644
--- a/browser/devtools/performance/views/details-waterfall.js
+++ b/browser/devtools/performance/views/details-waterfall.js
@@ -28,16 +28,17 @@ let WaterfallView = Heritage.extend(DetailsSubview, {
     DetailsSubview.initialize.call(this);
 
     this._cache = new WeakMap();
 
     this._onMarkerSelected = this._onMarkerSelected.bind(this);
     this._onResize = this._onResize.bind(this);
     this._onViewSource = this._onViewSource.bind(this);
     this._blueprint = PerformanceController.getTimelineBlueprint();
+    this._hiddenMarkers = PerformanceController.getHiddenMarkerTypes();
 
     this.headerContainer = $("#waterfall-header");
     this.breakdownContainer = $("#waterfall-breakdown");
     this.detailsContainer = $("#waterfall-details");
     this.detailsSplitter = $("#waterfall-view > splitter");
 
     this.details = new MarkerDetails($("#waterfall-details"), $("#waterfall-view > splitter"));
     this.details.hidden = true;
@@ -107,18 +108,17 @@ let WaterfallView = Heritage.extend(DetailsSubview, {
       this.render(OverviewView.getTimeInterval());
     });
   },
 
   /**
    * Called whenever an observed pref is changed.
    */
   _onObservedPrefChange: function(_, prefName) {
-    this._blueprint = PerformanceController.getTimelineBlueprint();
-    this._markersRoot.blueprint = this._blueprint;
+    this._hiddenMarkers = PerformanceController.getHiddenMarkerTypes();
   },
 
   /**
    * Called when MarkerDetails view emits an event to view source.
    */
   _onViewSource: function (_, file, line) {
     gToolbox.viewSourceInDebugger(file, line);
   },
@@ -157,16 +157,17 @@ let WaterfallView = Heritage.extend(DetailsSubview, {
       autoExpandDepth: 0
     });
 
     let header = new WaterfallHeader(root);
 
     this._markersRoot = root;
     this._waterfallHeader = header;
 
+    root.filter = this._hiddenMarkers;
     root.blueprint = this._blueprint;
     root.interval = interval;
     root.on("selected", this._onMarkerSelected);
     root.on("unselected", this._onMarkerSelected);
 
     this.breakdownContainer.innerHTML = "";
     root.attachTo(this.breakdownContainer);
 
diff --git a/browser/devtools/performance/views/overview.js b/browser/devtools/performance/views/overview.js
index e5a7bdb..323c8a2 100644
--- a/browser/devtools/performance/views/overview.js
+++ b/browser/devtools/performance/views/overview.js
@@ -38,16 +38,17 @@ let OverviewView = {
 
   /**
    * Sets up the view with event binding.
    */
   initialize: function () {
     this.graphs = new GraphsController({
       root: $("#overview-pane"),
       getBlueprint: () => PerformanceController.getTimelineBlueprint(),
+      getFilter: () => PerformanceController.getHiddenMarkerTypes(),
       getTheme: () => PerformanceController.getTheme(),
     });
 
     // If no timeline support, shut it all down.
     if (!gFront.getActorSupport().timeline) {
       this.disable();
       return;
     }
@@ -330,18 +331,18 @@ let OverviewView = {
    * because those will set values on a recording model, and
    * the graphs will render based on the existence.
    */
   _onPrefChanged: Task.async(function* (_, prefName, prefValue) {
     switch (prefName) {
       case "hidden-markers": {
         let graph;
         if (graph = yield this.graphs.isAvailable("timeline")) {
-          let blueprint = PerformanceController.getTimelineBlueprint();
-          graph.setBlueprint(blueprint);
+          let filter = PerformanceController.getHiddenMarkerTypes();
+          graph.setFilter(filter);
           graph.refresh({ force: true });
         }
         break;
       }
     }
   }),
 
   _setGraphVisibilityFromRecordingFeatures: function (recording) {
diff --git a/browser/locales/en-US/chrome/browser/devtools/timeline.properties b/browser/locales/en-US/chrome/browser/devtools/timeline.properties
index 9c3b111..774be3a 100644
--- a/browser/locales/en-US/chrome/browser/devtools/timeline.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/timeline.properties
@@ -41,17 +41,17 @@ timeline.label.reflow2=Layout
 timeline.label.paint=Paint
 timeline.label.javascript2=Function Call
 timeline.label.parseHTML=Parse HTML
 timeline.label.parseXML=Parse XML
 timeline.label.domevent=DOM Event
 timeline.label.consoleTime=Console
 timeline.label.garbageCollection=GC Event
 timeline.label.timestamp=Timestamp
-timeline.label.other=Other
+timeline.label.unknown=Unknown
 
 # LOCALIZATION NOTE (graphs.memory):
 # This string is displayed in the memory graph of the Performance tool,
 # as the unit used to memory consumption. This label should be kept
 # AS SHORT AS POSSIBLE so it doesn't obstruct important parts of the graph.
 graphs.memory=MB
 
 # LOCALIZATION NOTE (timeline.markerDetailFormat):
-- 
2.3.2 (Apple Git-55)

