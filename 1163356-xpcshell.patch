From: Jordan Santell <jsantell@mozilla.com>
Date: Fri, 29 May 2015 17:34:32 -0700
Subject: Bug 1163356 - Migrate performance tool components to xpcshell tests where appropriate. r=vp

diff --git a/browser/devtools/performance/moz.build b/browser/devtools/performance/moz.build
index 12ee4a8..dcafe4b 100644
--- a/browser/devtools/performance/moz.build
+++ b/browser/devtools/performance/moz.build
@@ -21,8 +21,9 @@ EXTRA_JS_MODULES.devtools.performance += [
     'modules/widgets/marker-view.js',
     'modules/widgets/markers-overview.js',
     'modules/widgets/tree-view.js',
     'modules/widgets/waterfall-ticks.js',
     'panel.js'
 ]
 
 BROWSER_CHROME_MANIFESTS += ['test/browser.ini']
+XPCSHELL_TESTS_MANIFESTS += ['test/unit/xpcshell.ini']
diff --git a/browser/devtools/performance/test/browser.ini b/browser/devtools/performance/test/browser.ini
index 4b140c8..fd9399f 100644
--- a/browser/devtools/performance/test/browser.ini
+++ b/browser/devtools/performance/test/browser.ini
@@ -118,35 +118,26 @@ skip-if = e10s # GC events seem unreliable in multiprocess
 [browser_perf-recording-selected-04.js]
 [browser_perf-theme-toggle-01.js]
 [browser_profiler_categories.js]
 [browser_profiler_content-check.js]
 [browser_profiler_tree-abstract-01.js]
 [browser_profiler_tree-abstract-02.js]
 [browser_profiler_tree-abstract-03.js]
 [browser_profiler_tree-abstract-04.js]
-[browser_profiler_tree-frame-node.js]
-[browser_profiler_tree-model-01.js]
-[browser_profiler_tree-model-02.js]
-[browser_profiler_tree-model-03.js]
-[browser_profiler_tree-model-04.js]
-[browser_profiler_tree-model-05.js]
-[browser_profiler_tree-model-06.js]
-[browser_profiler_tree-model-07.js]
 [browser_profiler_tree-view-01.js]
 [browser_profiler_tree-view-02.js]
 [browser_profiler_tree-view-03.js]
 [browser_profiler_tree-view-04.js]
 [browser_profiler_tree-view-05.js]
 [browser_profiler_tree-view-06.js]
 [browser_profiler_tree-view-07.js]
 [browser_profiler_tree-view-08.js]
 [browser_profiler_tree-view-09.js]
 [browser_profiler_tree-view-10.js]
-[browser_profiler-frame-utils-01.js]
 [browser_timeline-blueprint.js]
 [browser_timeline-filters.js]
 [browser_timeline-waterfall-background.js]
 [browser_timeline-waterfall-generic.js]
 [browser_timeline-waterfall-rerender.js]
 [browser_timeline-waterfall-sidebar.js]
 skip-if = os == 'linux' # Bug 1161817
 [browser_waterfall-collapse.js]
diff --git a/browser/devtools/performance/test/browser_profiler_tree-frame-node.js b/browser/devtools/performance/test/browser_profiler_tree-frame-node.js
deleted file mode 100644
index fcd7a9a..0000000
--- a/browser/devtools/performance/test/browser_profiler_tree-frame-node.js
+++ /dev/null
@@ -1,248 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Verifies if FrameNodes retain and parse their data appropriately.
- */
-
-function test() {
-  let FrameUtils = devtools.require("devtools/performance/frame-utils");
-  let { FrameNode } = devtools.require("devtools/performance/tree-model");
-  let { CATEGORY_OTHER } = devtools.require("devtools/performance/global");
-
-  let frame1 = new FrameNode("hello/<.world (http://foo/bar.js:123:987)", {
-    location: "hello/<.world (http://foo/bar.js:123:987)",
-    line: 456,
-    isContent: FrameUtils.isContent({
-      location: "hello/<.world (http://foo/bar.js:123:987)"
-    })
-  }, false);
-
-  is(frame1.getInfo().nodeType, "Frame",
-    "The first frame node has the correct type.");
-  is(frame1.getInfo().functionName, "hello/<.world",
-    "The first frame node has the correct function name.");
-  is(frame1.getInfo().fileName, "bar.js",
-    "The first frame node has the correct file name.");
-  is(frame1.getInfo().hostName, "foo",
-    "The first frame node has the correct host name.");
-  is(frame1.getInfo().url, "http://foo/bar.js",
-    "The first frame node has the correct url.");
-  is(frame1.getInfo().line, 123,
-    "The first frame node has the correct line.");
-  is(frame1.getInfo().column, 987,
-    "The first frame node has the correct column.");
-  is(frame1.getInfo().categoryData.toSource(), "({})",
-    "The first frame node has the correct category data.");
-  is(frame1.getInfo().isContent, true,
-    "The first frame node has the correct content flag.");
-
-  let frame2 = new FrameNode("hello/<.world (http://foo/bar.js#baz:123:987)", {
-    location: "hello/<.world (http://foo/bar.js#baz:123:987)",
-    line: 456,
-    isContent: FrameUtils.isContent({
-      location: "hello/<.world (http://foo/bar.js#baz:123:987)"
-    })
-  }, false);
-
-  is(frame2.getInfo().nodeType, "Frame",
-    "The second frame node has the correct type.");
-  is(frame2.getInfo().functionName, "hello/<.world",
-    "The second frame node has the correct function name.");
-  is(frame2.getInfo().fileName, "bar.js",
-    "The second frame node has the correct file name.");
-  is(frame2.getInfo().hostName, "foo",
-    "The second frame node has the correct host name.");
-  is(frame2.getInfo().url, "http://foo/bar.js#baz",
-    "The second frame node has the correct url.");
-  is(frame2.getInfo().line, 123,
-    "The second frame node has the correct line.");
-  is(frame2.getInfo().column, 987,
-    "The second frame node has the correct column.");
-  is(frame2.getInfo().categoryData.toSource(), "({})",
-    "The second frame node has the correct category data.");
-  is(frame2.getInfo().isContent, true,
-    "The second frame node has the correct content flag.");
-
-  let frame3 = new FrameNode("hello/<.world (http://foo/#bar:123:987)", {
-    location: "hello/<.world (http://foo/#bar:123:987)",
-    line: 456,
-    isContent: FrameUtils.isContent({
-      location: "hello/<.world (http://foo/#bar:123:987)"
-    })
-  }, false);
-
-  is(frame3.getInfo().nodeType, "Frame",
-    "The third frame node has the correct type.");
-  is(frame3.getInfo().functionName, "hello/<.world",
-    "The third frame node has the correct function name.");
-  is(frame3.getInfo().fileName, "/",
-    "The third frame node has the correct file name.");
-  is(frame3.getInfo().hostName, "foo",
-    "The third frame node has the correct host name.");
-  is(frame3.getInfo().url, "http://foo/#bar",
-    "The third frame node has the correct url.");
-  is(frame3.getInfo().line, 123,
-    "The third frame node has the correct line.");
-  is(frame3.getInfo().column, 987,
-    "The third frame node has the correct column.");
-  is(frame3.getInfo().categoryData.toSource(), "({})",
-    "The third frame node has the correct category data.");
-  is(frame3.getInfo().isContent, true,
-    "The third frame node has the correct content flag.");
-
-  let frame4 = new FrameNode("hello/<.world (http://foo/:123:987)", {
-    location: "hello/<.world (http://foo/:123:987)",
-    line: 456,
-    isContent: FrameUtils.isContent({
-      location: "hello/<.world (http://foo/:123:987)"
-    })
-  }, false);
-
-  is(frame4.getInfo().nodeType, "Frame",
-    "The fourth frame node has the correct type.");
-  is(frame4.getInfo().functionName, "hello/<.world",
-    "The fourth frame node has the correct function name.");
-  is(frame4.getInfo().fileName, "/",
-    "The fourth frame node has the correct file name.");
-  is(frame4.getInfo().hostName, "foo",
-    "The fourth frame node has the correct host name.");
-  is(frame4.getInfo().url, "http://foo/",
-    "The fourth frame node has the correct url.");
-  is(frame4.getInfo().line, 123,
-    "The fourth frame node has the correct line.");
-  is(frame4.getInfo().column, 987,
-    "The fourth frame node has the correct column.");
-  is(frame4.getInfo().categoryData.toSource(), "({})",
-    "The fourth frame node has the correct category data.");
-  is(frame4.getInfo().isContent, true,
-    "The fourth frame node has the correct content flag.");
-
-  let frame5 = new FrameNode("hello/<.world (resource://foo.js -> http://bar/baz.js:123:987)", {
-    location: "hello/<.world (resource://foo.js -> http://bar/baz.js:123:987)",
-    line: 456,
-    isContent: FrameUtils.isContent({
-      location: "hello/<.world (resource://foo.js -> http://bar/baz.js:123:987)"
-    })
-  }, false);
-
-  is(frame5.getInfo().nodeType, "Frame",
-    "The fifth frame node has the correct type.");
-  is(frame5.getInfo().functionName, "hello/<.world",
-    "The fifth frame node has the correct function name.");
-  is(frame5.getInfo().fileName, "baz.js",
-    "The fifth frame node has the correct file name.");
-  is(frame5.getInfo().hostName, "bar",
-    "The fifth frame node has the correct host name.");
-  is(frame5.getInfo().url, "http://bar/baz.js",
-    "The fifth frame node has the correct url.");
-  is(frame5.getInfo().line, 123,
-    "The fifth frame node has the correct line.");
-  is(frame5.getInfo().column, 987,
-    "The fifth frame node has the correct column.");
-  is(frame5.getInfo().categoryData.toSource(), "({})",
-    "The fifth frame node has the correct category data.");
-  is(frame5.getInfo().isContent, false,
-    "The fifth frame node has the correct content flag.");
-
-  let frame6 = new FrameNode("Foo::Bar::Baz", {
-    location: "Foo::Bar::Baz",
-    line: 456,
-    category: CATEGORY_OTHER,
-    isContent: FrameUtils.isContent({
-      location: "Foo::Bar::Baz",
-      category: CATEGORY_OTHER
-    })
-  }, false);
-
-  is(frame6.getInfo().nodeType, "Frame",
-    "The sixth frame node has the correct type.");
-  is(frame6.getInfo().functionName, "Foo::Bar::Baz",
-    "The sixth frame node has the correct function name.");
-  is(frame6.getInfo().fileName, null,
-    "The sixth frame node has the correct file name.");
-  is(frame6.getInfo().hostName, null,
-    "The sixth frame node has the correct host name.");
-  is(frame6.getInfo().url, null,
-    "The sixth frame node has the correct url.");
-  is(frame6.getInfo().line, 456,
-    "The sixth frame node has the correct line.");
-  is(frame6.getInfo().categoryData.abbrev, "other",
-    "The sixth frame node has the correct category data.");
-  is(frame6.getInfo().isContent, false,
-    "The sixth frame node has the correct content flag.");
-
-  let frame7 = new FrameNode("EnterJIT", {
-    location: "EnterJIT",
-    isContent: FrameUtils.isContent({
-      location: "EnterJIT"
-    })
-  }, false);
-
-  is(frame7.getInfo().nodeType, "Frame",
-    "The seventh frame node has the correct type.");
-  is(frame7.getInfo().functionName, "EnterJIT",
-    "The seventh frame node has the correct function name.");
-  is(frame7.getInfo().fileName, null,
-    "The seventh frame node has the correct file name.");
-  is(frame7.getInfo().hostName, null,
-    "The seventh frame node has the correct host name.");
-  is(frame7.getInfo().url, null,
-    "The seventh frame node has the correct url.");
-  is(frame7.getInfo().line, null,
-    "The seventh frame node has the correct line.");
-  is(frame7.getInfo().column, null,
-    "The seventh frame node has the correct column.");
-  is(frame7.getInfo().categoryData.abbrev, "js",
-    "The seventh frame node has the correct category data.");
-  is(frame7.getInfo().isContent, false,
-    "The seventh frame node has the correct content flag.");
-
-  let frame8 = new FrameNode("chrome://browser/content/content.js", {
-    location: "chrome://browser/content/content.js",
-    line: 456,
-    column: 123
-  }, false);
-
-  is(frame8.getInfo().hostName, null,
-    "The eighth frame node has the correct host name.");
-
-  let frame9 = new FrameNode("hello/<.world (resource://gre/foo.js:123:434)", {
-    location: "hello/<.world (resource://gre/foo.js:123:434)",
-    line: 456
-  }, false);
-
-  is(frame9.getInfo().hostName, null,
-    "The ninth frame node has the correct host name.");
-
-  let frame10 = new FrameNode("main (http://localhost:8888/file.js:123:987)", {
-    location: "main (http://localhost:8888/file.js:123:987)",
-    line: 123,
-    isContent: FrameUtils.isContent({
-      location: "main (http://localhost:8888/file.js:123:987)"
-    })
-  }, false);
-
-  is(frame10.getInfo().nodeType, "Frame",
-    "The tenth frame node has the correct type.");
-  is(frame10.getInfo().functionName, "main",
-    "The tenth frame node has the correct function name.");
-  is(frame10.getInfo().fileName, "file.js",
-    "The tenth frame node has the correct file name.");
-  is(frame10.getInfo().hostName, "localhost",
-    "The tenth frame node has the correct host name.");
-  is(frame10.getInfo().url, "http://localhost:8888/file.js",
-    "The tenth frame node has the correct url.");
-  is(frame10.getInfo().line, 123,
-    "The tenth frame node has the correct line.");
-  is(frame10.getInfo().column, 987,
-    "The tenth frame node has the correct column.");
-  is(frame10.getInfo().isContent, true,
-    "The tenth frame node has the correct content flag.");
-  is(frame10.getInfo().host, "localhost:8888",
-    "The tenth frame node has the correct host.");
-  is(frame10.getInfo().port, 8888,
-    "The tenth frame node has the correct port.");
-
-  finish();
-}
diff --git a/browser/devtools/performance/test/head.js b/browser/devtools/performance/test/head.js
index f4197ae..aa9bc15 100644
--- a/browser/devtools/performance/test/head.js
+++ b/browser/devtools/performance/test/head.js
@@ -533,32 +533,16 @@ function getInflatedStackLocations(thread, sample) {
     stackIndex = stackEntry[STACK_PREFIX_SLOT];
   }
 
   // The profiler tree is inverted, so reverse the array.
   return locations.reverse();
 }
 
 /**
- * Get a path in a FrameNode call tree.
- */
-function getFrameNodePath(root, path) {
-  let calls = root.calls;
-  let node;
-  for (let key of path.split(" > ")) {
-    node = calls.find((node) => node.key == key);
-    if (!node) {
-      break;
-    }
-    calls = node.calls;
-  }
-  return node;
-}
-
-/**
  * Synthesize a profile for testing.
  */
 function synthesizeProfileForTest(samples) {
   const RecordingUtils = devtools.require("devtools/performance/recording-utils");
 
   samples.unshift({
     time: 0,
     frames: [
diff --git a/browser/devtools/performance/test/unit/head.js b/browser/devtools/performance/test/unit/head.js
new file mode 100644
index 0000000..de1ac9b
--- /dev/null
+++ b/browser/devtools/performance/test/unit/head.js
@@ -0,0 +1,42 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+"use strict";
+
+const { classes: Cc, interfaces: Ci, utils: Cu, results: Cr } = Components;
+
+let { devtools } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
+const RecordingUtils = devtools.require("devtools/performance/recording-utils");
+
+/**
+ * Get a path in a FrameNode call tree.
+ */
+function getFrameNodePath(root, path) {
+  let calls = root.calls;
+  let node;
+  for (let key of path.split(" > ")) {
+    node = calls.find((node) => node.key == key);
+    if (!node) {
+      break;
+    }
+    calls = node.calls;
+  }
+  return node;
+}
+
+/**
+ * Synthesize a profile for testing.
+ */
+function synthesizeProfileForTest(samples) {
+  samples.unshift({
+    time: 0,
+    frames: [
+      { location: "(root)" }
+    ]
+  });
+
+  let uniqueStacks = new RecordingUtils.UniqueStacks();
+  return RecordingUtils.deflateThread({
+    samples: samples,
+    markers: []
+  }, uniqueStacks);
+}
diff --git a/browser/devtools/performance/test/browser_profiler-frame-utils-01.js b/browser/devtools/performance/test/unit/test_frame-utils-01.js
similarity index 93%
rename from browser/devtools/performance/test/browser_profiler-frame-utils-01.js
rename to browser/devtools/performance/test/unit/test_frame-utils-01.js
index a72cf19..ff07320 100644
--- a/browser/devtools/performance/test/browser_profiler-frame-utils-01.js
+++ b/browser/devtools/performance/test/unit/test_frame-utils-01.js
@@ -30,17 +30,21 @@ const CHROME_LOCATIONS = [
   { location: "Startup::XRE_InitChildProcess", line: 456, column: 123 },
   { location: "chrome://browser/content/content.js", line: 456, column: 123 },
   "setTimeout_timer (resource://gre/foo.js:123:434)",
   "hello/<.world (jar:file://Users/mcurie/Dev/jetpacks.js)",
   "hello/<.world (resource://foo.js -> http://bar/baz.js:123:987)",
   "EnterJIT",
 ].map(argify);
 
-function test() {
+function run_test() {
+  run_next_test();
+}
+
+add_task(function () {
   const { isContent, parseLocation } = devtools.require("devtools/performance/frame-utils");
 
   for (let frame of CONTENT_LOCATIONS) {
     ok(isContent.apply(null, frameify(frame)), `${frame[0]} should be considered a content frame.`);
   }
 
   for (let frame of CHROME_LOCATIONS) {
     ok(!isContent.apply(null, frameify(frame)), `${frame[0]} should not be considered a content frame.`);
@@ -61,38 +65,36 @@ function test() {
     ["hello/<.world", "file.js", "localhost", "http://localhost:8888/file.js", 100, null, "localhost:8888", 8888],
     ["hello/<.world", "/", "localhost", "http://localhost:8888/", 1, null, "localhost:8888", 8888],
     ["hello/<.world", "/", "localhost", "http://localhost:8888/", 100, 50, "localhost:8888", 8888],
   ];
 
   for (let i = 0; i < PARSED_CONTENT.length; i++) {
     let parsed = parseLocation.apply(null, CONTENT_LOCATIONS[i]);
     for (let j = 0; j < FIELDS.length; j++) {
-      is(parsed[FIELDS[j]], PARSED_CONTENT[i][j], `${CONTENT_LOCATIONS[i]} was parsed to correct ${FIELDS[j]}`);
+      equal(parsed[FIELDS[j]], PARSED_CONTENT[i][j], `${CONTENT_LOCATIONS[i]} was parsed to correct ${FIELDS[j]}`);
     }
   }
 
   const PARSED_CHROME = [
     ["Startup::XRE_InitChildProcess", null, null, null, 456, 123, null, null],
     ["chrome://browser/content/content.js", null, null, null, 456, 123, null, null],
     ["setTimeout_timer", "foo.js", null, "resource://gre/foo.js", 123, 434, null, null],
     ["hello/<.world (jar:file://Users/mcurie/Dev/jetpacks.js)", null, null, null, null, null, null, null],
     ["hello/<.world", "baz.js", "bar", "http://bar/baz.js", 123, 987, "bar", null],
     ["EnterJIT", null, null, null, null, null, null, null],
   ];
 
   for (let i = 0; i < PARSED_CHROME.length; i++) {
     let parsed = parseLocation.apply(null, CHROME_LOCATIONS[i]);
     for (let j = 0; j < FIELDS.length; j++) {
-      is(parsed[FIELDS[j]], PARSED_CHROME[i][j], `${CHROME_LOCATIONS[i]} was parsed to correct ${FIELDS[j]}`);
+      equal(parsed[FIELDS[j]], PARSED_CHROME[i][j], `${CHROME_LOCATIONS[i]} was parsed to correct ${FIELDS[j]}`);
     }
   }
-
-  finish();
-}
+});
 
 /**
  * Takes either a string or an object and turns it into an array that
  * parseLocation.apply expects.
  */
 function argify (val) {
   if (typeof val === "string") {
     return [val];
diff --git a/browser/devtools/performance/test/browser_profiler_tree-model-01.js b/browser/devtools/performance/test/unit/test_tree-model-01.js
similarity index 73%
rename from browser/devtools/performance/test/browser_profiler_tree-model-01.js
rename to browser/devtools/performance/test/unit/test_tree-model-01.js
index ef9de0f..4f95c1a 100644
--- a/browser/devtools/performance/test/browser_profiler_tree-model-01.js
+++ b/browser/devtools/performance/test/unit/test_tree-model-01.js
@@ -1,117 +1,119 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if a call tree model can be correctly computed from a samples array.
  */
 
-function test() {
+function run_test() {
+  run_next_test();
+}
+
+add_task(function test() {
   const { ThreadNode } = devtools.require("devtools/performance/tree-model");
 
   // Create a root node from a given samples array.
 
   let threadNode = new ThreadNode(gThread);
   let root = getFrameNodePath(threadNode, "(root)");
 
   // Test the root node.
 
-  is(threadNode.getInfo().nodeType, "Thread",
+  equal(threadNode.getInfo().nodeType, "Thread",
     "The correct node type was retrieved for the root node.");
 
-  is(root.duration, 20,
+  equal(root.duration, 20,
     "The correct duration was calculated for the root node.");
-  is(root.getInfo().functionName, "(root)",
+  equal(root.getInfo().functionName, "(root)",
     "The correct function name was retrieved for the root node.");
-  is(root.getInfo().categoryData.toSource(), "({})",
+  equal(root.getInfo().categoryData.toSource(), "({})",
     "The correct empty category data was retrieved for the root node.");
 
-  is(root.calls.length, 1,
+  equal(root.calls.length, 1,
     "The correct number of child calls were calculated for the root node.");
   ok(getFrameNodePath(root, "A"),
     "The root node's only child call is correct.");
 
   // Test all the descendant nodes.
 
-  is(getFrameNodePath(root, "A").calls.length, 2,
+  equal(getFrameNodePath(root, "A").calls.length, 2,
     "The correct number of child calls were calculated for the 'A' node.");
   ok(getFrameNodePath(root, "A > B"),
     "The 'A' node has a 'B' child call.");
   ok(getFrameNodePath(root, "A > E"),
     "The 'A' node has a 'E' child call.");
 
-  is(getFrameNodePath(root, "A > B").calls.length, 2,
+  equal(getFrameNodePath(root, "A > B").calls.length, 2,
     "The correct number of child calls were calculated for the 'A > B' node.");
   ok(getFrameNodePath(root, "A > B > C"),
     "The 'A > B' node has a 'C' child call.");
   ok(getFrameNodePath(root, "A > B > D"),
     "The 'A > B' node has a 'D' child call.");
 
-  is(getFrameNodePath(root, "A > E").calls.length, 1,
+  equal(getFrameNodePath(root, "A > E").calls.length, 1,
     "The correct number of child calls were calculated for the 'A > E' node.");
   ok(getFrameNodePath(root, "A > E > F"),
     "The 'A > E' node has a 'F' child call.");
 
-  is(getFrameNodePath(root, "A > B > C").calls.length, 1,
+  equal(getFrameNodePath(root, "A > B > C").calls.length, 1,
     "The correct number of child calls were calculated for the 'A > B > C' node.");
   ok(getFrameNodePath(root, "A > B > C > D"),
     "The 'A > B > C' node has a 'D' child call.");
 
-  is(getFrameNodePath(root, "A > B > C > D").calls.length, 1,
+  equal(getFrameNodePath(root, "A > B > C > D").calls.length, 1,
     "The correct number of child calls were calculated for the 'A > B > C > D' node.");
   ok(getFrameNodePath(root, "A > B > C > D > E"),
     "The 'A > B > C > D' node has a 'E' child call.");
 
-  is(getFrameNodePath(root, "A > B > C > D > E").calls.length, 1,
+  equal(getFrameNodePath(root, "A > B > C > D > E").calls.length, 1,
     "The correct number of child calls were calculated for the 'A > B > C > D > E' node.");
   ok(getFrameNodePath(root, "A > B > C > D > E > F"),
     "The 'A > B > C > D > E' node has a 'F' child call.");
 
-  is(getFrameNodePath(root, "A > B > C > D > E > F").calls.length, 1,
+  equal(getFrameNodePath(root, "A > B > C > D > E > F").calls.length, 1,
     "The correct number of child calls were calculated for the 'A > B > C > D > E > F' node.");
   ok(getFrameNodePath(root, "A > B > C > D > E > F > G"),
     "The 'A > B > C > D > E > F' node has a 'G' child call.");
 
-  is(getFrameNodePath(root, "A > B > C > D > E > F > G").calls.length, 0,
+  equal(getFrameNodePath(root, "A > B > C > D > E > F > G").calls.length, 0,
     "The correct number of child calls were calculated for the 'A > B > C > D > E > F > G' node.");
-  is(getFrameNodePath(root, "A > B > D").calls.length, 0,
+  equal(getFrameNodePath(root, "A > B > D").calls.length, 0,
     "The correct number of child calls were calculated for the 'A > B > D' node.");
-  is(getFrameNodePath(root, "A > E > F").calls.length, 0,
+  equal(getFrameNodePath(root, "A > E > F").calls.length, 0,
     "The correct number of child calls were calculated for the 'A > E > F' node.");
 
   // Check the location, sample times, duration and samples of the root.
 
-  is(getFrameNodePath(root, "A").location, "A",
+  equal(getFrameNodePath(root, "A").location, "A",
     "The 'A' node has the correct location.");
-  is(getFrameNodePath(root, "A").duration, 20,
+  equal(getFrameNodePath(root, "A").duration, 20,
     "The 'A' node has the correct duration in milliseconds.");
-  is(getFrameNodePath(root, "A").samples, 4,
+  equal(getFrameNodePath(root, "A").samples, 4,
     "The 'A' node has the correct number of samples.");
 
   // ...and the rightmost leaf.
 
-  is(getFrameNodePath(root, "A > E > F").location, "F",
+  equal(getFrameNodePath(root, "A > E > F").location, "F",
     "The 'A > E > F' node has the correct location.");
-  is(getFrameNodePath(root, "A > E > F").duration, 7,
+  equal(getFrameNodePath(root, "A > E > F").duration, 7,
     "The 'A > E > F' node has the correct duration in milliseconds.");
-  is(getFrameNodePath(root, "A > E > F").samples, 1,
+  equal(getFrameNodePath(root, "A > E > F").samples, 1,
     "The 'A > E > F' node has the correct number of samples.");
 
   // ...and the leftmost leaf.
 
-  is(getFrameNodePath(root, "A > B > C > D > E > F > G").location, "G",
+  equal(getFrameNodePath(root, "A > B > C > D > E > F > G").location, "G",
     "The 'A > B > C > D > E > F > G' node has the correct location.");
-  is(getFrameNodePath(root, "A > B > C > D > E > F > G").duration, 2,
+  equal(getFrameNodePath(root, "A > B > C > D > E > F > G").duration, 2,
     "The 'A > B > C > D > E > F > G' node has the correct duration in milliseconds.");
-  is(getFrameNodePath(root, "A > B > C > D > E > F > G").samples, 1,
+  equal(getFrameNodePath(root, "A > B > C > D > E > F > G").samples, 1,
     "The 'A > B > C > D > E > F > G' node has the correct number of samples.");
-
-  finish();
-}
+});
 
 let gThread = synthesizeProfileForTest([{
   time: 5,
   frames: [
     { location: "(root)" },
     { location: "A" },
     { location: "B" },
     { location: "C" }
diff --git a/browser/devtools/performance/test/browser_profiler_tree-model-02.js b/browser/devtools/performance/test/unit/test_tree-model-02.js
similarity index 82%
rename from browser/devtools/performance/test/browser_profiler_tree-model-02.js
rename to browser/devtools/performance/test/unit/test_tree-model-02.js
index 12b3178..32abea1 100644
--- a/browser/devtools/performance/test/browser_profiler_tree-model-02.js
+++ b/browser/devtools/performance/test/unit/test_tree-model-02.js
@@ -1,49 +1,51 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if a call tree model ignores samples with no timing information.
  */
 
-function test() {
+function run_test() {
+  run_next_test();
+}
+
+add_task(function test() {
   let { ThreadNode } = devtools.require("devtools/performance/tree-model");
 
   // Create a root node from a given samples array.
 
   let root = getFrameNodePath(new ThreadNode(gThread), "(root)");
 
   // Test the root node.
 
-  is(root.duration, 5,
+  equal(root.duration, 5,
     "The correct duration was calculated for the root node.");
 
-  is(root.calls.length, 1,
+  equal(root.calls.length, 1,
     "The correct number of child calls were calculated for the root node.");
   ok(getFrameNodePath(root, "A"),
     "The root node's only child call is correct.");
 
   // Test all the descendant nodes.
 
-  is(getFrameNodePath(root, "A").calls.length, 1,
+  equal(getFrameNodePath(root, "A").calls.length, 1,
     "The correct number of child calls were calculated for the 'A' node.");
   ok(getFrameNodePath(root, "A > B"),
     "The 'A' node's only child call is correct.");
 
-  is(getFrameNodePath(root, "A > B").calls.length, 1,
+  equal(getFrameNodePath(root, "A > B").calls.length, 1,
     "The correct number of child calls were calculated for the 'A > B' node.");
   ok(getFrameNodePath(root, "A > B > C"),
     "The 'A > B' node's only child call is correct.");
 
-  is(getFrameNodePath(root, "A > B > C").calls.length, 0,
+  equal(getFrameNodePath(root, "A > B > C").calls.length, 0,
     "The correct number of child calls were calculated for the 'A > B > C' node.");
-
-  finish();
-}
+});
 
 let gThread = synthesizeProfileForTest([{
   time: 5,
   frames: [
     { location: "(root)" },
     { location: "A" },
     { location: "B" },
     { location: "C" }
diff --git a/browser/devtools/performance/test/browser_profiler_tree-model-03.js b/browser/devtools/performance/test/unit/test_tree-model-03.js
similarity index 84%
rename from browser/devtools/performance/test/browser_profiler_tree-model-03.js
rename to browser/devtools/performance/test/unit/test_tree-model-03.js
index da73c9e..93243af 100644
--- a/browser/devtools/performance/test/browser_profiler_tree-model-03.js
+++ b/browser/devtools/performance/test/unit/test_tree-model-03.js
@@ -1,64 +1,66 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if a call tree model can be correctly computed from a samples array,
  * while at the same time filtering by duration.
  */
 
-function test() {
+function run_test() {
+  run_next_test();
+}
+
+add_task(function test() {
   let { ThreadNode } = devtools.require("devtools/performance/tree-model");
 
   // Create a root node from a given samples array, filtering by time.
   //
   // Filtering from 5 to 18 includes the 2nd and 3rd samples. The 2nd sample
   // starts exactly on 5 and ends at 11. The 3rd sample starts at 11 and ends
   // exactly at 18.
   let startTime = 5;
   let endTime = 18;
   let root = getFrameNodePath(new ThreadNode(gThread, { startTime, endTime }), "(root)");
 
   // Test the root node.
 
-  is(root.duration, endTime - startTime,
+  equal(root.duration, endTime - startTime,
     "The correct duration was calculated for the root node.");
 
-  is(root.calls.length, 1,
+  equal(root.calls.length, 1,
     "The correct number of child calls were calculated for the root node.");
   ok(getFrameNodePath(root, "A"),
     "The root node's only child call is correct.");
 
   // Test all the descendant nodes.
 
-  is(getFrameNodePath(root, "A").calls.length, 2,
+  equal(getFrameNodePath(root, "A").calls.length, 2,
     "The correct number of child calls were calculated for the 'A' node.");
   ok(getFrameNodePath(root, "A > B"),
     "The 'A' node has a 'B' child call.");
   ok(getFrameNodePath(root, "A > E"),
     "The 'A' node has a 'E' child call.");
 
-  is(getFrameNodePath(root, "A > B").calls.length, 1,
+  equal(getFrameNodePath(root, "A > B").calls.length, 1,
     "The correct number of child calls were calculated for the 'A > B' node.");
   ok(getFrameNodePath(root, "A > B > D"),
     "The 'A > B' node's only child call is correct.");
 
-  is(getFrameNodePath(root, "A > E").calls.length, 1,
+  equal(getFrameNodePath(root, "A > E").calls.length, 1,
     "The correct number of child calls were calculated for the 'A > E' node.");
   ok(getFrameNodePath(root, "A > E > F"),
     "The 'A > E' node's only child call is correct.");
 
-  is(getFrameNodePath(root, "A > B > D").calls.length, 0,
+  equal(getFrameNodePath(root, "A > B > D").calls.length, 0,
     "The correct number of child calls were calculated for the 'A > B > D' node.");
-  is(getFrameNodePath(root, "A > E > F").calls.length, 0,
+  equal(getFrameNodePath(root, "A > E > F").calls.length, 0,
     "The correct number of child calls were calculated for the 'A > E > F' node.");
-
-  finish();
-}
+});
 
 let gThread = synthesizeProfileForTest([{
   time: 5,
   frames: [
     { location: "(root)" },
     { location: "A" },
     { location: "B" },
     { location: "C" }
diff --git a/browser/devtools/performance/test/browser_profiler_tree-model-04.js b/browser/devtools/performance/test/unit/test_tree-model-04.js
similarity index 85%
rename from browser/devtools/performance/test/browser_profiler_tree-model-04.js
rename to browser/devtools/performance/test/unit/test_tree-model-04.js
index b6f514d..2fd06af 100644
--- a/browser/devtools/performance/test/browser_profiler_tree-model-04.js
+++ b/browser/devtools/performance/test/unit/test_tree-model-04.js
@@ -1,59 +1,61 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if a call tree model can be correctly computed from a samples array,
  * while at the same time filtering by duration and content-only frames.
  */
 
-function test() {
+function run_test() {
+  run_next_test();
+}
+
+add_task(function test() {
   let { ThreadNode } = devtools.require("devtools/performance/tree-model");
 
   // Create a root node from a given samples array, filtering by time.
 
   let startTime = 5;
   let endTime = 18;
   let root = getFrameNodePath(new ThreadNode(gThread, { startTime: startTime, endTime: endTime, contentOnly: true }), "(root)");
 
   // Test the root node.
 
-  is(root.duration, endTime - startTime,
+  equal(root.duration, endTime - startTime,
     "The correct duration was calculated for the root node.");
 
-  is(root.calls.length, 2,
+  equal(root.calls.length, 2,
     "The correct number of child calls were calculated for the root node.");
   ok(getFrameNodePath(root, "http://D"),
     "The root has a 'http://D' child call.");
   ok(getFrameNodePath(root, "http://A"),
     "The root has a 'http://A' child call.");
 
   // Test all the descendant nodes.
 
-  is(getFrameNodePath(root, "http://A").calls.length, 1,
+  equal(getFrameNodePath(root, "http://A").calls.length, 1,
     "The correct number of child calls were calculated for the 'http://A' node.");
   ok(getFrameNodePath(root, "http://A > https://E"),
     "The 'http://A' node's only child call is correct.");
 
-  is(getFrameNodePath(root, "http://A > https://E").calls.length, 1,
+  equal(getFrameNodePath(root, "http://A > https://E").calls.length, 1,
     "The correct number of child calls were calculated for the 'http://A > http://E' node.");
   ok(getFrameNodePath(root, "http://A > https://E > file://F"),
     "The 'http://A > https://E' node's only child call is correct.");
 
-  is(getFrameNodePath(root, "http://A > https://E > file://F").calls.length, 1,
+  equal(getFrameNodePath(root, "http://A > https://E > file://F").calls.length, 1,
     "The correct number of child calls were calculated for the 'http://A > https://E >> file://F' node.");
   ok(getFrameNodePath(root, "http://A > https://E > file://F > app://H"),
     "The 'http://A > https://E >> file://F' node's only child call is correct.");
 
-  is(getFrameNodePath(root, "http://D").calls.length, 0,
+  equal(getFrameNodePath(root, "http://D").calls.length, 0,
     "The correct number of child calls were calculated for the 'http://D' node.");
-
-  finish();
-}
+});
 
 let gThread = synthesizeProfileForTest([{
   time: 5,
   frames: [
     { location: "(root)" },
     { location: "http://A" },
     { location: "http://B" },
     { location: "http://C" }
diff --git a/browser/devtools/performance/test/browser_profiler_tree-model-05.js b/browser/devtools/performance/test/unit/test_tree-model-05.js
similarity index 82%
rename from browser/devtools/performance/test/browser_profiler_tree-model-05.js
rename to browser/devtools/performance/test/unit/test_tree-model-05.js
index b520c0f..3dbe828 100644
--- a/browser/devtools/performance/test/browser_profiler_tree-model-05.js
+++ b/browser/devtools/performance/test/unit/test_tree-model-05.js
@@ -37,43 +37,45 @@ let gThread = synthesizeProfileForTest([{
   frames: [
     { location: "(root)" },
     { location: "A" },
     { location: "B" },
     { location: "F" }
   ]
 }]);
 
-function test() {
+function run_test() {
+  run_next_test();
+}
+
+add_task(function test() {
   let { ThreadNode } = devtools.require("devtools/performance/tree-model");
 
   let root = new ThreadNode(gThread, { invertTree: true });
 
-  is(root.calls.length, 2,
+  equal(root.calls.length, 2,
      "Should get the 2 youngest frames, not the 1 oldest frame");
 
   let C = getFrameNodePath(root, "C");
   ok(C, "Should have C as a child of the root.");
 
-  is(C.calls.length, 3,
+  equal(C.calls.length, 3,
      "Should have 3 frames that called C.");
   ok(getFrameNodePath(C, "B"), "B called C.");
   ok(getFrameNodePath(C, "D"), "D called C.");
   ok(getFrameNodePath(C, "E"), "E called C.");
 
-  is(getFrameNodePath(C, "B").calls.length, 1);
+  equal(getFrameNodePath(C, "B").calls.length, 1);
   ok(getFrameNodePath(C, "B > A"), "A called B called C");
-  is(getFrameNodePath(C, "D").calls.length, 1);
+  equal(getFrameNodePath(C, "D").calls.length, 1);
   ok(getFrameNodePath(C, "D > A"), "A called D called C");
-  is(getFrameNodePath(C, "E").calls.length, 1);
+  equal(getFrameNodePath(C, "E").calls.length, 1);
   ok(getFrameNodePath(C, "E > A"), "A called E called C");
 
   let F = getFrameNodePath(root, "F");
   ok(F, "Should have F as a child of the root.");
 
-  is(F.calls.length, 1);
+  equal(F.calls.length, 1);
   ok(getFrameNodePath(F, "B"), "B called F");
 
-  is(getFrameNodePath(F, "B").calls.length, 1);
+  equal(getFrameNodePath(F, "B").calls.length, 1);
   ok(getFrameNodePath(F, "B > A"), "A called B called F");
-
-  finish();
-}
+});
diff --git a/browser/devtools/performance/test/browser_profiler_tree-model-06.js b/browser/devtools/performance/test/unit/test_tree-model-06.js
similarity index 90%
rename from browser/devtools/performance/test/browser_profiler_tree-model-06.js
rename to browser/devtools/performance/test/unit/test_tree-model-06.js
index 9e40b91..35addf4 100644
--- a/browser/devtools/performance/test/browser_profiler_tree-model-06.js
+++ b/browser/devtools/performance/test/unit/test_tree-model-06.js
@@ -1,18 +1,16 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests that when constructing FrameNodes, if optimization data is available,
  * the FrameNodes have the correct optimization data after iterating over samples.
  */
 
-const RecordingUtils = devtools.require("devtools/performance/recording-utils");
-
 let gUniqueStacks = new RecordingUtils.UniqueStacks();
 
 function uniqStr(s) {
   return gUniqueStacks.getOrAddStringIndex(s);
 }
 
 let time = 1;
 
@@ -149,33 +147,35 @@ gThread.frameTable.data.forEach((frame) => {
     break;
   case "E_O3":
     frame[LOCATION_SLOT] = uniqStr("E");
     frame[OPTIMIZATIONS_SLOT] = gRawSite3;
     break;
   }
 });
 
-function test() {
+function run_test() {
+  run_next_test();
+}
+
+add_task(function test() {
   let { ThreadNode } = devtools.require("devtools/performance/tree-model");
 
   let root = new ThreadNode(gThread);
 
   let A = getFrameNodePath(root, "(root) > A");
 
   let opts = A.getOptimizations();
   let sites = opts.optimizationSites;
-  is(sites.length, 2, "Frame A has two optimization sites.");
-  is(sites[0].samples, 2, "first opt site has 2 samples.");
-  is(sites[1].samples, 1, "second opt site has 1 sample.");
+  equal(sites.length, 2, "Frame A has two optimization sites.");
+  equal(sites[0].samples, 2, "first opt site has 2 samples.");
+  equal(sites[1].samples, 1, "second opt site has 1 sample.");
 
   let E = getFrameNodePath(A, "E");
   opts = E.getOptimizations();
   sites = opts.optimizationSites;
-  is(sites.length, 1, "Frame E has one optimization site.");
-  is(sites[0].samples, 1, "first opt site has 1 samples.");
+  equal(sites.length, 1, "Frame E has one optimization site.");
+  equal(sites[0].samples, 1, "first opt site has 1 samples.");
 
   let D = getFrameNodePath(A, "D");
   ok(!D.getOptimizations(),
     "frames that do not have any opts data do not have JITOptimizations instances.");
-
-  finish();
-}
+});
diff --git a/browser/devtools/performance/test/browser_profiler_tree-model-07.js b/browser/devtools/performance/test/unit/test_tree-model-07.js
similarity index 86%
rename from browser/devtools/performance/test/browser_profiler_tree-model-07.js
rename to browser/devtools/performance/test/unit/test_tree-model-07.js
index 5f3ad08..ea2b3c9 100644
--- a/browser/devtools/performance/test/browser_profiler_tree-model-07.js
+++ b/browser/devtools/performance/test/unit/test_tree-model-07.js
@@ -2,17 +2,21 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests that when displaying only content nodes, platform nodes are generalized.
  */
 
 let { CATEGORY_MASK } = devtools.require("devtools/performance/global");
 
-function test() {
+function run_test() {
+  run_next_test();
+}
+
+add_task(function test() {
   let { ThreadNode } = devtools.require("devtools/performance/tree-model");
   let url = (n) => `http://content/${n}`;
 
   // Create a root node from a given samples array.
 
   let root = getFrameNodePath(new ThreadNode(gThread, { contentOnly: true }), "(root)");
 
   /*
@@ -26,34 +30,32 @@ function test() {
    *       - D
    *     - E
    *       - F
    *         - (JS)
    */
 
   // Test the root node.
 
-  is(root.calls.length, 2, "root has 2 children");
+  equal(root.calls.length, 2, "root has 2 children");
   ok(getFrameNodePath(root, url("A")), "root has content child");
   ok(getFrameNodePath(root, "64"), "root has platform generalized child");
-  is(getFrameNodePath(root, "64").calls.length, 0, "platform generalized child is a leaf.");
+  equal(getFrameNodePath(root, "64").calls.length, 0, "platform generalized child is a leaf.");
 
   ok(getFrameNodePath(root, `${url("A")} > 128`), "A has platform generalized child of another type");
-  is(getFrameNodePath(root, `${url("A")} > 128`).calls.length, 0, "second generalized type is a leaf.");
+  equal(getFrameNodePath(root, `${url("A")} > 128`).calls.length, 0, "second generalized type is a leaf.");
 
   ok(getFrameNodePath(root, `${url("A")} > ${url("E")} > ${url("F")} > 64`),
      "a second leaf of the first generalized type exists deep in the tree.");
   ok(getFrameNodePath(root, `${url("A")} > 128`), "A has platform generalized child of another type");
 
-  is(getFrameNodePath(root, "64").category,
+  equal(getFrameNodePath(root, "64").category,
      getFrameNodePath(root, `${url("A")} > ${url("E")} > ${url("F")} > 64`).category,
      "generalized frames of same type are duplicated in top-down view");
-
-  finish();
-}
+});
 
 let gThread = synthesizeProfileForTest([{
   time: 5,
   frames: [
     { location: "(root)" },
     { location: "http://content/A" },
     { location: "http://content/B" },
     { location: "http://content/C" }
diff --git a/browser/devtools/performance/test/unit/test_tree-model-08.js b/browser/devtools/performance/test/unit/test_tree-model-08.js
new file mode 100644
index 0000000..8b326ea
--- /dev/null
+++ b/browser/devtools/performance/test/unit/test_tree-model-08.js
@@ -0,0 +1,250 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Verifies if FrameNodes retain and parse their data appropriately.
+ */
+
+function run_test() {
+  run_next_test();
+}
+
+add_task(function test() {
+  let FrameUtils = devtools.require("devtools/performance/frame-utils");
+  let { FrameNode } = devtools.require("devtools/performance/tree-model");
+  let { CATEGORY_OTHER } = devtools.require("devtools/performance/global");
+
+  let frame1 = new FrameNode("hello/<.world (http://foo/bar.js:123:987)", {
+    location: "hello/<.world (http://foo/bar.js:123:987)",
+    line: 456,
+    isContent: FrameUtils.isContent({
+      location: "hello/<.world (http://foo/bar.js:123:987)"
+    })
+  }, false);
+
+  equal(frame1.getInfo().nodeType, "Frame",
+    "The first frame node has the correct type.");
+  equal(frame1.getInfo().functionName, "hello/<.world",
+    "The first frame node has the correct function name.");
+  equal(frame1.getInfo().fileName, "bar.js",
+    "The first frame node has the correct file name.");
+  equal(frame1.getInfo().hostName, "foo",
+    "The first frame node has the correct host name.");
+  equal(frame1.getInfo().url, "http://foo/bar.js",
+    "The first frame node has the correct url.");
+  equal(frame1.getInfo().line, 123,
+    "The first frame node has the correct line.");
+  equal(frame1.getInfo().column, 987,
+    "The first frame node has the correct column.");
+  equal(frame1.getInfo().categoryData.toSource(), "({})",
+    "The first frame node has the correct category data.");
+  equal(frame1.getInfo().isContent, true,
+    "The first frame node has the correct content flag.");
+
+  let frame2 = new FrameNode("hello/<.world (http://foo/bar.js#baz:123:987)", {
+    location: "hello/<.world (http://foo/bar.js#baz:123:987)",
+    line: 456,
+    isContent: FrameUtils.isContent({
+      location: "hello/<.world (http://foo/bar.js#baz:123:987)"
+    })
+  }, false);
+
+  equal(frame2.getInfo().nodeType, "Frame",
+    "The second frame node has the correct type.");
+  equal(frame2.getInfo().functionName, "hello/<.world",
+    "The second frame node has the correct function name.");
+  equal(frame2.getInfo().fileName, "bar.js",
+    "The second frame node has the correct file name.");
+  equal(frame2.getInfo().hostName, "foo",
+    "The second frame node has the correct host name.");
+  equal(frame2.getInfo().url, "http://foo/bar.js#baz",
+    "The second frame node has the correct url.");
+  equal(frame2.getInfo().line, 123,
+    "The second frame node has the correct line.");
+  equal(frame2.getInfo().column, 987,
+    "The second frame node has the correct column.");
+  equal(frame2.getInfo().categoryData.toSource(), "({})",
+    "The second frame node has the correct category data.");
+  equal(frame2.getInfo().isContent, true,
+    "The second frame node has the correct content flag.");
+
+  let frame3 = new FrameNode("hello/<.world (http://foo/#bar:123:987)", {
+    location: "hello/<.world (http://foo/#bar:123:987)",
+    line: 456,
+    isContent: FrameUtils.isContent({
+      location: "hello/<.world (http://foo/#bar:123:987)"
+    })
+  }, false);
+
+  equal(frame3.getInfo().nodeType, "Frame",
+    "The third frame node has the correct type.");
+  equal(frame3.getInfo().functionName, "hello/<.world",
+    "The third frame node has the correct function name.");
+  equal(frame3.getInfo().fileName, "/",
+    "The third frame node has the correct file name.");
+  equal(frame3.getInfo().hostName, "foo",
+    "The third frame node has the correct host name.");
+  equal(frame3.getInfo().url, "http://foo/#bar",
+    "The third frame node has the correct url.");
+  equal(frame3.getInfo().line, 123,
+    "The third frame node has the correct line.");
+  equal(frame3.getInfo().column, 987,
+    "The third frame node has the correct column.");
+  equal(frame3.getInfo().categoryData.toSource(), "({})",
+    "The third frame node has the correct category data.");
+  equal(frame3.getInfo().isContent, true,
+    "The third frame node has the correct content flag.");
+
+  let frame4 = new FrameNode("hello/<.world (http://foo/:123:987)", {
+    location: "hello/<.world (http://foo/:123:987)",
+    line: 456,
+    isContent: FrameUtils.isContent({
+      location: "hello/<.world (http://foo/:123:987)"
+    })
+  }, false);
+
+  equal(frame4.getInfo().nodeType, "Frame",
+    "The fourth frame node has the correct type.");
+  equal(frame4.getInfo().functionName, "hello/<.world",
+    "The fourth frame node has the correct function name.");
+  equal(frame4.getInfo().fileName, "/",
+    "The fourth frame node has the correct file name.");
+  equal(frame4.getInfo().hostName, "foo",
+    "The fourth frame node has the correct host name.");
+  equal(frame4.getInfo().url, "http://foo/",
+    "The fourth frame node has the correct url.");
+  equal(frame4.getInfo().line, 123,
+    "The fourth frame node has the correct line.");
+  equal(frame4.getInfo().column, 987,
+    "The fourth frame node has the correct column.");
+  equal(frame4.getInfo().categoryData.toSource(), "({})",
+    "The fourth frame node has the correct category data.");
+  equal(frame4.getInfo().isContent, true,
+    "The fourth frame node has the correct content flag.");
+
+  let frame5 = new FrameNode("hello/<.world (resource://foo.js -> http://bar/baz.js:123:987)", {
+    location: "hello/<.world (resource://foo.js -> http://bar/baz.js:123:987)",
+    line: 456,
+    isContent: FrameUtils.isContent({
+      location: "hello/<.world (resource://foo.js -> http://bar/baz.js:123:987)"
+    })
+  }, false);
+
+  equal(frame5.getInfo().nodeType, "Frame",
+    "The fifth frame node has the correct type.");
+  equal(frame5.getInfo().functionName, "hello/<.world",
+    "The fifth frame node has the correct function name.");
+  equal(frame5.getInfo().fileName, "baz.js",
+    "The fifth frame node has the correct file name.");
+  equal(frame5.getInfo().hostName, "bar",
+    "The fifth frame node has the correct host name.");
+  equal(frame5.getInfo().url, "http://bar/baz.js",
+    "The fifth frame node has the correct url.");
+  equal(frame5.getInfo().line, 123,
+    "The fifth frame node has the correct line.");
+  equal(frame5.getInfo().column, 987,
+    "The fifth frame node has the correct column.");
+  equal(frame5.getInfo().categoryData.toSource(), "({})",
+    "The fifth frame node has the correct category data.");
+  equal(frame5.getInfo().isContent, false,
+    "The fifth frame node has the correct content flag.");
+
+  let frame6 = new FrameNode("Foo::Bar::Baz", {
+    location: "Foo::Bar::Baz",
+    line: 456,
+    category: CATEGORY_OTHER,
+    isContent: FrameUtils.isContent({
+      location: "Foo::Bar::Baz",
+      category: CATEGORY_OTHER
+    })
+  }, false);
+
+  equal(frame6.getInfo().nodeType, "Frame",
+    "The sixth frame node has the correct type.");
+  equal(frame6.getInfo().functionName, "Foo::Bar::Baz",
+    "The sixth frame node has the correct function name.");
+  equal(frame6.getInfo().fileName, null,
+    "The sixth frame node has the correct file name.");
+  equal(frame6.getInfo().hostName, null,
+    "The sixth frame node has the correct host name.");
+  equal(frame6.getInfo().url, null,
+    "The sixth frame node has the correct url.");
+  equal(frame6.getInfo().line, 456,
+    "The sixth frame node has the correct line.");
+  equal(frame6.getInfo().categoryData.abbrev, "other",
+    "The sixth frame node has the correct category data.");
+  equal(frame6.getInfo().isContent, false,
+    "The sixth frame node has the correct content flag.");
+
+  let frame7 = new FrameNode("EnterJIT", {
+    location: "EnterJIT",
+    isContent: FrameUtils.isContent({
+      location: "EnterJIT"
+    })
+  }, false);
+
+  equal(frame7.getInfo().nodeType, "Frame",
+    "The seventh frame node has the correct type.");
+  equal(frame7.getInfo().functionName, "EnterJIT",
+    "The seventh frame node has the correct function name.");
+  equal(frame7.getInfo().fileName, null,
+    "The seventh frame node has the correct file name.");
+  equal(frame7.getInfo().hostName, null,
+    "The seventh frame node has the correct host name.");
+  equal(frame7.getInfo().url, null,
+    "The seventh frame node has the correct url.");
+  equal(frame7.getInfo().line, null,
+    "The seventh frame node has the correct line.");
+  equal(frame7.getInfo().column, null,
+    "The seventh frame node has the correct column.");
+  equal(frame7.getInfo().categoryData.abbrev, "js",
+    "The seventh frame node has the correct category data.");
+  equal(frame7.getInfo().isContent, false,
+    "The seventh frame node has the correct content flag.");
+
+  let frame8 = new FrameNode("chrome://browser/content/content.js", {
+    location: "chrome://browser/content/content.js",
+    line: 456,
+    column: 123
+  }, false);
+
+  equal(frame8.getInfo().hostName, null,
+    "The eighth frame node has the correct host name.");
+
+  let frame9 = new FrameNode("hello/<.world (resource://gre/foo.js:123:434)", {
+    location: "hello/<.world (resource://gre/foo.js:123:434)",
+    line: 456
+  }, false);
+
+  equal(frame9.getInfo().hostName, null,
+    "The ninth frame node has the correct host name.");
+
+  let frame10 = new FrameNode("main (http://localhost:8888/file.js:123:987)", {
+    location: "main (http://localhost:8888/file.js:123:987)",
+    line: 123,
+    isContent: FrameUtils.isContent({
+      location: "main (http://localhost:8888/file.js:123:987)"
+    })
+  }, false);
+
+  equal(frame10.getInfo().nodeType, "Frame",
+    "The tenth frame node has the correct type.");
+  equal(frame10.getInfo().functionName, "main",
+    "The tenth frame node has the correct function name.");
+  equal(frame10.getInfo().fileName, "file.js",
+    "The tenth frame node has the correct file name.");
+  equal(frame10.getInfo().hostName, "localhost",
+    "The tenth frame node has the correct host name.");
+  equal(frame10.getInfo().url, "http://localhost:8888/file.js",
+    "The tenth frame node has the correct url.");
+  equal(frame10.getInfo().line, 123,
+    "The tenth frame node has the correct line.");
+  equal(frame10.getInfo().column, 987,
+    "The tenth frame node has the correct column.");
+  equal(frame10.getInfo().isContent, true,
+    "The tenth frame node has the correct content flag.");
+  equal(frame10.getInfo().host, "localhost:8888",
+    "The tenth frame node has the correct host.");
+  equal(frame10.getInfo().port, 8888,
+    "The tenth frame node has the correct port.");
+});
diff --git a/browser/devtools/performance/test/unit/xpcshell.ini b/browser/devtools/performance/test/unit/xpcshell.ini
new file mode 100644
index 0000000..2a63637
--- /dev/null
+++ b/browser/devtools/performance/test/unit/xpcshell.ini
@@ -0,0 +1,16 @@
+[DEFAULT]
+tags = devtools
+head = head.js
+tail =
+firefox-appdir = browser
+skip-if = toolkit == 'android' || toolkit == 'gonk'
+
+[test_frame-utils-01.js]
+[test_tree-model-01.js]
+[test_tree-model-02.js]
+[test_tree-model-03.js]
+[test_tree-model-04.js]
+[test_tree-model-05.js]
+[test_tree-model-06.js]
+[test_tree-model-07.js]
+[test_tree-model-08.js]
-- 
2.2.1

