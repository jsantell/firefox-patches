# HG changeset patch
# User Jordan Santell <jsantell@mozilla.com>
# Date 1423686212 28800
#      Wed Feb 11 12:23:32 2015 -0800
# Node ID 585550948e3291413c724bea82cec9d218f47c05
# Parent  38a668c3efaa990ab0585749f21b4ccc76fe71cc
[mq]: 1101235

diff --git a/browser/devtools/performance/performance-controller.js b/browser/devtools/performance/performance-controller.js
--- a/browser/devtools/performance/performance-controller.js
+++ b/browser/devtools/performance/performance-controller.js
@@ -13,37 +13,37 @@ Cu.import("resource:///modules/devtools/
 devtools.lazyRequireGetter(this, "Services");
 devtools.lazyRequireGetter(this, "promise");
 devtools.lazyRequireGetter(this, "EventEmitter",
   "devtools/toolkit/event-emitter");
 devtools.lazyRequireGetter(this, "DevToolsUtils",
   "devtools/toolkit/DevToolsUtils");
 
 devtools.lazyRequireGetter(this, "TIMELINE_BLUEPRINT",
-  "devtools/timeline/global", true);
+  "devtools/shared/timeline/global", true);
 devtools.lazyRequireGetter(this, "L10N",
-  "devtools/profiler/global", true);
+  "devtools/shared/profiler/global", true);
 devtools.lazyRequireGetter(this, "RecordingUtils",
   "devtools/performance/recording-utils", true);
 devtools.lazyRequireGetter(this, "RecordingModel",
   "devtools/performance/recording-model", true);
 devtools.lazyRequireGetter(this, "MarkersOverview",
-  "devtools/timeline/markers-overview", true);
+  "devtools/shared/timeline/markers-overview", true);
 devtools.lazyRequireGetter(this, "MemoryOverview",
-  "devtools/timeline/memory-overview", true);
+  "devtools/shared/timeline/memory-overview", true);
 devtools.lazyRequireGetter(this, "Waterfall",
-  "devtools/timeline/waterfall", true);
+  "devtools/shared/timeline/waterfall", true);
 devtools.lazyRequireGetter(this, "MarkerDetails",
-  "devtools/timeline/marker-details", true);
+  "devtools/shared/timeline/marker-details", true);
 devtools.lazyRequireGetter(this, "CallView",
-  "devtools/profiler/tree-view", true);
+  "devtools/shared/profiler/tree-view", true);
 devtools.lazyRequireGetter(this, "ThreadNode",
-  "devtools/profiler/tree-model", true);
+  "devtools/shared/profiler/tree-model", true);
 devtools.lazyRequireGetter(this, "FrameNode",
-  "devtools/profiler/tree-model", true);
+  "devtools/shared/profiler/tree-model", true);
 devtools.lazyRequireGetter(this, "OptionsView",
   "devtools/shared/options-view", true);
 
 devtools.lazyImporter(this, "CanvasGraphUtils",
   "resource:///modules/devtools/Graphs.jsm");
 devtools.lazyImporter(this, "LineGraphWidget",
   "resource:///modules/devtools/Graphs.jsm");
 devtools.lazyImporter(this, "FlameGraphUtils",
diff --git a/browser/devtools/performance/test/browser.ini b/browser/devtools/performance/test/browser.ini
--- a/browser/devtools/performance/test/browser.ini
+++ b/browser/devtools/performance/test/browser.ini
@@ -68,8 +68,28 @@ support-files =
 [browser_perf_recordings-io-02.js]
 [browser_perf_recordings-io-03.js]
 [browser_perf_recordings-io-04.js]
 # [browser_perf-range-changed-render.js] bug 1130669 crash
 [browser_perf-recording-selected-01.js]
 [browser_perf-recording-selected-02.js]
 [browser_perf-recording-selected-03.js]
 [browser_perf-recording-selected-04.js]
+[browser_profiler_categories.js]
+[browser_profiler_content-check.js]
+[browser_profiler_tree-abstract-01.js]
+[browser_profiler_tree-abstract-02.js]
+[browser_profiler_tree-abstract-03.js]
+[browser_profiler_tree-abstract-04.js]
+[browser_profiler_tree-frame-node.js]
+[browser_profiler_tree-model-01.js]
+[browser_profiler_tree-model-02.js]
+[browser_profiler_tree-model-03.js]
+[browser_profiler_tree-model-04.js]
+[browser_profiler_tree-model-05.js]
+[browser_profiler_tree-view-01.js]
+[browser_profiler_tree-view-02.js]
+[browser_profiler_tree-view-03.js]
+[browser_profiler_tree-view-04.js]
+[browser_profiler_tree-view-05.js]
+[browser_profiler_tree-view-06.js]
+[browser_profiler_tree-view-07.js]
+[browser_timeline_blueprint.js]
diff --git a/browser/devtools/performance/test/browser_perf-events-calltree.js b/browser/devtools/performance/test/browser_perf-events-calltree.js
--- a/browser/devtools/performance/test/browser_perf-events-calltree.js
+++ b/browser/devtools/performance/test/browser_perf-events-calltree.js
@@ -1,15 +1,15 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests that the call tree up/down events work for js calltree and memory calltree.
  */
-let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
+let { ThreadNode } = devtools.require("devtools/shared/profiler/tree-model");
 function spawnTest () {
   let focus = 0;
   let focusEvent = () => focus++;
 
   Services.prefs.setBoolPref(MEMORY_PREF, true);
 
   let { panel } = yield initPerformance(SIMPLE_URL);
   let { EVENTS, $, DetailsView, JsCallTreeView, MemoryCallTreeView } = panel.panelWin;
diff --git a/browser/devtools/profiler/test/browser_profiler_categories.js b/browser/devtools/performance/test/browser_profiler_categories.js
rename from browser/devtools/profiler/test/browser_profiler_categories.js
rename to browser/devtools/performance/test/browser_profiler_categories.js
--- a/browser/devtools/profiler/test/browser_profiler_categories.js
+++ b/browser/devtools/performance/test/browser_profiler_categories.js
@@ -1,17 +1,17 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if the profiler categories are mapped correctly.
  */
 
 function test() {
-  let global = devtools.require("devtools/profiler/global");
+  let global = devtools.require("devtools/shared/profiler/global");
   let l10n = global.L10N;
   let categories = global.CATEGORIES;
   let mappings = global.CATEGORY_MAPPINGS;
   let count = categories.length;
 
   ok(count,
     "Should have a non-empty list of categories available.");
 
diff --git a/browser/devtools/profiler/test/browser_profiler_content-check.js b/browser/devtools/performance/test/browser_profiler_content-check.js
rename from browser/devtools/profiler/test/browser_profiler_content-check.js
rename to browser/devtools/performance/test/browser_profiler_content-check.js
--- a/browser/devtools/profiler/test/browser_profiler_content-check.js
+++ b/browser/devtools/performance/test/browser_profiler_content-check.js
@@ -2,17 +2,17 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests the function testing whether or not a frame is content or chrome
  * works properly.
  */
 
 function test() {
-  let { FrameNode } = devtools.require("devtools/profiler/tree-model");
+  let { FrameNode } = devtools.require("devtools/shared/profiler/tree-model");
 
   ok(FrameNode.isContent({ location: "http://foo" }),
     "Verifying content/chrome frames is working properly.");
   ok(FrameNode.isContent({ location: "https://foo" }),
     "Verifying content/chrome frames is working properly.");
   ok(FrameNode.isContent({ location: "file://foo" }),
     "Verifying content/chrome frames is working properly.");
 
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-abstract-01.js b/browser/devtools/performance/test/browser_profiler_tree-abstract-01.js
rename from browser/devtools/profiler/test/browser_profiler_tree-abstract-01.js
rename to browser/devtools/performance/test/browser_profiler_tree-abstract-01.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-abstract-01.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-abstract-01.js
@@ -4,17 +4,17 @@
 /**
  * Tests if the abstract tree base class for the profiler's tree view
  * works as advertised.
  */
 
 let { AbstractTreeItem } = Cu.import("resource:///modules/devtools/AbstractTreeItem.jsm", {});
 let { Heritage } = Cu.import("resource:///modules/devtools/ViewHelpers.jsm", {});
 
-let test = Task.async(function*() {
+function spawnTest () {
   let container = document.createElement("vbox");
   gBrowser.selectedBrowser.parentNode.appendChild(container);
 
   // Populate the tree and test the root item...
 
   let treeRoot = new MyCustomTreeItem(gDataSrc, { parent: null });
   treeRoot.attachTo(container);
 
@@ -130,17 +130,17 @@ let test = Task.async(function*() {
     "The 'baz' node's indentation is correct.");
   is(bazItem.target.textContent, "baz",
     "The 'baz' node's text contents are correct.");
   is(bazItem.container, container,
     "The 'baz' node's container is correct.");
 
   container.remove();
   finish();
-});
+}
 
 function MyCustomTreeItem(dataSrc, properties) {
   AbstractTreeItem.call(this, properties);
   this.itemDataSrc = dataSrc;
 }
 
 MyCustomTreeItem.prototype = Heritage.extend(AbstractTreeItem.prototype, {
   _displaySelf: function(document, arrowNode) {
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-abstract-02.js b/browser/devtools/performance/test/browser_profiler_tree-abstract-02.js
rename from browser/devtools/profiler/test/browser_profiler_tree-abstract-02.js
rename to browser/devtools/performance/test/browser_profiler_tree-abstract-02.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-abstract-02.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-abstract-02.js
@@ -4,17 +4,17 @@
 /**
  * Tests if the abstract tree base class for the profiler's tree view
  * has a functional public API.
  */
 
 let { AbstractTreeItem } = Cu.import("resource:///modules/devtools/AbstractTreeItem.jsm", {});
 let { Heritage } = Cu.import("resource:///modules/devtools/ViewHelpers.jsm", {});
 
-let test = Task.async(function*() {
+function spawnTest () {
   let container = document.createElement("vbox");
   gBrowser.selectedBrowser.parentNode.appendChild(container);
 
   // Populate the tree and test `expand`, `collapse` and `getChild`...
 
   let treeRoot = new MyCustomTreeItem(gDataSrc, { parent: null });
   treeRoot.attachTo(container);
 
@@ -133,17 +133,17 @@ let test = Task.async(function*() {
     "The root node should be the only in the container node.");
 
   treeRoot.remove();
   is(container.childNodes.length, 0,
     "The container node should now have no children available.");
 
   container.remove();
   finish();
-});
+}
 
 function MyCustomTreeItem(dataSrc, properties) {
   AbstractTreeItem.call(this, properties);
   this.itemDataSrc = dataSrc;
 }
 
 MyCustomTreeItem.prototype = Heritage.extend(AbstractTreeItem.prototype, {
   _displaySelf: function(document, arrowNode) {
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-abstract-03.js b/browser/devtools/performance/test/browser_profiler_tree-abstract-03.js
rename from browser/devtools/profiler/test/browser_profiler_tree-abstract-03.js
rename to browser/devtools/performance/test/browser_profiler_tree-abstract-03.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-abstract-03.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-abstract-03.js
@@ -4,17 +4,17 @@
 /**
  * Tests if the abstract tree base class for the profiler's tree view
  * is keyboard accessible.
  */
 
 let { AbstractTreeItem } = Cu.import("resource:///modules/devtools/AbstractTreeItem.jsm", {});
 let { Heritage } = Cu.import("resource:///modules/devtools/ViewHelpers.jsm", {});
 
-let test = Task.async(function*() {
+function spawnTest () {
   let container = document.createElement("vbox");
   gBrowser.selectedBrowser.parentNode.appendChild(container);
 
   // Populate the tree by pressing RIGHT...
 
   let treeRoot = new MyCustomTreeItem(gDataSrc, { parent: null });
   treeRoot.attachTo(container);
   treeRoot.focus();
@@ -141,17 +141,17 @@ let test = Task.async(function*() {
   // Test UP on the root node.
 
   EventUtils.sendKey("UP");
   is(document.commandDispatcher.focusedElement, treeRoot.target,
     "The root node is still focused.");
 
   container.remove();
   finish();
-});
+}
 
 function MyCustomTreeItem(dataSrc, properties) {
   AbstractTreeItem.call(this, properties);
   this.itemDataSrc = dataSrc;
 }
 
 MyCustomTreeItem.prototype = Heritage.extend(AbstractTreeItem.prototype, {
   _displaySelf: function(document, arrowNode) {
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-abstract-04.js b/browser/devtools/performance/test/browser_profiler_tree-abstract-04.js
rename from browser/devtools/profiler/test/browser_profiler_tree-abstract-04.js
rename to browser/devtools/performance/test/browser_profiler_tree-abstract-04.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-abstract-04.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-abstract-04.js
@@ -3,17 +3,17 @@
 
 /**
  * Tests that the treeview expander arrow doesn't react to dblclick events.
  */
 
 let { AbstractTreeItem } = Cu.import("resource:///modules/devtools/AbstractTreeItem.jsm", {});
 let { Heritage } = Cu.import("resource:///modules/devtools/ViewHelpers.jsm", {});
 
-let test = Task.async(function*() {
+function spawnTest () {
   let container = document.createElement("vbox");
   gBrowser.selectedBrowser.parentNode.appendChild(container);
 
   // Populate the tree and test the root item...
 
   let treeRoot = new MyCustomTreeItem(gDataSrc, { parent: null });
   treeRoot.attachTo(container);
 
@@ -23,17 +23,17 @@ let test = Task.async(function*() {
   EventUtils.sendMouseEvent({ type: "dblclick" }, treeRoot.target.querySelector(".arrow"));
 
   yield receivedFocusEvent;
   is(treeRoot.expanded, originalTreeRootExpanded,
     "A double click on the arrow was ignored.");
 
   container.remove();
   finish();
-});
+}
 
 function MyCustomTreeItem(dataSrc, properties) {
   AbstractTreeItem.call(this, properties);
   this.itemDataSrc = dataSrc;
 }
 
 MyCustomTreeItem.prototype = Heritage.extend(AbstractTreeItem.prototype, {
   _displaySelf: function(document, arrowNode) {
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-frame-node.js b/browser/devtools/performance/test/browser_profiler_tree-frame-node.js
rename from browser/devtools/profiler/test/browser_profiler_tree-frame-node.js
rename to browser/devtools/performance/test/browser_profiler_tree-frame-node.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-frame-node.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-frame-node.js
@@ -1,17 +1,17 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Verifies if FrameNodes retain and parse their data appropriately.
  */
 
 function test() {
-  let { FrameNode } = devtools.require("devtools/profiler/tree-model");
+  let { FrameNode } = devtools.require("devtools/shared/profiler/tree-model");
 
   let frame1 = new FrameNode({
     location: "hello/<.world (http://foo/bar.js:123:987)",
     line: 456
   });
 
   is(frame1.getInfo().nodeType, "Frame",
     "The first frame node has the correct type.");
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-model-01.js b/browser/devtools/performance/test/browser_profiler_tree-model-01.js
rename from browser/devtools/profiler/test/browser_profiler_tree-model-01.js
rename to browser/devtools/performance/test/browser_profiler_tree-model-01.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-model-01.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-model-01.js
@@ -1,17 +1,17 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if a call tree model can be correctly computed from a samples array.
  */
 
 function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
+  let { ThreadNode } = devtools.require("devtools/shared/profiler/tree-model");
 
   // Create a root node from a given samples array.
 
   let root = new ThreadNode(gSamples);
 
   // Test the root node.
 
   is(root.duration, 18,
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-model-02.js b/browser/devtools/performance/test/browser_profiler_tree-model-02.js
rename from browser/devtools/profiler/test/browser_profiler_tree-model-02.js
rename to browser/devtools/performance/test/browser_profiler_tree-model-02.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-model-02.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-model-02.js
@@ -1,17 +1,17 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if a call tree model ignores samples with no timing information.
  */
 
 function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
+  let { ThreadNode } = devtools.require("devtools/shared/profiler/tree-model");
 
   // Create a root node from a given samples array.
 
   let root = new ThreadNode(gSamples);
 
   // Test the root node.
 
   is(root.duration, 5,
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-model-03.js b/browser/devtools/performance/test/browser_profiler_tree-model-03.js
rename from browser/devtools/profiler/test/browser_profiler_tree-model-03.js
rename to browser/devtools/performance/test/browser_profiler_tree-model-03.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-model-03.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-model-03.js
@@ -2,17 +2,17 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if a call tree model can be correctly computed from a samples array,
  * while at the same time filtering by duration.
  */
 
 function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
+  let { ThreadNode } = devtools.require("devtools/shared/profiler/tree-model");
 
   // Create a root node from a given samples array, filtering by time.
 
   let root = new ThreadNode(gSamples, { startTime: 11, endTime: 18 });
 
   // Test the root node.
 
   is(root.duration, 18,
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-model-04.js b/browser/devtools/performance/test/browser_profiler_tree-model-04.js
rename from browser/devtools/profiler/test/browser_profiler_tree-model-04.js
rename to browser/devtools/performance/test/browser_profiler_tree-model-04.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-model-04.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-model-04.js
@@ -2,17 +2,17 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if a call tree model can be correctly computed from a samples array,
  * while at the same time filtering by duration and content-only frames.
  */
 
 function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
+  let { ThreadNode } = devtools.require("devtools/shared/profiler/tree-model");
 
   // Create a root node from a given samples array, filtering by time.
 
   let root = new ThreadNode(gSamples, { startTime: 11, endTime: 18, contentOnly: true });
 
   // Test the root node.
 
   is(root.duration, 18,
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-model-05.js b/browser/devtools/performance/test/browser_profiler_tree-model-05.js
rename from browser/devtools/profiler/test/browser_profiler_tree-model-05.js
rename to browser/devtools/performance/test/browser_profiler_tree-model-05.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-model-05.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-model-05.js
@@ -38,17 +38,17 @@ let samples = [{
     { location: "(root)" },
     { location: "A" },
     { location: "B" },
     { location: "F" }
   ]
 }];
 
 function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
+  let { ThreadNode } = devtools.require("devtools/shared/profiler/tree-model");
 
   let root = new ThreadNode(samples, { invertTree: true });
 
   is(Object.keys(root.calls).length, 2,
      "Should get the 2 youngest frames, not the 1 oldest frame");
 
   let C = root.calls.C;
   ok(C, "Should have C as a child of the root.");
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-01.js b/browser/devtools/performance/test/browser_profiler_tree-view-01.js
rename from browser/devtools/profiler/test/browser_profiler_tree-view-01.js
rename to browser/devtools/performance/test/browser_profiler_tree-view-01.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-01.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-view-01.js
@@ -2,18 +2,18 @@
    http://foo/bar/creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if the profiler's tree view implementation works properly and
  * creates the correct column structure.
  */
 
 function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
+  let { ThreadNode } = devtools.require("devtools/shared/profiler/tree-model");
+  let { CallView } = devtools.require("devtools/shared/profiler/tree-view");
 
   let threadNode = new ThreadNode(gSamples);
   let treeRoot = new CallView({ frame: threadNode });
 
   let container = document.createElement("vbox");
   treeRoot.autoExpandDepth = 0;
   treeRoot.attachTo(container);
 
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-02.js b/browser/devtools/performance/test/browser_profiler_tree-view-02.js
rename from browser/devtools/profiler/test/browser_profiler_tree-view-02.js
rename to browser/devtools/performance/test/browser_profiler_tree-view-02.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-02.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-view-02.js
@@ -2,18 +2,18 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if the profiler's tree view implementation works properly and
  * creates the correct column structure after expanding some of the nodes.
  */
 
 function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
+  let { ThreadNode } = devtools.require("devtools/shared/profiler/tree-model");
+  let { CallView } = devtools.require("devtools/shared/profiler/tree-view");
 
   let threadNode = new ThreadNode(gSamples);
   let treeRoot = new CallView({ frame: threadNode });
 
   let container = document.createElement("vbox");
   treeRoot.autoExpandDepth = 0;
   treeRoot.attachTo(container);
 
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-03.js b/browser/devtools/performance/test/browser_profiler_tree-view-03.js
rename from browser/devtools/profiler/test/browser_profiler_tree-view-03.js
rename to browser/devtools/performance/test/browser_profiler_tree-view-03.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-03.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-view-03.js
@@ -2,18 +2,18 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if the profiler's tree view implementation works properly and
  * creates the correct column structure and can auto-expand all nodes.
  */
 
 function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
+  let { ThreadNode } = devtools.require("devtools/shared/profiler/tree-model");
+  let { CallView } = devtools.require("devtools/shared/profiler/tree-view");
 
   let threadNode = new ThreadNode(gSamples);
   let treeRoot = new CallView({ frame: threadNode });
 
   let container = document.createElement("vbox");
   treeRoot.attachTo(container);
 
   let $$fun = i => container.querySelectorAll(".call-tree-cell[type=function]")[i];
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-04.js b/browser/devtools/performance/test/browser_profiler_tree-view-04.js
rename from browser/devtools/profiler/test/browser_profiler_tree-view-04.js
rename to browser/devtools/performance/test/browser_profiler_tree-view-04.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-04.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-view-04.js
@@ -2,18 +2,18 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if the profiler's tree view implementation works properly and
  * creates the correct DOM nodes in the correct order.
  */
 
 function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
+  let { ThreadNode } = devtools.require("devtools/shared/profiler/tree-model");
+  let { CallView } = devtools.require("devtools/shared/profiler/tree-view");
 
   let threadNode = new ThreadNode(gSamples);
   let treeRoot = new CallView({ frame: threadNode });
 
   let container = document.createElement("vbox");
   treeRoot.attachTo(container);
 
   is(treeRoot.target.getAttribute("origin"), "chrome",
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-05.js b/browser/devtools/performance/test/browser_profiler_tree-view-05.js
rename from browser/devtools/profiler/test/browser_profiler_tree-view-05.js
rename to browser/devtools/performance/test/browser_profiler_tree-view-05.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-05.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-view-05.js
@@ -2,18 +2,18 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if the profiler's tree view implementation works properly and
  * can toggle categories hidden or visible.
  */
 
 function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
+  let { ThreadNode } = devtools.require("devtools/shared/profiler/tree-model");
+  let { CallView } = devtools.require("devtools/shared/profiler/tree-view");
 
   let threadNode = new ThreadNode(gSamples);
   let treeRoot = new CallView({ frame: threadNode });
 
   let container = document.createElement("vbox");
   treeRoot.attachTo(container);
 
   let categories = container.querySelectorAll(".call-tree-category");
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-06.js b/browser/devtools/performance/test/browser_profiler_tree-view-06.js
rename from browser/devtools/profiler/test/browser_profiler_tree-view-06.js
rename to browser/devtools/performance/test/browser_profiler_tree-view-06.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-06.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-view-06.js
@@ -1,19 +1,19 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if the profiler's tree view implementation works properly and
  * correctly emits events when certain DOM nodes are clicked.
  */
 
-let test = Task.async(function*() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
+function spawnTest () {
+  let { ThreadNode } = devtools.require("devtools/shared/profiler/tree-model");
+  let { CallView } = devtools.require("devtools/shared/profiler/tree-view");
 
   let threadNode = new ThreadNode(gSamples);
   let treeRoot = new CallView({ frame: threadNode });
 
   let container = document.createElement("vbox");
   treeRoot.attachTo(container);
 
   let A = treeRoot.getChild();
@@ -26,19 +26,18 @@ let test = Task.async(function*() {
   let eventItem = yield receivedLinkEvent;
   is(eventItem, D, "The 'link' event target is correct.");
 
   let receivedZoomEvent = treeRoot.once("zoom");
   EventUtils.sendMouseEvent({ type: "mousedown" }, D.target.querySelector(".call-tree-zoom"));
 
   eventItem = yield receivedZoomEvent;
   is(eventItem, D, "The 'zoom' event target is correct.");
-
   finish();
-});
+}
 
 let gSamples = [{
   time: 5,
   frames: [
     { category: 8,  location: "(root)" },
     { category: 8,  location: "A (http://foo/bar/baz:12)" },
     { category: 16, location: "B (http://foo/bar/baz:34)" },
     { category: 32, location: "C (http://foo/bar/baz:56)" }
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-07.js b/browser/devtools/performance/test/browser_profiler_tree-view-07.js
rename from browser/devtools/profiler/test/browser_profiler_tree-view-07.js
rename to browser/devtools/performance/test/browser_profiler_tree-view-07.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-07.js
+++ b/browser/devtools/performance/test/browser_profiler_tree-view-07.js
@@ -1,19 +1,19 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if the profiler's tree view implementation works properly and
  * has the correct 'root', 'parent', 'level' etc. accessors on child nodes.
  */
 
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
+function spawnTest () {
+  let { ThreadNode } = devtools.require("devtools/shared/profiler/tree-model");
+  let { CallView } = devtools.require("devtools/shared/profiler/tree-view");
 
   let threadNode = new ThreadNode(gSamples);
   let treeRoot = new CallView({ frame: threadNode });
 
   let container = document.createElement("vbox");
   container.id = "call-tree-container";
   treeRoot.attachTo(container);
 
@@ -26,18 +26,16 @@ function test() {
   is(D.parent, B,
     "The .A.B.D node has the correct parent.");
   is(D.level, 3,
     "The .A.B.D node has the correct level.");
   is(D.target.className, "call-tree-item",
     "The .A.B.D node has the correct target node.");
   is(D.container.id, "call-tree-container",
     "The .A.B.D node has the correct container node.");
-
-  finish();
 }
 
 let gSamples = [{
   time: 5,
   frames: [
     { category: 8,  location: "(root)" },
     { category: 8,  location: "A (http://foo/bar/baz:12)" },
     { category: 16, location: "B (http://foo/bar/baz:34)" },
diff --git a/browser/devtools/timeline/test/browser_timeline_blueprint.js b/browser/devtools/performance/test/browser_timeline_blueprint.js
rename from browser/devtools/timeline/test/browser_timeline_blueprint.js
rename to browser/devtools/performance/test/browser_timeline_blueprint.js
--- a/browser/devtools/timeline/test/browser_timeline_blueprint.js
+++ b/browser/devtools/performance/test/browser_timeline_blueprint.js
@@ -1,17 +1,17 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if the timeline blueprint has a correct structure.
  */
 
-add_task(function*() {
-  let { TIMELINE_BLUEPRINT } = devtools.require("devtools/timeline/global");
+function spawnTest () {
+  let { TIMELINE_BLUEPRINT } = devtools.require("devtools/shared/timeline/global");
 
   ok(TIMELINE_BLUEPRINT,
     "A timeline blueprint should be available.");
 
   ok(Object.keys(TIMELINE_BLUEPRINT).length,
     "The timeline blueprint has at least one entry.");
 
   for (let [key, value] of Iterator(TIMELINE_BLUEPRINT)) {
@@ -19,9 +19,9 @@ add_task(function*() {
       "Each entry in the timeline blueprint contains a `group` key.");
     ok("fill" in value,
       "Each entry in the timeline blueprint contains a `fill` key.");
     ok("stroke" in value,
       "Each entry in the timeline blueprint contains a `stroke` key.");
     ok("label" in value,
       "Each entry in the timeline blueprint contains a `label` key.");
   }
-});
+}
diff --git a/browser/devtools/profiler/moz.build b/browser/devtools/profiler/moz.build
--- a/browser/devtools/profiler/moz.build
+++ b/browser/devtools/profiler/moz.build
@@ -1,14 +1,11 @@
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 EXTRA_JS_MODULES.devtools.profiler += [
     'panel.js',
-    'utils/global.js',
-    'utils/shared.js',
-    'utils/tree-model.js',
-    'utils/tree-view.js'
+    'utils/shared.js'
 ]
 
 BROWSER_CHROME_MANIFESTS += ['test/browser.ini']
diff --git a/browser/devtools/profiler/profiler.js b/browser/devtools/profiler/profiler.js
--- a/browser/devtools/profiler/profiler.js
+++ b/browser/devtools/profiler/profiler.js
@@ -14,27 +14,27 @@ devtools.lazyRequireGetter(this, "promis
 devtools.lazyRequireGetter(this, "EventEmitter",
   "devtools/toolkit/event-emitter");
 devtools.lazyRequireGetter(this, "DevToolsUtils",
   "devtools/toolkit/DevToolsUtils");
 devtools.lazyRequireGetter(this, "FramerateFront",
   "devtools/server/actors/framerate", true);
 
 devtools.lazyRequireGetter(this, "L10N",
-  "devtools/profiler/global", true);
+  "devtools/shared/profiler/global", true);
 devtools.lazyRequireGetter(this, "CATEGORIES",
-  "devtools/profiler/global", true);
+  "devtools/shared/profiler/global", true);
 devtools.lazyRequireGetter(this, "CATEGORY_MAPPINGS",
-  "devtools/profiler/global", true);
+  "devtools/shared/profiler/global", true);
 devtools.lazyRequireGetter(this, "CATEGORY_OTHER",
-  "devtools/profiler/global", true);
+  "devtools/shared/profiler/global", true);
 devtools.lazyRequireGetter(this, "ThreadNode",
-  "devtools/profiler/tree-model", true);
+  "devtools/shared/profiler/tree-model", true);
 devtools.lazyRequireGetter(this, "CallView",
-  "devtools/profiler/tree-view", true);
+  "devtools/shared/profiler/tree-view", true);
 
 devtools.lazyImporter(this, "FileUtils",
   "resource://gre/modules/FileUtils.jsm");
 devtools.lazyImporter(this, "NetUtil",
   "resource://gre/modules/NetUtil.jsm");
 devtools.lazyImporter(this, "LineGraphWidget",
   "resource:///modules/devtools/Graphs.jsm");
 devtools.lazyImporter(this, "BarGraphWidget",
diff --git a/browser/devtools/profiler/test/browser.ini b/browser/devtools/profiler/test/browser.ini
--- a/browser/devtools/profiler/test/browser.ini
+++ b/browser/devtools/profiler/test/browser.ini
@@ -1,16 +1,15 @@
 [DEFAULT]
 subsuite = devtools
 support-files =
   doc_simple-test.html
   head.js
 
 [browser_profiler_aaa_run_first_leaktest.js]
-[browser_profiler_categories.js]
 [browser_profiler_console-record-01.js]
 skip-if = true # Bug 1047124
 [browser_profiler_console-record-02.js]
 skip-if = true # Bug 1047124
 [browser_profiler_console-record-03.js]
 skip-if = true # Bug 1047124
 [browser_profiler_console-record-04.js]
 skip-if = true # Bug 1047124
@@ -19,17 +18,16 @@ skip-if = true # Bug 1047124
 [browser_profiler_console-record-06.js]
 skip-if = true # Bug 1047124
 [browser_profiler_console-record-07.js]
 skip-if = true # Bug 1047124
 [browser_profiler_console-record-08.js]
 skip-if = true # Bug 1047124
 [browser_profiler_console-record-09.js]
 skip-if = true # Bug 1047124
-[browser_profiler_content-check.js]
 [browser_profiler_data-massaging-01.js]
 skip-if = true # Bug 1047124
 [browser_profiler_data-massaging-02.js]
 skip-if = true # Bug 1047124
 [browser_profiler_data-samples.js]
 skip-if = true # Bug 1047124
 [browser_profiler_gecko-pref-changed.js]
 skip-if = true # Bug 1047124
@@ -87,25 +85,8 @@ skip-if = true # Bug 1047124
 [browser_profiler_tabbed-browser-02.js]
 skip-if = true # Bug 1047124
 [browser_profiler_tabbed-browser-03.js]
 skip-if = true # Bug 1047124
 [browser_profiler_tabbed-browser-add-remove-01.js]
 skip-if = true # Bug 1047124
 [browser_profiler_tabbed-browser-add-remove-02.js]
 skip-if = true # Bug 1047124
-[browser_profiler_tree-abstract-01.js]
-[browser_profiler_tree-abstract-02.js]
-[browser_profiler_tree-abstract-03.js]
-[browser_profiler_tree-abstract-04.js]
-[browser_profiler_tree-frame-node.js]
-[browser_profiler_tree-model-01.js]
-[browser_profiler_tree-model-02.js]
-[browser_profiler_tree-model-03.js]
-[browser_profiler_tree-model-04.js]
-[browser_profiler_tree-model-05.js]
-[browser_profiler_tree-view-01.js]
-[browser_profiler_tree-view-02.js]
-[browser_profiler_tree-view-03.js]
-[browser_profiler_tree-view-04.js]
-[browser_profiler_tree-view-05.js]
-[browser_profiler_tree-view-06.js]
-[browser_profiler_tree-view-07.js]
diff --git a/browser/devtools/shared/moz.build b/browser/devtools/shared/moz.build
--- a/browser/devtools/shared/moz.build
+++ b/browser/devtools/shared/moz.build
@@ -26,16 +26,30 @@ EXTRA_JS_MODULES.devtools += [
     'widgets/GraphsWorker.js',
     'widgets/SideMenuWidget.jsm',
     'widgets/SimpleListWidget.jsm',
     'widgets/VariablesView.jsm',
     'widgets/VariablesViewController.jsm',
     'widgets/ViewHelpers.jsm',
 ]
 
+EXTRA_JS_MODULES.devtools.shared.profiler += [
+    'profiler/global.js',
+    'profiler/tree-model.js',
+    'profiler/tree-view.js',
+]
+
+EXTRA_JS_MODULES.devtools.shared.timeline += [
+    'timeline/global.js',
+    'timeline/marker-details.js',
+    'timeline/markers-overview.js',
+    'timeline/memory-overview.js',
+    'timeline/waterfall.js',
+]
+
 EXTRA_JS_MODULES.devtools.shared += [
     'autocomplete-popup.js',
     'd3.js',
     'doorhanger.js',
     'frame-script-utils.js',
     'inplace-editor.js',
     'observable-object.js',
     'options-view.js',
diff --git a/browser/devtools/profiler/utils/global.js b/browser/devtools/shared/profiler/global.js
rename from browser/devtools/profiler/utils/global.js
rename to browser/devtools/shared/profiler/global.js
diff --git a/browser/devtools/profiler/utils/tree-model.js b/browser/devtools/shared/profiler/tree-model.js
rename from browser/devtools/profiler/utils/tree-model.js
rename to browser/devtools/shared/profiler/tree-model.js
--- a/browser/devtools/profiler/utils/tree-model.js
+++ b/browser/devtools/shared/profiler/tree-model.js
@@ -2,21 +2,21 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const {Cc, Ci, Cu, Cr} = require("chrome");
 
 loader.lazyRequireGetter(this, "Services");
 loader.lazyRequireGetter(this, "L10N",
-  "devtools/profiler/global", true);
+  "devtools/shared/profiler/global", true);
 loader.lazyRequireGetter(this, "CATEGORY_MAPPINGS",
-  "devtools/profiler/global", true);
+  "devtools/shared/profiler/global", true);
 loader.lazyRequireGetter(this, "CATEGORY_JIT",
-  "devtools/profiler/global", true);
+  "devtools/shared/profiler/global", true);
 
 const CHROME_SCHEMES = ["chrome://", "resource://"];
 const CONTENT_SCHEMES = ["http://", "https://", "file://"];
 
 exports.ThreadNode = ThreadNode;
 exports.FrameNode = FrameNode;
 exports.FrameNode.isContent = isContent;
 
diff --git a/browser/devtools/profiler/utils/tree-view.js b/browser/devtools/shared/profiler/tree-view.js
rename from browser/devtools/profiler/utils/tree-view.js
rename to browser/devtools/shared/profiler/tree-view.js
--- a/browser/devtools/profiler/utils/tree-view.js
+++ b/browser/devtools/shared/profiler/tree-view.js
@@ -1,17 +1,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const {Cc, Ci, Cu, Cr} = require("chrome");
 
 loader.lazyRequireGetter(this, "L10N",
-  "devtools/profiler/global", true);
+  "devtools/shared/profiler/global", true);
 
 loader.lazyImporter(this, "Heritage",
   "resource:///modules/devtools/ViewHelpers.jsm");
 loader.lazyImporter(this, "AbstractTreeItem",
   "resource:///modules/devtools/AbstractTreeItem.jsm");
 
 const MILLISECOND_UNITS = L10N.getStr("table.ms");
 const PERCENTAGE_UNITS = L10N.getStr("table.percentage");
diff --git a/browser/devtools/shared/test/browser_flame-graph-utils-03.js b/browser/devtools/shared/test/browser_flame-graph-utils-03.js
--- a/browser/devtools/shared/test/browser_flame-graph-utils-03.js
+++ b/browser/devtools/shared/test/browser_flame-graph-utils-03.js
@@ -1,15 +1,15 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests if platform frames are removed from the flame graph data.
 
 let {FlameGraphUtils} = Cu.import("resource:///modules/devtools/FlameGraph.jsm", {});
-let {FrameNode} = devtools.require("devtools/profiler/tree-model");
+let {FrameNode} = devtools.require("devtools/shared/profiler/tree-model");
 
 add_task(function*() {
   yield promiseTab("about:blank");
   yield performTest();
   gBrowser.removeCurrentTab();
 });
 
 function* performTest() {
diff --git a/browser/devtools/shared/test/browser_flame-graph-utils-04.js b/browser/devtools/shared/test/browser_flame-graph-utils-04.js
--- a/browser/devtools/shared/test/browser_flame-graph-utils-04.js
+++ b/browser/devtools/shared/test/browser_flame-graph-utils-04.js
@@ -1,15 +1,15 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests if (idle) nodes are added when necessary in the flame graph data.
 
 let {FlameGraphUtils} = Cu.import("resource:///modules/devtools/FlameGraph.jsm", {});
-let {FrameNode} = devtools.require("devtools/profiler/tree-model");
+let {FrameNode} = devtools.require("devtools/shared/profiler/tree-model");
 
 add_task(function*() {
   yield promiseTab("about:blank");
   yield performTest();
   gBrowser.removeCurrentTab();
 });
 
 function* performTest() {
diff --git a/browser/devtools/timeline/widgets/global.js b/browser/devtools/shared/timeline/global.js
rename from browser/devtools/timeline/widgets/global.js
rename to browser/devtools/shared/timeline/global.js
diff --git a/browser/devtools/timeline/widgets/marker-details.js b/browser/devtools/shared/timeline/marker-details.js
rename from browser/devtools/timeline/widgets/marker-details.js
rename to browser/devtools/shared/timeline/marker-details.js
--- a/browser/devtools/timeline/widgets/marker-details.js
+++ b/browser/devtools/shared/timeline/marker-details.js
@@ -6,19 +6,19 @@
 let { Ci } = require("chrome");
 let WebConsoleUtils = require("devtools/toolkit/webconsole/utils").Utils;
 
 /**
  * This file contains the rendering code for the marker sidebar.
  */
 
 loader.lazyRequireGetter(this, "L10N",
-  "devtools/timeline/global", true);
+  "devtools/shared/timeline/global", true);
 loader.lazyRequireGetter(this, "TIMELINE_BLUEPRINT",
-  "devtools/timeline/global", true);
+  "devtools/shared/timeline/global", true);
 loader.lazyRequireGetter(this, "EventEmitter",
   "devtools/toolkit/event-emitter");
 
 /**
  * A detailed view for one single marker.
  *
  * @param nsIDOMNode parent
  *        The parent node holding the view.
diff --git a/browser/devtools/timeline/widgets/markers-overview.js b/browser/devtools/shared/timeline/markers-overview.js
rename from browser/devtools/timeline/widgets/markers-overview.js
rename to browser/devtools/shared/timeline/markers-overview.js
--- a/browser/devtools/timeline/widgets/markers-overview.js
+++ b/browser/devtools/shared/timeline/markers-overview.js
@@ -13,17 +13,17 @@ const {Cc, Ci, Cu, Cr} = require("chrome
 
 Cu.import("resource:///modules/devtools/Graphs.jsm");
 Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
 
 const { colorUtils: { setAlpha }} = require("devtools/css-color");
 const { getColor } = require("devtools/shared/theme");
 
 loader.lazyRequireGetter(this, "L10N",
-  "devtools/timeline/global", true);
+  "devtools/shared/timeline/global", true);
 
 const OVERVIEW_HEADER_HEIGHT = 14; // px
 const OVERVIEW_ROW_HEIGHT = 11; // px
 
 const OVERVIEW_SELECTION_LINE_COLOR = "#666";
 const OVERVIEW_CLIPHEAD_LINE_COLOR = "#555";
 
 const OVERVIEW_HEADER_TICKS_MULTIPLE = 100; // ms
diff --git a/browser/devtools/timeline/widgets/memory-overview.js b/browser/devtools/shared/timeline/memory-overview.js
rename from browser/devtools/timeline/widgets/memory-overview.js
rename to browser/devtools/shared/timeline/memory-overview.js
--- a/browser/devtools/timeline/widgets/memory-overview.js
+++ b/browser/devtools/shared/timeline/memory-overview.js
@@ -12,17 +12,17 @@ const {Cc, Ci, Cu, Cr} = require("chrome
 
 Cu.import("resource:///modules/devtools/Graphs.jsm");
 Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
 
 const { colorUtils: { setAlpha }} = require("devtools/css-color");
 const { getColor } = require("devtools/shared/theme");
 
 loader.lazyRequireGetter(this, "L10N",
-  "devtools/timeline/global", true);
+  "devtools/shared/timeline/global", true);
 
 const OVERVIEW_DAMPEN_VALUES = 0.95;
 
 const OVERVIEW_HEIGHT = 30; // px
 const OVERVIEW_STROKE_WIDTH = 1; // px
 const OVERVIEW_MAXIMUM_LINE_COLOR = "rgba(0,136,204,0.4)";
 const OVERVIEW_AVERAGE_LINE_COLOR = "rgba(0,136,204,0.7)";
 const OVERVIEW_MINIMUM_LINE_COLOR = "rgba(0,136,204,0.9)";
diff --git a/browser/devtools/timeline/widgets/waterfall.js b/browser/devtools/shared/timeline/waterfall.js
rename from browser/devtools/timeline/widgets/waterfall.js
rename to browser/devtools/shared/timeline/waterfall.js
--- a/browser/devtools/timeline/widgets/waterfall.js
+++ b/browser/devtools/shared/timeline/waterfall.js
@@ -6,17 +6,17 @@
 /**
  * This file contains the "waterfall" view, essentially a detailed list
  * of all the markers in the timeline data.
  */
 
 const {Ci, Cu} = require("chrome");
 
 loader.lazyRequireGetter(this, "L10N",
-  "devtools/timeline/global", true);
+  "devtools/shared/timeline/global", true);
 
 loader.lazyImporter(this, "setNamedTimeout",
   "resource:///modules/devtools/ViewHelpers.jsm");
 loader.lazyImporter(this, "clearNamedTimeout",
   "resource:///modules/devtools/ViewHelpers.jsm");
 loader.lazyRequireGetter(this, "EventEmitter",
   "devtools/toolkit/event-emitter");
 
diff --git a/browser/devtools/timeline/moz.build b/browser/devtools/timeline/moz.build
--- a/browser/devtools/timeline/moz.build
+++ b/browser/devtools/timeline/moz.build
@@ -1,15 +1,10 @@
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 EXTRA_JS_MODULES.devtools.timeline += [
     'panel.js',
-    'widgets/global.js',
-    'widgets/marker-details.js',
-    'widgets/markers-overview.js',
-    'widgets/memory-overview.js',
-    'widgets/waterfall.js'
 ]
 
 BROWSER_CHROME_MANIFESTS += ['test/browser.ini']
diff --git a/browser/devtools/timeline/test/browser.ini b/browser/devtools/timeline/test/browser.ini
--- a/browser/devtools/timeline/test/browser.ini
+++ b/browser/devtools/timeline/test/browser.ini
@@ -1,16 +1,15 @@
 [DEFAULT]
 subsuite = devtools
 support-files =
   doc_simple-test.html
   head.js
 
 [browser_timeline_aaa_run_first_leaktest.js]
-[browser_timeline_blueprint.js]
 [browser_timeline_filters.js]
 [browser_timeline_overview-initial-selection-01.js]
 [browser_timeline_overview-initial-selection-02.js]
 [browser_timeline_overview-update.js]
 [browser_timeline_overview-theme.js]
 [browser_timeline_panels.js]
 [browser_timeline_recording-without-memory.js]
 [browser_timeline_recording.js]
diff --git a/browser/devtools/timeline/test/browser_timeline_waterfall-sidebar.js b/browser/devtools/timeline/test/browser_timeline_waterfall-sidebar.js
--- a/browser/devtools/timeline/test/browser_timeline_waterfall-sidebar.js
+++ b/browser/devtools/timeline/test/browser_timeline_waterfall-sidebar.js
@@ -3,17 +3,17 @@
 
 /**
  * Tests if the sidebar is properly updated when a marker is selected.
  */
 
 add_task(function*() {
   let { target, panel } = yield initTimelinePanel(SIMPLE_URL);
   let { $, $$, EVENTS, TimelineController, TimelineView, TIMELINE_BLUEPRINT} = panel.panelWin;
-  let { L10N } = devtools.require("devtools/timeline/global");
+  let { L10N } = devtools.require("devtools/shared/timeline/global");
 
   yield TimelineController.toggleRecording();
   ok(true, "Recording has started.");
 
   yield waitUntil(() => {
     // Wait until we get 3 different markers.
     let markers = TimelineController.getMarkers();
     return markers.some(m => m.name == "Styles") &&
diff --git a/browser/devtools/timeline/test/browser_timeline_waterfall-styles.js b/browser/devtools/timeline/test/browser_timeline_waterfall-styles.js
--- a/browser/devtools/timeline/test/browser_timeline_waterfall-styles.js
+++ b/browser/devtools/timeline/test/browser_timeline_waterfall-styles.js
@@ -14,17 +14,17 @@ var gRGB_TO_HSL = {
  "rgb(240, 195, 111)": "hsl(39,82%,69%)",
  "rgb(227, 155, 22)": "hsl(39,82%,49%)",
  "rgb(204, 204, 204)": "hsl(0,0%,80%)",
  "rgb(153, 153, 153)": "hsl(0,0%,60%)",
 };
 
 add_task(function*() {
   let { target, panel } = yield initTimelinePanel(SIMPLE_URL);
-  let { TIMELINE_BLUEPRINT } = devtools.require("devtools/timeline/global");
+  let { TIMELINE_BLUEPRINT } = devtools.require("devtools/shared/timeline/global");
   let { $, $$, EVENTS, TimelineController } = panel.panelWin;
 
   yield TimelineController.toggleRecording();
   ok(true, "Recording has started.");
 
   let updated = 0;
   panel.panelWin.on(EVENTS.OVERVIEW_UPDATED, () => updated++);
 
diff --git a/browser/devtools/timeline/timeline.js b/browser/devtools/timeline/timeline.js
--- a/browser/devtools/timeline/timeline.js
+++ b/browser/devtools/timeline/timeline.js
@@ -11,25 +11,25 @@ Cu.import("resource://gre/modules/devtoo
 Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
 Cu.import("resource:///modules/devtools/gDevTools.jsm");
 
 devtools.lazyRequireGetter(this, "promise");
 devtools.lazyRequireGetter(this, "EventEmitter",
   "devtools/toolkit/event-emitter");
 
 devtools.lazyRequireGetter(this, "MarkersOverview",
-  "devtools/timeline/markers-overview", true);
+  "devtools/shared/timeline/markers-overview", true);
 devtools.lazyRequireGetter(this, "MemoryOverview",
-  "devtools/timeline/memory-overview", true);
+  "devtools/shared/timeline/memory-overview", true);
 devtools.lazyRequireGetter(this, "Waterfall",
-  "devtools/timeline/waterfall", true);
+  "devtools/shared/timeline/waterfall", true);
 devtools.lazyRequireGetter(this, "MarkerDetails",
-  "devtools/timeline/marker-details", true);
+  "devtools/shared/timeline/marker-details", true);
 devtools.lazyRequireGetter(this, "TIMELINE_BLUEPRINT",
-  "devtools/timeline/global", true);
+  "devtools/shared/timeline/global", true);
 
 devtools.lazyImporter(this, "CanvasGraphUtils",
   "resource:///modules/devtools/Graphs.jsm");
 
 devtools.lazyImporter(this, "PluralForm",
   "resource://gre/modules/PluralForm.jsm");
 
 const OVERVIEW_UPDATE_INTERVAL = 200;
