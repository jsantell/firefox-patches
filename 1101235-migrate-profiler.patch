# HG changeset patch
# User Jordan Santell <jsantell@mozilla.com>
# Date 1423612664 28800
#      Tue Feb 10 15:57:44 2015 -0800
# Node ID 49e810536ee81c0767424a7d65a15b62f40f644b
# Parent  38a668c3efaa990ab0585749f21b4ccc76fe71cc
[mq]: 1101235-1

diff --git a/browser/devtools/performance/performance-controller.js b/browser/devtools/performance/performance-controller.js
--- a/browser/devtools/performance/performance-controller.js
+++ b/browser/devtools/performance/performance-controller.js
@@ -15,35 +15,35 @@ devtools.lazyRequireGetter(this, "promis
 devtools.lazyRequireGetter(this, "EventEmitter",
   "devtools/toolkit/event-emitter");
 devtools.lazyRequireGetter(this, "DevToolsUtils",
   "devtools/toolkit/DevToolsUtils");
 
 devtools.lazyRequireGetter(this, "TIMELINE_BLUEPRINT",
   "devtools/timeline/global", true);
 devtools.lazyRequireGetter(this, "L10N",
-  "devtools/profiler/global", true);
+  "devtools/shared/profiler-globals", true);
 devtools.lazyRequireGetter(this, "RecordingUtils",
   "devtools/performance/recording-utils", true);
 devtools.lazyRequireGetter(this, "RecordingModel",
   "devtools/performance/recording-model", true);
 devtools.lazyRequireGetter(this, "MarkersOverview",
   "devtools/timeline/markers-overview", true);
 devtools.lazyRequireGetter(this, "MemoryOverview",
   "devtools/timeline/memory-overview", true);
 devtools.lazyRequireGetter(this, "Waterfall",
   "devtools/timeline/waterfall", true);
 devtools.lazyRequireGetter(this, "MarkerDetails",
   "devtools/timeline/marker-details", true);
 devtools.lazyRequireGetter(this, "CallView",
-  "devtools/profiler/tree-view", true);
+  "devtools/shared/tree-view", true);
 devtools.lazyRequireGetter(this, "ThreadNode",
-  "devtools/profiler/tree-model", true);
+  "devtools/shared/tree-model", true);
 devtools.lazyRequireGetter(this, "FrameNode",
-  "devtools/profiler/tree-model", true);
+  "devtools/shared/tree-model", true);
 devtools.lazyRequireGetter(this, "OptionsView",
   "devtools/shared/options-view", true);
 
 devtools.lazyImporter(this, "CanvasGraphUtils",
   "resource:///modules/devtools/Graphs.jsm");
 devtools.lazyImporter(this, "LineGraphWidget",
   "resource:///modules/devtools/Graphs.jsm");
 devtools.lazyImporter(this, "FlameGraphUtils",
diff --git a/browser/devtools/performance/test/browser_perf-events-calltree.js b/browser/devtools/performance/test/browser_perf-events-calltree.js
--- a/browser/devtools/performance/test/browser_perf-events-calltree.js
+++ b/browser/devtools/performance/test/browser_perf-events-calltree.js
@@ -1,15 +1,15 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests that the call tree up/down events work for js calltree and memory calltree.
  */
-let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
+let { ThreadNode } = devtools.require("devtools/shared/tree-model");
 function spawnTest () {
   let focus = 0;
   let focusEvent = () => focus++;
 
   Services.prefs.setBoolPref(MEMORY_PREF, true);
 
   let { panel } = yield initPerformance(SIMPLE_URL);
   let { EVENTS, $, DetailsView, JsCallTreeView, MemoryCallTreeView } = panel.panelWin;
diff --git a/browser/devtools/profiler/moz.build b/browser/devtools/profiler/moz.build
--- a/browser/devtools/profiler/moz.build
+++ b/browser/devtools/profiler/moz.build
@@ -1,14 +1,11 @@
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 EXTRA_JS_MODULES.devtools.profiler += [
     'panel.js',
-    'utils/global.js',
-    'utils/shared.js',
-    'utils/tree-model.js',
-    'utils/tree-view.js'
+    'utils/shared.js'
 ]
 
 BROWSER_CHROME_MANIFESTS += ['test/browser.ini']
diff --git a/browser/devtools/profiler/profiler.js b/browser/devtools/profiler/profiler.js
--- a/browser/devtools/profiler/profiler.js
+++ b/browser/devtools/profiler/profiler.js
@@ -14,27 +14,27 @@ devtools.lazyRequireGetter(this, "promis
 devtools.lazyRequireGetter(this, "EventEmitter",
   "devtools/toolkit/event-emitter");
 devtools.lazyRequireGetter(this, "DevToolsUtils",
   "devtools/toolkit/DevToolsUtils");
 devtools.lazyRequireGetter(this, "FramerateFront",
   "devtools/server/actors/framerate", true);
 
 devtools.lazyRequireGetter(this, "L10N",
-  "devtools/profiler/global", true);
+  "devtools/shared/profiler-globals", true);
 devtools.lazyRequireGetter(this, "CATEGORIES",
-  "devtools/profiler/global", true);
+  "devtools/shared/profiler-globals", true);
 devtools.lazyRequireGetter(this, "CATEGORY_MAPPINGS",
-  "devtools/profiler/global", true);
+  "devtools/shared/profiler-globals", true);
 devtools.lazyRequireGetter(this, "CATEGORY_OTHER",
-  "devtools/profiler/global", true);
+  "devtools/shared/profiler-globals", true);
 devtools.lazyRequireGetter(this, "ThreadNode",
-  "devtools/profiler/tree-model", true);
+  "devtools/shared/tree-model", true);
 devtools.lazyRequireGetter(this, "CallView",
-  "devtools/profiler/tree-view", true);
+  "devtools/shared/tree-view", true);
 
 devtools.lazyImporter(this, "FileUtils",
   "resource://gre/modules/FileUtils.jsm");
 devtools.lazyImporter(this, "NetUtil",
   "resource://gre/modules/NetUtil.jsm");
 devtools.lazyImporter(this, "LineGraphWidget",
   "resource:///modules/devtools/Graphs.jsm");
 devtools.lazyImporter(this, "BarGraphWidget",
diff --git a/browser/devtools/profiler/test/browser.ini b/browser/devtools/profiler/test/browser.ini
--- a/browser/devtools/profiler/test/browser.ini
+++ b/browser/devtools/profiler/test/browser.ini
@@ -1,16 +1,15 @@
 [DEFAULT]
 subsuite = devtools
 support-files =
   doc_simple-test.html
   head.js
 
 [browser_profiler_aaa_run_first_leaktest.js]
-[browser_profiler_categories.js]
 [browser_profiler_console-record-01.js]
 skip-if = true # Bug 1047124
 [browser_profiler_console-record-02.js]
 skip-if = true # Bug 1047124
 [browser_profiler_console-record-03.js]
 skip-if = true # Bug 1047124
 [browser_profiler_console-record-04.js]
 skip-if = true # Bug 1047124
@@ -19,17 +18,16 @@ skip-if = true # Bug 1047124
 [browser_profiler_console-record-06.js]
 skip-if = true # Bug 1047124
 [browser_profiler_console-record-07.js]
 skip-if = true # Bug 1047124
 [browser_profiler_console-record-08.js]
 skip-if = true # Bug 1047124
 [browser_profiler_console-record-09.js]
 skip-if = true # Bug 1047124
-[browser_profiler_content-check.js]
 [browser_profiler_data-massaging-01.js]
 skip-if = true # Bug 1047124
 [browser_profiler_data-massaging-02.js]
 skip-if = true # Bug 1047124
 [browser_profiler_data-samples.js]
 skip-if = true # Bug 1047124
 [browser_profiler_gecko-pref-changed.js]
 skip-if = true # Bug 1047124
@@ -87,25 +85,8 @@ skip-if = true # Bug 1047124
 [browser_profiler_tabbed-browser-02.js]
 skip-if = true # Bug 1047124
 [browser_profiler_tabbed-browser-03.js]
 skip-if = true # Bug 1047124
 [browser_profiler_tabbed-browser-add-remove-01.js]
 skip-if = true # Bug 1047124
 [browser_profiler_tabbed-browser-add-remove-02.js]
 skip-if = true # Bug 1047124
-[browser_profiler_tree-abstract-01.js]
-[browser_profiler_tree-abstract-02.js]
-[browser_profiler_tree-abstract-03.js]
-[browser_profiler_tree-abstract-04.js]
-[browser_profiler_tree-frame-node.js]
-[browser_profiler_tree-model-01.js]
-[browser_profiler_tree-model-02.js]
-[browser_profiler_tree-model-03.js]
-[browser_profiler_tree-model-04.js]
-[browser_profiler_tree-model-05.js]
-[browser_profiler_tree-view-01.js]
-[browser_profiler_tree-view-02.js]
-[browser_profiler_tree-view-03.js]
-[browser_profiler_tree-view-04.js]
-[browser_profiler_tree-view-05.js]
-[browser_profiler_tree-view-06.js]
-[browser_profiler_tree-view-07.js]
diff --git a/browser/devtools/shared/moz.build b/browser/devtools/shared/moz.build
--- a/browser/devtools/shared/moz.build
+++ b/browser/devtools/shared/moz.build
@@ -34,19 +34,22 @@ EXTRA_JS_MODULES.devtools += [
 EXTRA_JS_MODULES.devtools.shared += [
     'autocomplete-popup.js',
     'd3.js',
     'doorhanger.js',
     'frame-script-utils.js',
     'inplace-editor.js',
     'observable-object.js',
     'options-view.js',
+    'profiler-globals.js',
     'telemetry.js',
     'theme-switching.js',
     'theme.js',
+    'tree-model.js',
+    'tree-view.js',
     'undo.js',
 ]
 
 EXTRA_JS_MODULES.devtools.shared.widgets += [
     'widgets/CubicBezierWidget.js',
     'widgets/FastListWidget.js',
     'widgets/Spectrum.js',
     'widgets/TableWidget.js',
diff --git a/browser/devtools/profiler/utils/global.js b/browser/devtools/shared/profiler-globals.js
rename from browser/devtools/profiler/utils/global.js
rename to browser/devtools/shared/profiler-globals.js
diff --git a/browser/devtools/shared/test/browser.ini b/browser/devtools/shared/test/browser.ini
--- a/browser/devtools/shared/test/browser.ini
+++ b/browser/devtools/shared/test/browser.ini
@@ -54,16 +54,17 @@ skip-if = e10s # Layouthelpers test shou
 [browser_layoutHelpers-getBoxQuads.js]
 skip-if = e10s # Layouthelpers test should not run in a content page.
 [browser_num-l10n.js]
 [browser_observableobject.js]
 [browser_options-view-01.js]
 [browser_outputparser.js]
 skip-if = e10s # Test intermittently fails with e10s. Bug 1124162.
 [browser_prefs.js]
+[browser_profiler_categories.js]
 [browser_require_basic.js]
 [browser_spectrum.js]
 [browser_theme.js]
 [browser_tableWidget_basic.js]
 [browser_tableWidget_keyboard_interaction.js]
 [browser_tableWidget_mouse_interaction.js]
 skip-if = buildapp == 'mulet'
 [browser_telemetry_button_eyedropper.js]
@@ -91,8 +92,26 @@ skip-if = e10s # Bug 1086492 - Disable t
 [browser_templater_basic.js]
 [browser_toolbar_basic.js]
 [browser_toolbar_tooltip.js]
 [browser_toolbar_webconsole_errors_count.js]
 skip-if = buildapp == 'mulet' || e10s # The developertoolbar error count isn't correct with e10s
 [browser_treeWidget_basic.js]
 [browser_treeWidget_keyboard_interaction.js]
 [browser_treeWidget_mouse_interaction.js]
+[browser_tree-abstract-01.js]
+[browser_tree-abstract-02.js]
+[browser_tree-abstract-03.js]
+[browser_tree-abstract-04.js]
+[browser_tree-frame-node.js]
+[browser_tree-model-01.js]
+[browser_tree-model-02.js]
+[browser_tree-model-03.js]
+[browser_tree-model-04.js]
+[browser_tree-model-05.js]
+[browser_tree-model-06.js]
+[browser_tree-view-01.js]
+[browser_tree-view-02.js]
+[browser_tree-view-03.js]
+[browser_tree-view-04.js]
+[browser_tree-view-05.js]
+[browser_tree-view-06.js]
+[browser_tree-view-07.js]
diff --git a/browser/devtools/shared/test/browser_flame-graph-utils-03.js b/browser/devtools/shared/test/browser_flame-graph-utils-03.js
--- a/browser/devtools/shared/test/browser_flame-graph-utils-03.js
+++ b/browser/devtools/shared/test/browser_flame-graph-utils-03.js
@@ -1,15 +1,15 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests if platform frames are removed from the flame graph data.
 
 let {FlameGraphUtils} = Cu.import("resource:///modules/devtools/FlameGraph.jsm", {});
-let {FrameNode} = devtools.require("devtools/profiler/tree-model");
+let {FrameNode} = devtools.require("devtools/shared/tree-model");
 
 add_task(function*() {
   yield promiseTab("about:blank");
   yield performTest();
   gBrowser.removeCurrentTab();
 });
 
 function* performTest() {
diff --git a/browser/devtools/shared/test/browser_flame-graph-utils-04.js b/browser/devtools/shared/test/browser_flame-graph-utils-04.js
--- a/browser/devtools/shared/test/browser_flame-graph-utils-04.js
+++ b/browser/devtools/shared/test/browser_flame-graph-utils-04.js
@@ -1,15 +1,15 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests if (idle) nodes are added when necessary in the flame graph data.
 
 let {FlameGraphUtils} = Cu.import("resource:///modules/devtools/FlameGraph.jsm", {});
-let {FrameNode} = devtools.require("devtools/profiler/tree-model");
+let {FrameNode} = devtools.require("devtools/shared/tree-model");
 
 add_task(function*() {
   yield promiseTab("about:blank");
   yield performTest();
   gBrowser.removeCurrentTab();
 });
 
 function* performTest() {
diff --git a/browser/devtools/profiler/test/browser_profiler_categories.js b/browser/devtools/shared/test/browser_profiler_categories.js
rename from browser/devtools/profiler/test/browser_profiler_categories.js
rename to browser/devtools/shared/test/browser_profiler_categories.js
--- a/browser/devtools/profiler/test/browser_profiler_categories.js
+++ b/browser/devtools/shared/test/browser_profiler_categories.js
@@ -1,17 +1,17 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if the profiler categories are mapped correctly.
  */
 
 function test() {
-  let global = devtools.require("devtools/profiler/global");
+  let global = devtools.require("devtools/shared/profiler-globals");
   let l10n = global.L10N;
   let categories = global.CATEGORIES;
   let mappings = global.CATEGORY_MAPPINGS;
   let count = categories.length;
 
   ok(count,
     "Should have a non-empty list of categories available.");
 
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-abstract-01.js b/browser/devtools/shared/test/browser_tree-abstract-01.js
rename from browser/devtools/profiler/test/browser_profiler_tree-abstract-01.js
rename to browser/devtools/shared/test/browser_tree-abstract-01.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-abstract-01.js
+++ b/browser/devtools/shared/test/browser_tree-abstract-01.js
@@ -4,17 +4,17 @@
 /**
  * Tests if the abstract tree base class for the profiler's tree view
  * works as advertised.
  */
 
 let { AbstractTreeItem } = Cu.import("resource:///modules/devtools/AbstractTreeItem.jsm", {});
 let { Heritage } = Cu.import("resource:///modules/devtools/ViewHelpers.jsm", {});
 
-let test = Task.async(function*() {
+add_task(function*() {
   let container = document.createElement("vbox");
   gBrowser.selectedBrowser.parentNode.appendChild(container);
 
   // Populate the tree and test the root item...
 
   let treeRoot = new MyCustomTreeItem(gDataSrc, { parent: null });
   treeRoot.attachTo(container);
 
@@ -129,17 +129,16 @@ let test = Task.async(function*() {
   is(bazItem.target.MozMarginStart, "20px",
     "The 'baz' node's indentation is correct.");
   is(bazItem.target.textContent, "baz",
     "The 'baz' node's text contents are correct.");
   is(bazItem.container, container,
     "The 'baz' node's container is correct.");
 
   container.remove();
-  finish();
 });
 
 function MyCustomTreeItem(dataSrc, properties) {
   AbstractTreeItem.call(this, properties);
   this.itemDataSrc = dataSrc;
 }
 
 MyCustomTreeItem.prototype = Heritage.extend(AbstractTreeItem.prototype, {
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-abstract-02.js b/browser/devtools/shared/test/browser_tree-abstract-02.js
rename from browser/devtools/profiler/test/browser_profiler_tree-abstract-02.js
rename to browser/devtools/shared/test/browser_tree-abstract-02.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-abstract-02.js
+++ b/browser/devtools/shared/test/browser_tree-abstract-02.js
@@ -4,17 +4,17 @@
 /**
  * Tests if the abstract tree base class for the profiler's tree view
  * has a functional public API.
  */
 
 let { AbstractTreeItem } = Cu.import("resource:///modules/devtools/AbstractTreeItem.jsm", {});
 let { Heritage } = Cu.import("resource:///modules/devtools/ViewHelpers.jsm", {});
 
-let test = Task.async(function*() {
+add_task(function*() {
   let container = document.createElement("vbox");
   gBrowser.selectedBrowser.parentNode.appendChild(container);
 
   // Populate the tree and test `expand`, `collapse` and `getChild`...
 
   let treeRoot = new MyCustomTreeItem(gDataSrc, { parent: null });
   treeRoot.attachTo(container);
 
@@ -132,17 +132,16 @@ let test = Task.async(function*() {
   is(container.childNodes[0], treeRoot.target,
     "The root node should be the only in the container node.");
 
   treeRoot.remove();
   is(container.childNodes.length, 0,
     "The container node should now have no children available.");
 
   container.remove();
-  finish();
 });
 
 function MyCustomTreeItem(dataSrc, properties) {
   AbstractTreeItem.call(this, properties);
   this.itemDataSrc = dataSrc;
 }
 
 MyCustomTreeItem.prototype = Heritage.extend(AbstractTreeItem.prototype, {
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-abstract-03.js b/browser/devtools/shared/test/browser_tree-abstract-03.js
rename from browser/devtools/profiler/test/browser_profiler_tree-abstract-03.js
rename to browser/devtools/shared/test/browser_tree-abstract-03.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-abstract-03.js
+++ b/browser/devtools/shared/test/browser_tree-abstract-03.js
@@ -4,17 +4,17 @@
 /**
  * Tests if the abstract tree base class for the profiler's tree view
  * is keyboard accessible.
  */
 
 let { AbstractTreeItem } = Cu.import("resource:///modules/devtools/AbstractTreeItem.jsm", {});
 let { Heritage } = Cu.import("resource:///modules/devtools/ViewHelpers.jsm", {});
 
-let test = Task.async(function*() {
+add_task(function*() {
   let container = document.createElement("vbox");
   gBrowser.selectedBrowser.parentNode.appendChild(container);
 
   // Populate the tree by pressing RIGHT...
 
   let treeRoot = new MyCustomTreeItem(gDataSrc, { parent: null });
   treeRoot.attachTo(container);
   treeRoot.focus();
@@ -140,17 +140,16 @@ let test = Task.async(function*() {
 
   // Test UP on the root node.
 
   EventUtils.sendKey("UP");
   is(document.commandDispatcher.focusedElement, treeRoot.target,
     "The root node is still focused.");
 
   container.remove();
-  finish();
 });
 
 function MyCustomTreeItem(dataSrc, properties) {
   AbstractTreeItem.call(this, properties);
   this.itemDataSrc = dataSrc;
 }
 
 MyCustomTreeItem.prototype = Heritage.extend(AbstractTreeItem.prototype, {
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-abstract-04.js b/browser/devtools/shared/test/browser_tree-abstract-04.js
rename from browser/devtools/profiler/test/browser_profiler_tree-abstract-04.js
rename to browser/devtools/shared/test/browser_tree-abstract-04.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-abstract-04.js
+++ b/browser/devtools/shared/test/browser_tree-abstract-04.js
@@ -3,17 +3,17 @@
 
 /**
  * Tests that the treeview expander arrow doesn't react to dblclick events.
  */
 
 let { AbstractTreeItem } = Cu.import("resource:///modules/devtools/AbstractTreeItem.jsm", {});
 let { Heritage } = Cu.import("resource:///modules/devtools/ViewHelpers.jsm", {});
 
-let test = Task.async(function*() {
+add_task(function*() {
   let container = document.createElement("vbox");
   gBrowser.selectedBrowser.parentNode.appendChild(container);
 
   // Populate the tree and test the root item...
 
   let treeRoot = new MyCustomTreeItem(gDataSrc, { parent: null });
   treeRoot.attachTo(container);
 
@@ -22,17 +22,16 @@ let test = Task.async(function*() {
   let receivedFocusEvent = treeRoot.once("focus");
   EventUtils.sendMouseEvent({ type: "dblclick" }, treeRoot.target.querySelector(".arrow"));
 
   yield receivedFocusEvent;
   is(treeRoot.expanded, originalTreeRootExpanded,
     "A double click on the arrow was ignored.");
 
   container.remove();
-  finish();
 });
 
 function MyCustomTreeItem(dataSrc, properties) {
   AbstractTreeItem.call(this, properties);
   this.itemDataSrc = dataSrc;
 }
 
 MyCustomTreeItem.prototype = Heritage.extend(AbstractTreeItem.prototype, {
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-frame-node.js b/browser/devtools/shared/test/browser_tree-frame-node.js
rename from browser/devtools/profiler/test/browser_profiler_tree-frame-node.js
rename to browser/devtools/shared/test/browser_tree-frame-node.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-frame-node.js
+++ b/browser/devtools/shared/test/browser_tree-frame-node.js
@@ -1,17 +1,17 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Verifies if FrameNodes retain and parse their data appropriately.
  */
 
-function test() {
-  let { FrameNode } = devtools.require("devtools/profiler/tree-model");
+add_task(function*() {
+  let { FrameNode } = devtools.require("devtools/shared/tree-model");
 
   let frame1 = new FrameNode({
     location: "hello/<.world (http://foo/bar.js:123:987)",
     line: 456
   });
 
   is(frame1.getInfo().nodeType, "Frame",
     "The first frame node has the correct type.");
@@ -171,11 +171,9 @@ function test() {
   is(frame7.getInfo().line, null,
     "The seventh frame node has the correct line.");
   is(frame7.getInfo().column, null,
     "The seventh frame node has the correct column.");
   is(frame7.getInfo().categoryData.abbrev, "js",
     "The seventh frame node has the correct category data.");
   is(frame7.getInfo().isContent, false,
     "The seventh frame node has the correct content flag.");
-
-  finish();
-}
+});
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-model-01.js b/browser/devtools/shared/test/browser_tree-model-01.js
rename from browser/devtools/profiler/test/browser_profiler_tree-model-01.js
rename to browser/devtools/shared/test/browser_tree-model-01.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-model-01.js
+++ b/browser/devtools/shared/test/browser_tree-model-01.js
@@ -1,17 +1,17 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if a call tree model can be correctly computed from a samples array.
  */
 
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
+add_task(function*() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
 
   // Create a root node from a given samples array.
 
   let root = new ThreadNode(gSamples);
 
   // Test the root node.
 
   is(root.duration, 18,
@@ -160,19 +160,17 @@ function test() {
     "The '.A.B.C.D.E.F.G' node has the correct location.");
   is(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls.F.calls.G.sampleTimes.toSource(),
     "[{start:20, end:22}]",
     "The '.A.B.C.D.E.F.G' node has the correct sample times.");
   is(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls.F.calls.G.duration, 2,
     "The '.A.B.C.D.E.F.G' node has the correct duration in milliseconds.");
   is(root.calls.A.calls.B.calls.C.calls.D.calls.E.calls.F.calls.G.samples, 1,
     "The '.A.B.C.D.E.F.G' node has the correct number of samples.");
-
-  finish();
-}
+});
 
 let gSamples = [{
   time: 5,
   frames: [
     { location: "(root)" },
     { location: "A" },
     { location: "B" },
     { location: "C" }
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-model-02.js b/browser/devtools/shared/test/browser_tree-model-02.js
rename from browser/devtools/profiler/test/browser_profiler_tree-model-02.js
rename to browser/devtools/shared/test/browser_tree-model-02.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-model-02.js
+++ b/browser/devtools/shared/test/browser_tree-model-02.js
@@ -1,17 +1,17 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if a call tree model ignores samples with no timing information.
  */
 
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
+add_task(function*() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
 
   // Create a root node from a given samples array.
 
   let root = new ThreadNode(gSamples);
 
   // Test the root node.
 
   is(root.duration, 5,
@@ -31,19 +31,17 @@ function test() {
 
   is(Object.keys(root.calls.A.calls.B.calls).length, 1,
     "The correct number of child calls were calculated for the '.A.B' node.");
   is(Object.keys(root.calls.A.calls.B.calls)[0], "C",
     "The '.A.B' node's only child call is correct.");
 
   is(Object.keys(root.calls.A.calls.B.calls.C.calls).length, 0,
     "The correct number of child calls were calculated for the '.A.B.C' node.");
-
-  finish();
-}
+});
 
 let gSamples = [{
   time: 5,
   frames: [
     { location: "(root)" },
     { location: "A" },
     { location: "B" },
     { location: "C" }
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-model-03.js b/browser/devtools/shared/test/browser_tree-model-03.js
rename from browser/devtools/profiler/test/browser_profiler_tree-model-03.js
rename to browser/devtools/shared/test/browser_tree-model-03.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-model-03.js
+++ b/browser/devtools/shared/test/browser_tree-model-03.js
@@ -1,18 +1,18 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if a call tree model can be correctly computed from a samples array,
  * while at the same time filtering by duration.
  */
 
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
+add_task(function*() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
 
   // Create a root node from a given samples array, filtering by time.
 
   let root = new ThreadNode(gSamples, { startTime: 11, endTime: 18 });
 
   // Test the root node.
 
   is(root.duration, 18,
@@ -41,19 +41,17 @@ function test() {
     "The correct number of child calls were calculated for the '.A.E' node.");
   is(Object.keys(root.calls.A.calls.E.calls)[0], "F",
     "The '.A.E' node's only child call is correct.");
 
   is(Object.keys(root.calls.A.calls.B.calls.D.calls).length, 0,
     "The correct number of child calls were calculated for the '.A.B.D' node.");
   is(Object.keys(root.calls.A.calls.E.calls.F.calls).length, 0,
     "The correct number of child calls were calculated for the '.A.E.F' node.");
-
-  finish();
-}
+});
 
 let gSamples = [{
   time: 5,
   frames: [
     { location: "(root)" },
     { location: "A" },
     { location: "B" },
     { location: "C" }
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-model-04.js b/browser/devtools/shared/test/browser_tree-model-04.js
rename from browser/devtools/profiler/test/browser_profiler_tree-model-04.js
rename to browser/devtools/shared/test/browser_tree-model-04.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-model-04.js
+++ b/browser/devtools/shared/test/browser_tree-model-04.js
@@ -1,18 +1,18 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if a call tree model can be correctly computed from a samples array,
  * while at the same time filtering by duration and content-only frames.
  */
 
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
+add_task(function*() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
 
   // Create a root node from a given samples array, filtering by time.
 
   let root = new ThreadNode(gSamples, { startTime: 11, endTime: 18, contentOnly: true });
 
   // Test the root node.
 
   is(root.duration, 18,
@@ -36,19 +36,17 @@ function test() {
     "The correct number of child calls were calculated for the '.A.E' node.");
   is(Object.keys(root.calls["http://A"].calls["https://E"].calls)[0], "file://F",
     "The '.A.E' node's only child call is correct.");
 
   is(Object.keys(root.calls["http://A"].calls["https://E"].calls["file://F"].calls).length, 0,
     "The correct number of child calls were calculated for the '.A.E.F' node.");
   is(Object.keys(root.calls["http://D"].calls).length, 0,
     "The correct number of child calls were calculated for the '.D' node.");
-
-  finish();
-}
+});
 
 let gSamples = [{
   time: 5,
   frames: [
     { location: "(root)" },
     { location: "http://A" },
     { location: "http://B" },
     { location: "http://C" }
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-model-05.js b/browser/devtools/shared/test/browser_tree-model-05.js
rename from browser/devtools/profiler/test/browser_profiler_tree-model-05.js
rename to browser/devtools/shared/test/browser_tree-model-05.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-model-05.js
+++ b/browser/devtools/shared/test/browser_tree-model-05.js
@@ -37,18 +37,18 @@ let samples = [{
   frames: [
     { location: "(root)" },
     { location: "A" },
     { location: "B" },
     { location: "F" }
   ]
 }];
 
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
+add_task(function*() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
 
   let root = new ThreadNode(samples, { invertTree: true });
 
   is(Object.keys(root.calls).length, 2,
      "Should get the 2 youngest frames, not the 1 oldest frame");
 
   let C = root.calls.C;
   ok(C, "Should have C as a child of the root.");
@@ -69,11 +69,9 @@ function test() {
   let F = root.calls.F;
   ok(F, "Should have F as a child of the root.");
 
   is(Object.keys(F.calls).length, 1);
   ok(F.calls.B, "B called F");
 
   is(Object.keys(F.calls.B.calls).length, 1);
   ok(F.calls.B.calls.A, "A called B called F");
-
-  finish();
-}
+});
diff --git a/browser/devtools/profiler/test/browser_profiler_content-check.js b/browser/devtools/shared/test/browser_tree-model-06.js
rename from browser/devtools/profiler/test/browser_profiler_content-check.js
rename to browser/devtools/shared/test/browser_tree-model-06.js
--- a/browser/devtools/profiler/test/browser_profiler_content-check.js
+++ b/browser/devtools/shared/test/browser_tree-model-06.js
@@ -1,18 +1,18 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests the function testing whether or not a frame is content or chrome
  * works properly.
  */
 
-function test() {
-  let { FrameNode } = devtools.require("devtools/profiler/tree-model");
+add_task(function*() {
+  let { FrameNode } = devtools.require("devtools/shared/tree-model");
 
   ok(FrameNode.isContent({ location: "http://foo" }),
     "Verifying content/chrome frames is working properly.");
   ok(FrameNode.isContent({ location: "https://foo" }),
     "Verifying content/chrome frames is working properly.");
   ok(FrameNode.isContent({ location: "file://foo" }),
     "Verifying content/chrome frames is working properly.");
 
@@ -41,11 +41,9 @@ function test() {
     "Verifying content/chrome frames is working properly.");
 
   ok(!FrameNode.isContent({ category: 1, location: "file://foo -> http://bar" }),
     "Verifying content/chrome frames is working properly.");
   ok(!FrameNode.isContent({ category: 1, location: "file://foo -> https://bar" }),
     "Verifying content/chrome frames is working properly.");
   ok(!FrameNode.isContent({ category: 1, location: "file://foo -> file://bar" }),
     "Verifying content/chrome frames is working properly.");
-
-  finish();
-}
+});
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-01.js b/browser/devtools/shared/test/browser_tree-view-01.js
rename from browser/devtools/profiler/test/browser_profiler_tree-view-01.js
rename to browser/devtools/shared/test/browser_tree-view-01.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-01.js
+++ b/browser/devtools/shared/test/browser_tree-view-01.js
@@ -1,19 +1,19 @@
 /* Any copyright is dedicated to the Public Domain.
    http://foo/bar/creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if the profiler's tree view implementation works properly and
  * creates the correct column structure.
  */
 
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
+add_task(function*() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+  let { CallView } = devtools.require("devtools/shared/tree-view");
 
   let threadNode = new ThreadNode(gSamples);
   let treeRoot = new CallView({ frame: threadNode });
 
   let container = document.createElement("vbox");
   treeRoot.autoExpandDepth = 0;
   treeRoot.attachTo(container);
 
@@ -61,19 +61,17 @@ function test() {
     "The root node in the tree has an samples cell.");
   is(container.childNodes[0].childNodes[6].getAttribute("value"), "4",
     "The root node in the tree has the correct samples cell value.");
 
   is(container.childNodes[0].childNodes[7].getAttribute("type"), "function",
     "The root node in the tree has a function cell.");
   is(container.childNodes[0].childNodes[7].style.MozMarginStart, "0px",
     "The root node in the tree has the correct indentation.");
-
-  finish();
-}
+});
 
 let gSamples = [{
   time: 5,
   frames: [
     { category: 8,  location: "(root)" },
     { category: 8,  location: "A (http://foo/bar/baz:12)" },
     { category: 16, location: "B (http://foo/bar/baz:34)" },
     { category: 32, location: "C (http://foo/bar/baz:56)" }
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-02.js b/browser/devtools/shared/test/browser_tree-view-02.js
rename from browser/devtools/profiler/test/browser_profiler_tree-view-02.js
rename to browser/devtools/shared/test/browser_tree-view-02.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-02.js
+++ b/browser/devtools/shared/test/browser_tree-view-02.js
@@ -1,19 +1,19 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if the profiler's tree view implementation works properly and
  * creates the correct column structure after expanding some of the nodes.
  */
 
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
+add_task(function*() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+  let { CallView } = devtools.require("devtools/shared/tree-view");
 
   let threadNode = new ThreadNode(gSamples);
   let treeRoot = new CallView({ frame: threadNode });
 
   let container = document.createElement("vbox");
   treeRoot.autoExpandDepth = 0;
   treeRoot.attachTo(container);
 
@@ -114,19 +114,17 @@ function test() {
   ok($$fun(".call-tree-url")[3].getAttribute("tooltiptext").contains("http://foo/bar/baz"),
     "The .A.E node's function cell displays the correct url tooltiptext.");
   is($$fun(".call-tree-line")[3].getAttribute("value"), ":90",
     "The .A.E node's function cell displays the correct line.");
   is($$fun(".call-tree-host")[3].getAttribute("value"), "foo",
     "The .A.E node's function cell displays the correct host.");
   is($$fun(".call-tree-category")[3].getAttribute("value"), "GC",
     "The .A.E node's function cell displays the correct category.");
-
-  finish();
-}
+});
 
 let gSamples = [{
   time: 5,
   frames: [
     { category: 8,  location: "(root)" },
     { category: 8,  location: "A (http://foo/bar/baz:12)" },
     { category: 16, location: "B (http://foo/bar/baz:34)" },
     { category: 32, location: "C (http://foo/bar/baz:56)" }
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-03.js b/browser/devtools/shared/test/browser_tree-view-03.js
rename from browser/devtools/profiler/test/browser_profiler_tree-view-03.js
rename to browser/devtools/shared/test/browser_tree-view-03.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-03.js
+++ b/browser/devtools/shared/test/browser_tree-view-03.js
@@ -1,19 +1,19 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if the profiler's tree view implementation works properly and
  * creates the correct column structure and can auto-expand all nodes.
  */
 
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
+add_task(function*() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+  let { CallView } = devtools.require("devtools/shared/tree-view");
 
   let threadNode = new ThreadNode(gSamples);
   let treeRoot = new CallView({ frame: threadNode });
 
   let container = document.createElement("vbox");
   treeRoot.attachTo(container);
 
   let $$fun = i => container.querySelectorAll(".call-tree-cell[type=function]")[i];
@@ -64,19 +64,17 @@ function test() {
   is($$duration(3).getAttribute("value"), "3 ms",
     "The .A.B.D node's function cell displays the correct duration.");
   is($$duration(4).getAttribute("value"), "5 ms",
     "The .A.B.C node's function cell displays the correct duration.");
   is($$duration(5).getAttribute("value"), "7 ms",
     "The .A.E node's function cell displays the correct duration.");
   is($$duration(6).getAttribute("value"), "7 ms",
     "The .A.E.F node's function cell displays the correct duration.");
-
-  finish();
-}
+});
 
 let gSamples = [{
   time: 5,
   frames: [
     { category: 8,  location: "(root)" },
     { category: 8,  location: "A (http://foo/bar/baz:12)" },
     { category: 16, location: "B (http://foo/bar/baz:34)" },
     { category: 32, location: "C (http://foo/bar/baz:56)" }
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-04.js b/browser/devtools/shared/test/browser_tree-view-04.js
rename from browser/devtools/profiler/test/browser_profiler_tree-view-04.js
rename to browser/devtools/shared/test/browser_tree-view-04.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-04.js
+++ b/browser/devtools/shared/test/browser_tree-view-04.js
@@ -1,19 +1,19 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if the profiler's tree view implementation works properly and
  * creates the correct DOM nodes in the correct order.
  */
 
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
+add_task(function*() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+  let { CallView } = devtools.require("devtools/shared/tree-view");
 
   let threadNode = new ThreadNode(gSamples);
   let treeRoot = new CallView({ frame: threadNode });
 
   let container = document.createElement("vbox");
   treeRoot.attachTo(container);
 
   is(treeRoot.target.getAttribute("origin"), "chrome",
@@ -78,19 +78,17 @@ function test() {
   is(functionCell.childNodes[5].className, "plain call-tree-host",
     "The fifth node displayed for function cells is correct.");
   is(functionCell.childNodes[6].className, "plain call-tree-zoom",
     "The sixth node displayed for function cells is correct.");
   is(functionCell.childNodes[7].tagName, "spacer",
     "The seventh node displayed for function cells is correct.");
   is(functionCell.childNodes[8].className, "plain call-tree-category",
     "The eight node displayed for function cells is correct.");
-
-  finish();
-}
+});
 
 let gSamples = [{
   time: 5,
   frames: [
     { category: 8,  location: "(root)" },
     { category: 8,  location: "A (http://foo/bar/baz:12)" },
     { category: 16, location: "B (http://foo/bar/baz:34)" },
     { category: 32, location: "C (http://foo/bar/baz:56)" }
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-05.js b/browser/devtools/shared/test/browser_tree-view-05.js
rename from browser/devtools/profiler/test/browser_profiler_tree-view-05.js
rename to browser/devtools/shared/test/browser_tree-view-05.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-05.js
+++ b/browser/devtools/shared/test/browser_tree-view-05.js
@@ -1,19 +1,19 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if the profiler's tree view implementation works properly and
  * can toggle categories hidden or visible.
  */
 
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
+add_task(function*() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+  let { CallView } = devtools.require("devtools/shared/tree-view");
 
   let threadNode = new ThreadNode(gSamples);
   let treeRoot = new CallView({ frame: threadNode });
 
   let container = document.createElement("vbox");
   treeRoot.attachTo(container);
 
   let categories = container.querySelectorAll(".call-tree-category");
@@ -22,19 +22,17 @@ function test() {
   ok(!container.hasAttribute("categories-hidden"),
     "All categories should be visible in the tree.");
 
   treeRoot.toggleCategories(false);
   is(categories.length, 7,
     "The call tree displays the same number of categories.");
   ok(container.hasAttribute("categories-hidden"),
     "All categories should now be hidden in the tree.");
-
-  finish();
-}
+});
 
 let gSamples = [{
   time: 5,
   frames: [
     { category: 8,  location: "(root)" },
     { category: 8,  location: "A (http://foo/bar/baz:12)" },
     { category: 16, location: "B (http://foo/bar/baz:34)" },
     { category: 32, location: "C (http://foo/bar/baz:56)" }
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-06.js b/browser/devtools/shared/test/browser_tree-view-06.js
rename from browser/devtools/profiler/test/browser_profiler_tree-view-06.js
rename to browser/devtools/shared/test/browser_tree-view-06.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-06.js
+++ b/browser/devtools/shared/test/browser_tree-view-06.js
@@ -1,19 +1,19 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if the profiler's tree view implementation works properly and
  * correctly emits events when certain DOM nodes are clicked.
  */
 
-let test = Task.async(function*() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
+add_task(function*() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+  let { CallView } = devtools.require("devtools/shared/tree-view");
 
   let threadNode = new ThreadNode(gSamples);
   let treeRoot = new CallView({ frame: threadNode });
 
   let container = document.createElement("vbox");
   treeRoot.attachTo(container);
 
   let A = treeRoot.getChild();
@@ -26,18 +26,16 @@ let test = Task.async(function*() {
   let eventItem = yield receivedLinkEvent;
   is(eventItem, D, "The 'link' event target is correct.");
 
   let receivedZoomEvent = treeRoot.once("zoom");
   EventUtils.sendMouseEvent({ type: "mousedown" }, D.target.querySelector(".call-tree-zoom"));
 
   eventItem = yield receivedZoomEvent;
   is(eventItem, D, "The 'zoom' event target is correct.");
-
-  finish();
 });
 
 let gSamples = [{
   time: 5,
   frames: [
     { category: 8,  location: "(root)" },
     { category: 8,  location: "A (http://foo/bar/baz:12)" },
     { category: 16, location: "B (http://foo/bar/baz:34)" },
diff --git a/browser/devtools/profiler/test/browser_profiler_tree-view-07.js b/browser/devtools/shared/test/browser_tree-view-07.js
rename from browser/devtools/profiler/test/browser_profiler_tree-view-07.js
rename to browser/devtools/shared/test/browser_tree-view-07.js
--- a/browser/devtools/profiler/test/browser_profiler_tree-view-07.js
+++ b/browser/devtools/shared/test/browser_tree-view-07.js
@@ -1,19 +1,19 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
  * Tests if the profiler's tree view implementation works properly and
  * has the correct 'root', 'parent', 'level' etc. accessors on child nodes.
  */
 
-function test() {
-  let { ThreadNode } = devtools.require("devtools/profiler/tree-model");
-  let { CallView } = devtools.require("devtools/profiler/tree-view");
+add_task(function*() {
+  let { ThreadNode } = devtools.require("devtools/shared/tree-model");
+  let { CallView } = devtools.require("devtools/shared/tree-view");
 
   let threadNode = new ThreadNode(gSamples);
   let treeRoot = new CallView({ frame: threadNode });
 
   let container = document.createElement("vbox");
   container.id = "call-tree-container";
   treeRoot.attachTo(container);
 
@@ -26,19 +26,17 @@ function test() {
   is(D.parent, B,
     "The .A.B.D node has the correct parent.");
   is(D.level, 3,
     "The .A.B.D node has the correct level.");
   is(D.target.className, "call-tree-item",
     "The .A.B.D node has the correct target node.");
   is(D.container.id, "call-tree-container",
     "The .A.B.D node has the correct container node.");
-
-  finish();
-}
+});
 
 let gSamples = [{
   time: 5,
   frames: [
     { category: 8,  location: "(root)" },
     { category: 8,  location: "A (http://foo/bar/baz:12)" },
     { category: 16, location: "B (http://foo/bar/baz:34)" },
     { category: 32, location: "C (http://foo/bar/baz:56)" }
diff --git a/browser/devtools/shared/test/head.js b/browser/devtools/shared/test/head.js
--- a/browser/devtools/shared/test/head.js
+++ b/browser/devtools/shared/test/head.js
@@ -5,17 +5,17 @@
 let {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 let {TargetFactory, require} = devtools;
 let {console} = Cu.import("resource://gre/modules/devtools/Console.jsm", {});
 let {gDevTools} = Cu.import("resource:///modules/devtools/gDevTools.jsm", {});
 const {DOMHelpers} = Cu.import("resource:///modules/devtools/DOMHelpers.jsm", {});
 const {Hosts} = require("devtools/framework/toolbox-hosts");
 
 gDevTools.testing = true;
-SimpleTest.registerCleanupFunction(() => {
+registerCleanupFunction(() => {
   gDevTools.testing = false;
 });
 
 const TEST_URI_ROOT = "http://example.com/browser/browser/devtools/shared/test/";
 const OPTIONS_VIEW_URL = TEST_URI_ROOT + "doc_options-view.xul";
 
 /**
  * Open a new tab at a URL and call a callback on load
diff --git a/browser/devtools/profiler/utils/tree-model.js b/browser/devtools/shared/tree-model.js
rename from browser/devtools/profiler/utils/tree-model.js
rename to browser/devtools/shared/tree-model.js
--- a/browser/devtools/profiler/utils/tree-model.js
+++ b/browser/devtools/shared/tree-model.js
@@ -2,21 +2,21 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const {Cc, Ci, Cu, Cr} = require("chrome");
 
 loader.lazyRequireGetter(this, "Services");
 loader.lazyRequireGetter(this, "L10N",
-  "devtools/profiler/global", true);
+  "devtools/shared/profiler-globals", true);
 loader.lazyRequireGetter(this, "CATEGORY_MAPPINGS",
-  "devtools/profiler/global", true);
+  "devtools/shared/profiler-globals", true);
 loader.lazyRequireGetter(this, "CATEGORY_JIT",
-  "devtools/profiler/global", true);
+  "devtools/shared/profiler-globals", true);
 
 const CHROME_SCHEMES = ["chrome://", "resource://"];
 const CONTENT_SCHEMES = ["http://", "https://", "file://"];
 
 exports.ThreadNode = ThreadNode;
 exports.FrameNode = FrameNode;
 exports.FrameNode.isContent = isContent;
 
diff --git a/browser/devtools/profiler/utils/tree-view.js b/browser/devtools/shared/tree-view.js
rename from browser/devtools/profiler/utils/tree-view.js
rename to browser/devtools/shared/tree-view.js
--- a/browser/devtools/profiler/utils/tree-view.js
+++ b/browser/devtools/shared/tree-view.js
@@ -1,17 +1,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const {Cc, Ci, Cu, Cr} = require("chrome");
 
 loader.lazyRequireGetter(this, "L10N",
-  "devtools/profiler/global", true);
+  "devtools/shared/profiler-globals", true);
 
 loader.lazyImporter(this, "Heritage",
   "resource:///modules/devtools/ViewHelpers.jsm");
 loader.lazyImporter(this, "AbstractTreeItem",
   "resource:///modules/devtools/AbstractTreeItem.jsm");
 
 const MILLISECOND_UNITS = L10N.getStr("table.ms");
 const PERCENTAGE_UNITS = L10N.getStr("table.percentage");
