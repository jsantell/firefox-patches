From: Jordan Santell <jsantell@gmail.com>
Date: Tue, 24 Feb 2015 08:48:04 -0800
Subject: Bug 1134876 - Clicking an in-progress recording snapshot will no longer throw an error. r=vp

diff --git a/browser/devtools/canvasdebugger/snapshotslist.js b/browser/devtools/canvasdebugger/snapshotslist.js
index e8bd47e..5362aa2 100644
--- a/browser/devtools/canvasdebugger/snapshotslist.js
+++ b/browser/devtools/canvasdebugger/snapshotslist.js
@@ -157,17 +157,19 @@ let SnapshotsListView = Heritage.extend(WidgetMethods, {
       this.selectedIndex = 0;
     }
   },
 
   /**
    * The select listener for this container.
    */
   _onSelect: function({ detail: snapshotItem }) {
-    if (!snapshotItem) {
+    // Check to ensure the attachment has an actor, like
+    // an in-progress recording.
+    if (!snapshotItem || !snapshotItem.attachment.actor) {
       return;
     }
     let { calls, thumbnails, screenshot } = snapshotItem.attachment;
 
     $("#reload-notice").hidden = true;
     $("#empty-notice").hidden = true;
     $("#waiting-notice").hidden = false;
 
diff --git a/browser/devtools/canvasdebugger/test/browser.ini b/browser/devtools/canvasdebugger/test/browser.ini
index 89cd16a..c77c656 100644
--- a/browser/devtools/canvasdebugger/test/browser.ini
+++ b/browser/devtools/canvasdebugger/test/browser.ini
@@ -39,12 +39,13 @@ skip-if = e10s # bug 1102301 - leaks while running as a standalone directory in
 [browser_canvas-frontend-record-01.js]
 [browser_canvas-frontend-record-02.js]
 [browser_canvas-frontend-record-03.js]
 [browser_canvas-frontend-record-04.js]
 [browser_canvas-frontend-reload-01.js]
 [browser_canvas-frontend-reload-02.js]
 [browser_canvas-frontend-slider-01.js]
 [browser_canvas-frontend-slider-02.js]
-[browser_canvas-frontend-snapshot-select.js]
+[browser_canvas-frontend-snapshot-select-01.js]
+[browser_canvas-frontend-snapshot-select-02.js]
 [browser_canvas-frontend-stepping.js]
 [browser_canvas-frontend-stop-01.js]
 [browser_canvas-frontend-stop-02.js]
diff --git a/browser/devtools/canvasdebugger/test/browser_canvas-frontend-snapshot-select-01.js b/browser/devtools/canvasdebugger/test/browser_canvas-frontend-snapshot-select-01.js
new file mode 100644
index 0000000..13e4ed7
--- /dev/null
+++ b/browser/devtools/canvasdebugger/test/browser_canvas-frontend-snapshot-select-01.js
@@ -0,0 +1,93 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests if selecting snapshots in the frontend displays the appropriate data
+ * respective to their recorded animation frame.
+ */
+
+function ifTestingSupported() {
+  let { target, panel } = yield initCanvasDebuggerFrontend(SIMPLE_CANVAS_URL);
+  let { window, $, EVENTS, SnapshotsListView, CallsListView } = panel.panelWin;
+
+  yield reload(target);
+
+  yield recordAndWaitForFirstSnapshot();
+  info("First snapshot recorded.")
+
+  is(SnapshotsListView.selectedIndex, 0,
+    "A snapshot should be automatically selected after first recording.");
+  is(CallsListView.selectedIndex, -1,
+    "There should be no call item automatically selected in the snapshot.");
+
+  yield recordAndWaitForAnotherSnapshot();
+  info("Second snapshot recorded.")
+
+  is(SnapshotsListView.selectedIndex, 0,
+    "A snapshot should not be automatically selected after another recording.");
+  is(CallsListView.selectedIndex, -1,
+    "There should still be no call item automatically selected in the snapshot.");
+
+  let secondSnapshotTarget = SnapshotsListView.getItemAtIndex(1).target;
+  let snapshotSelected = waitForSnapshotSelection();
+  EventUtils.sendMouseEvent({ type: "mousedown" }, secondSnapshotTarget, window);
+
+  yield snapshotSelected;
+  info("Second snapshot selected.");
+
+  is(SnapshotsListView.selectedIndex, 1,
+    "The second snapshot should now be selected.");
+  is(CallsListView.selectedIndex, -1,
+    "There should still be no call item automatically selected in the snapshot.");
+
+  let firstDrawCallContents = $(".call-item-contents", CallsListView.getItemAtIndex(2).target);
+  let screenshotDisplayed = once(window, EVENTS.CALL_SCREENSHOT_DISPLAYED);
+  EventUtils.sendMouseEvent({ type: "mousedown" }, firstDrawCallContents, window);
+
+  yield screenshotDisplayed;
+  info("First draw call in the second snapshot selected.");
+
+  is(SnapshotsListView.selectedIndex, 1,
+    "The second snapshot should still be selected.");
+  is(CallsListView.selectedIndex, 2,
+    "The first draw call should now be selected in the snapshot.");
+
+  let firstSnapshotTarget = SnapshotsListView.getItemAtIndex(0).target;
+  snapshotSelected = waitForSnapshotSelection();
+  EventUtils.sendMouseEvent({ type: "mousedown" }, firstSnapshotTarget, window);
+
+  yield snapshotSelected;
+  info("First snapshot re-selected.");
+
+  is(SnapshotsListView.selectedIndex, 0,
+    "The first snapshot should now be re-selected.");
+  is(CallsListView.selectedIndex, -1,
+    "There should still be no call item automatically selected in the snapshot.");
+
+  function recordAndWaitForFirstSnapshot() {
+    let recordingFinished = once(window, EVENTS.SNAPSHOT_RECORDING_FINISHED);
+    let snapshotSelected = waitForSnapshotSelection();
+    SnapshotsListView._onRecordButtonClick();
+    return promise.all([recordingFinished, snapshotSelected]);
+  }
+
+  function recordAndWaitForAnotherSnapshot() {
+    let recordingFinished = once(window, EVENTS.SNAPSHOT_RECORDING_FINISHED);
+    SnapshotsListView._onRecordButtonClick();
+    return recordingFinished;
+  }
+
+  function waitForSnapshotSelection() {
+    let callListPopulated = once(window, EVENTS.CALL_LIST_POPULATED);
+    let thumbnailsDisplayed = once(window, EVENTS.THUMBNAILS_DISPLAYED);
+    let screenshotDisplayed = once(window, EVENTS.CALL_SCREENSHOT_DISPLAYED);
+    return promise.all([
+      callListPopulated,
+      thumbnailsDisplayed,
+      screenshotDisplayed
+    ]);
+  }
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/canvasdebugger/test/browser_canvas-frontend-snapshot-select-02.js b/browser/devtools/canvasdebugger/test/browser_canvas-frontend-snapshot-select-02.js
new file mode 100644
index 0000000..cceb8a5
--- /dev/null
+++ b/browser/devtools/canvasdebugger/test/browser_canvas-frontend-snapshot-select-02.js
@@ -0,0 +1,30 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests if selecting snapshots in the frontend displays the appropriate data
+ * respective to their recorded animation frame.
+ */
+
+function ifTestingSupported() {
+  let { target, panel } = yield initCanvasDebuggerFrontend(SIMPLE_CANVAS_URL);
+  let { window, $, EVENTS, SnapshotsListView, CallsListView } = panel.panelWin;
+
+  yield reload(target);
+
+  SnapshotsListView._onRecordButtonClick();
+  let snapshotTarget = SnapshotsListView.getItemAtIndex(0).target;
+
+  EventUtils.sendMouseEvent({ type: "mousedown" }, snapshotTarget, window);
+  EventUtils.sendMouseEvent({ type: "mousedown" }, snapshotTarget, window);
+  EventUtils.sendMouseEvent({ type: "mousedown" }, snapshotTarget, window);
+
+  ok(true, "clicking in-progress snapshot does not fail");
+
+  let finished = once(window, EVENTS.SNAPSHOT_RECORDING_FINISHED);
+  SnapshotsListView._onRecordButtonClick();
+  yield finished;
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/canvasdebugger/test/browser_canvas-frontend-snapshot-select.js b/browser/devtools/canvasdebugger/test/browser_canvas-frontend-snapshot-select.js
deleted file mode 100644
index 13e4ed7..0000000
--- a/browser/devtools/canvasdebugger/test/browser_canvas-frontend-snapshot-select.js
+++ /dev/null
@@ -1,93 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests if selecting snapshots in the frontend displays the appropriate data
- * respective to their recorded animation frame.
- */
-
-function ifTestingSupported() {
-  let { target, panel } = yield initCanvasDebuggerFrontend(SIMPLE_CANVAS_URL);
-  let { window, $, EVENTS, SnapshotsListView, CallsListView } = panel.panelWin;
-
-  yield reload(target);
-
-  yield recordAndWaitForFirstSnapshot();
-  info("First snapshot recorded.")
-
-  is(SnapshotsListView.selectedIndex, 0,
-    "A snapshot should be automatically selected after first recording.");
-  is(CallsListView.selectedIndex, -1,
-    "There should be no call item automatically selected in the snapshot.");
-
-  yield recordAndWaitForAnotherSnapshot();
-  info("Second snapshot recorded.")
-
-  is(SnapshotsListView.selectedIndex, 0,
-    "A snapshot should not be automatically selected after another recording.");
-  is(CallsListView.selectedIndex, -1,
-    "There should still be no call item automatically selected in the snapshot.");
-
-  let secondSnapshotTarget = SnapshotsListView.getItemAtIndex(1).target;
-  let snapshotSelected = waitForSnapshotSelection();
-  EventUtils.sendMouseEvent({ type: "mousedown" }, secondSnapshotTarget, window);
-
-  yield snapshotSelected;
-  info("Second snapshot selected.");
-
-  is(SnapshotsListView.selectedIndex, 1,
-    "The second snapshot should now be selected.");
-  is(CallsListView.selectedIndex, -1,
-    "There should still be no call item automatically selected in the snapshot.");
-
-  let firstDrawCallContents = $(".call-item-contents", CallsListView.getItemAtIndex(2).target);
-  let screenshotDisplayed = once(window, EVENTS.CALL_SCREENSHOT_DISPLAYED);
-  EventUtils.sendMouseEvent({ type: "mousedown" }, firstDrawCallContents, window);
-
-  yield screenshotDisplayed;
-  info("First draw call in the second snapshot selected.");
-
-  is(SnapshotsListView.selectedIndex, 1,
-    "The second snapshot should still be selected.");
-  is(CallsListView.selectedIndex, 2,
-    "The first draw call should now be selected in the snapshot.");
-
-  let firstSnapshotTarget = SnapshotsListView.getItemAtIndex(0).target;
-  snapshotSelected = waitForSnapshotSelection();
-  EventUtils.sendMouseEvent({ type: "mousedown" }, firstSnapshotTarget, window);
-
-  yield snapshotSelected;
-  info("First snapshot re-selected.");
-
-  is(SnapshotsListView.selectedIndex, 0,
-    "The first snapshot should now be re-selected.");
-  is(CallsListView.selectedIndex, -1,
-    "There should still be no call item automatically selected in the snapshot.");
-
-  function recordAndWaitForFirstSnapshot() {
-    let recordingFinished = once(window, EVENTS.SNAPSHOT_RECORDING_FINISHED);
-    let snapshotSelected = waitForSnapshotSelection();
-    SnapshotsListView._onRecordButtonClick();
-    return promise.all([recordingFinished, snapshotSelected]);
-  }
-
-  function recordAndWaitForAnotherSnapshot() {
-    let recordingFinished = once(window, EVENTS.SNAPSHOT_RECORDING_FINISHED);
-    SnapshotsListView._onRecordButtonClick();
-    return recordingFinished;
-  }
-
-  function waitForSnapshotSelection() {
-    let callListPopulated = once(window, EVENTS.CALL_LIST_POPULATED);
-    let thumbnailsDisplayed = once(window, EVENTS.THUMBNAILS_DISPLAYED);
-    let screenshotDisplayed = once(window, EVENTS.CALL_SCREENSHOT_DISPLAYED);
-    return promise.all([
-      callListPopulated,
-      thumbnailsDisplayed,
-      screenshotDisplayed
-    ]);
-  }
-
-  yield teardown(panel);
-  finish();
-}
-- 
2.2.1

