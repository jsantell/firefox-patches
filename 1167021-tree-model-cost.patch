From: Jordan Santell <jsantell@mozilla.com>
Date: Tue, 14 Jul 2015 14:40:47 -0700
Subject: Bug 1167021 - Pull out calculation cost logic of frame nodes from the view into the model, and add tests for cost calculation and recursion. r=vp

diff --git a/browser/devtools/performance/modules/logic/frame-utils.js b/browser/devtools/performance/modules/logic/frame-utils.js
index ee4df8a..1d05f6c 100644
--- a/browser/devtools/performance/modules/logic/frame-utils.js
+++ b/browser/devtools/performance/modules/logic/frame-utils.js
@@ -33,16 +33,19 @@ const CHAR_CODE_COLON = ":".charCodeAt(0);
 const CHAR_CODE_SLASH = "/".charCodeAt(0);
 
 // The cache used in the `nsIURL` function.
 const gNSURLStore = new Map();
 
 // The cache used to store inflated frames.
 const gInflatedFrameStore = new WeakMap();
 
+// The cache used to store frame data from `getInfo`.
+const gFrameData = new WeakMap();
+
 /**
  * Parses the raw location of this function call to retrieve the actual
  * function name, source url, host name, line and column.
  */
 function parseLocation(location, fallbackLine, fallbackColumn) {
   // Parse the `location` for the function name, source url, line, column etc.
 
   let line, column, url;
@@ -444,13 +447,76 @@ function isChromeScheme(location, i) {
     return false;
   }
 }
 
 function isNumeric(c) {
   return c >= CHAR_CODE_0 && c <= CHAR_CODE_9;
 }
 
+/**
+ * Calculates the relative costs of this frame compared to a root,
+ * and generates allocations information if specified. Uses caching
+ * if possible.
+ *
+ * @param {ThreadNode|FrameNode} node
+ *                               The node we are calculating.
+ * @param {ThreadNode} options.root
+ *                     The root thread node to calculate relative costs.
+ *                     Generates [self|total] [duration|percentage] values.
+ * @param {boolean} options.allocations
+ *                  Generates `totalAllocations` and `selfAllocations`.
+ *
+ * @return {object}
+ */
+function getFrameInfo (node, options) {
+  let data = gFrameData.get(node);
+
+  if (!data) {
+    if (node.nodeType === "Thread") {
+      data = Object.create(null);
+      data.functionName = global.L10N.getStr("table.root");
+    } else {
+      data = parseLocation(node.location, node.line, node.column);
+      data.hasOptimizations = node.hasOptimizations();
+      data.isContent = node.isContent;
+      data.isMetaCategory = node.isMetaCategory;
+    }
+    data.samples = node.youngestFrameSamples;
+    data.categoryData = global.CATEGORY_MAPPINGS[node.category] || {};
+    data.nodeType = node.nodeType;
+
+    // Frame name (function location or some meta information)
+    data.name = data.isMetaCategory ? data.categoryData.label : data.functionName || "";
+    data.tooltiptext = data.isMetaCategory ? data.categoryData.label : node.location || "";
+
+    gFrameData.set(node, data);
+  }
+
+  // If a root specified, calculate the relative costs in the context of
+  // this call tree. The cached store may already have this, but generate
+  // if it does not.
+  if (options && options.root && !data.COSTS_CALCULATED) {
+    let totalSamples = options.root.samples;
+    let totalDuration = options.root.duration;
+
+    data.selfDuration = node.youngestFrameSamples / totalSamples * totalDuration;
+    data.selfPercentage = node.youngestFrameSamples / totalSamples * 100;
+    data.totalDuration = node.samples / totalSamples * totalDuration;
+    data.totalPercentage = node.samples / totalSamples * 100;
+    data.COSTS_CALCULATED = true;
+  }
+
+  if (options && options.allocations && !data.ALLOCATIONS_CALCULATED) {
+    data.totalAllocations = node.allocations + node.calls.reduce((acc, node) => acc + node.allocations, 0);
+    data.selfAllocations = node.allocations;
+    data.ALLOCATIONS_CALCULATED = true;
+  }
+
+  return data;
+}
+
+exports.getFrameInfo = getFrameInfo;
 exports.computeIsContentAndCategory = computeIsContentAndCategory;
 exports.parseLocation = parseLocation;
 exports.getInflatedFrameCache = getInflatedFrameCache;
 exports.getOrAddInflatedFrame = getOrAddInflatedFrame;
 exports.InflatedFrame = InflatedFrame;
diff --git a/browser/devtools/performance/modules/logic/tree-model.js b/browser/devtools/performance/modules/logic/tree-model.js
index 1c3e2e3..2ab1d4a 100644
--- a/browser/devtools/performance/modules/logic/tree-model.js
+++ b/browser/devtools/performance/modules/logic/tree-model.js
@@ -1,19 +1,15 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const { Cc, Ci, Cu, Cr } = require("chrome");
 
-loader.lazyRequireGetter(this, "L10N",
-  "devtools/performance/global", true);
-loader.lazyRequireGetter(this, "CATEGORY_MAPPINGS",
-  "devtools/performance/global", true);
 loader.lazyRequireGetter(this, "JITOptimizations",
   "devtools/performance/jit", true);
 loader.lazyRequireGetter(this, "FrameUtils",
   "devtools/performance/frame-utils");
 
 /**
  * A call tree for a thread. This is essentially a linkage between all frames
  * of all samples into a single tree structure, with additional information
@@ -34,16 +30,17 @@ function ThreadNode(thread, options = {}) {
   if (options.endTime == void 0 || options.startTime == void 0) {
     throw new Error("ThreadNode requires both `startTime` and `endTime`.");
   }
   this.samples = 0;
   this.sampleTimes = [];
   this.youngestFrameSamples = 0;
   this.calls = [];
   this.duration = options.endTime - options.startTime;
+  this.nodeType = "Thread";
 
   let { samples, stackTable, frameTable, stringTable, allocationsTable } = thread;
 
   // Nothing to do if there are no samples.
   if (samples.data.length === 0) {
     return;
   }
 
@@ -302,24 +299,22 @@ ThreadNode.prototype = {
 
     // Replace the toplevel calls with rootCalls, which now contains the
     // uninverted roots.
     this.calls = rootCalls;
   },
 
   /**
    * Gets additional details about this node.
+   * @see FrameNode.prototype.getInfo for more information.
+   *
    * @return object
    */
-  getInfo: function() {
-    return {
-      nodeType: "Thread",
-      functionName: L10N.getStr("table.root"),
-      categoryData: {}
-    };
+  getInfo: function(options) {
+    return FrameUtils.getFrameInfo(this, options);
   },
 
   /**
    * Mimicks the interface of FrameNode, and a ThreadNode can never have
    * optimization data (at the moment, anyway), so provide a function
    * to return null so we don't need to check if a frame node is a thread
    * or not everytime we fetch optimization data.
    *
@@ -373,16 +368,17 @@ function FrameNode(frameKey, { location, line, category, allocations, isContent
   this.samples = 0;
   this.calls = [];
   this.isContent = !!isContent;
   this._optimizations = null;
   this._tierData = null;
   this._stringTable = null;
   this.isMetaCategory = !!isMetaCategory;
   this.category = category;
+  this.nodeType = "Frame";
 }
 
 FrameNode.prototype = {
   /**
    * Take optimization data observed for this frame.
    *
    * @param object optimizationSite
    *               Any JIT optimization information attached to the current
@@ -438,40 +434,31 @@ FrameNode.prototype = {
       for (let i = 0; i < otherOpts.length; i++) {
         opts.push(otherOpts[i]);
       }
     }
   },
 
   /**
    * Returns the parsed location and additional data describing
-   * this frame. Uses cached data if possible.
+   * this frame. Uses cached data if possible. Takes the following
+   * options:
+   *
+   * @param {ThreadNode} options.root
+   *                     The root thread node to calculate relative costs.
+   *                     Generates [self|total] [duration|percentage] values.
+   * @param {boolean} options.allocations
+   *                  Generates `totalAllocations` and `selfAllocations`.
    *
    * @return object
    *         The computed { name, file, url, line } properties for this
-   *         function call.
-   */
-  getInfo: function() {
-    return this._data || this._computeInfo();
-  },
-
-  /**
-   * Parses the raw location of this function call to retrieve the actual
-   * function name and source url.
+   *         function call, as well as additional params if options specified.
    */
-  _computeInfo: function() {
-    let categoryData = CATEGORY_MAPPINGS[this.category] || {};
-    let parsedData = FrameUtils.parseLocation(this.location, this.line, this.column);
-    parsedData.nodeType = "Frame";
-    parsedData.categoryData = categoryData;
-    parsedData.isContent = this.isContent;
-    parsedData.isMetaCategory = this.isMetaCategory;
-    parsedData.hasOptimizations = this.hasOptimizations();
-
-    return this._data = parsedData;
+  getInfo: function(options) {
+    return FrameUtils.getFrameInfo(this, options);
   },
 
   /**
    * Returns whether or not the frame node has an JITOptimizations model.
    *
    * @return {Boolean}
    */
   hasOptimizations: function () {
diff --git a/browser/devtools/performance/modules/widgets/tree-view.js b/browser/devtools/performance/modules/widgets/tree-view.js
index 3676ef6..b868801 100644
--- a/browser/devtools/performance/modules/widgets/tree-view.js
+++ b/browser/devtools/performance/modules/widgets/tree-view.js
@@ -128,49 +128,48 @@ function CallView({
 CallView.prototype = Heritage.extend(AbstractTreeItem.prototype, {
   /**
    * Creates the view for this tree node.
    * @param nsIDOMNode document
    * @param nsIDOMNode arrowNode
    * @return nsIDOMNode
    */
   _displaySelf: function(document, arrowNode) {
-    let displayedData = this.getDisplayedData();
-    let frameInfo = this.frame.getInfo();
+    let frameInfo = this.getDisplayedData();
 
     if (this.visibleCells.duration) {
-      var durationCell = this._createTimeCell(document, displayedData.totalDuration);
+      var durationCell = this._createTimeCell(document, frameInfo.totalDuration);
     }
     if (this.visibleCells.selfDuration) {
-      var selfDurationCell = this._createTimeCell(document, displayedData.selfDuration, true);
+      var selfDurationCell = this._createTimeCell(document, frameInfo.selfDuration, true);
     }
     if (this.visibleCells.percentage) {
-      var percentageCell = this._createExecutionCell(document, displayedData.totalPercentage);
+      var percentageCell = this._createExecutionCell(document, frameInfo.totalPercentage);
     }
     if (this.visibleCells.selfPercentage) {
-      var selfPercentageCell = this._createExecutionCell(document, displayedData.selfPercentage, true);
+      var selfPercentageCell = this._createExecutionCell(document, frameInfo.selfPercentage, true);
     }
     if (this.visibleCells.allocations) {
-      var allocationsCell = this._createAllocationsCell(document, displayedData.totalAllocations);
+      var allocationsCell = this._createAllocationsCell(document, frameInfo.totalAllocations);
     }
     if (this.visibleCells.selfAllocations) {
-      var selfAllocationsCell = this._createAllocationsCell(document, displayedData.selfAllocations, true);
+      var selfAllocationsCell = this._createAllocationsCell(document, frameInfo.selfAllocations, true);
     }
     if (this.visibleCells.samples) {
-      var samplesCell = this._createSamplesCell(document, displayedData.samples);
+      var samplesCell = this._createSamplesCell(document, frameInfo.samples);
     }
     if (this.visibleCells.function) {
-      var functionCell = this._createFunctionCell(document, arrowNode, displayedData.name, frameInfo, this.level);
+      var functionCell = this._createFunctionCell(document, arrowNode, frameInfo.name, frameInfo, this.level);
     }
 
     let targetNode = document.createElement("hbox");
     targetNode.className = "call-tree-item";
     targetNode.setAttribute("origin", frameInfo.isContent ? "content" : "chrome");
     targetNode.setAttribute("category", frameInfo.categoryData.abbrev || "");
-    targetNode.setAttribute("tooltiptext", displayedData.tooltiptext);
+    targetNode.setAttribute("tooltiptext", frameInfo.tooltiptext);
 
     if (this.hidden) {
       targetNode.style.display = "none";
     }
     if (this.visibleCells.duration) {
       targetNode.appendChild(durationCell);
     }
     if (this.visibleCells.percentage) {
@@ -350,80 +349,36 @@ CallView.prototype = Heritage.extend(AbstractTreeItem.prototype, {
    *
    * @return object
    */
   getDisplayedData: function() {
     if (this._cachedDisplayedData) {
       return this._cachedDisplayedData;
     }
 
-    let data = this._cachedDisplayedData = Object.create(null);
-    let frameInfo = this.frame.getInfo();
+    return this._cachedDisplayedData = this.frame.getInfo({
+      root: this.root.frame,
+      allocations: (this.visibleCells.allocations || this.visibleCells.selfAllocations)
+    });
 
     /**
      * When inverting call tree, the costs and times are dependent on position
      * in the tree. We must only count leaf nodes with self cost, and total costs
      * dependent on how many times the leaf node was found with a full stack path.
      *
      *   Total |  Self | Calls | Function
      * ============================================================================
      *  100%   |  100% |   100 | ▼ C
      *   50%   |   0%  |    50 |   ▼ B
      *   50%   |   0%  |    50 |     ▼ A
      *   50%   |   0%  |    50 |   ▼ B
      *
      * Every instance of a `CallView` represents a row in the call tree. The same
      * container node is used for all rows.
      */
-
-    // Leaf nodes in an inverted tree don't have to do anything special.
-    let isLeaf = this._level === 0;
-    let totalSamples = this.root.frame.samples;
-    let totalDuration = this.root.frame.duration;
-
-    // Self duration, cost
-    if (this.visibleCells.selfDuration) {
-      data.selfDuration = this.frame.youngestFrameSamples / totalSamples * totalDuration;
-    }
-    if (this.visibleCells.selfPercentage) {
-      data.selfPercentage = this.frame.youngestFrameSamples / totalSamples * 100;
-    }
-
-    // Total duration, cost
-    if (this.visibleCells.duration) {
-      data.totalDuration = this.frame.samples / totalSamples * totalDuration;
-    }
-    if (this.visibleCells.percentage) {
-      data.totalPercentage = this.frame.samples / totalSamples * 100;
-    }
-
-    // Raw samples.
-    if (this.visibleCells.samples) {
-      data.samples = this.frame.youngestFrameSamples;
-    }
-
-    // Self/total allocations count.
-    if (this.visibleCells.allocations) {
-      let childrenAllocations = this.frame.calls.reduce((acc, node) => acc + node.allocations, 0);
-      data.totalAllocations = this.frame.allocations + childrenAllocations;
-    }
-    if (this.visibleCells.selfAllocations) {
-      data.selfAllocations = this.frame.allocations;
-    }
-
-    // Frame name (function location or some meta information).
-    data.name = frameInfo.isMetaCategory
-      ? frameInfo.categoryData.label
-      : frameInfo.functionName || "";
-
-    data.tooltiptext = frameInfo.isMetaCategory
-      ? frameInfo.categoryData.label
-      : this.frame.location || "";
-
-    return this._cachedDisplayedData;
   },
 
   /**
    * Toggles the category information hidden or visible.
    * @param boolean visible
    */
   toggleCategories: function(visible) {
     if (!visible) {
diff --git a/browser/devtools/performance/test/unit/test_tree-model-10.js b/browser/devtools/performance/test/unit/test_tree-model-10.js
new file mode 100644
index 0000000..c95d6a0
--- /dev/null
+++ b/browser/devtools/performance/test/unit/test_tree-model-10.js
@@ -0,0 +1,149 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that the tree model calculates correct costs/percentages for
+ * frame nodes. The model-only version of browser_profiler-tree-view-10.js
+ */
+
+function run_test() {
+  run_next_test();
+}
+
+add_task(function () {
+  let { ThreadNode } = devtools.require("devtools/performance/tree-model");
+  let thread = new ThreadNode(gThread, { invertTree: true, startTime: 0, endTime: 50 });
+
+  /**
+   * Samples
+   *
+   * A->C
+   * A->B
+   * A->B->C x4
+   * A->B->D x4
+   *
+   * Expected Tree
+   * +--total--+--self--+--tree-------------+
+   * |   50%   |   50%  |  C
+   * |   40%   |   0    |  -> B
+   * |   30%   |   0    |     -> A
+   * |   10%   |   0    |  -> A
+   *
+   * |   40%   |   40%  |  D
+   * |   40%   |   0    |  -> B
+   * |   40%   |   0    |     -> A
+   *
+   * |   10%   |   10%  |  B
+   * |   10%   |   0    |  -> A
+   */
+
+  [ // total, self, name
+    [ 50, 50, "C", [
+      [ 40,  0, "B", [
+        [ 30,  0, "A"]
+      ]],
+      [ 10,  0, "A"]
+    ]],
+    [ 40, 40, "D", [
+      [ 40,  0, "B", [
+        [ 40,  0, "A"],
+      ]]
+    ]],
+    [ 10, 10, "B", [
+      [ 10,  0, "A"],
+    ]]
+  ].forEach(compareFrameInfo(thread));
+});
+
+function compareFrameInfo (root, parent) {
+  parent = parent || root;
+  return function (def) {
+    let [total, self, name, children] = def;
+    let node = getFrameNodePath(parent, name);
+    let data = node.getInfo({ root });
+    equal(total, data.totalPercentage, `${name} has correct total percentage: ${data.totalPercentage}`);
+    equal(self, data.selfPercentage, `${name} has correct self percentage: ${data.selfPercentage}`);
+    if (children) {
+      children.forEach(compareFrameInfo(root, node));
+    }
+  }
+}
+
+let gThread = synthesizeProfileForTest([{
+  time: 5,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "C" }
+  ]
+}, {
+  time: 10,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "D" }
+  ]
+}, {
+  time: 15,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "C" },
+  ]
+}, {
+  time: 20,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+  ]
+}, {
+  time: 25,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "C" }
+  ]
+}, {
+  time: 30,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "C" }
+  ]
+}, {
+  time: 35,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "D" }
+  ]
+}, {
+  time: 40,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "D" }
+  ]
+}, {
+  time: 45,
+  frames: [
+    { location: "(root)" },
+    { location: "B" },
+    { location: "C" }
+  ]
+}, {
+  time: 50,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "D" }
+  ]
+}]);
diff --git a/browser/devtools/performance/test/unit/test_tree-model-11.js b/browser/devtools/performance/test/unit/test_tree-model-11.js
new file mode 100644
index 0000000..e658dbb
--- /dev/null
+++ b/browser/devtools/performance/test/unit/test_tree-model-11.js
@@ -0,0 +1,85 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that the costs for recursive frames does not overcount the collapsed
+ * samples.
+ */
+
+function run_test() {
+  run_next_test();
+}
+
+add_task(function () {
+  let { ThreadNode } = devtools.require("devtools/performance/tree-model");
+  let thread = new ThreadNode(gThread, { startTime: 0, endTime: 50, flattenRecursion: true });
+
+  /**
+   * Samples
+   *
+   * A->B->C
+   * A->B->B->B->C
+   * A->B
+   * A->B->B->B
+   */
+
+  [ // total, self, name
+    [ 100, 0, "(root)", [
+      [ 100, 0, "A", [
+        [ 100, 50, "B", [
+          [ 50, 50, "C"]
+        ]]
+      ]],
+    ]],
+  ].forEach(compareFrameInfo(thread));
+});
+
+function compareFrameInfo (root, parent) {
+  parent = parent || root;
+  return function (def) {
+    let [total, self, name, children] = def;
+    let node = getFrameNodePath(parent, name);
+    let data = node.getInfo({ root });
+    equal(total, data.totalPercentage, `${name} has correct total percentage: ${data.totalPercentage}`);
+    equal(self, data.selfPercentage, `${name} has correct self percentage: ${data.selfPercentage}`);
+    if (children) {
+      children.forEach(compareFrameInfo(root, node));
+    }
+  }
+}
+
+let gThread = synthesizeProfileForTest([{
+  time: 5,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "B" },
+    { location: "B" },
+    { location: "C" }
+  ]
+}, {
+  time: 10,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "C" }
+  ]
+}, {
+  time: 15,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+    { location: "B" },
+    { location: "B" },
+  ]
+}, {
+  time: 20,
+  frames: [
+    { location: "(root)" },
+    { location: "A" },
+    { location: "B" },
+  ]
+}]);
diff --git a/browser/devtools/performance/test/unit/xpcshell.ini b/browser/devtools/performance/test/unit/xpcshell.ini
index 55bc4a8..135568f 100644
--- a/browser/devtools/performance/test/unit/xpcshell.ini
+++ b/browser/devtools/performance/test/unit/xpcshell.ini
@@ -17,11 +17,13 @@ skip-if = toolkit == 'android' || toolkit == 'gonk'
 [test_tree-model-02.js]
 [test_tree-model-03.js]
 [test_tree-model-04.js]
 [test_tree-model-05.js]
 [test_tree-model-06.js]
 [test_tree-model-07.js]
 [test_tree-model-08.js]
 [test_tree-model-09.js]
+[test_tree-model-10.js]
+[test_tree-model-11.js]
 [test_waterfall-utils-collapse-01.js]
 [test_waterfall-utils-collapse-02.js]
 [test_waterfall-utils-collapse-03.js]
-- 
2.2.1

