From 626b47e59669b5cddb7cded324499797c63a82ea Mon Sep 17 00:00:00 2001
From: Jordan Santell <jsantell@gmail.com>
Date: Mon, 23 Jun 2014 15:25:33 -0700
Subject: [PATCH] Bug 994263 - Destroy GC'd nodes in the web audio editor views

---
 browser/devtools/webaudioeditor/test/browser.ini   |  2 +
 .../test/browser_wa_destroy-node-01.js             | 62 ++++++++++++++++++++++
 .../webaudioeditor/webaudioeditor-controller.js    | 18 +++++++
 .../devtools/webaudioeditor/webaudioeditor-view.js | 25 +++++++--
 4 files changed, 102 insertions(+), 5 deletions(-)
 create mode 100644 browser/devtools/webaudioeditor/test/browser_wa_destroy-node-01.js

diff --git a/browser/devtools/webaudioeditor/test/browser.ini b/browser/devtools/webaudioeditor/test/browser.ini
index 95b392a..993e1c4 100644
--- a/browser/devtools/webaudioeditor/test/browser.ini
+++ b/browser/devtools/webaudioeditor/test/browser.ini
@@ -15,16 +15,18 @@ support-files =
 [browser_audionode-actor-get-type.js]
 [browser_audionode-actor-get-params-01.js]
 [browser_audionode-actor-get-params-02.js]
 [browser_audionode-actor-get-param-flags.js]
 [browser_audionode-actor-is-source.js]
 [browser_webaudio-actor-simple.js]
 [browser_webaudio-actor-destroy-node.js]
 
+[browser_wa_destroy-node-01.js]
+
 [browser_wa_first-run.js]
 [browser_wa_reset-01.js]
 [browser_wa_reset-02.js]
 [browser_wa_reset-03.js]
 
 [browser_wa_graph-click.js]
 [browser_wa_graph-render-01.js]
 [browser_wa_graph-render-02.js]
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_destroy-node-01.js b/browser/devtools/webaudioeditor/test/browser_wa_destroy-node-01.js
new file mode 100644
index 0000000..31ae461
--- /dev/null
+++ b/browser/devtools/webaudioeditor/test/browser_wa_destroy-node-01.js
@@ -0,0 +1,62 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that the destruction node event is fired and that the nodes are no
+ * longer stored internally in the tool, that the graph is updated properly, and
+ * that selecting a soon-to-be dead node clears the inspector.
+ *
+ * All done in one test since this test takes a few seconds to clear GC.
+ */
+
+function spawnTest() {
+  let [target, debuggee, panel] = yield initWebAudioEditor(DESTROY_NODES_URL);
+  let { panelWin } = panel;
+  let { gFront, $, $$, EVENTS } = panelWin;
+
+  let started = once(gFront, "start-context");
+
+  reload(target);
+
+  let destroyed = getN(panelWin, EVENTS.DESTROY_NODE, 10);
+
+  forceCC();
+
+  let [created] = yield Promise.all([
+    getNSpread(panelWin, EVENTS.CREATE_NODE, 13),
+    once(panelWin, EVENTS.UI_GRAPH_RENDERED)
+  ]);
+
+  // Since CREATE_NODE emits several arguments (eventName and actorID), let's
+  // flatten it to just the actorIDs
+  let actorIDs = created.map(ev => ev[1]);
+
+  // Click a soon-to-be dead buffer node
+  yield clickGraphNode(panelWin, actorIDs[5]);
+
+  forceCC();
+
+  // Wait for destruction and graph to re-render
+  yield Promise.all([destroyed, waitForGraphRendered(panelWin, 3, 2)]);
+
+  // Test internal storage
+  ok(panelWin.AudioNodes.length, 3, "All nodes should be GC'd except one gain, osc and dest node.");
+
+  // Test graph rendering
+  ok(findGraphNode(panelWin, actorIDs[0]), "dest should be in graph");
+  ok(findGraphNode(panelWin, actorIDs[1]), "osc should be in graph");
+  ok(findGraphNode(panelWin, actorIDs[2]), "gain should be in graph");
+
+  let { nodes, edges } = countGraphObjects(panelWin);
+
+  is(nodes, 3, "Only 3 nodes rendered in graph.");
+  is(edges, 2, "Only 2 edges rendered in graph.");
+
+  // Test that the inspector reset to no node selected
+  ok(isVisible($("#web-audio-editor-details-pane-empty")),
+    "InspectorView empty message should show if the currently selected node gets collected.");
+
+  yield teardown(panel);
+  finish();
+}
+
diff --git a/browser/devtools/webaudioeditor/webaudioeditor-controller.js b/browser/devtools/webaudioeditor/webaudioeditor-controller.js
index 7e11a9c..0c2f834 100644
--- a/browser/devtools/webaudioeditor/webaudioeditor-controller.js
+++ b/browser/devtools/webaudioeditor/webaudioeditor-controller.js
@@ -151,43 +151,47 @@ let WebAudioEditorController = {
     this._onThemeChange = this._onThemeChange.bind(this);
     gTarget.on("will-navigate", this._onTabNavigated);
     gTarget.on("navigate", this._onTabNavigated);
     gFront.on("start-context", this._onStartContext);
     gFront.on("create-node", this._onCreateNode);
     gFront.on("connect-node", this._onConnectNode);
     gFront.on("disconnect-node", this._onDisconnectNode);
     gFront.on("change-param", this._onChangeParam);
+    gFront.on("destroy-node", this._onDestroyNode);
 
     // Hook into theme change so we can change
     // the graph's marker styling, since we can't do this
     // with CSS
     gDevTools.on("pref-changed", this._onThemeChange);
 
     // Set up events to refresh the Graph view
     window.on(EVENTS.CREATE_NODE, this._onUpdatedContext);
     window.on(EVENTS.CONNECT_NODE, this._onUpdatedContext);
     window.on(EVENTS.DISCONNECT_NODE, this._onUpdatedContext);
+    window.on(EVENTS.DESTROY_NODE, this._onUpdatedContext);
   },
 
   /**
    * Remove events emitted by the current tab target.
    */
   destroy: function() {
     telemetry.toolClosed("webaudioeditor");
     gTarget.off("will-navigate", this._onTabNavigated);
     gTarget.off("navigate", this._onTabNavigated);
     gFront.off("start-context", this._onStartContext);
     gFront.off("create-node", this._onCreateNode);
     gFront.off("connect-node", this._onConnectNode);
     gFront.off("disconnect-node", this._onDisconnectNode);
     gFront.off("change-param", this._onChangeParam);
+    gFront.off("destroy-node", this._onDestroyNode);
     window.off(EVENTS.CREATE_NODE, this._onUpdatedContext);
     window.off(EVENTS.CONNECT_NODE, this._onUpdatedContext);
     window.off(EVENTS.DISCONNECT_NODE, this._onUpdatedContext);
+    window.off(EVENTS.DESTROY_NODE, this._onUpdatedContext);
     gDevTools.off("pref-changed", this._onThemeChange);
   },
 
   /**
    * Called when page is reloaded to show the reload notice and waiting
    * for an audio context notice.
    */
   reset: function () {
@@ -260,16 +264,30 @@ let WebAudioEditorController = {
   _onCreateNode: Task.async(function* (nodeActor) {
     let node = new AudioNodeView(nodeActor);
     yield node.getType();
     AudioNodes.push(node);
     window.emit(EVENTS.CREATE_NODE, node.id);
   }),
 
   /**
+   * Called on `destroy-node` when an AudioNode is GC'd. Removes
+   * from the AudioNode array and fires an event indicating the removal.
+   */
+  _onDestroyNode: function (nodeActor) {
+    for (let i = 0; i < AudioNodes.length; i++) {
+      if (equalActors(AudioNodes[i].actor, nodeActor)) {
+        AudioNodes.splice(i, 1);
+        window.emit(EVENTS.DESTROY_NODE, nodeActor.actorID);
+        break;
+      }
+    }
+  },
+
+  /**
    * Called when a node is connected to another node.
    */
   _onConnectNode: Task.async(function* ({ source: sourceActor, dest: destActor }) {
     // Since node create and connect are probably executed back to back,
     // and the controller's `_onCreateNode` needs to look up type,
     // the edge creation could be called before the graph node is actually
     // created. This way, we can check and listen for the event before
     // adding an edge.
diff --git a/browser/devtools/webaudioeditor/webaudioeditor-view.js b/browser/devtools/webaudioeditor/webaudioeditor-view.js
index 123cb3f..8355e46 100644
--- a/browser/devtools/webaudioeditor/webaudioeditor-view.js
+++ b/browser/devtools/webaudioeditor/webaudioeditor-view.js
@@ -49,36 +49,39 @@ let WebAudioGraphView = {
   /**
    * Initialization function, called when the tool is started.
    */
   initialize: function() {
     this._onGraphNodeClick = this._onGraphNodeClick.bind(this);
     this._onThemeChange = this._onThemeChange.bind(this);
     this._onNodeSelect = this._onNodeSelect.bind(this);
     this._onStartContext = this._onStartContext.bind(this);
+    this._onDestroyNode = this._onDestroyNode.bind(this);
 
     this.draw = debounce(this.draw.bind(this), GRAPH_DEBOUNCE_TIMER);
     $('#graph-target').addEventListener('click', this._onGraphNodeClick, false);
 
     window.on(EVENTS.THEME_CHANGE, this._onThemeChange);
     window.on(EVENTS.UI_INSPECTOR_NODE_SET, this._onNodeSelect);
     window.on(EVENTS.START_CONTEXT, this._onStartContext);
+    window.on(EVENTS.DESTROY_NODE, this._onDestroyNode);
   },
 
   /**
    * Destruction function, called when the tool is closed.
    */
   destroy: function() {
     if (this._zoomBinding) {
       this._zoomBinding.on("zoom", null);
     }
     $('#graph-target').removeEventListener('click', this._onGraphNodeClick, false);
     window.off(EVENTS.THEME_CHANGE, this._onThemeChange);
     window.off(EVENTS.UI_INSPECTOR_NODE_SET, this._onNodeSelect);
     window.off(EVENTS.START_CONTEXT, this._onStartContext);
+    window.off(EVENTS.DESTROY_NODE, this._onDestroyNode);
   },
 
   /**
    * Called when a page is reloaded and waiting for a "start-context" event
    * and clears out old content
    */
   resetUI: function () {
     this.resetGraph();
@@ -227,16 +230,23 @@ let WebAudioGraphView = {
   /**
    * Called once "start-context" is fired, indicating that there is an audio
    * context being created to view so render the graph.
    */
   _onStartContext: function () {
     this.draw();
   },
 
+  /**
+   * Called when a node gets GC'd -- redraws the graph.
+   */
+  _onDestroyNode: function () {
+    this.draw();
+  },
+
   _onNodeSelect: function (eventName, id) {
     this.focusNode(id);
   },
 
   /**
    * Fired when the devtools theme changes.
    */
   _onThemeChange: function (eventName, theme) {
@@ -284,30 +294,33 @@ let WebAudioInspectorView = {
 
     // Hide inspector view on startup
     this._inspectorPane.setAttribute("width", INSPECTOR_WIDTH);
     this.toggleInspector({ visible: false, delayed: false, animated: false });
 
     this._onEval = this._onEval.bind(this);
     this._onNodeSelect = this._onNodeSelect.bind(this);
     this._onTogglePaneClick = this._onTogglePaneClick.bind(this);
+    this._onDestroyNode = this._onDestroyNode.bind(this);
 
     this._inspectorPaneToggleButton.addEventListener("mousedown", this._onTogglePaneClick, false);
     this._propsView = new VariablesView($("#properties-tabpanel-content"), GENERIC_VARIABLES_VIEW_SETTINGS);
     this._propsView.eval = this._onEval;
 
     window.on(EVENTS.UI_SELECT_NODE, this._onNodeSelect);
+    window.on(EVENTS.DESTROY_NODE, this._onDestroyNode);
   },
 
   /**
    * Destruction function called when the tool cleans up.
    */
   destroy: function () {
     this._inspectorPaneToggleButton.removeEventListener("mousedown", this._onTogglePaneClick);
     window.off(EVENTS.UI_SELECT_NODE, this._onNodeSelect);
+    window.off(EVENTS.DESTROY_NODE, this._onDestroyNode);
 
     this._inspectorPane = null;
     this._inspectorPaneToggleButton = null;
     this._tabsPane = null;
   },
 
   /**
    * Toggles the visibility of the AudioNode Inspector.
@@ -498,22 +511,24 @@ let WebAudioInspectorView = {
   /**
    * Called when clicking on the toggling the inspector into view.
    */
   _onTogglePaneClick: function () {
     this.toggleInspector({ visible: !this.isVisible() });
   },
 
   /**
-   * Called when `DESTROY_NODE` is fired to remove the node from props view.
-   * TODO bug 994263, dependent on node GC events
+   * Called when `DESTROY_NODE` is fired to remove the node from props view if
+   * it's currently selected.
    */
-  removeNode: Task.async(function* (viewNode) {
-
-  })
+  _onDestroyNode: function (_, id) {
+    if (this._currentNode && this._currentNode.id === id) {
+      this.setCurrentAudioNode(null);
+    }
+  }
 };
 
 /**
  * Takes an element in an SVG graph and iterates over
  * ancestors until it finds the graph node container. If not found,
  * returns null.
  */
 
-- 
1.8.4.2

