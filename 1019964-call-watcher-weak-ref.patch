From a798f2127e534b086b51226793b1a5cb55651d7d Mon Sep 17 00:00:00 2001
From: Jordan Santell <jsantell@gmail.com>
Date: Fri, 13 Jun 2014 15:55:35 -0700
Subject: [PATCH] Bug 1019964 - Ensure CallWatcherActor does not store strong
 references if specified.

---
 toolkit/devtools/server/actors/call-watcher.js | 33 ++++++++++++++++++++++----
 toolkit/devtools/server/actors/webaudio.js     |  3 ++-
 2 files changed, 30 insertions(+), 6 deletions(-)

diff --git a/toolkit/devtools/server/actors/call-watcher.js b/toolkit/devtools/server/actors/call-watcher.js
index 3c986d9..864fc44 100644
--- a/toolkit/devtools/server/actors/call-watcher.js
+++ b/toolkit/devtools/server/actors/call-watcher.js
@@ -68,25 +68,47 @@ let FunctionCallActor = protocol.ActorClass({
    *        The called function's arguments.
    * @param any result
    *        The value returned by the function call.
    */
   initialize: function(conn, [window, global, caller, type, name, stack, args, result]) {
     protocol.Actor.prototype.initialize.call(this, conn);
 
     this.details = {
-      window: window,
-      caller: caller,
       type: type,
       name: name,
       stack: stack,
-      args: args,
-      result: result
     };
 
+    // Store a weak reference to all objects so we don't
+    // prevent natural GC if `holdWeak` was passed into
+    // setup as truthy. Used in the Web Audio Editor.
+    if (this._holdWeak) {
+      let weakRefs = {
+        window: Cu.getWeakReference(window),
+        caller: Cu.getWeakReference(caller),
+        result: Cu.getWeakReference(result),
+        args: Cu.getWeakReference(args)
+      };
+
+      Object.defineProperties(this.details, {
+        window: { get: () => weakRefs.window.get() },
+        caller: { get: () => weakRefs.caller.get() },
+        result: { get: () => weakRefs.result.get() },
+        args: { get: () => weakRefs.args.get() }
+      });
+    }
+    // Otherwise, hold strong references to the objects.
+    else {
+      this.details.window = window;
+      this.details.caller = caller;
+      this.details.result = result;
+      this.details.args = args;
+    }
+
     this.meta = {
       global: -1,
       previews: { caller: "", args: "" }
     };
 
     if (global == "WebGLRenderingContext") {
       this.meta.global = CallWatcherFront.CANVAS_WEBGL_CONTEXT;
     } else if (global == "CanvasRenderingContext2D") {
@@ -241,25 +263,26 @@ let CallWatcherActor = exports.CallWatcherActor = protocol.ActorClass({
     this.finalize();
   },
 
   /**
    * Starts waiting for the current tab actor's document global to be
    * created, in order to instrument the specified objects and become
    * aware of everything the content does with them.
    */
-  setup: method(function({ tracedGlobals, tracedFunctions, startRecording, performReload }) {
+  setup: method(function({ tracedGlobals, tracedFunctions, startRecording, performReload, holdWeak }) {
     if (this._initialized) {
       return;
     }
     this._initialized = true;
 
     this._functionCalls = [];
     this._tracedGlobals = tracedGlobals || [];
     this._tracedFunctions = tracedFunctions || [];
+    this._holdWeak = !!holdWeak;
     this._contentObserver = new ContentObserver(this.tabActor);
 
     on(this._contentObserver, "global-created", this._onGlobalCreated);
     on(this._contentObserver, "global-destroyed", this._onGlobalDestroyed);
 
     if (startRecording) {
       this.resumeRecording();
     }
diff --git a/toolkit/devtools/server/actors/webaudio.js b/toolkit/devtools/server/actors/webaudio.js
index 9e7523a..b3fc7e5 100644
--- a/toolkit/devtools/server/actors/webaudio.js
+++ b/toolkit/devtools/server/actors/webaudio.js
@@ -313,17 +313,18 @@ let WebAudioActor = exports.WebAudioActor = protocol.ActorClass({
 
     this._initialized = true;
 
     this._callWatcher = new CallWatcherActor(this.conn, this.tabActor);
     this._callWatcher.onCall = this._onContentFunctionCall;
     this._callWatcher.setup({
       tracedGlobals: AUDIO_GLOBALS,
       startRecording: true,
-      performReload: reload
+      performReload: reload,
+      holdWeak: true
     });
   }, {
     request: { reload: Option(0, "boolean") },
     oneway: true
   }),
 
   /**
    * Invoked whenever an instrumented function is called, like an AudioContext
-- 
1.8.4.2

