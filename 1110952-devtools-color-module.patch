From 0422b9c127d9e955199334f36c9f62445a4b9794 Mon Sep 17 00:00:00 2001
From: Jordan Santell <jsantell@gmail.com>
Date: Fri, 12 Dec 2014 11:28:24 -0800
Subject: Bug 1110952 - Add module for managing devtools colors and
 themes. r=bgrins

diff --git a/browser/devtools/shared/moz.build b/browser/devtools/shared/moz.build
index f2f3983..00d09cb 100644
--- a/browser/devtools/shared/moz.build
+++ b/browser/devtools/shared/moz.build
@@ -35,16 +35,17 @@ EXTRA_JS_MODULES.devtools.shared += [
     'autocomplete-popup.js',
     'd3.js',
     'doorhanger.js',
     'frame-script-utils.js',
     'inplace-editor.js',
     'observable-object.js',
     'telemetry.js',
     'theme-switching.js',
+    'theme.js',
     'undo.js',
 ]
 
 EXTRA_JS_MODULES.devtools.shared.widgets += [
     'widgets/CubicBezierWidget.js',
     'widgets/FastListWidget.js',
     'widgets/Spectrum.js',
     'widgets/TableWidget.js',
diff --git a/browser/devtools/shared/test/browser.ini b/browser/devtools/shared/test/browser.ini
index b752013..0911230 100644
--- a/browser/devtools/shared/test/browser.ini
+++ b/browser/devtools/shared/test/browser.ini
@@ -39,16 +39,17 @@ support-files =
 [browser_layoutHelpers.js]
 [browser_layoutHelpers-getBoxQuads.js]
 [browser_num-l10n.js]
 [browser_observableobject.js]
 [browser_outputparser.js]
 [browser_prefs.js]
 [browser_require_basic.js]
 [browser_spectrum.js]
+[browser_theme.js]
 [browser_tableWidget_basic.js]
 [browser_tableWidget_keyboard_interaction.js]
 [browser_tableWidget_mouse_interaction.js]
 skip-if = buildapp == 'mulet'
 [browser_telemetry_button_paintflashing.js]
 [browser_telemetry_button_responsive.js]
 [browser_telemetry_button_scratchpad.js]
 [browser_telemetry_button_tilt.js]
diff --git a/browser/devtools/shared/test/browser_theme.js b/browser/devtools/shared/test/browser_theme.js
new file mode 100644
index 0000000..83b0613
--- /dev/null
+++ b/browser/devtools/shared/test/browser_theme.js
@@ -0,0 +1,65 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Tests that theme utilities work
+
+let { Cu } = devtools.require("chrome");
+let { Services } = Cu.import("resource://gre/modules/Services.jsm", {});
+let { gDevTools } = Cu.import("resource:///modules/devtools/gDevTools.jsm", {});
+let { getColor, getTheme, setTheme } = devtools.require("devtools/shared/theme");
+
+function test() {
+  waitForExplicitFinish();
+  testGetTheme();
+  testSetTheme();
+  testGetColor();
+  endTests();
+}
+
+function endTests() {
+  gDevTools = Services = null;
+  finish();
+}
+
+function testGetTheme () {
+  let originalTheme = getTheme();
+  ok(originalTheme, "has some theme to start with.");
+  Services.prefs.setCharPref("devtools.theme", "light");
+  is(getTheme(), "light", "getTheme() correctly returns light theme");
+  Services.prefs.setCharPref("devtools.theme", "dark");
+  is(getTheme(), "dark", "getTheme() correctly returns dark theme");
+  Services.prefs.setCharPref("devtools.theme", "unknown");
+  is(getTheme(), "unknown", "getTheme() correctly returns an unknown theme");
+  Services.prefs.setCharPref("devtools.theme", originalTheme);
+}
+
+function testSetTheme () {
+  let originalTheme = getTheme();
+  setTheme("dark");
+  is(Services.prefs.getCharPref("devtools.theme"), "dark", "setTheme() correctly sets dark theme.");
+  setTheme("light");
+  is(Services.prefs.getCharPref("devtools.theme"), "light", "setTheme() correctly sets light theme.");
+  setTheme("unknown");
+  is(Services.prefs.getCharPref("devtools.theme"), "unknown", "setTheme() correctly sets an  unknown theme.");
+  Services.prefs.setCharPref("devtools.theme", originalTheme);
+}
+
+function testGetColor () {
+  let RED_DARK = "rgba(235, 83, 104, 1)";
+  let RED_LIGHT = "rgba(237, 38, 85, 1)";
+  let originalTheme = getTheme();
+
+  setTheme("dark");
+  is(getColor("red"), RED_DARK, "correctly gets color for enabled theme.");
+  setTheme("light");
+  is(getColor("red"), RED_LIGHT, "correctly gets color for enabled theme.");
+  setTheme("metal");
+  is(getColor("red"), RED_LIGHT, "correctly uses light for default theme if enabled theme not found");
+
+  is(getColor("red", "dark"), RED_DARK, "if provided and found, uses the provided theme.");
+  is(getColor("red", "metal"), RED_LIGHT, "if provided and not found, defaults to light theme.");
+  is(getColor("somecomponents"), null, "if a type cannot be found, should return null.");
+
+  setTheme(originalTheme);
+}
diff --git a/browser/devtools/shared/theme.js b/browser/devtools/shared/theme.js
new file mode 100644
index 0000000..c82e4fa
--- /dev/null
+++ b/browser/devtools/shared/theme.js
@@ -0,0 +1,110 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+loader.lazyRequireGetter(this, "Services");
+loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
+
+
+/**
+ * Colors for themes taken from:
+ * https://developer.mozilla.org/en-US/docs/Tools/DevToolsColors
+ */
+
+const COLORS = {
+  dark: {
+    /* chrome */
+    tabtoolbar:          "rgba(37, 44, 51, 1)",
+    toolbars:            "rgba(52, 60, 69, 1)",
+    selectionbackground: "rgba(29, 79, 115, 1)",
+    selectiontext:       "rgba(245, 247, 250, 1)",
+    splitters:           "rgba(0, 0, 0, 1)",
+
+    /* content */
+    background:          "rgba(17, 19, 21, 1)",
+    backgroundsidebar:   "rgba(24, 29, 32, 1)",
+    backgroundattention: "rgba(178, 128, 37, 1)",
+
+    /* text */
+    textbody:            "rgba(143, 161, 178, 1)",
+    textforeground:      "rgba(182, 186, 191, 1)",
+    textcontrast:        "rgba(169, 186, 203, 1)",
+    textcontent:         "rgba(143, 161, 178, 1)",
+    textcontentdark:     "rgba(95, 115, 135, 1)",
+
+    /* highlights */
+    bluegrey:            "rgba(94, 136, 176, 1)",
+    blue:                "rgba(70, 175, 227, 1)",
+    green:               "rgba(112, 191, 83, 1)",
+    lightorange:         "rgba(217, 155, 40, 1)",
+    orange:              "rgba(217, 102, 41, 1)",
+    pink:                "rgba(223, 128, 255, 1)",
+    purple:              "rgba(107, 122, 187, 1)",
+    red:                 "rgba(235, 83, 104, 1)"
+  },
+  light: {
+    /* chrome */
+    tabtoolbar:          "rgba(235, 236, 237, 1)",
+    toolbars:            "rgba(240, 241, 242, 1)",
+    selectionbackground: "rgba(76, 158, 217, 1)",
+    selectiontext:       "rgba(245, 247, 250, 1)",
+    splitters:           "rgba(170, 170, 170, 1)",
+
+    /* content */
+    background:          "rgba(252, 252, 252, 1)",
+    backgroundsidebar:   "rgba(247, 247, 247, 1)",
+    backgroundattention: "rgba(230, 176, 100, 1)",
+
+    /* text */
+    textbody:            "rgba(24, 25, 26, 1)",
+    textforeground:      "rgba(88, 89, 89, 1)",
+    textcontrast:        "rgba(41, 46, 51, 1)",
+    textcontent:         "rgba(143, 161, 178, 1)",
+    textcontentdark:     "rgba(102, 115, 128, 1)",
+
+    /* highlights */
+    bluegrey:            "rgba(95, 136, 176, 1)",
+    blue:                "rgba(0, 136, 204, 1)",
+    green:               "rgba(44, 187, 15, 1)",
+    lightorange:         "rgba(217, 126, 0, 1)",
+    orange:              "rgba(241, 60, 0, 1)",
+    pink:                "rgba(184, 46, 229, 1)",
+    purple:              "rgba(91, 95, 255, 1)",
+    red:                 "rgba(237, 38, 85, 1)"
+  }
+};
+
+exports.COLORS = COLORS;
+
+/**
+ * Returns the string value of the current theme,
+ * like "dark" or "light".
+ */
+const getTheme = exports.getTheme = () => Services.prefs.getCharPref("devtools.theme");
+
+/**
+ * Returns a color indicated by `type` (like "tabtoolbar", or "red"),
+ * with the ability to specify a theme, or use whatever the current theme is
+ * if left unset. If theme not found, falls back to "light" theme. Returns null
+ * if the type cannot be found for the theme given.
+ */
+const getColor = exports.getColor = (type, theme) => {
+  let themeColors = COLORS[theme || getTheme()] || COLORS.light;
+  return themeColors[type] || null;
+};
+
+/**
+ * Mimics selecting the theme selector in the toolbox;
+ * sets the preference and emits an event on gDevTools to trigger
+ * the themeing.
+ */
+const setTheme = exports.setTheme = (newTheme) => {
+  Services.prefs.setCharPref("devtools.theme", newTheme);
+  gDevTools.emit("pref-changed", {
+    pref: "devtools.theme",
+    newValue: newTheme,
+    oldValue: getTheme()
+  });
+};
-- 
1.8.4.2

