From 4b9f0023287022a968dc3f5a81d59df910b5650c Mon Sep 17 00:00:00 2001
From: Jordan Santell <jsantell@gmail.com>
Date: Mon, 4 Aug 2014 17:51:16 -0700
Subject: Bug 1025864 - Add observer updates when AudioParams change in the Web Audio Editor, r=vp

---
 browser/devtools/shared/frame-script-utils.js      |  10 +
 browser/devtools/webaudioeditor/test/browser.ini   |   7 +-
 .../browser_wa_properties-view-change-params.js    |  46 ++++
 .../browser_webaudio-actor-change-params-01.js     |  46 ++++
 .../browser_webaudio-actor-change-params-02.js     |  36 ++++
 .../browser_webaudio-actor-change-params-03.js     |  32 +++
 .../webaudioeditor/test/doc_change-param.html      |  25 +++
 browser/devtools/webaudioeditor/test/head.js       |  16 +-
 .../webaudioeditor/webaudioeditor-controller.js    |  33 ++-
 .../devtools/webaudioeditor/webaudioeditor-view.js |  20 +-
 toolkit/devtools/server/actors/webaudio.js         | 235 +++++++++++++++++----
 11 files changed, 453 insertions(+), 53 deletions(-)
 create mode 100644 browser/devtools/webaudioeditor/test/browser_wa_properties-view-change-params.js
 create mode 100644 browser/devtools/webaudioeditor/test/browser_webaudio-actor-change-params-01.js
 create mode 100644 browser/devtools/webaudioeditor/test/browser_webaudio-actor-change-params-02.js
 create mode 100644 browser/devtools/webaudioeditor/test/browser_webaudio-actor-change-params-03.js
 create mode 100644 browser/devtools/webaudioeditor/test/doc_change-param.html

diff --git a/browser/devtools/shared/frame-script-utils.js b/browser/devtools/shared/frame-script-utils.js
index 51068b8..aee6bd1 100644
--- a/browser/devtools/shared/frame-script-utils.js
+++ b/browser/devtools/shared/frame-script-utils.js
@@ -1,18 +1,28 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
+let { utils: Cu, interfaces: Ci } = Components;
+
 addMessageListener("devtools:test:history", function ({ data }) {
   content.history[data.direction]();
 });
 
 addMessageListener("devtools:test:navigate", function ({ data }) {
   content.location = data.location;
 });
 
 addMessageListener("devtools:test:reload", function ({ data }) {
   data = data || {};
   content.location.reload(data.forceget);
 });
+
+addMessageListener("devtools:test:forceCC", function () {
+  let DOMWindowUtils = content.QueryInterface(Ci.nsIInterfaceRequestor)
+    .getInterface(Ci.nsIDOMWindowUtils)
+  DOMWindowUtils.cycleCollect();
+  DOMWindowUtils.garbageCollect();
+  DOMWindowUtils.garbageCollect();
+});
diff --git a/browser/devtools/webaudioeditor/test/browser.ini b/browser/devtools/webaudioeditor/test/browser.ini
index 84dca5d..d56008c 100644
--- a/browser/devtools/webaudioeditor/test/browser.ini
+++ b/browser/devtools/webaudioeditor/test/browser.ini
@@ -4,28 +4,32 @@ support-files =
   doc_simple-context.html
   doc_complex-context.html
   doc_simple-node-creation.html
   doc_buffer-and-array.html
   doc_media-node-creation.html
   doc_destroy-nodes.html
   doc_connect-toggle.html
   doc_connect-param.html
+  doc_change-param.html
   440hz_sine.ogg
   head.js
 
 [browser_audionode-actor-get-set-param.js]
 [browser_audionode-actor-get-type.js]
+[browser_audionode-actor-get-param-flags.js]
 [browser_audionode-actor-get-params-01.js]
 [browser_audionode-actor-get-params-02.js]
-[browser_audionode-actor-get-param-flags.js]
 [browser_audionode-actor-is-source.js]
 [browser_webaudio-actor-simple.js]
 [browser_webaudio-actor-destroy-node.js]
 [browser_webaudio-actor-connect-param.js]
+[browser_webaudio-actor-change-params-01.js]
+[browser_webaudio-actor-change-params-02.js]
+[browser_webaudio-actor-change-params-03.js]
 
 [browser_wa_destroy-node-01.js]
 
 [browser_wa_first-run.js]
 [browser_wa_reset-01.js]
 [browser_wa_reset-02.js]
 [browser_wa_reset-03.js]
 
@@ -41,9 +45,10 @@ support-files =
 [browser_wa_inspector-toggle.js]
 
 [browser_wa_properties-view.js]
 [browser_wa_properties-view-media-nodes.js]
 # [browser_wa_properties-view-edit-01.js]
 # [browser_wa_properties-view-edit-02.js]
 # Disabled for too many intermittents bug 1010423
 [browser_wa_properties-view-params.js]
+[browser_wa_properties-view-change-params.js]
 [browser_wa_properties-view-params-objects.js]
diff --git a/browser/devtools/webaudioeditor/test/browser_wa_properties-view-change-params.js b/browser/devtools/webaudioeditor/test/browser_wa_properties-view-change-params.js
new file mode 100644
index 0000000..080f6a9
--- /dev/null
+++ b/browser/devtools/webaudioeditor/test/browser_wa_properties-view-change-params.js
@@ -0,0 +1,46 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests that params view correctly updates changed parameters
+ * when source code updates them, as well as CHANGE_PARAM events.
+ */
+
+function spawnTest() {
+  let [target, debuggee, panel] = yield initWebAudioEditor(CHANGE_PARAM_URL);
+  let { panelWin } = panel;
+  let { gFront, $, $$, EVENTS, WebAudioInspectorView } = panelWin;
+  let gVars = WebAudioInspectorView._propsView;
+
+  // Set parameter polling to 20ms for tests
+  panelWin.PARAM_POLLING_FREQUENCY = 20;
+
+  let started = once(gFront, "start-context");
+
+  reload(target);
+
+  let [actors] = yield Promise.all([
+    getN(gFront, "create-node", 3),
+    waitForGraphRendered(panelWin, 3, 0)
+  ]);
+
+  let oscId = actors[1].actorID;
+
+  click(panelWin, findGraphNode(panelWin, oscId));
+  yield once(panelWin, EVENTS.UI_INSPECTOR_NODE_SET);
+
+  // Yield twice so we get a diff
+  yield once(panelWin, EVENTS.CHANGE_PARAM);
+  let [[_, args]] = yield getSpread(panelWin, EVENTS.CHANGE_PARAM);
+  is(args.actorID, oscId, "EVENTS.CHANGE_PARAM has correct `actorID`");
+  ok(args.oldValue < args.newValue, "EVENTS.CHANGE_PARAM has correct `newValue` and `oldValue`");
+  is(args.param, "detune", "EVENTS.CHANGE_PARAM has correct `param`");
+
+  let [[_, args]] = yield getSpread(panelWin, EVENTS.CHANGE_PARAM);
+  checkVariableView(gVars, 0, { "detune": args.newValue }, "`detune` parameter updated.");
+  let [[_, args]] = yield getSpread(panelWin, EVENTS.CHANGE_PARAM);
+  checkVariableView(gVars, 0, { "detune": args.newValue }, "`detune` parameter updated.");
+
+  yield teardown(panel);
+  finish();
+}
diff --git a/browser/devtools/webaudioeditor/test/browser_webaudio-actor-change-params-01.js b/browser/devtools/webaudioeditor/test/browser_webaudio-actor-change-params-01.js
new file mode 100644
index 0000000..072a17d
--- /dev/null
+++ b/browser/devtools/webaudioeditor/test/browser_webaudio-actor-change-params-01.js
@@ -0,0 +1,46 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Test WebAudioActor `change-param` events and front.[en|dis]ableChangeParamEvents
+ */
+
+function spawnTest () {
+  let [target, debuggee, front] = yield initBackend(CHANGE_PARAM_URL);
+  let [_, nodes] = yield Promise.all([
+    front.setup({ reload: true }),
+    getN(front, "create-node", 3)
+  ]);
+
+  let osc = nodes[1];
+  let eventCount = 0;
+
+  yield front.enableChangeParamEvents(osc, 20);
+
+  front.on("change-param", onChangeParam);
+
+  yield getN(front, "change-param", 3);
+  yield front.disableChangeParamEvents();
+
+  let currEventCount = eventCount;
+
+  // Be flexible here incase we get an extra counter before the listener is turned off
+  ok(eventCount >= 3, "Calling `enableChangeParamEvents` should allow front to emit `change-param`.");
+
+  yield wait(100);
+
+  ok((eventCount - currEventCount) <= 2, "Calling `disableChangeParamEvents` should turn off the listener.");
+
+  front.off("change-param", onChangeParam);
+
+  yield removeTab(target.tab);
+  finish();
+
+  function onChangeParam ({ newValue, oldValue, param, actorID }) {
+    is(actorID, osc.actorID, "correct `actorID` in `change-param`.");
+    is(param, "detune", "correct `param` property in `change-param`.");
+    ok(newValue > oldValue,
+      "correct `newValue` (" + newValue + ") and `oldValue` (" + oldValue + ") in `change-param`");
+    eventCount++;
+  }
+}
diff --git a/browser/devtools/webaudioeditor/test/browser_webaudio-actor-change-params-02.js b/browser/devtools/webaudioeditor/test/browser_webaudio-actor-change-params-02.js
new file mode 100644
index 0000000..b650e5e
--- /dev/null
+++ b/browser/devtools/webaudioeditor/test/browser_webaudio-actor-change-params-02.js
@@ -0,0 +1,36 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Test that listening to param change polling does not break when the AudioNode is collected.
+ */
+
+function spawnTest () {
+  let [target, debuggee, front] = yield initBackend(DESTROY_NODES_URL);
+  let waitUntilDestroyed = getN(front, "destroy-node", 10);
+  let [_, nodes] = yield Promise.all([
+    front.setup({ reload: true }),
+    getN(front, "create-node", 13)
+  ]);
+
+  let bufferNode = nodes[6];
+
+  yield front.enableChangeParamEvents(bufferNode, 20);
+
+  front.on("change-param", onChangeParam);
+
+  forceCC();
+
+  yield waitUntilDestroyed;
+  yield wait(50);
+
+  front.off("change-param", onChangeParam);
+
+  ok(true, "listening to `change-param` on a dead node doesn't throw.");
+  yield removeTab(target.tab);
+  finish();
+
+  function onChangeParam (args) {
+    ok(false, "`change-param` should not be emitted on a node that hasn't changed params or is dead.");
+  }
+}
diff --git a/browser/devtools/webaudioeditor/test/browser_webaudio-actor-change-params-03.js b/browser/devtools/webaudioeditor/test/browser_webaudio-actor-change-params-03.js
new file mode 100644
index 0000000..43715cb
--- /dev/null
+++ b/browser/devtools/webaudioeditor/test/browser_webaudio-actor-change-params-03.js
@@ -0,0 +1,32 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Test WebAudioActor `change-param` events on special types.
+ */
+
+function spawnTest () {
+  let [target, debuggee, front] = yield initBackend(CHANGE_PARAM_URL);
+  let [_, nodes] = yield Promise.all([
+    front.setup({ reload: true }),
+    getN(front, "create-node", 3)
+  ]);
+
+  let shaper = nodes[2];
+  let eventCount = 0;
+
+  yield front.enableChangeParamEvents(shaper, 20);
+
+  let onChange = once(front, "change-param");
+
+  shaper.setParam("curve", null);
+
+  let { newValue, oldValue } = yield onChange;
+
+  is(oldValue.type, "object", "`oldValue` should be an object.");
+  is(oldValue.class, "Float32Array", "`oldValue` should be of class Float32Array.");
+  is(newValue.type, "null", "`newValue` should be null.");
+
+  yield removeTab(target.tab);
+  finish();
+}
diff --git a/browser/devtools/webaudioeditor/test/doc_change-param.html b/browser/devtools/webaudioeditor/test/doc_change-param.html
new file mode 100644
index 0000000..c8925d9
--- /dev/null
+++ b/browser/devtools/webaudioeditor/test/doc_change-param.html
@@ -0,0 +1,25 @@
+<!-- Any copyright is dedicated to the Public Domain.
+     http://creativecommons.org/publicdomain/zero/1.0/ -->
+<!doctype html>
+
+<html>
+  <head>
+    <meta charset="utf-8"/>
+    <title>Web Audio Editor test page</title>
+  </head>
+
+  <body>
+
+    <script type="text/javascript;version=1.8">
+      "use strict";
+
+      let ctx = new AudioContext();
+      let osc = ctx.createOscillator();
+      let shaperNode = ctx.createWaveShaper();
+      let detuneVal = 0;
+      shaperNode.curve = new Float32Array(65536);
+      setInterval(() => osc.detune.value = ++detuneVal, 10);
+    </script>
+  </body>
+
+</html>
diff --git a/browser/devtools/webaudioeditor/test/head.js b/browser/devtools/webaudioeditor/test/head.js
index ec4aa4a..c97ea3a 100644
--- a/browser/devtools/webaudioeditor/test/head.js
+++ b/browser/devtools/webaudioeditor/test/head.js
@@ -14,26 +14,29 @@ Services.prefs.setBoolPref("devtools.debugger.log", true);
 let { Task } = Cu.import("resource://gre/modules/Task.jsm", {});
 let { Promise } = Cu.import("resource://gre/modules/Promise.jsm", {});
 let { gDevTools } = Cu.import("resource:///modules/devtools/gDevTools.jsm", {});
 let { devtools } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 let { DebuggerServer } = Cu.import("resource://gre/modules/devtools/dbg-server.jsm", {});
 
 let { WebAudioFront } = devtools.require("devtools/server/actors/webaudio");
 let TargetFactory = devtools.TargetFactory;
+let mm = null;
 
+const FRAME_SCRIPT_UTILS_URL = "chrome://browser/content/devtools/frame-script-utils.js";
 const EXAMPLE_URL = "http://example.com/browser/browser/devtools/webaudioeditor/test/";
 const SIMPLE_CONTEXT_URL = EXAMPLE_URL + "doc_simple-context.html";
 const COMPLEX_CONTEXT_URL = EXAMPLE_URL + "doc_complex-context.html";
 const SIMPLE_NODES_URL = EXAMPLE_URL + "doc_simple-node-creation.html";
 const MEDIA_NODES_URL = EXAMPLE_URL + "doc_media-node-creation.html";
 const BUFFER_AND_ARRAY_URL = EXAMPLE_URL + "doc_buffer-and-array.html";
 const DESTROY_NODES_URL = EXAMPLE_URL + "doc_destroy-nodes.html";
 const CONNECT_TOGGLE_URL = EXAMPLE_URL + "doc_connect-toggle.html";
 const CONNECT_PARAM_URL = EXAMPLE_URL + "doc_connect-param.html";
+const CHANGE_PARAM_URL = EXAMPLE_URL + "doc_change-param.html";
 
 // All tests are asynchronous.
 waitForExplicitFinish();
 
 let gToolEnabled = Services.prefs.getBoolPref("devtools.webaudioeditor.enabled");
 
 registerCleanupFunction(() => {
   info("finish() was called, cleaning up...");
@@ -127,16 +130,18 @@ function initBackend(aUrl) {
   return Task.spawn(function*() {
     let tab = yield addTab(aUrl);
     let target = TargetFactory.forTab(tab);
     let debuggee = target.window.wrappedJSObject;
 
     yield target.makeRemote();
 
     let front = new WebAudioFront(target.client, target.form);
+
+    loadFrameScripts();
     return [target, debuggee, front];
   });
 }
 
 function initWebAudioEditor(aUrl) {
   info("Initializing a web audio editor pane.");
 
   return Task.spawn(function*() {
@@ -144,16 +149,18 @@ function initWebAudioEditor(aUrl) {
     let target = TargetFactory.forTab(tab);
     let debuggee = target.window.wrappedJSObject;
 
     yield target.makeRemote();
 
     Services.prefs.setBoolPref("devtools.webaudioeditor.enabled", true);
     let toolbox = yield gDevTools.showToolbox(target, "webaudioeditor");
     let panel = toolbox.getCurrentPanel();
+
+    loadFrameScripts();
     return [target, debuggee, panel];
   });
 }
 
 function teardown(aPanel) {
   info("Destroying the web audio editor.");
 
   return Promise.all([
@@ -374,19 +381,22 @@ function countGraphObjects (win) {
     edges: win.document.querySelectorAll(".edgePaths > .edgePath").length
   }
 }
 
 /**
 * Forces cycle collection and GC, used in AudioNode destruction tests.
 */
 function forceCC () {
-  SpecialPowers.DOMWindowUtils.cycleCollect();
-  SpecialPowers.DOMWindowUtils.garbageCollect();
-  SpecialPowers.DOMWindowUtils.garbageCollect();
+  mm.sendAsyncMessage("devtools:test:forceCC");
+}
+
+function loadFrameScripts () {
+  mm = gBrowser.selectedBrowser.messageManager;
+  mm.loadFrameScript(FRAME_SCRIPT_UTILS_URL, false);
 }
 
 /**
  * List of audio node properties to test against expectations of the AudioNode actor
  */
 
 const NODE_DEFAULT_VALUES = {
   "AudioDestinationNode": {},
diff --git a/browser/devtools/webaudioeditor/webaudioeditor-controller.js b/browser/devtools/webaudioeditor/webaudioeditor-controller.js
index b8a801f9..cc865a6 100644
--- a/browser/devtools/webaudioeditor/webaudioeditor-controller.js
+++ b/browser/devtools/webaudioeditor/webaudioeditor-controller.js
@@ -15,19 +15,20 @@ const { defer, all } = Cu.import("resource://gre/modules/Promise.jsm", {}).Promi
 
 const { Task } = Cu.import("resource://gre/modules/Task.jsm", {});
 const require = Cu.import("resource://gre/modules/devtools/Loader.jsm", {}).devtools.require;
 const EventEmitter = require("devtools/toolkit/event-emitter");
 const STRINGS_URI = "chrome://browser/locale/devtools/webaudioeditor.properties"
 const L10N = new ViewHelpers.L10N(STRINGS_URI);
 const Telemetry = require("devtools/shared/telemetry");
 const telemetry = new Telemetry();
-
 let { console } = Cu.import("resource://gre/modules/devtools/Console.jsm", {});
 
+let PARAM_POLLING_FREQUENCY = 1000;
+
 // The panel's window global is an EventEmitter firing the following events:
 const EVENTS = {
   // Fired when the first AudioNode has been created, signifying
   // that the AudioContext is being used and should be tracked via the editor.
   START_CONTEXT: "WebAudioEditor:StartContext",
 
   // On node creation, connect and disconnect.
   CREATE_NODE: "WebAudioEditor:CreateNode",
@@ -149,16 +150,18 @@ function shutdownWebAudioEditor() {
 let WebAudioEditorController = {
   /**
    * Listen for events emitted by the current tab target.
    */
   initialize: function() {
     telemetry.toolOpened("webaudioeditor");
     this._onTabNavigated = this._onTabNavigated.bind(this);
     this._onThemeChange = this._onThemeChange.bind(this);
+    this._onSelectNode = this._onSelectNode.bind(this);
+    this._onChangeParam = this._onChangeParam.bind(this);
     gTarget.on("will-navigate", this._onTabNavigated);
     gTarget.on("navigate", this._onTabNavigated);
     gFront.on("start-context", this._onStartContext);
     gFront.on("create-node", this._onCreateNode);
     gFront.on("connect-node", this._onConnectNode);
     gFront.on("disconnect-node", this._onDisconnectNode);
     gFront.on("change-param", this._onChangeParam);
     gFront.on("destroy-node", this._onDestroyNode);
@@ -168,37 +171,43 @@ let WebAudioEditorController = {
     // with CSS
     gDevTools.on("pref-changed", this._onThemeChange);
 
     // Set up events to refresh the Graph view
     window.on(EVENTS.CREATE_NODE, this._onUpdatedContext);
     window.on(EVENTS.CONNECT_NODE, this._onUpdatedContext);
     window.on(EVENTS.DISCONNECT_NODE, this._onUpdatedContext);
     window.on(EVENTS.DESTROY_NODE, this._onUpdatedContext);
+
+    // Set up a controller for managing parameter changes per audio node
+    window.on(EVENTS.UI_SELECT_NODE, this._onSelectNode);
   },
 
   /**
    * Remove events emitted by the current tab target.
    */
-  destroy: function() {
+  destroy: Task.async(function* () {
     telemetry.toolClosed("webaudioeditor");
     gTarget.off("will-navigate", this._onTabNavigated);
     gTarget.off("navigate", this._onTabNavigated);
     gFront.off("start-context", this._onStartContext);
     gFront.off("create-node", this._onCreateNode);
     gFront.off("connect-node", this._onConnectNode);
     gFront.off("disconnect-node", this._onDisconnectNode);
     gFront.off("change-param", this._onChangeParam);
     gFront.off("destroy-node", this._onDestroyNode);
     window.off(EVENTS.CREATE_NODE, this._onUpdatedContext);
     window.off(EVENTS.CONNECT_NODE, this._onUpdatedContext);
     window.off(EVENTS.DISCONNECT_NODE, this._onUpdatedContext);
     window.off(EVENTS.DESTROY_NODE, this._onUpdatedContext);
+    window.off(EVENTS.UI_SELECT_NODE, this._onSelectNode);
     gDevTools.off("pref-changed", this._onThemeChange);
-  },
+
+    yield gFront.disableChangeParamEvents();
+  }),
 
   /**
    * Called when page is reloaded to show the reload notice and waiting
    * for an audio context notice.
    */
   reset: function () {
     $("#reload-notice").hidden = true;
     $("#waiting-notice").hidden = false;
@@ -333,19 +342,31 @@ let WebAudioEditorController = {
     let node = getViewNodeByActor(nodeActor);
     node.disconnect();
     window.emit(EVENTS.DISCONNECT_NODE, node.id);
   },
 
   /**
    * Called when a node param is changed.
    */
-  _onChangeParam: function({ actor, param, value }) {
-    window.emit(EVENTS.CHANGE_PARAM, getViewNodeByActor(actor), param, value);
-  }
+  _onChangeParam: function (args) {
+    window.emit(EVENTS.CHANGE_PARAM, args);
+  },
+
+  /**
+   * Called on UI_SELECT_NODE, used to manage
+   * `change-param` events on that node.
+   */
+  _onSelectNode: function (_, id) {
+    let node = getViewNodeById(id);
+
+    if (node && node.actor) {
+      gFront.enableChangeParamEvents(node.actor, PARAM_POLLING_FREQUENCY);
+    }
+  },
 };
 
 /**
  * Convenient way of emitting events from the panel window.
  */
 EventEmitter.decorate(this);
 
 /**
diff --git a/browser/devtools/webaudioeditor/webaudioeditor-view.js b/browser/devtools/webaudioeditor/webaudioeditor-view.js
index 8b69fc4..2eeb06c 100644
--- a/browser/devtools/webaudioeditor/webaudioeditor-view.js
+++ b/browser/devtools/webaudioeditor/webaudioeditor-view.js
@@ -334,32 +334,35 @@ let WebAudioInspectorView = {
     // Hide inspector view on startup
     this._inspectorPane.setAttribute("width", INSPECTOR_WIDTH);
     this.toggleInspector({ visible: false, delayed: false, animated: false });
 
     this._onEval = this._onEval.bind(this);
     this._onNodeSelect = this._onNodeSelect.bind(this);
     this._onTogglePaneClick = this._onTogglePaneClick.bind(this);
     this._onDestroyNode = this._onDestroyNode.bind(this);
+    this._onChangeParam = this._onChangeParam.bind(this);
 
     this._inspectorPaneToggleButton.addEventListener("mousedown", this._onTogglePaneClick, false);
     this._propsView = new VariablesView($("#properties-tabpanel-content"), GENERIC_VARIABLES_VIEW_SETTINGS);
     this._propsView.eval = this._onEval;
 
     window.on(EVENTS.UI_SELECT_NODE, this._onNodeSelect);
     window.on(EVENTS.DESTROY_NODE, this._onDestroyNode);
+    window.on(EVENTS.CHANGE_PARAM, this._onChangeParam);
   },
 
   /**
    * Destruction function called when the tool cleans up.
    */
   destroy: function () {
     this._inspectorPaneToggleButton.removeEventListener("mousedown", this._onTogglePaneClick);
     window.off(EVENTS.UI_SELECT_NODE, this._onNodeSelect);
     window.off(EVENTS.DESTROY_NODE, this._onDestroyNode);
+    window.off(EVENTS.CHANGE_PARAM, this._onChangeParam);
 
     this._inspectorPane = null;
     this._inspectorPaneToggleButton = null;
     this._tabsPane = null;
   },
 
   /**
    * Toggles the visibility of the AudioNode Inspector.
@@ -569,17 +572,32 @@ let WebAudioInspectorView = {
   /**
    * Called when `DESTROY_NODE` is fired to remove the node from props view if
    * it's currently selected.
    */
   _onDestroyNode: function (_, id) {
     if (this._currentNode && this._currentNode.id === id) {
       this.setCurrentAudioNode(null);
     }
-  }
+  },
+
+  /**
+   * Called when `CHANGE_PARAM` is fired. We should ensure that this event is
+   * for the same node that is currently selected. We check the existence
+   * of each part of the scope to make sure that if this event was fired
+   * during a VariablesView rebuild, then we just ignore it.
+   */
+  _onChangeParam: function (_, { param, newValue, oldValue, actorID }) {
+    if (!this._currentNode || this._currentNode.actor.actorID !== actorID) return;
+    let scope = this._getAudioPropertiesScope();
+    if (!scope) return;
+    let property = scope.get(param);
+    if (!property) return;
+    property.setGrip(newValue);
+  },
 };
 
 /**
  * Takes an element in an SVG graph and iterates over
  * ancestors until it finds the graph node container. If not found,
  * returns null.
  */
 
diff --git a/toolkit/devtools/server/actors/webaudio.js b/toolkit/devtools/server/actors/webaudio.js
index 4cea0f9..1771375a 100644
--- a/toolkit/devtools/server/actors/webaudio.js
+++ b/toolkit/devtools/server/actors/webaudio.js
@@ -1,37 +1,39 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 "use strict";
 
 const {Cc, Ci, Cu, Cr} = require("chrome");
-
 const Services = require("Services");
-
 const { Promise: promise } = Cu.import("resource://gre/modules/Promise.jsm", {});
 const events = require("sdk/event/core");
 const { on: systemOn, off: systemOff } = require("sdk/system/events");
+const { setTimeout, clearTimeout } = require("sdk/timers");
 const protocol = require("devtools/server/protocol");
 const { CallWatcherActor, CallWatcherFront } = require("devtools/server/actors/call-watcher");
 const { ThreadActor } = require("devtools/server/actors/script");
-
 const { on, once, off, emit } = events;
 const { method, Arg, Option, RetVal } = protocol;
 
 exports.register = function(handle) {
   handle.addTabActor(WebAudioActor, "webaudioActor");
   handle.addGlobalActor(WebAudioActor, "webaudioActor");
 };
 
 exports.unregister = function(handle) {
   handle.removeTabActor(WebAudioActor);
   handle.removeGlobalActor(WebAudioActor);
 };
 
+// In milliseconds, how often should AudioNodes poll to see
+// if an AudioParam's value has changed to emit to the client.
+const PARAM_POLLING_FREQUENCY = 1000;
+
 const AUDIO_GLOBALS = [
   "AudioContext", "AudioNode"
 ];
 
 const NODE_CREATION_METHODS = [
   "createBufferSource", "createMediaElementSource", "createMediaStreamSource",
   "createMediaStreamDestination", "createScriptProcessor", "createAnalyser",
   "createGain", "createDelay", "createBiquadFilter", "createWaveShaper",
@@ -141,16 +143,20 @@ let AudioNodeActor = exports.AudioNodeActor = protocol.ActorClass({
 
     try {
       this.type = getConstructorName(node);
     } catch (e) {
       this.type = "";
     }
   },
 
+  destroy: function(conn) {
+    protocol.Actor.prototype.destroy.call(this, conn);
+  },
+
   /**
    * Returns the name of the audio type.
    * Examples: "OscillatorNode", "MediaElementAudioSourceNode"
    */
   getType: method(function () {
     return this.type;
   }, {
     response: { type: RetVal("string") }
@@ -182,16 +188,17 @@ let AudioNodeActor = exports.AudioNodeActor = protocol.ActorClass({
       return CollectedAudioNodeError();
     }
 
     try {
       if (isAudioParam(node, param))
         node[param].value = value;
       else
         node[param] = value;
+
       return undefined;
     } catch (e) {
       return constructError(e);
     }
   }, {
     request: {
       param: Arg(0, "string"),
       value: Arg(1, "nullable:primitive")
@@ -216,24 +223,17 @@ let AudioNodeActor = exports.AudioNodeActor = protocol.ActorClass({
     // return the `value` property of the parameter.
     let value = isAudioParam(node, param) ? node[param].value : node[param];
 
     // Return the grip form of the value; at this time,
     // there shouldn't be any non-primitives at the moment, other than
     // AudioBuffer or Float32Array references and the like,
     // so this just formats the value to be displayed in the VariablesView,
     // without using real grips and managing via actor pools.
-    let grip;
-    try {
-      grip = ThreadActor.prototype.createValueGrip(value);
-    }
-    catch (e) {
-      grip = createObjectGrip(value);
-    }
-    return grip;
+    return createGrip(value);
   }, {
     request: {
       param: Arg(0, "string")
     },
     response: { text: RetVal("nullable:primitive") }
   }),
 
   /**
@@ -247,20 +247,21 @@ let AudioNodeActor = exports.AudioNodeActor = protocol.ActorClass({
   getParamFlags: method(function (param) {
     return (NODE_PROPERTIES[this.type] || {})[param];
   }, {
     request: { param: Arg(0, "string") },
     response: { flags: RetVal("nullable:primitive") }
   }),
 
   /**
-   * Get an array of objects each containing a `param` and `value` property,
-   * corresponding to a property name and current value of the audio node.
+   * Get an array of objects each containing a `param`, `value` and `flags` property,
+   * corresponding to a property name and current value of the audio node, and any
+   * associated flags as defined by NODE_PROPERTIES.
    */
-  getParams: method(function (param) {
+  getParams: method(function () {
     let props = Object.keys(NODE_PROPERTIES[this.type]);
     return props.map(prop =>
       ({ param: prop, value: this.getParam(prop), flags: this.getParamFlags(prop) }));
   }, {
     response: { params: RetVal("json") }
   })
 });
 
@@ -402,25 +403,74 @@ let WebAudioActor = exports.WebAudioActor = protocol.ActorClass({
    */
   finalize: method(function() {
     if (!this._initialized) {
       return;
     }
     this.tabActor = null;
     this._initialized = false;
     off(this._callWatcher._contentObserver, "global-destroyed", this._onGlobalDestroyed);
+    this.disableChangeParamEvents();
     this._nativeToActorID = null;
     this._callWatcher.eraseRecording();
     this._callWatcher.finalize();
     this._callWatcher = null;
   }, {
    oneway: true
   }),
 
   /**
+   * Takes an AudioNodeActor and a duration specifying how often
+   * should the node's parameters be polled to detect changes. Emits
+   * `change-param` when a change is found.
+   *
+   * Currently, only one AudioNodeActor can be listened to at a time.
+   *
+   * `wait` is used in tests to specify the poll timer.
+   */
+  enableChangeParamEvents: method(function (nodeActor, wait) {
+    // For now, only have one node being polled
+    this.disableChangeParamEvents();
+
+    // Ignore if node is dead
+    if (!this.node.get()) {
+      return;
+    }
+
+    let previous = mapAudioParams(nodeActor);
+    this.poller = new Poller(() => {
+      // If node has been collected, disable param polling
+      if (!this.node.get()) {
+        this.disableChangeParamEvents();
+        return;
+      }
+
+      let current = mapAudioParams(nodeActor);
+      diffAudioParams(previous, current).forEach(changed => {
+        this._onChangeParam(nodeActor, changed);
+      });
+      previous = current;
+    }).on(wait || PARAM_POLLING_FREQUENCY);
+  }, {
+    request: {
+      node: Arg(0, "audionode"),
+      wait: Arg(1, "nullable:number"),
+    },
+    oneway: true
+  }),
+
+  disableChangeParamEvents: method(function () {
+    if (this.poller) {
+      this.poller.off();
+    }
+  }, {
+    oneway: true
+  }),
+
+  /**
    * Events emitted by this actor.
    */
   events: {
     "start-context": {
       type: "startContext"
     },
     "connect-node": {
       type: "connectNode",
@@ -432,29 +482,30 @@ let WebAudioActor = exports.WebAudioActor = protocol.ActorClass({
       source: Arg(0, "audionode")
     },
     "connect-param": {
       type: "connectParam",
       source: Option(0, "audionode"),
       dest: Option(0, "audionode"),
       param: Option(0, "string")
     },
-    "change-param": {
-      type: "changeParam",
-      source: Option(0, "audionode"),
-      param: Option(0, "string"),
-      value: Option(0, "string")
-    },
     "create-node": {
       type: "createNode",
       source: Arg(0, "audionode")
     },
     "destroy-node": {
       type: "destroyNode",
       source: Arg(0, "audionode")
+    },
+    "change-param": {
+      type: "changeParam",
+      param: Option(0, "string"),
+      newValue: Option(0, "json"),
+      oldValue: Option(0, "json"),
+      actorID: Option(0, "string")
     }
   },
 
   /**
    * Helper for constructing an AudioNodeActor, assigning to
    * internal weak map, and tracking via `manage` so it is assigned
    * an `actorID`.
    */
@@ -468,17 +519,17 @@ let WebAudioActor = exports.WebAudioActor = protocol.ActorClass({
     this.manage(actor);
     this._nativeToActorID.set(node.id, actor.actorID);
     return actor;
   },
 
   /**
    * Takes an XrayWrapper node, and attaches the node's `nativeID`
    * to the AudioParams as `_parentID`, as well as the the type of param
-   * as a string on `_paramName`.
+   * as a string on `_paramName`. Used to tag AudioParams for `connect-param` events.
    */
   _instrumentParams: function (node) {
     let type = getConstructorName(node);
     Object.keys(NODE_PROPERTIES[type])
       .filter(isAudioParam.bind(null, node))
       .forEach(paramName => {
         let param = node[paramName];
         param._parentID = node.id;
@@ -488,16 +539,24 @@ let WebAudioActor = exports.WebAudioActor = protocol.ActorClass({
 
   /**
    * Takes an AudioNode and returns the stored actor for it.
    * In some cases, we won't have an actor stored (for example,
    * connecting to an AudioDestinationNode, since it's implicitly
    * created), so make a new actor and store that.
    */
   _getActorByNativeID: function (nativeID) {
+    // If the WebAudioActor has already been finalized, the `_nativeToActorID`
+    // map will already be destroyed -- the lingering destruction events
+    // seem to only occur in e10s, so add an extra check here to disregard
+    // these late events
+    if (!this._nativeToActorID) {
+      return null;
+    }
+
     // Ensure we have a Number, rather than a string
     // return via notification.
     nativeID = ~~nativeID;
 
     let actorID = this._nativeToActorID.get(nativeID);
     let actor = actorID != null ? this.conn.getActor(actorID) : null;
     return actor;
   },
@@ -539,48 +598,48 @@ let WebAudioActor = exports.WebAudioActor = protocol.ActorClass({
    * Called when an audio node is disconnected.
    */
   _onDisconnectNode: function (node) {
     let actor = this._getActorByNativeID(node.id);
     emit(this, "disconnect-node", actor);
   },
 
   /**
-   * Called when a parameter changes on an audio node
+   * Called when an AudioParam that's being listened to changes.
+   * Takes an AudioNodeActor and an object with `newValue`, `oldValue`, and `param` name.
    */
-  _onParamChange: function (node, param, value) {
-    let actor = this._getActorByNativeID(node.id);
-    emit(this, "param-change", {
-      source: actor,
-      param: param,
-      value: value
-    });
+  _onChangeParam: function (actor, changed) {
+    changed.actorID = actor.actorID;
+    emit(this, "change-param", changed);
   },
 
   /**
    * Called on node creation.
    */
   _onCreateNode: function (node) {
     let actor = this._constructAudioNode(node);
     emit(this, "create-node", actor);
   },
 
-  /** Called when `webaudio-node-demise` is triggered,
+  /**
+   * Called when `webaudio-node-demise` is triggered,
    * and emits the associated actor to the front if found.
    */
   _onDestroyNode: function ({data}) {
     // Cast to integer.
     let nativeID = ~~data;
 
     let actor = this._getActorByNativeID(nativeID);
 
     // If actorID exists, emit; in the case where we get demise
     // notifications for a document that no longer exists,
     // the mapping should not be found, so we do not emit an event.
     if (actor) {
+      // Turn off polling for changes if on
+      actor.disableChangeParamEvents();
       this._nativeToActorID.delete(nativeID);
       emit(this, "destroy-node", actor);
     }
   },
 
   /**
    * Called when the underlying ContentObserver fires `global-destroyed`
    * so we can cleanup some things between the global being destroyed and
@@ -658,22 +717,114 @@ function CollectedAudioNodeError () {
  * to a string of just the constructor name, like "OscillatorNode",
  * or "Float32Array".
  */
 function getConstructorName (obj) {
   return obj.toString().match(/\[object ([^\[\]]*)\]\]?$/)[1];
 }
 
 /**
- * Create a grip-like object to pass in renderable information
- * to the front-end for things like Float32Arrays, AudioBuffers,
- * without tracking them in an actor pool.
+ * Create a value grip for `value`, or fallback to a grip-like object
+ * for renderable information for the front-end for things like Float32Arrays,
+ * AudioBuffers, without tracking them in an actor pool.
  */
-function createObjectGrip (value) {
-  return {
-    type: "object",
-    preview: {
-      kind: "ObjectWithText",
-      text: ""
-    },
-    class: getConstructorName(value)
-  };
+function createGrip (value) {
+  try {
+    return ThreadActor.prototype.createValueGrip(value);
+  }
+  catch (e) {
+    return {
+      type: "object",
+      preview: {
+        kind: "ObjectWithText",
+        text: ""
+      },
+      class: getConstructorName(value)
+    };
+  }
+}
+
+/**
+ * Takes an AudioNodeActor and maps its current parameter values
+ * to a hash, where the property is the AudioParam name, and value
+ * is the current value.
+ */
+function mapAudioParams (node) {
+  return node.getParams().reduce(function (obj, p) {
+    obj[p.param] = p.value;
+    return obj;
+  }, {});
+}
+
+/**
+ * Takes an object of previous and current values of audio parameters,
+ * and compares them. If they differ, emit a `change-param` event.
+ *
+ * @param Object prev
+ *        Hash of previous set of AudioParam values.
+ * @param Object current
+ *        Hash of current set of AudioParam values.
+ */
+function diffAudioParams (prev, current) {
+  return Object.keys(current).reduce((changed, param) => {
+    if (!equalGrips(current[param], prev[param])) {
+      changed.push({
+        param: param,
+        oldValue: prev[param],
+        newValue: current[param]
+      });
+    }
+    return changed;
+  }, []);
+}
+
+/**
+ * Compares two grip objects to determine if they're equal or not.
+ *
+ * @param Any a
+ * @param Any a
+ * @return Boolean
+ */
+function equalGrips (a, b) {
+  let aType = typeof a;
+  let bType = typeof b;
+  if (aType !== bType) {
+    return false;
+  } else if (aType === "object") {
+    // In this case, we are comparing two objects, like an ArrayBuffer or Float32Array,
+    // or even just plain "null"s (which grip's will have `type` property "null",
+    // and we have no way of showing more information than its class, so assume
+    // these are equal since nothing can be updated with information of value.
+    if (a.type === b.type) {
+      return true;
+    }
+    // Otherwise return false -- this could be a case of a property going from `null`
+    // to having an ArrayBuffer or an object, in which case we should update it.
+    return false;
+  } else {
+    return a === b;
+  }
 }
+
+/**
+ * Poller class -- takes a function, and call be turned on and off
+ * via methods to execute `fn` on the interval specified during `on`.
+ */
+function Poller (fn) {
+  this.fn = fn;
+}
+
+Poller.prototype.on = function (wait) {
+  let poller = this;
+  poller.timer = setTimeout(poll, wait);
+  function poll () {
+    poller.fn();
+    poller.timer = setTimeout(poll, wait);
+  }
+  return this;
+};
+
+Poller.prototype.off = function () {
+  if (this.timer) {
+    clearTimeout(this.timer);
+  }
+  return this;
+};
-- 
1.8.4.2

