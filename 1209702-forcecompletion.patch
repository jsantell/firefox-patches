From: Jordan Santell <jsantell@mozilla.com>
Date: Tue, 29 Sep 2015 17:11:36 -0700
Subject: Bug 1209702 - Remove references to vestigial/unimplemented forceCompletion in ThreadActor r=fitzgen

diff --git a/devtools/server/actors/script.js b/devtools/server/actors/script.js
index b0938a7..13938ef 100644
--- a/devtools/server/actors/script.js
+++ b/devtools/server/actors/script.js
@@ -750,32 +750,16 @@ ThreadActor.prototype = {
     }
 
     // If the browser tab has been closed, terminate the debuggee script
     // instead of continuing. Executing JS after the content window is gone is
     // a bad idea.
     return this._tabClosed ? null : undefined;
   },
 
-  /**
-   * Handle resume requests that include a forceCompletion request.
-   *
-   * @param Object aRequest
-   *        The request packet received over the RDP.
-   * @returns A response packet.
-   */
-  _forceCompletion: function (aRequest) {
-    // TODO: remove this when Debugger.Frame.prototype.pop is implemented in
-    // bug 736733.
-    return {
-      error: "notImplemented",
-      message: "forced completion is not yet implemented."
-    };
-  },
-
   _makeOnEnterFrame: function ({ pauseAndRespond }) {
     return aFrame => {
       const generatedLocation = this.sources.getFrameLocation(aFrame);
       let { originalSourceActor } = this.unsafeSynchronize(this.sources.getOriginalLocation(
         generatedLocation));
       let url = originalSourceActor.url;
 
       return this.sources.isBlackBoxed(url)
@@ -1007,20 +991,16 @@ ThreadActor.prototype = {
             || this._nestedEventLoops.lastConnection !== this.conn)) {
       return {
         error: "wrongOrder",
         message: "trying to resume in the wrong order.",
         lastPausedUrl: this._nestedEventLoops.lastPausedUrl
       };
     }
 
-    if (aRequest && aRequest.forceCompletion) {
-      return this._forceCompletion(aRequest);
-    }
-
     let resumeLimitHandled;
     if (aRequest && aRequest.resumeLimit) {
       resumeLimitHandled = this._handleResumeLimit(aRequest)
     } else {
       this._clearSteppingHooks(this.youngestFrame);
       resumeLimitHandled = resolve(true);
     }
 
-- 
2.2.1

