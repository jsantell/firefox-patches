From: Jordan Santell <jsantell@mozilla.com>
Date: Wed, 1 Jul 2015 15:09:17 -0700
Subject: Bug 1177279 - Create SourceLocationController to handle
 updating of locations within devtools. r=jlong

diff --git a/browser/devtools/framework/target.js b/browser/devtools/framework/target.js
index 13c9177..240c26c 100644
--- a/browser/devtools/framework/target.js
+++ b/browser/devtools/framework/target.js
@@ -390,16 +390,30 @@ TabTarget.prototype = {
   get isMultiProcess() {
     return !this.window;
   },
 
   get isThreadPaused() {
     return !!this._isThreadPaused;
   },
 
+  resolveLocation: function (loc) {
+    let deferred = promise.defer();
+
+    this.client.request({
+      to: this.threadActor,
+      type: "resolveLocation",
+      line: loc.line,
+      column: loc.column,
+      url: loc.url
+    }, deferred.resolve);
+
+    return deferred.promise;
+  },
+
   /**
    * Adds remote protocol capabilities to the target, so that it can be used
    * for tools that support the Remote Debugging Protocol even for local
    * connections.
    */
   makeRemote: function TabTarget_makeRemote() {
     if (this._remote) {
       return this._remote.promise;
@@ -525,26 +539,35 @@ TabTarget.prototype = {
       }
     };
     this.client.addListener("tabNavigated", this._onTabNavigated);
 
     this._onFrameUpdate = (aType, aPacket) => {
       this.emit("frame-update", aPacket);
     };
     this.client.addListener("frameUpdate", this._onFrameUpdate);
+
+    this._onSourceChange = (name, source) => {
+      this.emit("source-updated", source);
+    };
+
+    this.client.addListener("updatedSource", this._onSourceChange);
+    this.client.addListener("newSource", this._onSourceChange);
   },
 
   /**
    * Teardown listeners for remote debugging.
    */
   _teardownRemoteListeners: function TabTarget__teardownRemoteListeners() {
     this.client.removeListener("closed", this.destroy);
     this.client.removeListener("tabNavigated", this._onTabNavigated);
     this.client.removeListener("tabDetached", this._onTabDetached);
     this.client.removeListener("frameUpdate", this._onFrameUpdate);
+    this.client.removeListener("updatedSource", this._onSourceChange);
+    this.client.removeListener("newSource", this._onSourceChange);
   },
 
   /**
    * Handle tabs events.
    */
   handleEvent: function (event) {
     switch (event.type) {
       case "TabClose":
diff --git a/browser/devtools/shared/moz.build b/browser/devtools/shared/moz.build
index 75303ab..3a0e3fb 100644
--- a/browser/devtools/shared/moz.build
+++ b/browser/devtools/shared/moz.build
@@ -35,16 +35,17 @@ EXTRA_JS_MODULES.devtools.shared += [
     'doorhanger.js',
     'frame-script-utils.js',
     'getjson.js',
     'inplace-editor.js',
     'node-attribute-parser.js',
     'observable-object.js',
     'options-view.js',
     'poller.js',
+    'source-location.js',
     'source-utils.js',
     'telemetry.js',
     'theme-switching.js',
     'theme.js',
     'undo.js'
 ]
 
 EXTRA_JS_MODULES.devtools.shared.widgets += [
diff --git a/browser/devtools/shared/source-location.js b/browser/devtools/shared/source-location.js
new file mode 100644
index 0000000..3eaed31
--- /dev/null
+++ b/browser/devtools/shared/source-location.js
@@ -0,0 +1,148 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+loader.lazyImporter(this, "Task", "resource://gre/modules/Task.jsm");
+loader.lazyRequireGetter(this, "EventTarget", "sdk/event/target", true);
+loader.lazyRequireGetter(this, "emit", "sdk/event/core", true);
+loader.lazyRequireGetter(this, "Class", "sdk/core/heritage", true);
+
+/**
+ * Takes a serialized SourceActor form and returns a boolean indicating if
+ * this source is related to this location, like if a location is a generated
+ * source, and the source map is loaded subsequently, the new source mapped SourceActor
+ * will be considered related to this location. Same with pretty printing new sources.
+ *
+ * @param {object} location
+ * @param {object} source
+ */
+function isSourceRelated (location, source) {
+  // If a `generatedUrl` exists, the updated/new actor is source mapped;
+  // check to see if the generatedUrl matches this location's url. In
+  // the pretty print case, the `url` will be the same as this location.
+  return source.generatedUrl || source.url === location.url;
+}
+
+/**
+ * Take a TabTarget and a location, containing a `url`, `line` and `column`,
+ * resolve the location to the latest location (so a source mapped location, or
+ * if pretty print status has been updated)
+ *
+ * @param {TabTarget} target
+ * @param {object} location
+ * @return {Promise<object>}
+ */
+function resolveLocation (target, location) {
+  return Task.spawn(function*() {
+    let newLocation = yield target.resolveLocation({
+      url: location.url,
+      line: location.line,
+      column: location.column || Infinity
+    });
+
+    // Source not found, or no mapping found, so don't do anything
+    if (newLocation.status === "SOURCE_NOT_FOUND" || newLocation.status === "MAP_NOT_FOUND") {
+      return null;
+    }
+
+    return newLocation;
+  });
+}
+
+const SourceLocationController = exports.SourceLocationController = Class({
+  extends: EventTarget,
+  initialize: function (target) {
+    this.target = target;
+    this.locations = new Set();
+    this._onSourcesUpdated = this._onSourcesUpdated.bind(this);
+    this.reset = this.reset.bind(this);
+    this.destroy = this.destroy.bind(this);
+    target.on("source-updated", this._onSourcesUpdated);
+    target.on("navigate", this.reset);
+    target.on("will-navigate", this.reset);
+    target.on("close", this.destroy);
+  },
+
+  destroy: function () {
+    this.locations.clear();
+    this.target.off("source-updated", this._onSourcesUpdated);
+    this.target.off("navigate", this.reset);
+    this.target.off("will-navigate", this.reset);
+    this.target.off("close", this.destroy);
+    this.target = this.locations = null;
+  },
+
+  reset: function () {
+    this.locations.clear();
+  },
+
+  /**
+   * Add this `location` to be observed and register a callback whenever
+   * the underlying source is updated.
+   *
+   * @param {object|string} loc
+   *        - {string} url
+   *        - {number} line
+   *        - {number} column
+   */
+  bindLocation: function (location, update, target) {
+    this.locations.add({ location, update, target });
+  },
+
+  bindLocationAsElement: function (loc, element, options={}) {
+    this.bindLocation(loc, onUpdate, element);
+  },
+
+  /**
+   * Called when a new source occurs (a normal source, source maps) or
+   * an updated source (pretty print) occurs.
+   *
+   * @param {string} eventName
+   * @param {object} sourceEvent
+   */
+  _onSourcesUpdated: function (_, sourceEvent) {
+    let { type, source } = sourceEvent;
+    // If we get a new source, and it's not a source map, abort;
+    // we can have no actionable updates as this is just a new normal source.
+    // Also abort if there's no `url`, which means it's unsourcemappable anyway
+    // (like an eval script)
+    if (!source.url || type === "newSource" && !source.isSourceMapped) {
+      return;
+    }
+
+    for (let locationItem of this.locations) {
+      if (isSourceRelated(locationItem.location, source)) {
+        this._updateSource(locationItem);
+      }
+    }
+
+    // Pipe the event through this controller
+    emit(this, "sources-updated", sourceEvent);
+  },
+
+  /**
+   * Called on a locationItem when its underlying source has changed
+   * (or a source map for its location has been found)
+   */
+  _updateSource: Task.async(function *(locationItem) {
+    let newLocation = yield resolveLocation(this.target, locationItem.location);
+    if (newLocation) {
+      let { url: prevUrl, line: prevLine, column: prevColumn } = locationItem.location;
+      let { url, line, column } = newLocation;
+      locationItem.location.url = url;
+      locationItem.location.line = line;
+      locationItem.location.column = column;
+      locationItem.update(
+        { url: prevUrl, line: prevLine, column: prevColumn },
+        { url, line, column },
+        locationItem.target
+      );
+    }
+  }),
+});
+
+SourceLocationController.ElementRenderer = function (element, loc) {
+  element.innerHTML = `${loc.url}:${loc.line}:${line.column}`;
+};
diff --git a/browser/devtools/shared/test/browser.ini b/browser/devtools/shared/test/browser.ini
index 8efd510..b243631 100644
--- a/browser/devtools/shared/test/browser.ini
+++ b/browser/devtools/shared/test/browser.ini
@@ -4,16 +4,17 @@ subsuite = devtools
 support-files =
   browser_layoutHelpers.html
   browser_layoutHelpers-getBoxQuads.html
   browser_templater_basic.html
   browser_toolbar_basic.html
   browser_toolbar_webconsole_errors_count.html
   browser_devices.json
   doc_options-view.xul
+  code_ugly.js
   head.js
   html-mdn-css-basic-testing.html
   html-mdn-css-no-summary.html
   html-mdn-css-no-summary-or-syntax.html
   html-mdn-css-no-syntax.html
   html-mdn-css-syntax-old-style.html
   leakhunt.js
 
@@ -87,16 +88,18 @@ skip-if = e10s # Layouthelpers test should not run in a content page.
 [browser_observableobject.js]
 [browser_options-view-01.js]
 [browser_outputparser.js]
 skip-if = e10s # Test intermittently fails with e10s. Bug 1124162.
 [browser_poller.js]
 [browser_prefs-01.js]
 [browser_prefs-02.js]
 [browser_require_basic.js]
+[browser_source-location-01.js]
+[browser_source-location-02.js]
 [browser_spectrum.js]
 [browser_theme.js]
 [browser_tableWidget_basic.js]
 [browser_tableWidget_keyboard_interaction.js]
 [browser_tableWidget_mouse_interaction.js]
 skip-if = buildapp == 'mulet'
 [browser_telemetry_button_eyedropper.js]
 [browser_telemetry_button_paintflashing.js]
diff --git a/browser/devtools/shared/test/browser_source-location-01.js b/browser/devtools/shared/test/browser_source-location-01.js
new file mode 100644
index 0000000..482289e
--- /dev/null
+++ b/browser/devtools/shared/test/browser_source-location-01.js
@@ -0,0 +1,96 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests the SourceMapController updates generated sources when source maps
+ * are subsequently found. Also checks when no column is provided, and
+ * when tagging an already source mapped location initially.
+ */
+
+const ROOT = "http://example.com/browser/browser/devtools/debugger/test/";
+// Empty page
+const PAGE_URL = `${ROOT}doc_empty-tab-01.html`;
+const JS_URL = `${ROOT}code_binary_search.js`;
+const COFFEE_URL = `${ROOT}code_binary_search.coffee`;
+const { SourceLocationController } = require("devtools/shared/source-location");
+
+add_task(function*() {
+  let { toolbox, target } = yield initTool(PAGE_URL, "jsdebugger");
+  loadFrameScripts();
+
+  let controller = new SourceLocationController(target);
+
+  let aggregator = [];
+
+  function onUpdate (oldLoc, newLoc, target) {
+    if (oldLoc.line === 6) {
+      checkLoc1(oldLoc, newLoc);
+    } else if (oldLoc.line === 8) {
+      checkLoc2(oldLoc, newLoc);
+    } else if (oldLoc.line === 2) {
+      checkLoc3(oldLoc, newLoc);
+    } else {
+      throw new Error(`Unexpected location update: ${JSON.stringify(oldLoc)}`);
+    }
+    target.push(newLoc);
+  }
+
+  let loc1 = { url: JS_URL, line: 6 };
+  let loc2 = { url: JS_URL, line: 8, column: 3 };
+  let loc3 = { url: COFFEE_URL, line: 2, column: 0 };
+
+  controller.bindLocation(loc1, onUpdate, aggregator);
+  controller.bindLocation(loc2, onUpdate, aggregator);
+  controller.bindLocation(loc3, onUpdate, aggregator);
+
+  // Inject JS script
+  yield createScript(JS_URL);
+
+  yield waitUntil(() => aggregator.length === 3);
+
+  ok(aggregator.find(i => i.url === COFFEE_URL && i.line === 4), "found first updated location");
+  ok(aggregator.find(i => i.url === COFFEE_URL && i.line === 6), "found second updated location");
+  ok(aggregator.find(i => i.url === COFFEE_URL && i.line === 2), "found third updated location");
+
+  controller.destroy();
+  yield toolbox.destroy();
+  gBrowser.removeCurrentTab();
+  finish();
+});
+
+function checkLoc1 (oldLoc, newLoc) {
+  is(oldLoc.line, 6, "Correct line for JS:6");
+  is(oldLoc.column, null, "Correct column for JS:6");
+  is(oldLoc.url, JS_URL, "Correct url for JS:6");
+  is(newLoc.line, 4, "Correct line for JS:6 -> COFFEE");
+  is(newLoc.column, 2, "Correct column for JS:6 -> COFFEE -- handles falsy column entries");
+  is(newLoc.url, COFFEE_URL, "Correct url for JS:6 -> COFFEE");
+}
+
+function checkLoc2 (oldLoc, newLoc) {
+  is(oldLoc.line, 8, "Correct line for JS:8:3");
+  is(oldLoc.column, 3, "Correct column for JS:8:3");
+  is(oldLoc.url, JS_URL, "Correct url for JS:8:3");
+  is(newLoc.line, 6, "Correct line for JS:8:3 -> COFFEE");
+  is(newLoc.column, 10, "Correct column for JS:8:3 -> COFFEE");
+  is(newLoc.url, COFFEE_URL, "Correct url for JS:8:3 -> COFFEE");
+}
+
+function checkLoc3 (oldLoc, newLoc) {
+  is(oldLoc.line, 2, "Correct line for COFFEE:2:0");
+  is(oldLoc.column, 0, "Correct column for COFFEE:2:0");
+  is(oldLoc.url, COFFEE_URL, "Correct url for COFFEE:2:0");
+  is(newLoc.line, 2, "Correct line for COFFEE:2:0 -> COFFEE");
+  is(newLoc.column, 0, "Correct column for COFFEE:2:0 -> COFFEE");
+  is(newLoc.url, COFFEE_URL, "Correct url for COFFEE:2:0 -> COFFEE");
+}
+
+function createScript (url) {
+  let command = `
+    let script = document.createElement("script");
+    script.setAttribute("src", "${url}");
+    document.body.appendChild(script);
+  `;
+  return evalInDebuggee(command);
+}
diff --git a/browser/devtools/shared/test/browser_source-location-02.js b/browser/devtools/shared/test/browser_source-location-02.js
new file mode 100644
index 0000000..bca29fc
--- /dev/null
+++ b/browser/devtools/shared/test/browser_source-location-02.js
@@ -0,0 +1,95 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Tests the SourceMapController updates generated sources when pretty printing
+ * and un pretty printing.
+ */
+
+const ROOT = "http://example.com/browser/browser/devtools/debugger/test/";
+const SHARED_ROOT = "http://example.com/browser/browser/devtools/shared/test/";
+// Empty page
+const PAGE_URL = `${ROOT}doc_empty-tab-01.html`;
+const JS_URL = `${SHARED_ROOT}code_ugly.js`;
+const { SourceLocationController } = require("devtools/shared/source-location");
+
+add_task(function*() {
+  let { toolbox, panel, target } = yield initTool(PAGE_URL, "jsdebugger");
+  loadFrameScripts();
+
+  let controller = new SourceLocationController(target);
+
+  let aggregator = [];
+  let checkedPretty = false;
+  let checkedUnpretty = false;
+
+  function onUpdate (oldLoc, newLoc, target) {
+    if (oldLoc.line === 3) {
+      checkPrettified(oldLoc, newLoc);
+      checkedPretty = true;
+    } else if (oldLoc.line === 9) {
+      checkUnprettified(oldLoc, newLoc);
+      checkedUnpretty = true;
+    } else {
+      throw new Error(`Unexpected location update: ${JSON.stringify(oldLoc)}`);
+    }
+    target.push(newLoc);
+  }
+
+  controller.bindLocation({ url: JS_URL, line: 3 }, onUpdate, aggregator);
+
+  // Inject JS script
+  yield createScript(JS_URL);
+
+  yield waitForSourceShown(panel, "code_ugly.js");
+
+  // Pretty print
+  let prettified = waitForSourceShown(panel, "code_ugly.js");
+  panel.panelWin.document.getElementById("pretty-print").click();
+  yield prettified;
+  yield waitUntil(() => aggregator.length === 1);
+
+  // TODO check unprettified change once bug 1177446 fixed
+  /*
+  let unprettified = waitForSourceShown(panel, "code_ugly.js");
+  panel.panelWin.document.getElementById("pretty-print").click();
+
+  yield unprettified;
+  yield waitUntil(() => checkedUnpretty);
+  */
+
+  yield waitUntil(() => checkedPretty);
+
+  controller.destroy();
+  yield toolbox.destroy();
+  gBrowser.removeCurrentTab();
+  finish();
+});
+
+function checkPrettified (oldLoc, newLoc) {
+  is(oldLoc.line, 3, "Correct line for JS:3");
+  is(oldLoc.column, null, "Correct column for JS:3");
+  is(oldLoc.url, JS_URL, "Correct url for JS:3");
+  is(newLoc.line, 9, "Correct line for JS:3 -> PRETTY");
+  is(newLoc.column, 0, "Correct column for JS:3 -> PRETTY");
+  is(newLoc.url, JS_URL, "Correct url for JS:3 -> PRETTY");
+}
+
+function checkUnprettified (oldLoc, newLoc) {
+  is(oldLoc.line, 9, "Correct line for JS:3 -> PRETTY");
+  is(oldLoc.column, 0, "Correct column for JS:3 -> PRETTY");
+  is(oldLoc.url, JS_URL, "Correct url for JS:3 -> PRETTY");
+  is(newLoc.line, 3, "Correct line for JS:3 -> UNPRETTIED");
+  is(newLoc.column, null, "Correct column for JS:3 -> UNPRETTIED");
+  is(newLoc.url, JS_URL, "Correct url for JS:3 -> UNPRETTIED");
+}
+
+function createScript (url) {
+  let command = `
+    let script = document.createElement("script");
+    script.setAttribute("src", "${url}");
+    document.body.appendChild(script);
+  `;
+  return evalInDebuggee(command);
+}
diff --git a/browser/devtools/shared/test/code_ugly.js b/browser/devtools/shared/test/code_ugly.js
new file mode 100644
index 0000000..ccf8d54
--- /dev/null
+++ b/browser/devtools/shared/test/code_ugly.js
@@ -0,0 +1,3 @@
+function foo() { var a=1; var b=2; bar(a, b); }
+function bar(c, d) { return c - d; }
+foo();
diff --git a/browser/devtools/shared/test/head.js b/browser/devtools/shared/test/head.js
index 9fb9dcc..9ecc218 100644
--- a/browser/devtools/shared/test/head.js
+++ b/browser/devtools/shared/test/head.js
@@ -1,28 +1,31 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 let {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 let {TargetFactory, require} = devtools;
 let {console} = Cu.import("resource://gre/modules/devtools/Console.jsm", {});
 let {gDevTools} = Cu.import("resource:///modules/devtools/gDevTools.jsm", {});
+let {DebuggerServer} = Cu.import("resource://gre/modules/devtools/dbg-server.jsm", {});
 const {DOMHelpers} = Cu.import("resource:///modules/devtools/DOMHelpers.jsm", {});
 const {Hosts} = require("devtools/framework/toolbox-hosts");
 const {defer} = require("sdk/core/promise");
 const DevToolsUtils = require("devtools/toolkit/DevToolsUtils");
 
 DevToolsUtils.testing = true;
 SimpleTest.registerCleanupFunction(() => {
   DevToolsUtils.testing = false;
 });
 
 const TEST_URI_ROOT = "http://example.com/browser/browser/devtools/shared/test/";
 const OPTIONS_VIEW_URL = TEST_URI_ROOT + "doc_options-view.xul";
+const FRAME_SCRIPT_UTILS_URL = "chrome://browser/content/devtools/frame-script-utils.js";
+let mm = null;
 
 /**
  * Open a new tab at a URL and call a callback on load
  */
 function addTab(aURL, aCallback)
 {
   waitForExplicitFinish();
 
@@ -278,8 +281,131 @@ function waitUntil(predicate, interval = 10) {
     return Promise.resolve(true);
   }
   return new Promise(resolve => {
     setTimeout(function() {
       waitUntil(predicate).then(() => resolve(true));
     }, interval);
   });
 }
+
+function initTool(aUrl, tool="jsdebugger") {
+  info("Initializing a debugger panel.");
+  waitForExplicitFinish();
+
+  if (!DebuggerServer.initialized) {
+    DebuggerServer.init();
+    DebuggerServer.addBrowserActors();
+  }
+
+  return Task.spawn(function*() {
+    let deferred = defer();
+
+    addTab(aUrl, function (_, tab) {
+      deferred.resolve(tab);
+    });
+    let tab = yield deferred.promise;
+    let target = TargetFactory.forTab(tab);
+
+    yield target.makeRemote();
+
+    let toolbox = yield gDevTools.showToolbox(target, tool);
+    let panel = toolbox.getCurrentPanel();
+    return { target, panel, toolbox };
+  });
+}
+
+function once(aTarget, aEventName, aUseCapture = false, spread = false) {
+  info(`Waiting for event: '${aEventName}' on ${aTarget}`);
+
+  let deferred = defer();
+
+  for (let [add, remove] of [
+    ["on", "off"], // Use event emitter before DOM events for consistency
+    ["addEventListener", "removeEventListener"],
+    ["addListener", "removeListener"]
+  ]) {
+    if ((add in aTarget) && (remove in aTarget)) {
+      aTarget[add](aEventName, function onEvent(...aArgs) {
+        info(`Received event: '${aEventName}' on ${aTarget}`);
+        aTarget[remove](aEventName, onEvent, aUseCapture);
+        deferred.resolve(spread ? aArgs : aArgs[0]);
+      }, aUseCapture);
+      break;
+    }
+  }
+
+  return deferred.promise;
+}
+
+function reload(aTarget, aWaitForTargetEvent = "navigate") {
+  aTarget.activeTab.reload();
+  return once(aTarget, aWaitForTargetEvent);
+}
+
+/**
+ * Takes a string `script` and evaluates it directly in the content
+ * in potentially a different process.
+ */
+let MM_INC = 0;
+function evalInDebuggee (script) {
+  let deferred = defer();
+
+  if (!mm) {
+    throw new Error("`loadFrameScripts()` must be called when using MessageManager.");
+  }
+
+  let id = MM_INC++;
+  mm.sendAsyncMessage("devtools:test:eval", { script: script, id: id });
+  mm.addMessageListener("devtools:test:eval:response", handler);
+
+  function handler ({ data }) {
+    if (id !== data.id) {
+      return;
+    }
+
+    mm.removeMessageListener("devtools:test:eval:response", handler);
+    deferred.resolve(data.value);
+  }
+
+  return deferred.promise;
+}
+
+/**
+ * Call manually in tests that use frame script utils after initializing.
+ */
+function loadFrameScripts () {
+  mm = gBrowser.selectedBrowser.messageManager;
+  mm.loadFrameScript(FRAME_SCRIPT_UTILS_URL, false);
+}
+
+function waitForSourceShown(aPanel, aUrl) {
+  return waitForDebuggerEvents(aPanel, aPanel.panelWin.EVENTS.SOURCE_SHOWN).then(aSource => {
+    let sourceUrl = aSource.url || aSource.introductionUrl;
+    info("Source shown: " + sourceUrl);
+
+    if (!sourceUrl.includes(aUrl)) {
+      return waitForSourceShown(aPanel, aUrl);
+    } else {
+      ok(true, "The correct source has been shown.");
+    }
+  });
+}
+function waitForDebuggerEvents(aPanel, aEventName, aEventRepeat = 1) {
+  info("Waiting for debugger event: '" + aEventName + "' to fire: " + aEventRepeat + " time(s).");
+
+  let deferred = defer();
+  let panelWin = aPanel.panelWin;
+  let count = 0;
+
+  panelWin.on(aEventName, function onEvent(aEventName, ...aArgs) {
+    info("Debugger event '" + aEventName + "' fired: " + (++count) + " time(s).");
+
+    if (count == aEventRepeat) {
+      ok(true, "Enough '" + aEventName + "' panel events have been fired.");
+      panelWin.off(aEventName, onEvent);
+      deferred.resolve.apply(deferred, aArgs);
+    }
+  });
+
+  return deferred.promise;
+}
+
diff --git a/toolkit/devtools/server/actors/script.js b/toolkit/devtools/server/actors/script.js
index a3c6d3f..ae4bf6f 100644
--- a/toolkit/devtools/server/actors/script.js
+++ b/toolkit/devtools/server/actors/script.js
@@ -424,17 +424,17 @@ function ThreadActor(aParent, aGlobal)
   // A map of actorID -> actor for breakpoints created and managed by the
   // server.
   this._hiddenBreakpoints = new Map();
 
   this.global = aGlobal;
 
   this._allEventsListener = this._allEventsListener.bind(this);
   this.onNewGlobal = this.onNewGlobal.bind(this);
-  this.onNewSource = this.onNewSource.bind(this);
+  this.onSourceEvent = this.onSourceEvent.bind(this);
   this.uncaughtExceptionHook = this.uncaughtExceptionHook.bind(this);
   this.onDebuggerStatement = this.onDebuggerStatement.bind(this);
   this.onNewScript = this.onNewScript.bind(this);
   this.objectGrip = this.objectGrip.bind(this);
   this.pauseObjectGrip = this.pauseObjectGrip.bind(this);
   this._onWindowReady = this._onWindowReady.bind(this);
   events.on(this._parent, "window-ready", this._onWindowReady);
   // Set a wrappedJSObject property so |this| can be sent via the observer svc
@@ -570,16 +570,18 @@ ThreadActor.prototype = {
     }
 
     // Blow away our source actor ID store because those IDs are only
     // valid for this connection. This is ok because we never keep
     // things like breakpoints across connections.
     this._sourceActorStore = null;
 
     events.off(this._parent, "window-ready", this._onWindowReady);
+    this.sources.off("newSource", this.onSourceEvent);
+    this.sources.off("updatedSource", this.onSourceEvent);
     this.clearDebuggees();
     this.conn.removeActorPool(this._threadLifetimePool);
     this._threadLifetimePool = null;
 
     if (this._prettyPrintWorker) {
       this._prettyPrintWorker.destroy();
       this._prettyPrintWorker = null;
     }
@@ -609,19 +611,18 @@ ThreadActor.prototype = {
       return { error: "wrongState",
                message: "Current state is " + this.state };
     }
 
     this._state = "attached";
 
     update(this._options, aRequest.options || {});
     this.sources.reconfigure(this._options);
-    this.sources.on('newSource', (name, source) => {
-      this.onNewSource(source);
-    });
+    this.sources.on("newSource", this.onSourceEvent);
+    this.sources.on("updatedSource", this.onSourceEvent);
 
     // Initialize an event loop stack. This can't be done in the constructor,
     // because this.conn is not yet initialized by the actor pool at that time.
     this._nestedEventLoops = new EventLoopStack({
       hooks: this._parent,
       connection: this.conn,
       thread: this
     });
@@ -1861,24 +1862,51 @@ ThreadActor.prototype = {
     // inside _addScript, we can accidentally set a breakpoint in a top level
     // script as a "closest match" because we wouldn't have added the child
     // scripts to the ScriptStore yet.
     this.scripts.addScripts(this.dbg.findScripts({ source: aScript.source }));
 
     this._addSource(aScript.source);
   },
 
-  onNewSource: function (aSource) {
+  onSourceEvent: function (name, aSource) {
     this.conn.send({
       from: this.actorID,
-      type: "newSource",
+      type: name,
       source: aSource.form()
     });
   },
 
+  onResolveLocation: function (aRequest) {
+    let url = aRequest.url;
+    let line = aRequest.line;
+    let column = aRequest.column || 0;
+    let actor;
+
+    if (actor = this.sources.getSourceActorByURL(url)) {
+      // Get the generated source actor if this is source mapped
+      let generatedActor = actor.generatedSource ?
+                           this.sources.createNonSourceMappedActor(actor.generatedSource) :
+                           actor;
+      return this.sources.getOriginalLocation(new GeneratedLocation(
+        generatedActor,
+        aRequest.line,
+        aRequest.column || 0
+      )).then(loc => {
+        if (loc.originalLine == null) {
+          return { from: this.actorID, type: "resolveLocation", status: "MAP_NOT_FOUND" };
+        }
+        loc = loc.toJSON();
+        return { from: this.actorID, url: loc.source.url, column: loc.column, line: loc.line };
+      });
+    } else {
+      return { from: this.actorID, type: "resolveLocation", status: "SOURCE_NOT_FOUND" };
+    }
+  },
+
   /**
    * Restore any pre-existing breakpoints to the sources that we have access to.
    */
   _restoreBreakpoints: function () {
     if (this.breakpointActorMap.size === 0) {
       return;
     }
 
@@ -1897,17 +1925,17 @@ ThreadActor.prototype = {
   _addSource: function (aSource) {
     if (!this.sources.allowSource(aSource)) {
       return false;
     }
 
     let sourceActor = this.sources.createNonSourceMappedActor(aSource);
 
     // Go ahead and establish the source actors for this script, which
-    // fetches sourcemaps if available and sends onNewSource
+    // fetches sourcemaps if available and sends "newSource"
     // notifications.
     //
     // We need to use synchronize here because if the page is being reloaded,
     // this call will replace the previous set of source actors for this source
     // with a new one. If the source actors have not been replaced by the time
     // we try to reset the breakpoints below, their location objects will still
     // point to the old set of source actors, which point to different scripts.
     this.synchronize(this.sources.createSourceActors(aSource));
@@ -1980,17 +2008,18 @@ ThreadActor.prototype.requestTypes = {
   "resume": ThreadActor.prototype.onResume,
   "clientEvaluate": ThreadActor.prototype.onClientEvaluate,
   "frames": ThreadActor.prototype.onFrames,
   "interrupt": ThreadActor.prototype.onInterrupt,
   "eventListeners": ThreadActor.prototype.onEventListeners,
   "releaseMany": ThreadActor.prototype.onReleaseMany,
   "sources": ThreadActor.prototype.onSources,
   "threadGrips": ThreadActor.prototype.onThreadGrips,
-  "prototypesAndProperties": ThreadActor.prototype.onPrototypesAndProperties
+  "prototypesAndProperties": ThreadActor.prototype.onPrototypesAndProperties,
+  "resolveLocation": ThreadActor.prototype.onResolveLocation,
 };
 
 exports.ThreadActor = ThreadActor;
 
 /**
  * Creates a PauseActor.
  *
  * PauseActors exist for the lifetime of a given debuggee pause.  Used to
@@ -2163,20 +2192,20 @@ SourceActor.prototype = {
   actorPrefix: "source",
 
   _oldSourceMap: null,
   _init: null,
   _addonID: null,
   _addonPath: null,
 
   get isSourceMapped() {
-    return !this.isInlineSource && (
+    return !!(!this.isInlineSource && (
       this._originalURL || this._generatedSource ||
         this.threadActor.sources.isPrettyPrinted(this.url)
-    );
+    ));
   },
 
   get isInlineSource() {
     return this._isInlineSource;
   },
 
   get threadActor() { return this._threadActor; },
   get sources() { return this._threadActor.sources; },
@@ -2206,20 +2235,22 @@ SourceActor.prototype = {
     let introductionUrl = null;
     if (source && source.introductionScript) {
       introductionUrl = source.introductionScript.source.url;
     }
 
     return {
       actor: this.actorID,
       url: this.url ? this.url.split(" -> ").pop() : null,
+      generatedUrl: this.generatedSource ? this.generatedSource.url : null,
       addonID: this._addonID,
       addonPath: this._addonPath,
       isBlackBoxed: this.threadActor.sources.isBlackBoxed(this.url),
       isPrettyPrinted: this.threadActor.sources.isPrettyPrinted(this.url),
+      isSourceMapped: this.isSourceMapped,
       introductionUrl: introductionUrl ? introductionUrl.split(" -> ").pop() : null,
       introductionType: source ? source.introductionType : null
     };
   },
 
   disconnect: function () {
     if (this.registeredPool && this.registeredPool.sourceActors) {
       delete this.registeredPool.sourceActors[this.actorID];
diff --git a/toolkit/devtools/server/actors/utils/TabSources.js b/toolkit/devtools/server/actors/utils/TabSources.js
index d03022a..8e4969c 100644
--- a/toolkit/devtools/server/actors/utils/TabSources.js
+++ b/toolkit/devtools/server/actors/utils/TabSources.js
@@ -100,17 +100,16 @@ TabSources.prototype = {
    * @param optional String contentType
    *        The content type of the source, if immediately available.
    * @returns a SourceActor representing the source or null.
    */
   source: function  ({ source, originalUrl, generatedSource,
               isInlineSource, contentType }) {
     dbg_assert(source || (originalUrl && generatedSource),
                "TabSources.prototype.source needs an originalUrl or a source");
-
     if (source) {
       // If a source is passed, we are creating an actor for a real
       // source, which may or may not be sourcemapped.
 
       if (!this.allowSource(source)) {
         return null;
       }
 
@@ -229,17 +228,17 @@ TabSources.prototype = {
         }
       }
 
       if (url in this._sourceMappedSourceActors) {
         return this._sourceMappedSourceActors[url];
       }
     }
 
-    throw new Error('getSourceByURL: could not find source for ' + url);
+    return null;
   },
 
   /**
    * Returns true if the URL likely points to a minified resource, false
    * otherwise.
    *
    * @param String aURL
    *        The URL to test.
@@ -522,16 +521,17 @@ TabSources.prototype = {
       // just make a fake URL and stick the sourcemap there.
       url = "internal://sourcemap" + (this._anonSourceMapId++) + '/';
     }
     aSource.sourceMapURL = url;
 
     // Forcefully set the sourcemap cache. This will be used even if
     // sourcemaps are disabled.
     this._sourceMapCache[url] = resolve(aMap);
+    this.emit("updatedSource", this.getSourceActor(aSource));
   },
 
   /**
    * Return the non-source-mapped location of the given Debugger.Frame. If the
    * frame does not have a script, the location's properties are all null.
    *
    * @param Debugger.Frame aFrame
    *        The frame whose location we are getting.
-- 
2.2.1

