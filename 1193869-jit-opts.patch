From: Jordan Santell <jsantell@mozilla.com>
Date: Fri, 28 Aug 2015 12:59:10 -0700
Subject: Bug 1193869 - Move OptimizationsView back into the call tree. r=fitzgen

diff --git a/browser/devtools/jar.mn b/browser/devtools/jar.mn
index b9f12c7..988c94d 100644
--- a/browser/devtools/jar.mn
+++ b/browser/devtools/jar.mn
@@ -104,19 +104,17 @@ browser.jar:
     content/browser/devtools/performance/views/toolbar.js              (performance/views/toolbar.js)
     content/browser/devtools/performance/views/details.js              (performance/views/details.js)
     content/browser/devtools/performance/views/details-subview.js      (performance/views/details-abstract-subview.js)
     content/browser/devtools/performance/views/details-waterfall.js    (performance/views/details-waterfall.js)
     content/browser/devtools/performance/views/details-js-call-tree.js      (performance/views/details-js-call-tree.js)
     content/browser/devtools/performance/views/details-js-flamegraph.js     (performance/views/details-js-flamegraph.js)
     content/browser/devtools/performance/views/details-memory-call-tree.js  (performance/views/details-memory-call-tree.js)
     content/browser/devtools/performance/views/details-memory-flamegraph.js (performance/views/details-memory-flamegraph.js)
-    content/browser/devtools/performance/views/details-optimizations.js     (performance/views/details-optimizations.js)
     content/browser/devtools/performance/views/optimizations-list.js        (performance/views/optimizations-list.js)
-    content/browser/devtools/performance/views/frames-list.js               (performance/views/frames-list.js)
     content/browser/devtools/performance/views/recordings.js           (performance/views/recordings.js)
     content/browser/devtools/promisedebugger/promise-debugger.js       (promisedebugger/promise-debugger.js)
     content/browser/devtools/promisedebugger/promise-debugger.xhtml    (promisedebugger/promise-debugger.xhtml)
     content/browser/devtools/commandline.css                           (commandline/commandline.css)
     content/browser/devtools/commandlineoutput.xhtml                   (commandline/commandlineoutput.xhtml)
     content/browser/devtools/commandlinetooltip.xhtml                  (commandline/commandlinetooltip.xhtml)
 *   content/browser/devtools/framework/toolbox-window.xul              (framework/toolbox-window.xul)
     content/browser/devtools/framework/toolbox-options.xul             (framework/toolbox-options.xul)
diff --git a/browser/devtools/performance/modules/widgets/tree-view.js b/browser/devtools/performance/modules/widgets/tree-view.js
index fe9d804..c4294f3 100644
--- a/browser/devtools/performance/modules/widgets/tree-view.js
+++ b/browser/devtools/performance/modules/widgets/tree-view.js
@@ -11,17 +11,17 @@
 const { Cc, Ci, Cu, Cr } = require("chrome");
 const { L10N } = require("devtools/performance/global");
 const { Heritage } = require("resource:///modules/devtools/ViewHelpers.jsm");
 const { AbstractTreeItem } = require("resource:///modules/devtools/AbstractTreeItem.jsm");
 
 const MILLISECOND_UNITS = L10N.getStr("table.ms");
 const PERCENTAGE_UNITS = L10N.getStr("table.percentage");
 const URL_LABEL_TOOLTIP = L10N.getStr("table.url.tooltiptext");
-const VIEW_OPTIMIZATIONS_TOOLTIP = L10N.getStr("table.view-optimizations.tooltiptext");
+const VIEW_OPTIMIZATIONS_TOOLTIP = L10N.getStr("table.view-optimizations.tooltiptext2");
 
 const CALL_TREE_INDENTATION = 16; // px
 
 const DEFAULT_SORTING_PREDICATE = (frameA, frameB) => {
   let dataA = frameA.getDisplayedData();
   let dataB = frameB.getDisplayedData();
   if (this.inverted) {
     // Invert trees, sort by selfPercentage, and then totalPercentage
@@ -238,22 +238,20 @@ CallView.prototype = Heritage.extend(AbstractTreeItem.prototype, {
   },
   _createFunctionCell: function(doc, arrowNode, frameName, frameInfo, frameLevel) {
     let cell = doc.createElement("hbox");
     cell.className = "call-tree-cell";
     cell.style.MozMarginStart = (frameLevel * CALL_TREE_INDENTATION) + "px";
     cell.setAttribute("type", "function");
     cell.appendChild(arrowNode);
 
-    // Render optimization link to JIT view if the frame
-    // has optimizations
+    // Render optimization hint if this frame has opt data.
     if (this.root.showOptimizationHint && frameInfo.hasOptimizations && !frameInfo.isMetaCategory) {
       let icon = doc.createElement("description");
       icon.setAttribute("tooltiptext", VIEW_OPTIMIZATIONS_TOOLTIP);
-      icon.setAttribute("type", "linkable");
       icon.className = "opt-icon";
       cell.appendChild(icon);
     }
 
     // Don't render a name label node if there's no function name. A different
     // location label node will be rendered instead.
     if (frameName) {
       let nameNode = doc.createElement("description");
diff --git a/browser/devtools/performance/performance-controller.js b/browser/devtools/performance/performance-controller.js
index da60fa2..32b544c 100644
--- a/browser/devtools/performance/performance-controller.js
+++ b/browser/devtools/performance/performance-controller.js
@@ -111,17 +111,17 @@ const EVENTS = {
   RECORDING_EXPORTED: "Performance:RecordingExported",
 
   // When the front has updated information on the profiler's circular buffer
   PROFILER_STATUS_UPDATED: "Performance:BufferUpdated",
 
   // When the PerformanceView updates the display of the buffer status
   UI_BUFFER_STATUS_UPDATED: "Performance:UI:BufferUpdated",
 
-  // Emitted by the JITOptimizationsView when it renders new optimization
+  // Emitted by the OptimizationsListView when it renders new optimization
   // data and clears the optimization data
   OPTIMIZATIONS_RESET: "Performance:UI:OptimizationsReset",
   OPTIMIZATIONS_RENDERED: "Performance:UI:OptimizationsRendered",
 
   // Emitted by the OverviewView when more data has been rendered
   OVERVIEW_RENDERED: "Performance:UI:OverviewRendered",
   FRAMERATE_GRAPH_RENDERED: "Performance:UI:OverviewFramerateRendered",
   MARKERS_GRAPH_RENDERED: "Performance:UI:OverviewMarkersRendered",
diff --git a/browser/devtools/performance/performance.xul b/browser/devtools/performance/performance.xul
index 1852a78..f1cc22b 100644
--- a/browser/devtools/performance/performance.xul
+++ b/browser/devtools/performance/performance.xul
@@ -19,21 +19,19 @@
   <script type="application/javascript" src="performance/views/overview.js"/>
   <script type="application/javascript" src="performance/views/toolbar.js"/>
   <script type="application/javascript" src="performance/views/details-subview.js"/>
   <script type="application/javascript" src="performance/views/details-waterfall.js"/>
   <script type="application/javascript" src="performance/views/details-js-call-tree.js"/>
   <script type="application/javascript" src="performance/views/details-js-flamegraph.js"/>
   <script type="application/javascript" src="performance/views/details-memory-call-tree.js"/>
   <script type="application/javascript" src="performance/views/details-memory-flamegraph.js"/>
-  <script type="application/javascript" src="performance/views/details-optimizations.js"/>
   <script type="application/javascript" src="performance/views/details.js"/>
   <script type="application/javascript" src="performance/views/recordings.js"/>
   <script type="application/javascript" src="performance/views/optimizations-list.js"/>
-  <script type="application/javascript" src="performance/views/frames-list.js"/>
 
   <popupset id="performance-options-popupset">
     <menupopup id="performance-filter-menupopup"/>
     <menupopup id="performance-options-menupopup" position="before_end">
       <menuitem id="option-show-platform-data"
                 type="checkbox"
                 data-pref="show-platform-data"
                 label="&performanceUI.showPlatformData;"
@@ -139,21 +137,16 @@
                          hidden="true"
                          data-view="memory-calltree"
                          tooltiptext="&performanceUI.toolbar.allocations.tooltiptext;" />
           <toolbarbutton id="select-memory-flamegraph-view"
                          class="devtools-toolbarbutton devtools-button"
                          label="&performanceUI.toolbar.memory-flamegraph;"
                          hidden="true"
                          data-view="memory-flamegraph" />
-          <toolbarbutton id="select-optimizations-view"
-                         class="devtools-toolbarbutton devtools-button"
-                         label="Optimizations"
-                         hidden="true"
-                         data-view="optimizations" />
         </hbox>
         <spacer flex="1"></spacer>
         <hbox id="performance-toolbar-controls-options"
               class="devtools-toolbarbutton-group">
           <toolbarbutton id="performance-options-button"
                          class="devtools-toolbarbutton devtools-option-toolbarbutton"
                          popup="performance-options-menupopup"
                          tooltiptext="&performanceUI.options.gear.tooltiptext;"/>
@@ -293,16 +286,30 @@
                     <label class="plain call-tree-header"
                            type="function"
                            crop="end"
                            value="&performanceUI.table.function;"
                            tooltiptext="&performanceUI.table.function.tooltip;"/>
                   </hbox>
                   <vbox class="call-tree-cells-container" flex="1"/>
                 </vbox>
+                <splitter class="devtools-side-splitter"/>
+                <!-- Optimizations Panel -->
+                <vbox id="jit-optimizations-view"
+                      class="hidden">
+                  <toolbar id="jit-optimizations-toolbar" class="devtools-toolbar">
+                    <hbox id="jit-optimizations-header">
+                      <span class="jit-optimizations-title">&performanceUI.JITOptimizationsTitle;</span>
+                      <span class="header-function-name" />
+                      <span class="header-file opt-url debugger-link" />
+                      <span class="header-line opt-line" />
+                    </hbox>
+                  </toolbar>
+                  <vbox id="jit-optimizations-raw-view"></vbox>
+                </vbox>
               </hbox>
 
               <!-- JS FlameChart -->
               <hbox id="js-flamegraph-view" flex="1">
               </hbox>
 
               <!-- Memory Tree -->
               <vbox id="memory-calltree-view" flex="1">
@@ -323,56 +330,15 @@
                          value="&performanceUI.table.function;"/>
                 </hbox>
                 <vbox class="call-tree-cells-container" flex="1"/>
               </vbox>
 
               <!-- Memory FlameChart -->
               <hbox id="memory-flamegraph-view" flex="1">
               </hbox>
-
-              <!-- JIT View -->
-              <hbox id="optimizations-view" flex="1">
-                <hbox id="graph-placeholder" flex="1">
-                </hbox>
-                <splitter id="optimizations-splitter" class="devtools-side-splitter"/>
-                <tabbox id="optimizations-tabs"
-                        class="devtools-sidebar-tabs"
-                        handleCtrlTab="false">
-                  <tabs>
-                    <tab id="optimizations-optimizations-tab"
-                         label="Optimizations" />
-                    <tab id="optimizations-frames-tab"
-                         label="Frames" />
-                  </tabs>
-                  <tabpanels flex="1">
-
-                    <!-- Optimizations Panel -->
-                    <tabpanel id="optimizations-tabpanel"
-                              class="tabpanel-content">
-                      <vbox id="jit-optimizations-view">
-                        <toolbar id="jit-optimizations-toolbar" class="devtools-toolbar">
-                          <hbox id="jit-optimizations-header">
-                            <span class="jit-optimizations-title">&performanceUI.JITOptimizationsTitle;</span>
-                            <span class="header-function-name" />
-                            <span class="header-file opt-url debugger-link" />
-                            <span class="header-line opt-line" />
-                          </hbox>
-                        </toolbar>
-                        <vbox id="jit-optimizations-raw-view"></vbox>
-                      </vbox>
-                    </tabpanel>
-
-                    <!-- Frames Panel -->
-                    <tabpanel id="frames-tabpanel"
-                              class="tabpanel-content">
-                    </tabpanel>
-                  </tabpanels>
-                </tabbox>
-              </hbox>
-              <!-- /JIT View -->
             </deck>
           </deck>
         </vbox>
       </deck>
     </vbox>
   </hbox>
 </window>
diff --git a/browser/devtools/performance/test/browser.ini b/browser/devtools/performance/test/browser.ini
index 8e9e47d..b07fe62 100644
--- a/browser/devtools/performance/test/browser.ini
+++ b/browser/devtools/performance/test/browser.ini
@@ -37,18 +37,18 @@ skip-if = true # Bug 1161817
 [browser_perf-details-02.js]
 [browser_perf-details-03.js]
 [browser_perf-details-04.js]
 [browser_perf-details-05.js]
 [browser_perf-details-06.js]
 [browser_perf-details-07.js]
 [browser_perf-events-calltree.js]
 [browser_perf-highlighted.js]
-#[browser_perf-jit-view-01.js] bug 1176056
-#[browser_perf-jit-view-02.js] bug 1176056
+[browser_perf-jit-view-01.js]
+[browser_perf-jit-view-02.js]
 [browser_perf-legacy-front-01.js]
 [browser_perf-legacy-front-02.js]
 [browser_perf-legacy-front-03.js]
 [browser_perf-legacy-front-04.js]
 [browser_perf-legacy-front-05.js]
 [browser_perf-legacy-front-06.js]
 [browser_perf-loading-01.js]
 [browser_perf-loading-02.js]
@@ -64,17 +64,16 @@ skip-if = os == 'linux' # Bug 1172120
 [browser_perf-options-flatten-tree-recursion-01.js]
 [browser_perf-options-flatten-tree-recursion-02.js]
 [browser_perf-options-show-platform-data-01.js]
 [browser_perf-options-show-platform-data-02.js]
 [browser_perf-options-show-idle-blocks-01.js]
 [browser_perf-options-show-idle-blocks-02.js]
 [browser_perf-options-enable-memory-01.js]
 [browser_perf-options-enable-memory-02.js]
-[browser_perf-options-enable-optimizations.js]
 [browser_perf-options-enable-framerate.js]
 [browser_perf-options-allocations.js]
 [browser_perf-options-profiler.js]
 [browser_perf-overview-render-01.js]
 [browser_perf-overview-render-02.js]
 [browser_perf-overview-render-03.js]
 [browser_perf-overview-render-04.js]
 skip-if = os == 'linux' # bug 1186322
diff --git a/browser/devtools/performance/test/browser_perf-jit-view-01.js b/browser/devtools/performance/test/browser_perf-jit-view-01.js
index 9a0abf5..90bbab4 100644
--- a/browser/devtools/performance/test/browser_perf-jit-view-01.js
+++ b/browser/devtools/performance/test/browser_perf-jit-view-01.js
@@ -6,17 +6,17 @@
  * if on, and displays selected frames on focus.
  */
 
 Services.prefs.setBoolPref(INVERT_PREF, false);
 
 function* spawnTest() {
   let { panel } = yield initPerformance(SIMPLE_URL);
   let { EVENTS, $, $$, window, PerformanceController } = panel.panelWin;
-  let { OverviewView, DetailsView, JITOptimizationsView, JsCallTreeView, RecordingsView } = panel.panelWin;
+  let { OverviewView, DetailsView, OptimizationsListView, JsCallTreeView, RecordingsView } = panel.panelWin;
 
   let profilerData = { threads: [gThread] }
 
   is(Services.prefs.getBoolPref(JIT_PREF), false, "record JIT Optimizations pref off by default");
   Services.prefs.setBoolPref(JIT_PREF, true);
   is(Services.prefs.getBoolPref(JIT_PREF), true, "toggle on record JIT Optimizations");
 
   // Make two recordings, so we have one to switch to later, as the
@@ -37,17 +37,17 @@ function* spawnTest() {
   // gRawSite2 and gRawSite3 are both optimizations on B, so they'll have
   // indices in descending order of # of samples.
   yield checkFrame(2, [{ i: 0, opt: gRawSite2 }, { i: 1, opt: gRawSite3 }]);
 
   // Leaf node (C) with no optimizations should not display any opts.
   yield checkFrame(3);
 
   let select = once(PerformanceController, EVENTS.RECORDING_SELECTED);
-  let reset = once(JITOptimizationsView, EVENTS.OPTIMIZATIONS_RESET);
+  let reset = once(OptimizationsListView, EVENTS.OPTIMIZATIONS_RESET);
   RecordingsView.selectedIndex = 0;
   yield Promise.all([select, reset]);
   ok(true, "JITOptimizations view correctly reset when switching recordings.");
 
   yield teardown(panel);
   finish();
 
   function *injectAndRenderProfilerData() {
@@ -62,35 +62,36 @@ function* spawnTest() {
     yield rendered;
 
     is($("#jit-optimizations-view").hidden, false, "JIT Optimizations should be visible when pref is on");
     ok($("#jit-optimizations-view").classList.contains("empty"),
       "JIT Optimizations view has empty message when no frames selected.");
   }
 
   function *checkFrame (frameIndex, expectedOpts=[]) {
+    info(`Checking frame ${frameIndex}`);
     // Click the frame
-    let rendered = once(JITOptimizationsView, EVENTS.OPTIMIZATIONS_RENDERED);
+    let rendered = once(OptimizationsListView, EVENTS.OPTIMIZATIONS_RENDERED);
     mousedown(window, $$(".call-tree-item")[frameIndex]);
     yield rendered;
-    ok(true, "JITOptimizationsView rendered when enabling with the current frame node selected");
+    ok(true, "OptimizationsListView rendered when enabling with the current frame node selected");
 
     let isEmpty = $("#jit-optimizations-view").classList.contains("empty");
     if (expectedOpts.length === 0) {
       ok(isEmpty, "JIT Optimizations view has an empty message when selecting a frame without opt data.");
       return;
     } else {
       ok(!isEmpty, "JIT Optimizations view has no empty message.");
     }
 
     // Get the frame info for the first opt site, since all opt sites
     // share the same frame info
     let frameInfo = expectedOpts[0].opt._testFrameInfo;
 
-    let { $headerName, $headerLine, $headerFile } = JITOptimizationsView;
+    let { $headerName, $headerLine, $headerFile } = OptimizationsListView;
     ok(!$headerName.hidden, "header function name should be shown");
     ok(!$headerLine.hidden, "header line should be shown");
     ok(!$headerFile.hidden, "header file should be shown");
     is($headerName.textContent, frameInfo.name, "correct header function name.");
     is($headerLine.textContent, frameInfo.line, "correct header line");
     is($headerFile.textContent, frameInfo.file, "correct header file");
 
     // Need the value of the optimizations in its array, as its
diff --git a/browser/devtools/performance/test/browser_perf-jit-view-02.js b/browser/devtools/performance/test/browser_perf-jit-view-02.js
index 926bcb9..e8a6cf2 100644
--- a/browser/devtools/performance/test/browser_perf-jit-view-02.js
+++ b/browser/devtools/performance/test/browser_perf-jit-view-02.js
@@ -1,23 +1,24 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 /**
- * Tests that the JIT Optimizations view does not display information
+ * Tests that the OptimizationsListView does not display information
  * for meta nodes when viewing "content only".
  */
 
 Services.prefs.setBoolPref(INVERT_PREF, false);
 Services.prefs.setBoolPref(PLATFORM_DATA_PREF, false);
+let { CATEGORY_MASK } = require("devtools/performance/global");
 
 function* spawnTest() {
   let { panel } = yield initPerformance(SIMPLE_URL);
   let { EVENTS, $, $$, window, PerformanceController } = panel.panelWin;
-  let { OverviewView, DetailsView, JITOptimizationsView, JsCallTreeView, RecordingsView } = panel.panelWin;
+  let { OverviewView, DetailsView, OptimizationsListView, JsCallTreeView, RecordingsView } = panel.panelWin;
 
   let profilerData = { threads: [gThread] };
 
   Services.prefs.setBoolPref(JIT_PREF, true);
 
   // Make two recordings, so we have one to switch to later, as the
   // second one will have fake sample data
   yield startRecording(panel);
@@ -26,24 +27,24 @@ function* spawnTest() {
   yield startRecording(panel);
   yield stopRecording(panel);
 
   yield DetailsView.selectView("js-calltree");
 
   yield injectAndRenderProfilerData();
 
   // Click the frame
-  let rendered = once(JITOptimizationsView, EVENTS.OPTIMIZATIONS_RENDERED);
+  let rendered = once(OptimizationsListView, EVENTS.OPTIMIZATIONS_RENDERED);
   mousedown(window, $$(".call-tree-item")[2]);
   yield rendered;
 
   ok($("#jit-optimizations-view").classList.contains("empty"),
     "platform meta frame shows as empty");
 
-  let { $headerName, $headerLine, $headerFile } = JITOptimizationsView;
+  let { $headerName, $headerLine, $headerFile } = OptimizationsListView;
   ok(!$headerName.hidden, "header function name should be shown");
   ok($headerLine.hidden, "header line should be hidden");
   ok($headerFile.hidden, "header file should be hidden");
   is($headerName.textContent, "JIT", "correct header function name.");
   is($headerLine.textContent, "", "correct header line (empty string).");
   is($headerFile.textContent, "", "correct header file (empty string).");
 
   yield teardown(panel);
diff --git a/browser/devtools/performance/test/browser_perf-options-enable-optimizations.js b/browser/devtools/performance/test/browser_perf-options-enable-optimizations.js
deleted file mode 100644
index 6d42a16..0000000
--- a/browser/devtools/performance/test/browser_perf-options-enable-optimizations.js
+++ /dev/null
@@ -1,45 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-/**
- * Tests that `enable-jit-optimizations` sets the recording to subsequently
- * enable the Optimizations View.
- */
-function* spawnTest() {
-  let { panel } = yield initPerformance(SIMPLE_URL);
-  let { EVENTS, PerformanceController, $, DetailsView, WaterfallView, OptimizationsView } = panel.panelWin;
-  Services.prefs.setBoolPref(JIT_PREF, true);
-
-
-  yield startRecording(panel);
-  let rendered = once(OptimizationsView, EVENTS.OPTIMIZATIONS_RENDERED);
-  yield stopRecording(panel);
-
-  yield DetailsView.selectView("optimizations");
-  ok(DetailsView.isViewSelected(OptimizationsView), "The Optimizations View is now selected.");
-  yield rendered;
-
-  let recording = PerformanceController.getCurrentRecording();
-  is(recording.getConfiguration().withJITOptimizations, true, "recording model has withJITOptimizations as true");
-
-  // Set back to false, should not affect display of first recording
-  info("Disabling enable-jit-optimizations");
-  Services.prefs.setBoolPref(JIT_PREF, false);
-  is($("#select-optimizations-view").hidden, false,
-    "JIT Optimizations selector still available since the recording has it enabled.");
-
-  yield startRecording(panel);
-  rendered = once(WaterfallView, EVENTS.WATERFALL_RENDERED);
-  yield stopRecording(panel);
-
-  ok(DetailsView.isViewSelected(WaterfallView), "The waterfall view is now selected.");
-  yield rendered;
-
-  recording = PerformanceController.getCurrentRecording();
-  is(recording.getConfiguration().withJITOptimizations, false, "recording model has withJITOptimizations as false");
-  is($("#select-optimizations-view").hidden, true,
-    "JIT Optimizations selector is hidden if recording did not enable optimizations.");
-
-  yield teardown(panel);
-  finish();
-}
diff --git a/browser/devtools/performance/views/details-js-call-tree.js b/browser/devtools/performance/views/details-js-call-tree.js
index eac9110..10002eb 100644
--- a/browser/devtools/performance/views/details-js-call-tree.js
+++ b/browser/devtools/performance/views/details-js-call-tree.js
@@ -18,48 +18,79 @@ let JsCallTreeView = Heritage.extend(DetailsSubview, {
 
   /**
    * Sets up the view with event binding.
    */
   initialize: function () {
     DetailsSubview.initialize.call(this);
 
     this._onLink = this._onLink.bind(this);
+    this._onFocus = this._onFocus.bind(this);
 
     this.container = $("#js-calltree-view .call-tree-cells-container");
+
+    OptimizationsListView.initialize();
   },
 
   /**
    * Unbinds events.
    */
   destroy: function () {
+    OptimizationsListView.destroy();
     this.container = null;
     DetailsSubview.destroy.call(this);
   },
 
   /**
    * Method for handling all the set up for rendering a new call tree.
    *
    * @param object interval [optional]
    *        The { startTime, endTime }, in milliseconds.
    */
   render: function (interval={}) {
     let recording = PerformanceController.getCurrentRecording();
     let profile = recording.getProfile();
+    let optimizations = recording.getConfiguration().withJITOptimizations;
+
     let options = {
       contentOnly: !PerformanceController.getOption("show-platform-data"),
       invertTree: PerformanceController.getOption("invert-call-tree"),
       flattenRecursion: PerformanceController.getOption("flatten-tree-recursion"),
-      showOptimizationHint: recording.getConfiguration().withJITOptimizations,
+      showOptimizationHint: optimizations
     };
     let threadNode = this._prepareCallTree(profile, interval, options);
     this._populateCallTree(threadNode, options);
+
+    if (optimizations) {
+      this.showOptimizations();
+    } else {
+      this.hideOptimizations();
+    }
+    OptimizationsListView.reset();
+
     this.emit(EVENTS.JS_CALL_TREE_RENDERED);
   },
 
+  showOptimizations: function () {
+    $("#jit-optimizations-view").classList.remove("hidden");
+  },
+
+  hideOptimizations: function () {
+    $("#jit-optimizations-view").classList.add("hidden");
+  },
+
+  _onFocus: function (_, treeItem) {
+    if (PerformanceController.getCurrentRecording().getConfiguration().withJITOptimizations) {
+      OptimizationsListView.setCurrentFrame(treeItem.frame);
+      OptimizationsListView.render();
+    }
+
+    this.emit("focus", treeItem);
+  },
+
   /**
    * Fired on the "link" event for the call tree in this container.
    */
   _onLink: function (_, treeItem) {
     let { url, line } = treeItem.frame.getInfo();
     gToolbox.viewSourceInDebugger(url, line).then(success => {
       if (success) {
         this.emit(EVENTS.SOURCE_SHOWN_IN_JS_DEBUGGER);
@@ -106,22 +137,17 @@ let JsCallTreeView = Heritage.extend(DetailsSubview, {
       // Call trees should only auto-expand when not inverted. Passing undefined
       // will default to the CALL_TREE_AUTO_EXPAND depth.
       autoExpandDepth: inverted ? 0 : undefined,
       showOptimizationHint: options.showOptimizationHint
     });
 
     // Bind events.
     root.on("link", this._onLink);
-
-    // Pipe "focus" events to the view, mostly for tests
-    root.on("focus", () => this.emit("focus"));
-    // TODO tests for optimization event and rendering
-    // optimization bubbles in call tree
-    root.on("optimization", (_, node) => this.emit("optimization", node));
+    root.on("focus", this._onFocus);
 
     // Clear out other call trees.
     this.container.innerHTML = "";
     root.attachTo(this.container);
 
     // When platform data isn't shown, hide the cateogry labels, since they're
     // only available for C++ frames. Pass *false* to make them invisible.
     root.toggleCategories(!options.contentOnly);
diff --git a/browser/devtools/performance/views/details-optimizations.js b/browser/devtools/performance/views/details-optimizations.js
deleted file mode 100644
index d0a667c..0000000
--- a/browser/devtools/performance/views/details-optimizations.js
+++ /dev/null
@@ -1,174 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this file,
- * You can obtain one at http://mozilla.org/MPL/2.0/. */
-"use strict";
-
-let OptimizationsView = Heritage.extend(DetailsSubview, {
-
-  rerenderPrefs: [
-    "show-platform-data",
-    "flatten-tree-recursion",
-  ],
-
-  rangeChangeDebounceTime: 75, // ms
-
-  /**
-   * Sets up the view with event binding.
-   */
-  initialize: function () {
-    DetailsSubview.initialize.call(this);
-    this.reset = this.reset.bind(this);
-    this.tabs = $("#optimizations-tabs");
-    this._onFramesListSelect = this._onFramesListSelect.bind(this);
-
-    OptimizationsListView.initialize();
-    FramesListView.initialize({ container: $("#frames-tabpanel") });
-    FramesListView.on("select", this._onFramesListSelect);
-  },
-
-  /**
-   * Unbinds events.
-   */
-  destroy: function () {
-    DetailsSubview.destroy.call(this);
-    this.tabs = this._threadNode = this._frameNode = null;
-
-    FramesListView.off("select", this._onFramesListSelect);
-    FramesListView.destroy();
-    OptimizationsListView.destroy();
-  },
-
-  /**
-   * Selects a tab by name.
-   *
-   * @param {string} name
-   *                 Can be "frames" or "optimizations"
-   */
-  selectTabByName: function (name="frames") {
-    switch(name) {
-    case "optimizations":
-      this.tabs.selectedIndex = 0;
-      break;
-    case "frames":
-      this.tabs.selectedIndex = 1;
-      break;
-    }
-  },
-
-  /**
-   * Method for handling all the set up for rendering a new call tree.
-   *
-   * @param object interval [optional]
-   *        The { startTime, endTime }, in milliseconds.
-   */
-  render: function (interval={}) {
-    let options = {
-      contentOnly: !PerformanceController.getOption("show-platform-data"),
-      flattenRecursion: PerformanceController.getOption("flatten-tree-recursion"),
-      // Always invert the tree for the optimizations view so we can quickly
-      // get leaves
-      invertTree: true,
-    };
-    let recording = PerformanceController.getCurrentRecording();
-    let profile = recording.getProfile();
-
-    this.reset();
-    // TODO bug 1175662
-    // Share thread nodes between details view
-    this.threadNode = this._prepareThreadNode(profile, interval, options);
-    this.emit(EVENTS.OPTIMIZATIONS_RENDERED);
-  },
-
-  /**
-   * The main thread node used in this recording that contains
-   * all potential frame nodes to select.
-   */
-  set threadNode(threadNode) {
-    if (threadNode === this._threadNode) {
-      return;
-    }
-    this._threadNode = threadNode;
-    // Also clear out the current frame node as its no
-    // longer relevent
-    this.frameNode = null;
-    this._setAndRenderFramesList();
-  },
-  get threadNode() {
-    return this._threadNode;
-  },
-
-  /**
-   * frameNode is the frame node selected currently to inspect
-   * the optimization tiers over time and strategies.
-   */
-  set frameNode(frameNode) {
-    if (frameNode === this._frameNode) {
-      return;
-    }
-    this._frameNode = frameNode;
-
-    // If no frame selected, jump to the frame list view. If just selected
-    // a frame, jump to optimizations view.
-    // TODO test for this bug 1176056
-    this.selectTabByName(frameNode ? "optimizations" : "frames");
-    this._setAndRenderTierGraph();
-    this._setAndRenderOptimizationsList();
-  },
-
-  get frameNode() {
-    return this._frameNode;
-  },
-
-  /**
-   * Clears the frameNode so that tier and opts list
-   * views are cleared.
-   */
-  reset: function () {
-    this.threadNode = this.frameNode = null;
-  },
-
-  /**
-   * Called when the recording is stopped and prepares data to
-   * populate the graph.
-   */
-  _prepareThreadNode: function (profile, { startTime, endTime }, options) {
-    let thread = profile.threads[0];
-    let { contentOnly, invertTree, flattenRecursion } = options;
-    let threadNode = new ThreadNode(thread, { startTime, endTime, contentOnly, invertTree, flattenRecursion });
-    return threadNode;
-  },
-
-  /**
-   * Renders the tier graph.
-   */
-  _setAndRenderTierGraph: function () {
-    // TODO bug 1150299
-  },
-
-  /**
-   * Renders the frames list.
-   */
-  _setAndRenderFramesList: function () {
-    FramesListView.setCurrentThread(this.threadNode);
-    FramesListView.render();
-  },
-
-  /**
-   * Renders the optimizations list.
-   */
-  _setAndRenderOptimizationsList: function () {
-    OptimizationsListView.setCurrentFrame(this.frameNode);
-    OptimizationsListView.render();
-  },
-
-  /**
-   * Called when a frame is selected via the FramesListView
-   */
-  _onFramesListSelect: function (_, frameNode) {
-    this.frameNode = frameNode;
-  },
-
-  toString: () => "[object OptimizationsView]"
-});
-
-EventEmitter.decorate(OptimizationsView);
diff --git a/browser/devtools/performance/views/details.js b/browser/devtools/performance/views/details.js
index 1effefb..0ff70d0 100644
--- a/browser/devtools/performance/views/details.js
+++ b/browser/devtools/performance/views/details.js
@@ -32,21 +32,16 @@ let DetailsView = {
       features: ["withAllocations"]
     },
     "memory-flamegraph": {
       id: "memory-flamegraph-view",
       view: MemoryFlameGraphView,
       features: ["withAllocations"],
       prefs: ["enable-memory-flame"],
     },
-    "optimizations": {
-      id: "optimizations-view",
-      view: OptimizationsView,
-      features: ["withJITOptimizations"],
-    }
   },
 
   /**
    * Sets up the view with event binding, initializes subviews.
    */
   initialize: Task.async(function *() {
     this.el = $("#details-pane");
     this.toolbar = $("#performance-toolbar-controls-detail-views");
diff --git a/browser/devtools/performance/views/frames-list.js b/browser/devtools/performance/views/frames-list.js
deleted file mode 100644
index 38eeb74..0000000
--- a/browser/devtools/performance/views/frames-list.js
+++ /dev/null
@@ -1,113 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this file,
- * You can obtain one at http://mozilla.org/MPL/2.0/. */
-"use strict";
-
-const HTML_NS = "http://www.w3.org/1999/xhtml";
-const PERCENTAGE_UNITS = L10N.getStr("table.percentage");
-
-/**
- * View for rendering a list of all youngest-frames in a profiler recording.
- */
-
-let FramesListView = {
-
-  // Current `<li>` element selected.
-  _selectedItem: null,
-
-  /**
-   * Initialization function called when the tool starts up.
-   */
-  initialize: function ({ container }) {
-    this._onFrameListClick = this._onFrameListClick.bind(this);
-
-    this.container = container;
-    this.list = document.createElementNS(HTML_NS, "ul");
-    this.list.setAttribute("class", "frames-list");
-    this.list.addEventListener("click", this._onFrameListClick, false);
-
-    this.container.appendChild(this.list);
-  },
-
-  /**
-   * Destruction function called when the tool cleans up.
-   */
-  destroy: function () {
-    this.list.removeEventListener("click", this._onFrameListClick, false);
-    this.container.innerHTML = "";
-    this.container = this.list = null;
-  },
-
-  /**
-   * Sets the thread node used for subsequent rendering.
-   *
-   * @param {ThreadNode} threadNode
-   */
-  setCurrentThread: function (threadNode) {
-    this.threadNode = threadNode;
-  },
-
-  /**
-   * Renders a list of leaf frames with optimizations in
-   * order of hotness from the current ThreadNode.
-   */
-  render: function () {
-    this.list.innerHTML = "";
-
-    if (!this.threadNode) {
-      return;
-    }
-
-    let totalSamples = this.threadNode.samples;
-    let sortedFrames = this.threadNode.calls.sort((a, b) => a.youngestFrameSamples < b.youngestFrameSamples ? 1 : -1);
-    for (let frame of sortedFrames) {
-      if (!frame.hasOptimizations()) {
-        continue;
-      }
-      let info = frame.getInfo();
-      let el = document.createElementNS(HTML_NS, "li");
-      let percentage = frame.youngestFrameSamples / totalSamples * 100;
-      let percentageText = L10N.numberWithDecimals(percentage, 2) + PERCENTAGE_UNITS;
-      let label = `(${percentageText}) ${info.functionName}`;
-      el.textContent = label;
-      el.setAttribute("tooltip", label);
-      el.setAttribute("data-location", frame.location);
-      this.list.appendChild(el);
-    }
-  },
-
-  /**
-   * Fired when a frame in the list is clicked.
-   */
-  _onFrameListClick: function (e) {
-    // If no threadNode (no renders), abort;
-    // also only allow left click to trigger this event
-    if (!this.threadNode || e.button !== 0) {
-      return;
-    }
-
-    let target = e.target;
-    let location = target.getAttribute("data-location");
-    if (!location) {
-      return;
-    }
-
-    for (let frame of this.threadNode.calls) {
-      if (frame.location === location) {
-        // If found, set the selected class on element, remove it
-        // from previous element, and emit event "select"
-        if (this._selectedItem) {
-          this._selectedItem.classList.remove("selected");
-        }
-        this._selectedItem = target;
-        target.classList.add("selected");
-        this.emit("select", frame);
-        break;
-      }
-    }
-  },
-
-  toString: () => "[object FramesListView]"
-};
-
-EventEmitter.decorate(FramesListView);
diff --git a/browser/devtools/performance/views/optimizations-list.js b/browser/devtools/performance/views/optimizations-list.js
index b848a7d..fc3b384 100644
--- a/browser/devtools/performance/views/optimizations-list.js
+++ b/browser/devtools/performance/views/optimizations-list.js
@@ -355,12 +355,11 @@ let OptimizationsListView = {
   _isLinkableURL: function (url) {
     return url && url.indexOf &&
        (url.indexOf("http") === 0 ||
         url.indexOf("resource://") === 0 ||
         url.indexOf("file://") === 0);
   },
 
   toString: () => "[object OptimizationsListView]"
-
 };
 
 EventEmitter.decorate(OptimizationsListView);
diff --git a/browser/locales/en-US/chrome/browser/devtools/performance.properties b/browser/locales/en-US/chrome/browser/devtools/performance.properties
index 01e6c57..7ae5d53 100644
--- a/browser/locales/en-US/chrome/browser/devtools/performance.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/performance.properties
@@ -108,20 +108,20 @@ table.root=(root)
 # This string is displayed in the call tree for the idle blocks.
 table.idle=(idle)
 
 # LOCALIZATION NOTE (table.url.tooltiptext):
 # This string is displayed in the call tree as the tooltip text for the url
 # labels which, when clicked, jump to the debugger.
 table.url.tooltiptext=View source in Debugger
 
-# LOCALIZATION NOTE (table.view-optimizations.tooltiptext):
+# LOCALIZATION NOTE (table.view-optimizations.tooltiptext2):
 # This string is displayed in the icon displayed next to frames that
 # have optimization data
-table.view-optimizations.tooltiptext=View optimizations in JIT View
+table.view-optimizations.tooltiptext2=Frame contains JIT optimization data
 
 # LOCALIZATION NOTE (recordingsList.importDialogTitle):
 # This string is displayed as a title for importing a recoring from disk.
 recordingsList.importDialogTitle=Import recording…
 
 # LOCALIZATION NOTE (recordingsList.saveDialogTitle):
 # This string is displayed as a title for saving a recording to disk.
 recordingsList.saveDialogTitle=Save recording…
@@ -160,9 +160,9 @@ timeline.tick=%S ms
 timeline.records=RECORDS
 
 # LOCALIZATION NOTE (profiler.bufferFull):
 # This string is displayed when recording, indicating how much of the
 # buffer is currently be used.
 # %S is the percentage of the buffer used -- there are two "%"s after to escape
 # the % that is actually displayed.
 # Example: "Buffer 54% full"
-profiler.bufferFull=Buffer %S%% full
\ No newline at end of file
+profiler.bufferFull=Buffer %S%% full
diff --git a/browser/themes/shared/devtools/performance.css b/browser/themes/shared/devtools/performance.css
index 7a831e0..a43c3e3 100644
--- a/browser/themes/shared/devtools/performance.css
+++ b/browser/themes/shared/devtools/performance.css
@@ -680,19 +680,16 @@ description.opt-icon::before {
   margin: 1px 4px 0px 0px;
 }
 .theme-light .opt-icon::before {
   background-image: url(chrome://browser/skin/devtools/webconsole.svg#light-icons);
 }
 .opt-icon[severity=warning]::before {
   background-position: -24px -24px;
 }
-.opt-icon[type=linkable]::before {
-  cursor: pointer;
-}
 
 ul.frames-list {
   list-style-type: none;
   padding: 0px;
   margin: 0px;
 }
 
 ul.frames-list li {
-- 
2.2.1

